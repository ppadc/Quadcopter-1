
Code_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800ca70  0800ca70  0001ca70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0d8  0800d0d8  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0d8  0800d0d8  0001d0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0e0  0800d0e0  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0e0  0800d0e0  0001d0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0e4  0800d0e4  0001d0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800d0e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a4  2**0
                  CONTENTS
 10 .bss          00000450  200001a8  200001a8  000201a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200005f8  200005f8  000201a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f6c  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030f5  00000000  00000000  00037140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0003a238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a0  00000000  00000000  0003b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e57  00000000  00000000  0003c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ca8  00000000  00000000  0006071f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1cea  00000000  00000000  0007a3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c0b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e80  00000000  00000000  0014c104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a8 	.word	0x200001a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca54 	.word	0x0800ca54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ac 	.word	0x200001ac
 80001cc:	0800ca54 	.word	0x0800ca54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	4b45      	ldr	r3, [pc, #276]	; (800107c <MX_GPIO_Init+0x130>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a44      	ldr	r2, [pc, #272]	; (800107c <MX_GPIO_Init+0x130>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b42      	ldr	r3, [pc, #264]	; (800107c <MX_GPIO_Init+0x130>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	4b3e      	ldr	r3, [pc, #248]	; (800107c <MX_GPIO_Init+0x130>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a3d      	ldr	r2, [pc, #244]	; (800107c <MX_GPIO_Init+0x130>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <MX_GPIO_Init+0x130>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <MX_GPIO_Init+0x130>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a36      	ldr	r2, [pc, #216]	; (800107c <MX_GPIO_Init+0x130>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b34      	ldr	r3, [pc, #208]	; (800107c <MX_GPIO_Init+0x130>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <MX_GPIO_Init+0x130>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	; (800107c <MX_GPIO_Init+0x130>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <MX_GPIO_Init+0x130>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <MX_GPIO_Init+0x130>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a28      	ldr	r2, [pc, #160]	; (800107c <MX_GPIO_Init+0x130>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_GPIO_Init+0x130>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <MX_GPIO_Init+0x130>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <MX_GPIO_Init+0x130>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_GPIO_Init+0x130>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2103      	movs	r1, #3
 800100e:	481c      	ldr	r0, [pc, #112]	; (8001080 <MX_GPIO_Init+0x134>)
 8001010:	f001 fc70 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800101a:	481a      	ldr	r0, [pc, #104]	; (8001084 <MX_GPIO_Init+0x138>)
 800101c:	f001 fc6a 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4815      	ldr	r0, [pc, #84]	; (8001088 <MX_GPIO_Init+0x13c>)
 8001034:	f001 fac2 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001038:	2303      	movs	r3, #3
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <MX_GPIO_Init+0x134>)
 8001050:	f001 fab4 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001054:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_GPIO_Init+0x138>)
 800106e:	f001 faa5 	bl	80025bc <HAL_GPIO_Init>

}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	; 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40020400 	.word	0x40020400
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40020000 	.word	0x40020000

0800108c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_I2C1_Init+0x50>)
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_I2C1_Init+0x54>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_I2C1_Init+0x50>)
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x58>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_I2C1_Init+0x50>)
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_I2C1_Init+0x50>)
 80010ca:	f001 fc47 	bl	800295c <HAL_I2C_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d4:	f000 fd7c 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200001c4 	.word	0x200001c4
 80010e0:	40005400 	.word	0x40005400
 80010e4:	00061a80 	.word	0x00061a80

080010e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_I2C_MspInit+0x84>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d12c      	bne.n	8001164 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001138:	2304      	movs	r3, #4
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <HAL_I2C_MspInit+0x8c>)
 8001144:	f001 fa3a 	bl	80025bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001152:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40005400 	.word	0x40005400
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400

08001178 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800117c:	b09b      	sub	sp, #108	; 0x6c
 800117e:	af16      	add	r7, sp, #88	; 0x58
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001180:	f001 f874 	bl	800226c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001184:	f000 f8ec 	bl	8001360 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001188:	f7ff fee0 	bl	8000f4c <MX_GPIO_Init>
    MX_I2C1_Init();
 800118c:	f7ff ff7e 	bl	800108c <MX_I2C1_Init>
    MX_SPI1_Init();
 8001190:	f000 fd24 	bl	8001bdc <MX_SPI1_Init>
    MX_TIM1_Init();
 8001194:	f000 fe44 	bl	8001e20 <MX_TIM1_Init>
    MX_TIM2_Init();
 8001198:	f000 ff08 	bl	8001fac <MX_TIM2_Init>
    MX_USART6_UART_Init();
 800119c:	f000 ffca 	bl	8002134 <MX_USART6_UART_Init>
     * @param TxpipeAddrs The address of the transmitting pipe.
     *
     * @returns None
     */
    // Begin setup Rf24
    NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi1);
 80011a0:	4e61      	ldr	r6, [pc, #388]	; (8001328 <main+0x1b0>)
 80011a2:	4668      	mov	r0, sp
 80011a4:	1d31      	adds	r1, r6, #4
 80011a6:	2354      	movs	r3, #84	; 0x54
 80011a8:	461a      	mov	r2, r3
 80011aa:	f009 fa0d 	bl	800a5c8 <memcpy>
 80011ae:	6833      	ldr	r3, [r6, #0]
 80011b0:	2202      	movs	r2, #2
 80011b2:	2101      	movs	r1, #1
 80011b4:	485d      	ldr	r0, [pc, #372]	; (800132c <main+0x1b4>)
 80011b6:	f008 f9dd 	bl	8009574 <NRF24_begin>
    NRF24_stopListening();
 80011ba:	f008 fabb 	bl	8009734 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 80011be:	4b5c      	ldr	r3, [pc, #368]	; (8001330 <main+0x1b8>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f008 fb34 	bl	8009834 <NRF24_openWritingPipe>
    NRF24_setAutoAck(true);
 80011cc:	2001      	movs	r0, #1
 80011ce:	f008 fc29 	bl	8009a24 <NRF24_setAutoAck>
    NRF24_enableDynamicPayloads();
 80011d2:	f008 fbdd 	bl	8009990 <NRF24_enableDynamicPayloads>
    NRF24_enableAckPayload();
 80011d6:	f008 fbad 	bl	8009934 <NRF24_enableAckPayload>
     * @param hi2c1 The I2C handle for communication with the sensors.
     *
     * @returns None
     */
    // Begin setup GY86
    while (MPU6050_Init(&hi2c1) == 1);
 80011da:	bf00      	nop
 80011dc:	4855      	ldr	r0, [pc, #340]	; (8001334 <main+0x1bc>)
 80011de:	f005 fa23 	bl	8006628 <MPU6050_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d0f9      	beq.n	80011dc <main+0x64>
    MPU6050_Bypass(&hi2c1);
 80011e8:	4852      	ldr	r0, [pc, #328]	; (8001334 <main+0x1bc>)
 80011ea:	f005 fa92 	bl	8006712 <MPU6050_Bypass>
    HMC5883L_Init(&hi2c1);
 80011ee:	4851      	ldr	r0, [pc, #324]	; (8001334 <main+0x1bc>)
 80011f0:	f005 fc40 	bl	8006a74 <HMC5883L_Init>
    MPU6050_Master(&hi2c1);
 80011f4:	484f      	ldr	r0, [pc, #316]	; (8001334 <main+0x1bc>)
 80011f6:	f005 fab2 	bl	800675e <MPU6050_Master>
    MPU6050_Addslave(&hi2c1);
 80011fa:	484e      	ldr	r0, [pc, #312]	; (8001334 <main+0x1bc>)
 80011fc:	f005 fad5 	bl	80067aa <MPU6050_Addslave>
    MS5611_init(&hi2c1, &MS5611);
 8001200:	494d      	ldr	r1, [pc, #308]	; (8001338 <main+0x1c0>)
 8001202:	484c      	ldr	r0, [pc, #304]	; (8001334 <main+0x1bc>)
 8001204:	f005 fcf2 	bl	8006bec <MS5611_init>
     * @param htim1 The timer used for the ESC.
     *
     * @returns None
     */
    //	 Begin setup ESC
    setupESC(&htim1);
 8001208:	484c      	ldr	r0, [pc, #304]	; (800133c <main+0x1c4>)
 800120a:	f005 f9b7 	bl	800657c <setupESC>
     * @param htim2 A pointer to the TIM2 handle.
     *
     * @returns None
     */
    //	 RUN
    HAL_TIM_Base_Start_IT(&htim2);
 800120e:	484c      	ldr	r0, [pc, #304]	; (8001340 <main+0x1c8>)
 8001210:	f003 fdb4 	bl	8004d7c <HAL_TIM_Base_Start_IT>
         * The data is sent every 20ms and the enable flag is set to 1.
         * If the enable flag is set to 0, the data is not sent.
         * If there is a response from the receiver, the enable flag is set to 1 if the response is '1' and 0 if the response is '0'.
         * If there is no response from the receiver for 1 second, the enable flag is set to 0.
         */
        if (HAL_GetTick() - value >= 20)
 8001214:	f001 f890 	bl	8002338 <HAL_GetTick>
 8001218:	4603      	mov	r3, r0
 800121a:	2200      	movs	r2, #0
 800121c:	469a      	mov	sl, r3
 800121e:	4693      	mov	fp, r2
 8001220:	4b48      	ldr	r3, [pc, #288]	; (8001344 <main+0x1cc>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	ebba 0402 	subs.w	r4, sl, r2
 800122a:	eb6b 0503 	sbc.w	r5, fp, r3
 800122e:	2c14      	cmp	r4, #20
 8001230:	f175 0300 	sbcs.w	r3, r5, #0
 8001234:	d35e      	bcc.n	80012f4 <main+0x17c>
        {
            //Pack Data_Tx
            data_Tx.a = Madgwick.roll;
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <main+0x1d0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f984 	bl	8000548 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4941      	ldr	r1, [pc, #260]	; (800134c <main+0x1d4>)
 8001246:	e9c1 2300 	strd	r2, r3, [r1]
            data_Tx.b = Madgwick.pitch;
 800124a:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <main+0x1d0>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f97a 	bl	8000548 <__aeabi_f2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	493c      	ldr	r1, [pc, #240]	; (800134c <main+0x1d4>)
 800125a:	e9c1 2302 	strd	r2, r3, [r1, #8]
            data_Tx.c = Madgwick.yaw;
 800125e:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <main+0x1d0>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f970 	bl	8000548 <__aeabi_f2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4937      	ldr	r1, [pc, #220]	; (800134c <main+0x1d4>)
 800126e:	e9c1 2304 	strd	r2, r3, [r1, #16]
            data_Tx.d = enable;
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <main+0x1d8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f954 	bl	8000524 <__aeabi_i2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4932      	ldr	r1, [pc, #200]	; (800134c <main+0x1d4>)
 8001282:	e9c1 2306 	strd	r2, r3, [r1, #24]
            if (NRF24_write(&data_Tx, 32))
 8001286:	2120      	movs	r1, #32
 8001288:	4830      	ldr	r0, [pc, #192]	; (800134c <main+0x1d4>)
 800128a:	f008 fa5f 	bl	800974c <NRF24_write>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d02f      	beq.n	80012f4 <main+0x17c>
            {
            	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8001294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001298:	482e      	ldr	r0, [pc, #184]	; (8001354 <main+0x1dc>)
 800129a:	f001 fb44 	bl	8002926 <HAL_GPIO_TogglePin>
                // Receive
                NRF24_read(&data_Rx, 32);
 800129e:	2120      	movs	r1, #32
 80012a0:	482d      	ldr	r0, [pc, #180]	; (8001358 <main+0x1e0>)
 80012a2:	f008 faa7 	bl	80097f4 <NRF24_read>
                Setpoint_xyz.x = data_Rx.a;
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <main+0x1e0>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	492b      	ldr	r1, [pc, #172]	; (800135c <main+0x1e4>)
 80012ae:	e9c1 2300 	strd	r2, r3, [r1]
                Setpoint_xyz.y = data_Rx.b;
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <main+0x1e0>)
 80012b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012b8:	4928      	ldr	r1, [pc, #160]	; (800135c <main+0x1e4>)
 80012ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
               	Setpoint_xyz.z = data_Rx.c;
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <main+0x1e0>)
 80012c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012c4:	4925      	ldr	r1, [pc, #148]	; (800135c <main+0x1e4>)
 80012c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
				enable		   = data_Rx.d;
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <main+0x1e0>)
 80012cc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc40 	bl	8000b58 <__aeabi_d2iz>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <main+0x1d8>)
 80012dc:	6013      	str	r3, [r2, #0]
				value = HAL_GetTick();
 80012de:	f001 f82b 	bl	8002338 <HAL_GetTick>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2200      	movs	r2, #0
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <main+0x1cc>)
 80012ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012f0:	e9c3 1200 	strd	r1, r2, [r3]
            }
        }
        if (HAL_GetTick() - value > 1000)
 80012f4:	f001 f820 	bl	8002338 <HAL_GetTick>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2200      	movs	r2, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	60fa      	str	r2, [r7, #12]
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <main+0x1cc>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	68b9      	ldr	r1, [r7, #8]
 8001308:	ebb1 0802 	subs.w	r8, r1, r2
 800130c:	68f9      	ldr	r1, [r7, #12]
 800130e:	eb61 0903 	sbc.w	r9, r1, r3
 8001312:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8001316:	4598      	cmp	r8, r3
 8001318:	f179 0300 	sbcs.w	r3, r9, #0
 800131c:	f4ff af7a 	bcc.w	8001214 <main+0x9c>
            enable = 0;
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <main+0x1d8>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
        if (HAL_GetTick() - value >= 20)
 8001326:	e775      	b.n	8001214 <main+0x9c>
 8001328:	200003f0 	.word	0x200003f0
 800132c:	40020400 	.word	0x40020400
 8001330:	20000060 	.word	0x20000060
 8001334:	200001c4 	.word	0x200001c4
 8001338:	200002a8 	.word	0x200002a8
 800133c:	2000044c 	.word	0x2000044c
 8001340:	20000494 	.word	0x20000494
 8001344:	20000378 	.word	0x20000378
 8001348:	200002fc 	.word	0x200002fc
 800134c:	20000338 	.word	0x20000338
 8001350:	20000218 	.word	0x20000218
 8001354:	40020c00 	.word	0x40020c00
 8001358:	20000358 	.word	0x20000358
 800135c:	20000320 	.word	0x20000320

08001360 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	; 0x50
 8001364:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	2230      	movs	r2, #48	; 0x30
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f009 f938 	bl	800a5e4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <SystemClock_Config+0xc8>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	4a26      	ldr	r2, [pc, #152]	; (8001428 <SystemClock_Config+0xc8>)
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001392:	6413      	str	r3, [r2, #64]	; 0x40
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <SystemClock_Config+0xc8>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <SystemClock_Config+0xcc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a20      	ldr	r2, [pc, #128]	; (800142c <SystemClock_Config+0xcc>)
 80013aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <SystemClock_Config+0xcc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013bc:	2302      	movs	r3, #2
 80013be:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c0:	2301      	movs	r3, #1
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c4:	2310      	movs	r3, #16
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2302      	movs	r3, #2
 80013ca:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 80013d0:	2308      	movs	r3, #8
 80013d2:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 72;
 80013d4:	2348      	movs	r3, #72	; 0x48
 80013d6:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d8:	2302      	movs	r3, #2
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80013dc:	2304      	movs	r3, #4
 80013de:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0320 	add.w	r3, r7, #32
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fa79 	bl	80038dc <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x94>
    {
        Error_Handler();
 80013f0:	f000 fbee 	bl	8001bd0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013f4:	230f      	movs	r3, #15
 80013f6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f8:	2302      	movs	r3, #2
 80013fa:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2102      	movs	r1, #2
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fcdb 	bl	8003dcc <HAL_RCC_ClockConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0xc0>
    {
        Error_Handler();
 800141c:	f000 fbd8 	bl	8001bd0 <Error_Handler>
    }
}
 8001420:	bf00      	nop
 8001422:	3750      	adds	r7, #80	; 0x50
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	40007000 	.word	0x40007000

08001430 <HAL_TIM_PeriodElapsedCallback>:
    sprintf(fracStr, "%d", (int16_t)(fracPart * 10000)); // gọi hàm chuyển phần thập phân sang string với độ chính xác là 6 chữ số sau dấu phẩy
    sprintf(target, "%s.%s", intStr, fracStr);           // nối hai chuỗi lại với nhau và thêm dấu chấm vào giữa
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	b091      	sub	sp, #68	; 0x44
 8001434:	af0e      	add	r7, sp, #56	; 0x38
 8001436:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim2.Instance)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4bb6      	ldr	r3, [pc, #728]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 83ae 	bne.w	8001ba2 <HAL_TIM_PeriodElapsedCallback+0x772>
    {
        /**
         * Reads data from the MPU6050 and MS5611 sensors, applies low-pass filtering and calculates the orientation and altitude.
         */
        // Read Data
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144a:	48b4      	ldr	r0, [pc, #720]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800144c:	f001 fa6b 	bl	8002926 <HAL_GPIO_TogglePin>
        MPU6050_Read_All(&hi2c1, &MPU6050);
 8001450:	49b3      	ldr	r1, [pc, #716]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001452:	48b4      	ldr	r0, [pc, #720]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001454:	f005 f9f0 	bl	8006838 <MPU6050_Read_All>
        MS5611_calculate(&hi2c1, &MS5611);
 8001458:	49b3      	ldr	r1, [pc, #716]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800145a:	48b2      	ldr	r0, [pc, #712]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800145c:	f005 fc38 	bl	8006cd0 <MS5611_calculate>
        // Filter
        Lowpass4MPU(MPU6050, &MPU6050_LP);
 8001460:	4eaf      	ldr	r6, [pc, #700]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001462:	4bb2      	ldr	r3, [pc, #712]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001464:	930d      	str	r3, [sp, #52]	; 0x34
 8001466:	466d      	mov	r5, sp
 8001468:	f106 0410 	add.w	r4, r6, #16
 800146c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	602b      	str	r3, [r5, #0]
 800147c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001480:	f006 f92c 	bl	80076dc <Lowpass4MPU>
        Lowpass(MS5611.P, &LP_height, 0.5);
 8001484:	4ba8      	ldr	r3, [pc, #672]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001490:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001494:	48a6      	ldr	r0, [pc, #664]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001496:	eeb0 0a67 	vmov.f32	s0, s15
 800149a:	f006 f8d5 	bl	8007648 <Lowpass>
        MPU2Angle(MPU6050_LP, &angle);
 800149e:	4ea3      	ldr	r6, [pc, #652]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80014a0:	4ba4      	ldr	r3, [pc, #656]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80014a2:	930d      	str	r3, [sp, #52]	; 0x34
 80014a4:	466d      	mov	r5, sp
 80014a6:	f106 0410 	add.w	r4, r6, #16
 80014aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	602b      	str	r3, [r5, #0]
 80014ba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014be:	f005 ffc7 	bl	8007450 <MPU2Angle>
        Madgwick_update(&MPU6050_LP, &Q_est);
 80014c2:	499d      	ldr	r1, [pc, #628]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80014c4:	4899      	ldr	r0, [pc, #612]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80014c6:	f006 fbc9 	bl	8007c5c <Madgwick_update>
        // Caculator
        Quat2Angle(Q_est, &Madgwick);
 80014ca:	4b9b      	ldr	r3, [pc, #620]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80014cc:	ed93 6a00 	vldr	s12, [r3]
 80014d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80014d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80014d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80014dc:	4897      	ldr	r0, [pc, #604]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80014de:	eeb0 0a46 	vmov.f32	s0, s12
 80014e2:	eef0 0a66 	vmov.f32	s1, s13
 80014e6:	eeb0 1a47 	vmov.f32	s2, s14
 80014ea:	eef0 1a67 	vmov.f32	s3, s15
 80014ee:	f007 fd63 	bl	8008fb8 <Quat2Angle>
        OffsetAngle(&Madgwick, Offset);
 80014f2:	4b93      	ldr	r3, [pc, #588]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80014f4:	edd3 6a00 	vldr	s13, [r3]
 80014f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80014fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001500:	eeb0 0a66 	vmov.f32	s0, s13
 8001504:	eef0 0a47 	vmov.f32	s1, s14
 8001508:	eeb0 1a67 	vmov.f32	s2, s15
 800150c:	488b      	ldr	r0, [pc, #556]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800150e:	f006 f817 	bl	8007540 <OffsetAngle>
        height = getAltitude(LP_height.out, 101325);
 8001512:	4b87      	ldr	r3, [pc, #540]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f816 	bl	8000548 <__aeabi_f2d>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8001700 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 8001524:	ec43 2b10 	vmov	d0, r2, r3
 8001528:	f005 ff52 	bl	80073d0 <getAltitude>
 800152c:	eeb0 7a40 	vmov.f32	s14, s0
 8001530:	eef0 7a60 	vmov.f32	s15, s1
 8001534:	4b83      	ldr	r3, [pc, #524]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001536:	ed83 7b00 	vstr	d7, [r3]
        /**
         * Computes the control signals for a quadcopter based on the difference between the setpoint and the current orientation.
         * The control signals are then used to adjust the duty cycle of the motors to achieve the desired orientation.
         */
        // r()
        x[0] = Setpoint.roll - Madgwick.roll;
 800153a:	4b83      	ldr	r3, [pc, #524]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800153c:	ed93 7a00 	vldr	s14, [r3]
 8001540:	4b7e      	ldr	r3, [pc, #504]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154a:	ee17 0a90 	vmov	r0, s15
 800154e:	f7fe fffb 	bl	8000548 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	497d      	ldr	r1, [pc, #500]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001558:	e9c1 2300 	strd	r2, r3, [r1]
        x[1] = Setpoint.pitch - Madgwick.pitch;
 800155c:	4b7a      	ldr	r3, [pc, #488]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800155e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001562:	4b76      	ldr	r3, [pc, #472]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001564:	edd3 7a01 	vldr	s15, [r3, #4]
 8001568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156c:	ee17 0a90 	vmov	r0, s15
 8001570:	f7fe ffea 	bl	8000548 <__aeabi_f2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4974      	ldr	r1, [pc, #464]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800157a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        x[2] = Setpoint.yaw - Madgwick.yaw;
 800157e:	4b72      	ldr	r3, [pc, #456]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001580:	ed93 7a02 	vldr	s14, [r3, #8]
 8001584:	4b6d      	ldr	r3, [pc, #436]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001586:	edd3 7a02 	vldr	s15, [r3, #8]
 800158a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158e:	ee17 0a90 	vmov	r0, s15
 8001592:	f7fe ffd9 	bl	8000548 <__aeabi_f2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	496c      	ldr	r1, [pc, #432]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800159c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        x[3] = Setpoint_dot.roll - MPU6050.Gx;
 80015a0:	4b6b      	ldr	r3, [pc, #428]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80015a2:	ed93 7a00 	vldr	s14, [r3]
 80015a6:	4b5e      	ldr	r3, [pc, #376]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80015a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80015ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b0:	ee17 0a90 	vmov	r0, s15
 80015b4:	f7fe ffc8 	bl	8000548 <__aeabi_f2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4963      	ldr	r1, [pc, #396]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80015be:	e9c1 2306 	strd	r2, r3, [r1, #24]
        x[4] = Setpoint_dot.pitch - MPU6050.Gy;
 80015c2:	4b63      	ldr	r3, [pc, #396]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80015c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80015c8:	4b55      	ldr	r3, [pc, #340]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80015ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80015ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d2:	ee17 0a90 	vmov	r0, s15
 80015d6:	f7fe ffb7 	bl	8000548 <__aeabi_f2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	495b      	ldr	r1, [pc, #364]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80015e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
        x[5] = Setpoint_dot.yaw - MPU6050.Gz;
 80015e4:	4b5a      	ldr	r3, [pc, #360]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80015e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80015ea:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80015ec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80015f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f4:	ee17 0a90 	vmov	r0, s15
 80015f8:	f7fe ffa6 	bl	8000548 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4952      	ldr	r1, [pc, #328]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001602:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        //
        //		x[0] = 0;
        //		x[1] = 0;
        x[2] = 0;
 8001606:	4951      	ldr	r1, [pc, #324]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9c1 2304 	strd	r2, r3, [r1, #16]
        //		x[3] = 0;
        //		x[4] = 0;
        x[5] = 0;
 8001614:	494d      	ldr	r1, [pc, #308]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

        // LQR
        compute_control(x, K, u);
 8001622:	4a4c      	ldr	r2, [pc, #304]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001624:	494c      	ldr	r1, [pc, #304]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001626:	4849      	ldr	r0, [pc, #292]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001628:	f005 ffbe 	bl	80075a8 <compute_control>
        // Limit
        if (u[0] > 8.7969)
 800162c:	4b49      	ldr	r3, [pc, #292]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800162e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001632:	a335      	add	r3, pc, #212	; (adr r3, 8001708 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7ff fa6e 	bl	8000b18 <__aeabi_dcmpgt>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d005      	beq.n	800164e <HAL_TIM_PeriodElapsedCallback+0x21e>
            u[0] = 8.7969;
 8001642:	4944      	ldr	r1, [pc, #272]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001644:	a330      	add	r3, pc, #192	; (adr r3, 8001708 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	e9c1 2300 	strd	r2, r3, [r1]
        if (u[0] < -16.677)
 800164e:	4b41      	ldr	r3, [pc, #260]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001650:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001654:	a32e      	add	r3, pc, #184	; (adr r3, 8001710 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7ff fa3f 	bl	8000adc <__aeabi_dcmplt>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_TIM_PeriodElapsedCallback+0x240>
            u[0] = -16.677;
 8001664:	493b      	ldr	r1, [pc, #236]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001666:	a32a      	add	r3, pc, #168	; (adr r3, 8001710 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	e9c1 2300 	strd	r2, r3, [r1]
        if (u[1] > 11.5)
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001672:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800167c:	f7ff fa4c 	bl	8000b18 <__aeabi_dcmpgt>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x262>
            u[1] = 11.5;
 8001686:	4933      	ldr	r1, [pc, #204]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b33      	ldr	r3, [pc, #204]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800168e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (u[1] < -11.5)
 8001692:	4b30      	ldr	r3, [pc, #192]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001694:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	4b30      	ldr	r3, [pc, #192]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800169e:	f7ff fa1d 	bl	8000adc <__aeabi_dcmplt>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_TIM_PeriodElapsedCallback+0x284>
            u[1] = -11.5;
 80016a8:	492a      	ldr	r1, [pc, #168]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (u[2] > 11.5)
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016b6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016c0:	f7ff fa2a 	bl	8000b18 <__aeabi_dcmpgt>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_TIM_PeriodElapsedCallback+0x2a6>
            u[2] = 11.5;
 80016ca:	4922      	ldr	r1, [pc, #136]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
        if (u[2] < -11.5)
 80016d6:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016d8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016e2:	f7ff f9fb 	bl	8000adc <__aeabi_dcmplt>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d03b      	beq.n	8001764 <HAL_TIM_PeriodElapsedCallback+0x334>
            u[2] = -11.5;
 80016ec:	4919      	ldr	r1, [pc, #100]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80016f8:	e034      	b.n	8001764 <HAL_TIM_PeriodElapsedCallback+0x334>
 80016fa:	bf00      	nop
 80016fc:	f3af 8000 	nop.w
 8001700:	00000000 	.word	0x00000000
 8001704:	40f8bcd0 	.word	0x40f8bcd0
 8001708:	46dc5d64 	.word	0x46dc5d64
 800170c:	40219803 	.word	0x40219803
 8001710:	df3b645a 	.word	0xdf3b645a
 8001714:	c030ad4f 	.word	0xc030ad4f
 8001718:	20000494 	.word	0x20000494
 800171c:	40020c00 	.word	0x40020c00
 8001720:	2000021c 	.word	0x2000021c
 8001724:	200001c4 	.word	0x200001c4
 8001728:	200002a8 	.word	0x200002a8
 800172c:	20000260 	.word	0x20000260
 8001730:	200002e0 	.word	0x200002e0
 8001734:	200002f0 	.word	0x200002f0
 8001738:	20000000 	.word	0x20000000
 800173c:	200002fc 	.word	0x200002fc
 8001740:	20000050 	.word	0x20000050
 8001744:	200002e8 	.word	0x200002e8
 8001748:	20000308 	.word	0x20000308
 800174c:	20000380 	.word	0x20000380
 8001750:	20000314 	.word	0x20000314
 8001754:	200003b0 	.word	0x200003b0
 8001758:	20000068 	.word	0x20000068
 800175c:	40270000 	.word	0x40270000
 8001760:	c0270000 	.word	0xc0270000
        if (u[3] > 11.5)
 8001764:	4bba      	ldr	r3, [pc, #744]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001766:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4bb9      	ldr	r3, [pc, #740]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001770:	f7ff f9d2 	bl	8000b18 <__aeabi_dcmpgt>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x356>
            u[3] = 11.5;
 800177a:	49b5      	ldr	r1, [pc, #724]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4bb4      	ldr	r3, [pc, #720]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001782:	e9c1 2306 	strd	r2, r3, [r1, #24]
        if (u[3] < -11.5)
 8001786:	4bb2      	ldr	r3, [pc, #712]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001788:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	4bb1      	ldr	r3, [pc, #708]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001792:	f7ff f9a3 	bl	8000adc <__aeabi_dcmplt>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_TIM_PeriodElapsedCallback+0x378>
            u[3] = -11.5;
 800179c:	49ac      	ldr	r1, [pc, #688]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	4bad      	ldr	r3, [pc, #692]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80017a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        u[1] = u[1] * 0.3;
 80017a8:	4ba9      	ldr	r3, [pc, #676]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80017aa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80017ae:	a3a4      	add	r3, pc, #656	; (adr r3, 8001a40 <HAL_TIM_PeriodElapsedCallback+0x610>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f7fe ff20 	bl	80005f8 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	49a4      	ldr	r1, [pc, #656]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80017be:	e9c1 2302 	strd	r2, r3, [r1, #8]
        u[2] = u[2] * 0.3;
 80017c2:	4ba3      	ldr	r3, [pc, #652]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80017c4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80017c8:	a39d      	add	r3, pc, #628	; (adr r3, 8001a40 <HAL_TIM_PeriodElapsedCallback+0x610>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ff13 	bl	80005f8 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	499e      	ldr	r1, [pc, #632]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80017d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
        u[3] = u[3] * 0.1;
 80017dc:	4b9c      	ldr	r3, [pc, #624]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80017de:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017e2:	a399      	add	r3, pc, #612	; (adr r3, 8001a48 <HAL_TIM_PeriodElapsedCallback+0x618>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe ff06 	bl	80005f8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4997      	ldr	r1, [pc, #604]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80017f2:	e9c1 2306 	strd	r2, r3, [r1, #24]

        // U -> T
        T1 = T_base + u[0] * 0.25 + u[3] * 0.25 - u[2] * 0.5; // T = Khối lượng/4 + độ cao + yaw - pitch;
 80017f6:	4b96      	ldr	r3, [pc, #600]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80017f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4b96      	ldr	r3, [pc, #600]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001802:	f7fe fef9 	bl	80005f8 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	4b94      	ldr	r3, [pc, #592]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fd3a 	bl	800028c <__adddf3>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4614      	mov	r4, r2
 800181e:	461d      	mov	r5, r3
 8001820:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001822:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800182c:	f7fe fee4 	bl	80005f8 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fd28 	bl	800028c <__adddf3>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4614      	mov	r4, r2
 8001842:	461d      	mov	r5, r3
 8001844:	4b82      	ldr	r3, [pc, #520]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001846:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	4b85      	ldr	r3, [pc, #532]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001850:	f7fe fed2 	bl	80005f8 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4620      	mov	r0, r4
 800185a:	4629      	mov	r1, r5
 800185c:	f7fe fd14 	bl	8000288 <__aeabi_dsub>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4980      	ldr	r1, [pc, #512]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001866:	e9c1 2300 	strd	r2, r3, [r1]
        T2 = T_base + u[0] * 0.25 - u[3] * 0.25 + u[1] * 0.5; // T = Khối lượng/4 + độ cao - yaw + sin;
 800186a:	4b79      	ldr	r3, [pc, #484]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800186c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b79      	ldr	r3, [pc, #484]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001876:	f7fe febf 	bl	80005f8 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	4b77      	ldr	r3, [pc, #476]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe fd00 	bl	800028c <__adddf3>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4614      	mov	r4, r2
 8001892:	461d      	mov	r5, r3
 8001894:	4b6e      	ldr	r3, [pc, #440]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001896:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80018a0:	f7fe feaa 	bl	80005f8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe fcec 	bl	8000288 <__aeabi_dsub>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	461d      	mov	r5, r3
 80018b8:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80018ba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x634>)
 80018c4:	f7fe fe98 	bl	80005f8 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4620      	mov	r0, r4
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7fe fcdc 	bl	800028c <__adddf3>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4964      	ldr	r1, [pc, #400]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 80018da:	e9c1 2300 	strd	r2, r3, [r1]
        T3 = T_base + u[0] * 0.25 - u[3] * 0.25 + u[2] * 0.5; // T = Khối lượng/4 + độ cao - yaw + pitch;
 80018de:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80018e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80018ea:	f7fe fe85 	bl	80005f8 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f7fe fcc6 	bl	800028c <__adddf3>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
 8001908:	4b51      	ldr	r3, [pc, #324]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800190a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001914:	f7fe fe70 	bl	80005f8 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe fcb2 	bl	8000288 <__aeabi_dsub>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4614      	mov	r4, r2
 800192a:	461d      	mov	r5, r3
 800192c:	4b48      	ldr	r3, [pc, #288]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800192e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001938:	f7fe fe5e 	bl	80005f8 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fca2 	bl	800028c <__adddf3>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4948      	ldr	r1, [pc, #288]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800194e:	e9c1 2300 	strd	r2, r3, [r1]
        T4 = T_base + u[0] * 0.25 - u[3] * 0.25 - u[1] * 0.5; // T = Khối lượng/4 + độ cao - yaw - sin;
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001954:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800195e:	f7fe fe4b 	bl	80005f8 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe fc8c 	bl	800028c <__adddf3>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4614      	mov	r4, r2
 800197a:	461d      	mov	r5, r3
 800197c:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800197e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001988:	f7fe fe36 	bl	80005f8 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4620      	mov	r0, r4
 8001992:	4629      	mov	r1, r5
 8001994:	f7fe fc78 	bl	8000288 <__aeabi_dsub>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4614      	mov	r4, r2
 800199e:	461d      	mov	r5, r3
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80019a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x634>)
 80019ac:	f7fe fe24 	bl	80005f8 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe fc66 	bl	8000288 <__aeabi_dsub>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	492c      	ldr	r1, [pc, #176]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x644>)
 80019c2:	e9c1 2300 	strd	r2, r3, [r1]

        // T -> Duty
        M1.Duty = T1 / 11.5 * 1000;
 80019c6:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80019c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 80019d2:	f7fe ff3b 	bl	800084c <__aeabi_ddiv>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x648>)
 80019e4:	f7fe fe08 	bl	80005f8 <__aeabi_dmul>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7ff f8da 	bl	8000ba8 <__aeabi_d2f>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80019f8:	6013      	str	r3, [r2, #0]
        M2.Duty = T2 / 11.5 * 1000;
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 80019fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001a06:	f7fe ff21 	bl	800084c <__aeabi_ddiv>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001a18:	f7fe fdee 	bl	80005f8 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff f8c0 	bl	8000ba8 <__aeabi_d2f>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8001a2c:	6013      	str	r3, [r2, #0]
        M3.Duty = T3 / 11.5 * 1000;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8001a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001a3a:	f7fe ff07 	bl	800084c <__aeabi_ddiv>
 8001a3e:	e021      	b.n	8001a84 <HAL_TIM_PeriodElapsedCallback+0x654>
 8001a40:	33333333 	.word	0x33333333
 8001a44:	3fd33333 	.word	0x3fd33333
 8001a48:	9999999a 	.word	0x9999999a
 8001a4c:	3fb99999 	.word	0x3fb99999
 8001a50:	200003b0 	.word	0x200003b0
 8001a54:	40270000 	.word	0x40270000
 8001a58:	c0270000 	.word	0xc0270000
 8001a5c:	3fd00000 	.word	0x3fd00000
 8001a60:	20000128 	.word	0x20000128
 8001a64:	3fe00000 	.word	0x3fe00000
 8001a68:	200003d0 	.word	0x200003d0
 8001a6c:	200003d8 	.word	0x200003d8
 8001a70:	200003e0 	.word	0x200003e0
 8001a74:	200003e8 	.word	0x200003e8
 8001a78:	408f4000 	.word	0x408f4000
 8001a7c:	20000010 	.word	0x20000010
 8001a80:	20000020 	.word	0x20000020
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b46      	ldr	r3, [pc, #280]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001a92:	f7fe fdb1 	bl	80005f8 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f883 	bl	8000ba8 <__aeabi_d2f>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a42      	ldr	r2, [pc, #264]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001aa6:	6013      	str	r3, [r2, #0]
        M4.Duty = T4 / 11.5 * 1000;
 8001aa8:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8001aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x788>)
 8001ab4:	f7fe feca 	bl	800084c <__aeabi_ddiv>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	4b39      	ldr	r3, [pc, #228]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001ac6:	f7fe fd97 	bl	80005f8 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff f869 	bl	8000ba8 <__aeabi_d2f>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a38      	ldr	r2, [pc, #224]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001ada:	6013      	str	r3, [r2, #0]

        // Enable output PID
        if (enable)
 8001adc:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d039      	beq.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0x728>
        {
            ESC_Control(&htim1, M1.Duty + M1.Duty_base, M2.Duty + M2.Duty_base, M3.Duty + M3.Duty_base, M4.Duty + M4.Duty_base); // Duty + Duty_base
 8001ae4:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001ae6:	ed93 7a00 	vldr	s14, [r3]
 8001aea:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001aec:	edd3 7a01 	vldr	s15, [r3, #4]
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af8:	ee17 3a90 	vmov	r3, s15
 8001afc:	b299      	uxth	r1, r3
 8001afe:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001b00:	ed93 7a00 	vldr	s14, [r3]
 8001b04:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001b06:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b12:	ee17 3a90 	vmov	r3, s15
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001b1a:	ed93 7a00 	vldr	s14, [r3]
 8001b1e:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001b20:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b2c:	ee17 3a90 	vmov	r3, s15
 8001b30:	b298      	uxth	r0, r3
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001b3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b46:	ee17 3a90 	vmov	r3, s15
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4603      	mov	r3, r0
 8001b50:	481e      	ldr	r0, [pc, #120]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8001b52:	f004 fd46 	bl	80065e2 <ESC_Control>
        else
        {
            ESC_Control(&htim1, M1.Duty_min, M2.Duty_min, M3.Duty_min, M4.Duty_min); // Duty_min
        }
    }
}
 8001b56:	e024      	b.n	8001ba2 <HAL_TIM_PeriodElapsedCallback+0x772>
            ESC_Control(&htim1, M1.Duty_min, M2.Duty_min, M3.Duty_min, M4.Duty_min); // Duty_min
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001b5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b62:	ee17 3a90 	vmov	r3, s15
 8001b66:	b299      	uxth	r1, r3
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001b6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b72:	ee17 3a90 	vmov	r3, s15
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001b7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b82:	ee17 3a90 	vmov	r3, s15
 8001b86:	b298      	uxth	r0, r3
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001b8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b92:	ee17 3a90 	vmov	r3, s15
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8001b9e:	f004 fd20 	bl	80065e2 <ESC_Control>
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	408f4000 	.word	0x408f4000
 8001bb0:	20000030 	.word	0x20000030
 8001bb4:	200003e8 	.word	0x200003e8
 8001bb8:	40270000 	.word	0x40270000
 8001bbc:	20000040 	.word	0x20000040
 8001bc0:	20000218 	.word	0x20000218
 8001bc4:	20000010 	.word	0x20000010
 8001bc8:	20000020 	.word	0x20000020
 8001bcc:	2000044c 	.word	0x2000044c

08001bd0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <Error_Handler+0x8>
	...

08001bdc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001be2:	4a18      	ldr	r2, [pc, #96]	; (8001c44 <MX_SPI1_Init+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bee:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001c10:	2210      	movs	r2, #16
 8001c12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001c28:	220a      	movs	r2, #10
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c2c:	4804      	ldr	r0, [pc, #16]	; (8001c40 <MX_SPI1_Init+0x64>)
 8001c2e:	f002 faad 	bl	800418c <HAL_SPI_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c38:	f7ff ffca 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200003f0 	.word	0x200003f0
 8001c44:	40013000 	.word	0x40013000

08001c48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a19      	ldr	r2, [pc, #100]	; (8001ccc <HAL_SPI_MspInit+0x84>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d12b      	bne.n	8001cc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_SPI_MspInit+0x88>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <HAL_SPI_MspInit+0x88>)
 8001c74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_SPI_MspInit+0x88>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_SPI_MspInit+0x88>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <HAL_SPI_MspInit+0x88>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <HAL_SPI_MspInit+0x88>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ca2:	23e0      	movs	r3, #224	; 0xe0
 8001ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <HAL_SPI_MspInit+0x8c>)
 8001cbe:	f000 fc7d 	bl	80025bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3728      	adds	r7, #40	; 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40013000 	.word	0x40013000
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_MspInit+0x4c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <HAL_MspInit+0x4c>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cec:	6453      	str	r3, [r2, #68]	; 0x44
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <HAL_MspInit+0x4c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_MspInit+0x4c>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_MspInit+0x4c>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_MspInit+0x4c>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <NMI_Handler+0x4>

08001d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <HardFault_Handler+0x4>

08001d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <MemManage_Handler+0x4>

08001d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d74:	f000 facc 	bl	8002310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM2_IRQHandler+0x10>)
 8001d82:	f003 f98d 	bl	80050a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000494 	.word	0x20000494

08001d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f008 fbd8 	bl	800a574 <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20020000 	.word	0x20020000
 8001df0:	00000400 	.word	0x00000400
 8001df4:	20000448 	.word	0x20000448
 8001df8:	200005f8 	.word	0x200005f8

08001dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <SystemInit+0x20>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <SystemInit+0x20>)
 8001e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b096      	sub	sp, #88	; 0x58
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]
 8001e4e:	615a      	str	r2, [r3, #20]
 8001e50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	2220      	movs	r2, #32
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f008 fbc3 	bl	800a5e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e5e:	4b51      	ldr	r3, [pc, #324]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001e60:	4a51      	ldr	r2, [pc, #324]	; (8001fa8 <MX_TIM1_Init+0x188>)
 8001e62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8001e64:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001e66:	2248      	movs	r2, #72	; 0x48
 8001e68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6a:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001e70:	4b4c      	ldr	r3, [pc, #304]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001e72:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001e76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e78:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e7e:	4b49      	ldr	r3, [pc, #292]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e84:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e8a:	4846      	ldr	r0, [pc, #280]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001e8c:	f002 ff26 	bl	8004cdc <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e96:	f7ff fe9b 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ea0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	483f      	ldr	r0, [pc, #252]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001ea8:	f003 fac4 	bl	8005434 <HAL_TIM_ConfigClockSource>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001eb2:	f7ff fe8d 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eb6:	483b      	ldr	r0, [pc, #236]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001eb8:	f002 ffd0 	bl	8004e5c <HAL_TIM_PWM_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ec2:	f7ff fe85 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ece:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4833      	ldr	r0, [pc, #204]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001ed6:	f003 fead 	bl	8005c34 <HAL_TIMEx_MasterConfigSynchronization>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ee0:	f7ff fe76 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee4:	2360      	movs	r3, #96	; 0x60
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 800;
 8001ee8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f06:	2200      	movs	r2, #0
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4826      	ldr	r0, [pc, #152]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001f0c:	f003 f9d0 	bl	80052b0 <HAL_TIM_PWM_ConfigChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001f16:	f7ff fe5b 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	2204      	movs	r2, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4820      	ldr	r0, [pc, #128]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001f24:	f003 f9c4 	bl	80052b0 <HAL_TIM_PWM_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001f2e:	f7ff fe4f 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f36:	2208      	movs	r2, #8
 8001f38:	4619      	mov	r1, r3
 8001f3a:	481a      	ldr	r0, [pc, #104]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001f3c:	f003 f9b8 	bl	80052b0 <HAL_TIM_PWM_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001f46:	f7ff fe43 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4e:	220c      	movs	r2, #12
 8001f50:	4619      	mov	r1, r3
 8001f52:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001f54:	f003 f9ac 	bl	80052b0 <HAL_TIM_PWM_ConfigChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001f5e:	f7ff fe37 	bl	8001bd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	4619      	mov	r1, r3
 8001f84:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001f86:	f003 fed1 	bl	8005d2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8001f90:	f7ff fe1e 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f94:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <MX_TIM1_Init+0x184>)
 8001f96:	f000 f893 	bl	80020c0 <HAL_TIM_MspPostInit>

}
 8001f9a:	bf00      	nop
 8001f9c:	3758      	adds	r7, #88	; 0x58
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000044c 	.word	0x2000044c
 8001fa8:	40010000 	.word	0x40010000

08001fac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb2:	f107 0308 	add.w	r3, r7, #8
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <MX_TIM2_Init+0x94>)
 8001fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <MX_TIM2_Init+0x94>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <MX_TIM2_Init+0x94>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72000000*SIMPLE_TIME;
 8001fdc:	4b18      	ldr	r3, [pc, #96]	; (8002040 <MX_TIM2_Init+0x94>)
 8001fde:	4a19      	ldr	r2, [pc, #100]	; (8002044 <MX_TIM2_Init+0x98>)
 8001fe0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <MX_TIM2_Init+0x94>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <MX_TIM2_Init+0x94>)
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fee:	4814      	ldr	r0, [pc, #80]	; (8002040 <MX_TIM2_Init+0x94>)
 8001ff0:	f002 fe74 	bl	8004cdc <HAL_TIM_Base_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001ffa:	f7ff fde9 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002004:	f107 0308 	add.w	r3, r7, #8
 8002008:	4619      	mov	r1, r3
 800200a:	480d      	ldr	r0, [pc, #52]	; (8002040 <MX_TIM2_Init+0x94>)
 800200c:	f003 fa12 	bl	8005434 <HAL_TIM_ConfigClockSource>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002016:	f7ff fddb 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002022:	463b      	mov	r3, r7
 8002024:	4619      	mov	r1, r3
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <MX_TIM2_Init+0x94>)
 8002028:	f003 fe04 	bl	8005c34 <HAL_TIMEx_MasterConfigSynchronization>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002032:	f7ff fdcd 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000494 	.word	0x20000494
 8002044:	00023280 	.word	0x00023280

08002048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_TIM_Base_MspInit+0x70>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d10e      	bne.n	8002078 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_TIM_Base_MspInit+0x74>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a16      	ldr	r2, [pc, #88]	; (80020bc <HAL_TIM_Base_MspInit+0x74>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_TIM_Base_MspInit+0x74>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002076:	e01a      	b.n	80020ae <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002080:	d115      	bne.n	80020ae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_TIM_Base_MspInit+0x74>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <HAL_TIM_Base_MspInit+0x74>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_TIM_Base_MspInit+0x74>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	201c      	movs	r0, #28
 80020a4:	f000 fa53 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020a8:	201c      	movs	r0, #28
 80020aa:	f000 fa6c 	bl	8002586 <HAL_NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40010000 	.word	0x40010000
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a12      	ldr	r2, [pc, #72]	; (8002128 <HAL_TIM_MspPostInit+0x68>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d11e      	bne.n	8002120 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_TIM_MspPostInit+0x6c>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a10      	ldr	r2, [pc, #64]	; (800212c <HAL_TIM_MspPostInit+0x6c>)
 80020ec:	f043 0310 	orr.w	r3, r3, #16
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_TIM_MspPostInit+0x6c>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80020fe:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002102:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002110:	2301      	movs	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	4619      	mov	r1, r3
 800211a:	4805      	ldr	r0, [pc, #20]	; (8002130 <HAL_TIM_MspPostInit+0x70>)
 800211c:	f000 fa4e 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002120:	bf00      	nop
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40010000 	.word	0x40010000
 800212c:	40023800 	.word	0x40023800
 8002130:	40021000 	.word	0x40021000

08002134 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_USART6_UART_Init+0x4c>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <MX_USART6_UART_Init+0x50>)
 800213c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <MX_USART6_UART_Init+0x4c>)
 8002140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002144:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_USART6_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_USART6_UART_Init+0x4c>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <MX_USART6_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_USART6_UART_Init+0x4c>)
 800215a:	220c      	movs	r2, #12
 800215c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <MX_USART6_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_USART6_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800216a:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_USART6_UART_Init+0x4c>)
 800216c:	f003 fe44 	bl	8005df8 <HAL_UART_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002176:	f7ff fd2b 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200004dc 	.word	0x200004dc
 8002184:	40011400 	.word	0x40011400

08002188 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a19      	ldr	r2, [pc, #100]	; (800220c <HAL_UART_MspInit+0x84>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d12b      	bne.n	8002202 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_UART_MspInit+0x88>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a17      	ldr	r2, [pc, #92]	; (8002210 <HAL_UART_MspInit+0x88>)
 80021b4:	f043 0320 	orr.w	r3, r3, #32
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <HAL_UART_MspInit+0x88>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_UART_MspInit+0x88>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_UART_MspInit+0x88>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_UART_MspInit+0x88>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021e2:	23c0      	movs	r3, #192	; 0xc0
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021f2:	2308      	movs	r3, #8
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4805      	ldr	r0, [pc, #20]	; (8002214 <HAL_UART_MspInit+0x8c>)
 80021fe:	f000 f9dd 	bl	80025bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002202:	bf00      	nop
 8002204:	3728      	adds	r7, #40	; 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40011400 	.word	0x40011400
 8002210:	40023800 	.word	0x40023800
 8002214:	40020800 	.word	0x40020800

08002218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800221e:	490e      	ldr	r1, [pc, #56]	; (8002258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002220:	4a0e      	ldr	r2, [pc, #56]	; (800225c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002224:	e002      	b.n	800222c <LoopCopyDataInit>

08002226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222a:	3304      	adds	r3, #4

0800222c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800222c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002230:	d3f9      	bcc.n	8002226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002234:	4c0b      	ldr	r4, [pc, #44]	; (8002264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002238:	e001      	b.n	800223e <LoopFillZerobss>

0800223a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800223c:	3204      	adds	r2, #4

0800223e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002240:	d3fb      	bcc.n	800223a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002242:	f7ff fddb 	bl	8001dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002246:	f008 f99b 	bl	800a580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224a:	f7fe ff95 	bl	8001178 <main>
  bx  lr    
 800224e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002258:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 800225c:	0800d0e8 	.word	0x0800d0e8
  ldr r2, =_sbss
 8002260:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8002264:	200005f8 	.word	0x200005f8

08002268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>
	...

0800226c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <HAL_Init+0x40>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800227a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_Init+0x40>)
 8002282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a07      	ldr	r2, [pc, #28]	; (80022ac <HAL_Init+0x40>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002294:	2003      	movs	r0, #3
 8002296:	f000 f94f 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800229a:	200f      	movs	r0, #15
 800229c:	f000 f808 	bl	80022b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a0:	f7ff fd1a 	bl	8001cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00

080022b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_InitTick+0x54>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_InitTick+0x58>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f967 	bl	80025a2 <HAL_SYSTICK_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e00e      	b.n	80022fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d80a      	bhi.n	80022fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e4:	2200      	movs	r2, #0
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f000 f92f 	bl	800254e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f0:	4a06      	ldr	r2, [pc, #24]	; (800230c <HAL_InitTick+0x5c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000130 	.word	0x20000130
 8002308:	20000138 	.word	0x20000138
 800230c:	20000134 	.word	0x20000134

08002310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x20>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_IncTick+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_IncTick+0x24>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000138 	.word	0x20000138
 8002334:	20000520 	.word	0x20000520

08002338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return uwTick;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_GetTick+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000520 	.word	0x20000520

08002350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff ffee 	bl	8002338 <HAL_GetTick>
 800235c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_Delay+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002376:	bf00      	nop
 8002378:	f7ff ffde 	bl	8002338 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000138 	.word	0x20000138

08002398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ca:	4a04      	ldr	r2, [pc, #16]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db0b      	blt.n	8002426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	4907      	ldr	r1, [pc, #28]	; (8002434 <__NVIC_EnableIRQ+0x38>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000e100 	.word	0xe000e100

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	; (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	; (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f1c3 0307 	rsb	r3, r3, #7
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	bf28      	it	cs
 80024aa:	2304      	movcs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d902      	bls.n	80024bc <NVIC_EncodePriority+0x30>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b03      	subs	r3, #3
 80024ba:	e000      	b.n	80024be <NVIC_EncodePriority+0x32>
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43d9      	mvns	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	4313      	orrs	r3, r2
         );
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002504:	d301      	bcc.n	800250a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002506:	2301      	movs	r3, #1
 8002508:	e00f      	b.n	800252a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <SysTick_Config+0x40>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002512:	210f      	movs	r1, #15
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f7ff ff8e 	bl	8002438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <SysTick_Config+0x40>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SysTick_Config+0x40>)
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000e010 	.word	0xe000e010

08002538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff29 	bl	8002398 <__NVIC_SetPriorityGrouping>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff ff3e 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff8e 	bl	800248c <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff5d 	bl	8002438 <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff31 	bl	80023fc <__NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffa2 	bl	80024f4 <SysTick_Config>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	e16b      	b.n	80028b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f040 815a 	bne.w	80028aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d005      	beq.n	800260e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260a:	2b02      	cmp	r3, #2
 800260c:	d130      	bne.n	8002670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2203      	movs	r2, #3
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002644:	2201      	movs	r2, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 0201 	and.w	r2, r3, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b03      	cmp	r3, #3
 800267a:	d017      	beq.n	80026ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d123      	bne.n	8002700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	08da      	lsrs	r2, r3, #3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3208      	adds	r2, #8
 80026c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	220f      	movs	r2, #15
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	08da      	lsrs	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3208      	adds	r2, #8
 80026fa:	69b9      	ldr	r1, [r7, #24]
 80026fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0203 	and.w	r2, r3, #3
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80b4 	beq.w	80028aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <HAL_GPIO_Init+0x30c>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a5f      	ldr	r2, [pc, #380]	; (80028c8 <HAL_GPIO_Init+0x30c>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <HAL_GPIO_Init+0x30c>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800275e:	4a5b      	ldr	r2, [pc, #364]	; (80028cc <HAL_GPIO_Init+0x310>)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3302      	adds	r3, #2
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	220f      	movs	r2, #15
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_GPIO_Init+0x314>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d02b      	beq.n	80027e2 <HAL_GPIO_Init+0x226>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <HAL_GPIO_Init+0x318>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d025      	beq.n	80027de <HAL_GPIO_Init+0x222>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a50      	ldr	r2, [pc, #320]	; (80028d8 <HAL_GPIO_Init+0x31c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01f      	beq.n	80027da <HAL_GPIO_Init+0x21e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_GPIO_Init+0x320>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d019      	beq.n	80027d6 <HAL_GPIO_Init+0x21a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4e      	ldr	r2, [pc, #312]	; (80028e0 <HAL_GPIO_Init+0x324>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d013      	beq.n	80027d2 <HAL_GPIO_Init+0x216>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4d      	ldr	r2, [pc, #308]	; (80028e4 <HAL_GPIO_Init+0x328>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00d      	beq.n	80027ce <HAL_GPIO_Init+0x212>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4c      	ldr	r2, [pc, #304]	; (80028e8 <HAL_GPIO_Init+0x32c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <HAL_GPIO_Init+0x20e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4b      	ldr	r2, [pc, #300]	; (80028ec <HAL_GPIO_Init+0x330>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_GPIO_Init+0x20a>
 80027c2:	2307      	movs	r3, #7
 80027c4:	e00e      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027c6:	2308      	movs	r3, #8
 80027c8:	e00c      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027ca:	2306      	movs	r3, #6
 80027cc:	e00a      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027ce:	2305      	movs	r3, #5
 80027d0:	e008      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027d2:	2304      	movs	r3, #4
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027d6:	2303      	movs	r3, #3
 80027d8:	e004      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027da:	2302      	movs	r3, #2
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027e2:	2300      	movs	r3, #0
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f002 0203 	and.w	r2, r2, #3
 80027ea:	0092      	lsls	r2, r2, #2
 80027ec:	4093      	lsls	r3, r2
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f4:	4935      	ldr	r1, [pc, #212]	; (80028cc <HAL_GPIO_Init+0x310>)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002826:	4a32      	ldr	r2, [pc, #200]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800282c:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <HAL_GPIO_Init+0x334>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002850:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287a:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_GPIO_Init+0x334>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a4:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <HAL_GPIO_Init+0x334>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	f67f ae90 	bls.w	80025d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020c00 	.word	0x40020c00
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40021400 	.word	0x40021400
 80028e8:	40021800 	.word	0x40021800
 80028ec:	40021c00 	.word	0x40021c00
 80028f0:	40013c00 	.word	0x40013c00

080028f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	807b      	strh	r3, [r7, #2]
 8002900:	4613      	mov	r3, r2
 8002902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002904:	787b      	ldrb	r3, [r7, #1]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002910:	e003      	b.n	800291a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	041a      	lsls	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	619a      	str	r2, [r3, #24]
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002938:	887a      	ldrh	r2, [r7, #2]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	041a      	lsls	r2, r3, #16
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43d9      	mvns	r1, r3
 8002944:	887b      	ldrh	r3, [r7, #2]
 8002946:	400b      	ands	r3, r1
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	619a      	str	r2, [r3, #24]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e12b      	b.n	8002bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe fbb0 	bl	80010e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2224      	movs	r2, #36	; 0x24
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029c0:	f001 fbbc 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 80029c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a81      	ldr	r2, [pc, #516]	; (8002bd0 <HAL_I2C_Init+0x274>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d807      	bhi.n	80029e0 <HAL_I2C_Init+0x84>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a80      	ldr	r2, [pc, #512]	; (8002bd4 <HAL_I2C_Init+0x278>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	bf94      	ite	ls
 80029d8:	2301      	movls	r3, #1
 80029da:	2300      	movhi	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e006      	b.n	80029ee <HAL_I2C_Init+0x92>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a7d      	ldr	r2, [pc, #500]	; (8002bd8 <HAL_I2C_Init+0x27c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	bf94      	ite	ls
 80029e8:	2301      	movls	r3, #1
 80029ea:	2300      	movhi	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0e7      	b.n	8002bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4a78      	ldr	r2, [pc, #480]	; (8002bdc <HAL_I2C_Init+0x280>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0c9b      	lsrs	r3, r3, #18
 8002a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a6a      	ldr	r2, [pc, #424]	; (8002bd0 <HAL_I2C_Init+0x274>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d802      	bhi.n	8002a30 <HAL_I2C_Init+0xd4>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	e009      	b.n	8002a44 <HAL_I2C_Init+0xe8>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	4a69      	ldr	r2, [pc, #420]	; (8002be0 <HAL_I2C_Init+0x284>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	3301      	adds	r3, #1
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	495c      	ldr	r1, [pc, #368]	; (8002bd0 <HAL_I2C_Init+0x274>)
 8002a60:	428b      	cmp	r3, r1
 8002a62:	d819      	bhi.n	8002a98 <HAL_I2C_Init+0x13c>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e59      	subs	r1, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a78:	400b      	ands	r3, r1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_I2C_Init+0x138>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1e59      	subs	r1, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a92:	e051      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002a94:	2304      	movs	r3, #4
 8002a96:	e04f      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d111      	bne.n	8002ac4 <HAL_I2C_Init+0x168>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e58      	subs	r0, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	440b      	add	r3, r1
 8002aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e012      	b.n	8002aea <HAL_I2C_Init+0x18e>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1e58      	subs	r0, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	0099      	lsls	r1, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_Init+0x196>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e022      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10e      	bne.n	8002b18 <HAL_I2C_Init+0x1bc>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1e58      	subs	r0, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	440b      	add	r3, r1
 8002b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b16:	e00f      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	6809      	ldr	r1, [r1, #0]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6911      	ldr	r1, [r2, #16]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	000186a0 	.word	0x000186a0
 8002bd4:	001e847f 	.word	0x001e847f
 8002bd8:	003d08ff 	.word	0x003d08ff
 8002bdc:	431bde83 	.word	0x431bde83
 8002be0:	10624dd3 	.word	0x10624dd3

08002be4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	4608      	mov	r0, r1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	817b      	strh	r3, [r7, #10]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	813b      	strh	r3, [r7, #8]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bfe:	f7ff fb9b 	bl	8002338 <HAL_GetTick>
 8002c02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	f040 80d9 	bne.w	8002dc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	2319      	movs	r3, #25
 8002c18:	2201      	movs	r2, #1
 8002c1a:	496d      	ldr	r1, [pc, #436]	; (8002dd0 <HAL_I2C_Mem_Write+0x1ec>)
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fc7f 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e0cc      	b.n	8002dc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_I2C_Mem_Write+0x56>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e0c5      	b.n	8002dc6 <HAL_I2C_Mem_Write+0x1e2>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d007      	beq.n	8002c60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2221      	movs	r2, #33	; 0x21
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2240      	movs	r2, #64	; 0x40
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a4d      	ldr	r2, [pc, #308]	; (8002dd4 <HAL_I2C_Mem_Write+0x1f0>)
 8002ca0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ca2:	88f8      	ldrh	r0, [r7, #6]
 8002ca4:	893a      	ldrh	r2, [r7, #8]
 8002ca6:	8979      	ldrh	r1, [r7, #10]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fab6 	bl	8003224 <I2C_RequestMemoryWrite>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d052      	beq.n	8002d64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e081      	b.n	8002dc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fd00 	bl	80036cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d107      	bne.n	8002cea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06b      	b.n	8002dc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	781a      	ldrb	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d11b      	bne.n	8002d64 <HAL_I2C_Mem_Write+0x180>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d017      	beq.n	8002d64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1aa      	bne.n	8002cc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fcec 	bl	800374e <I2C_WaitOnBTFFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d107      	bne.n	8002d94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e016      	b.n	8002dc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e000      	b.n	8002dc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dc4:	2302      	movs	r3, #2
  }
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	00100002 	.word	0x00100002
 8002dd4:	ffff0000 	.word	0xffff0000

08002dd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	; 0x30
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	4608      	mov	r0, r1
 8002de2:	4611      	mov	r1, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	817b      	strh	r3, [r7, #10]
 8002dea:	460b      	mov	r3, r1
 8002dec:	813b      	strh	r3, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002df2:	f7ff faa1 	bl	8002338 <HAL_GetTick>
 8002df6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	f040 8208 	bne.w	8003216 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	2319      	movs	r3, #25
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	497b      	ldr	r1, [pc, #492]	; (8002ffc <HAL_I2C_Mem_Read+0x224>)
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fb85 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e1fb      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_I2C_Mem_Read+0x56>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e1f4      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d007      	beq.n	8002e54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2222      	movs	r2, #34	; 0x22
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2240      	movs	r2, #64	; 0x40
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4a5b      	ldr	r2, [pc, #364]	; (8003000 <HAL_I2C_Mem_Read+0x228>)
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e96:	88f8      	ldrh	r0, [r7, #6]
 8002e98:	893a      	ldrh	r2, [r7, #8]
 8002e9a:	8979      	ldrh	r1, [r7, #10]
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fa52 	bl	8003350 <I2C_RequestMemoryRead>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e1b0      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d113      	bne.n	8002ee6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	623b      	str	r3, [r7, #32]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	623b      	str	r3, [r7, #32]
 8002ed2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e184      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d11b      	bne.n	8002f26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e164      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d11b      	bne.n	8002f66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	e144      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f7c:	e138      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	f200 80f1 	bhi.w	800316a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d123      	bne.n	8002fd8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fc1b 	bl	80037d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e139      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fd6:	e10b      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d14e      	bne.n	800307e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	4906      	ldr	r1, [pc, #24]	; (8003004 <HAL_I2C_Mem_Read+0x22c>)
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fa98 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e10e      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
 8002ffa:	bf00      	nop
 8002ffc:	00100002 	.word	0x00100002
 8003000:	ffff0000 	.word	0xffff0000
 8003004:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800307c:	e0b8      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	2200      	movs	r2, #0
 8003086:	4966      	ldr	r1, [pc, #408]	; (8003220 <HAL_I2C_Mem_Read+0x448>)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fa49 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0bf      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	2200      	movs	r2, #0
 80030e2:	494f      	ldr	r1, [pc, #316]	; (8003220 <HAL_I2C_Mem_Read+0x448>)
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fa1b 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e091      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003168:	e042      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fb2e 	bl	80037d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e04c      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d118      	bne.n	80031f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f47f aec2 	bne.w	8002f7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e000      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003216:	2302      	movs	r3, #2
  }
}
 8003218:	4618      	mov	r0, r3
 800321a:	3728      	adds	r7, #40	; 0x28
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	00010004 	.word	0x00010004

08003224 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	4608      	mov	r0, r1
 800322e:	4611      	mov	r1, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4603      	mov	r3, r0
 8003234:	817b      	strh	r3, [r7, #10]
 8003236:	460b      	mov	r3, r1
 8003238:	813b      	strh	r3, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	2200      	movs	r2, #0
 8003256:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f960 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00d      	beq.n	8003282 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003274:	d103      	bne.n	800327e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e05f      	b.n	8003342 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003282:	897b      	ldrh	r3, [r7, #10]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003290:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	6a3a      	ldr	r2, [r7, #32]
 8003296:	492d      	ldr	r1, [pc, #180]	; (800334c <I2C_RequestMemoryWrite+0x128>)
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f998 	bl	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e04c      	b.n	8003342 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c0:	6a39      	ldr	r1, [r7, #32]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fa02 	bl	80036cc <I2C_WaitOnTXEFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d107      	bne.n	80032e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e02b      	b.n	8003342 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d105      	bne.n	80032fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032f0:	893b      	ldrh	r3, [r7, #8]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	611a      	str	r2, [r3, #16]
 80032fa:	e021      	b.n	8003340 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032fc:	893b      	ldrh	r3, [r7, #8]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	b29b      	uxth	r3, r3
 8003302:	b2da      	uxtb	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	6a39      	ldr	r1, [r7, #32]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f9dc 	bl	80036cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b04      	cmp	r3, #4
 8003320:	d107      	bne.n	8003332 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003330:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e005      	b.n	8003342 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003336:	893b      	ldrh	r3, [r7, #8]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	00010002 	.word	0x00010002

08003350 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	4608      	mov	r0, r1
 800335a:	4611      	mov	r1, r2
 800335c:	461a      	mov	r2, r3
 800335e:	4603      	mov	r3, r0
 8003360:	817b      	strh	r3, [r7, #10]
 8003362:	460b      	mov	r3, r1
 8003364:	813b      	strh	r3, [r7, #8]
 8003366:	4613      	mov	r3, r2
 8003368:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003378:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003388:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	2200      	movs	r2, #0
 8003392:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f8c2 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00d      	beq.n	80033be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b0:	d103      	bne.n	80033ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e0aa      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033be:	897b      	ldrh	r3, [r7, #10]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	4952      	ldr	r1, [pc, #328]	; (800351c <I2C_RequestMemoryRead+0x1cc>)
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f8fa 	bl	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e097      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f964 	bl	80036cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b04      	cmp	r3, #4
 8003410:	d107      	bne.n	8003422 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e076      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800342c:	893b      	ldrh	r3, [r7, #8]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	611a      	str	r2, [r3, #16]
 8003436:	e021      	b.n	800347c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	0a1b      	lsrs	r3, r3, #8
 800343c:	b29b      	uxth	r3, r3
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003448:	6a39      	ldr	r1, [r7, #32]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f93e 	bl	80036cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b04      	cmp	r3, #4
 800345c:	d107      	bne.n	800346e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e050      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003472:	893b      	ldrh	r3, [r7, #8]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347e:	6a39      	ldr	r1, [r7, #32]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f923 	bl	80036cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	2b04      	cmp	r3, #4
 8003492:	d107      	bne.n	80034a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e035      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	2200      	movs	r2, #0
 80034c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f82b 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034de:	d103      	bne.n	80034e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e013      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034ec:	897b      	ldrh	r3, [r7, #10]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	6a3a      	ldr	r2, [r7, #32]
 8003500:	4906      	ldr	r1, [pc, #24]	; (800351c <I2C_RequestMemoryRead+0x1cc>)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f863 	bl	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	00010002 	.word	0x00010002

08003520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003530:	e025      	b.n	800357e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d021      	beq.n	800357e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe fefd 	bl	8002338 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d116      	bne.n	800357e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f043 0220 	orr.w	r2, r3, #32
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e023      	b.n	80035c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10d      	bne.n	80035a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	43da      	mvns	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	e00c      	b.n	80035be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4013      	ands	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf0c      	ite	eq
 80035b6:	2301      	moveq	r3, #1
 80035b8:	2300      	movne	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d0b6      	beq.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035dc:	e051      	b.n	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ec:	d123      	bne.n	8003636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003606:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f043 0204 	orr.w	r2, r3, #4
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e046      	b.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d021      	beq.n	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363e:	f7fe fe7b 	bl	8002338 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	429a      	cmp	r2, r3
 800364c:	d302      	bcc.n	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d116      	bne.n	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f043 0220 	orr.w	r2, r3, #32
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e020      	b.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10c      	bne.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	43da      	mvns	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	bf14      	ite	ne
 800369e:	2301      	movne	r3, #1
 80036a0:	2300      	moveq	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	e00b      	b.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d18d      	bne.n	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d8:	e02d      	b.n	8003736 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f8ce 	bl	800387c <I2C_IsAcknowledgeFailed>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e02d      	b.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d021      	beq.n	8003736 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7fe fe21 	bl	8002338 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d116      	bne.n	8003736 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f043 0220 	orr.w	r2, r3, #32
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e007      	b.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003740:	2b80      	cmp	r3, #128	; 0x80
 8003742:	d1ca      	bne.n	80036da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800375a:	e02d      	b.n	80037b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f88d 	bl	800387c <I2C_IsAcknowledgeFailed>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e02d      	b.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d021      	beq.n	80037b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003774:	f7fe fde0 	bl	8002338 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	429a      	cmp	r2, r3
 8003782:	d302      	bcc.n	800378a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d116      	bne.n	80037b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e007      	b.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d1ca      	bne.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037dc:	e042      	b.n	8003864 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d119      	bne.n	8003820 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0210 	mvn.w	r2, #16
 80037f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e029      	b.n	8003874 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003820:	f7fe fd8a 	bl	8002338 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	429a      	cmp	r2, r3
 800382e:	d302      	bcc.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d116      	bne.n	8003864 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e007      	b.n	8003874 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d1b5      	bne.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003892:	d11b      	bne.n	80038cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800389c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f043 0204 	orr.w	r2, r3, #4
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e267      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d075      	beq.n	80039e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038fa:	4b88      	ldr	r3, [pc, #544]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b04      	cmp	r3, #4
 8003904:	d00c      	beq.n	8003920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003906:	4b85      	ldr	r3, [pc, #532]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800390e:	2b08      	cmp	r3, #8
 8003910:	d112      	bne.n	8003938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003912:	4b82      	ldr	r3, [pc, #520]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800391e:	d10b      	bne.n	8003938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003920:	4b7e      	ldr	r3, [pc, #504]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d05b      	beq.n	80039e4 <HAL_RCC_OscConfig+0x108>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d157      	bne.n	80039e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e242      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003940:	d106      	bne.n	8003950 <HAL_RCC_OscConfig+0x74>
 8003942:	4b76      	ldr	r3, [pc, #472]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a75      	ldr	r2, [pc, #468]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e01d      	b.n	800398c <HAL_RCC_OscConfig+0xb0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x98>
 800395a:	4b70      	ldr	r3, [pc, #448]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a6f      	ldr	r2, [pc, #444]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	4b6d      	ldr	r3, [pc, #436]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6c      	ldr	r2, [pc, #432]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0xb0>
 8003974:	4b69      	ldr	r3, [pc, #420]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a68      	ldr	r2, [pc, #416]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 800397a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b66      	ldr	r3, [pc, #408]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a65      	ldr	r2, [pc, #404]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d013      	beq.n	80039bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fe fcd0 	bl	8002338 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800399c:	f7fe fccc 	bl	8002338 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e207      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b5b      	ldr	r3, [pc, #364]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0xc0>
 80039ba:	e014      	b.n	80039e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fe fcbc 	bl	8002338 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c4:	f7fe fcb8 	bl	8002338 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e1f3      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	4b51      	ldr	r3, [pc, #324]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0xe8>
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d063      	beq.n	8003aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039f2:	4b4a      	ldr	r3, [pc, #296]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fe:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d11c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0a:	4b44      	ldr	r3, [pc, #272]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d116      	bne.n	8003a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	4b41      	ldr	r3, [pc, #260]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_RCC_OscConfig+0x152>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e1c7      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2e:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4937      	ldr	r1, [pc, #220]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	e03a      	b.n	8003aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a4c:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a52:	f7fe fc71 	bl	8002338 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a5a:	f7fe fc6d 	bl	8002338 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e1a8      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6c:	4b2b      	ldr	r3, [pc, #172]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a78:	4b28      	ldr	r3, [pc, #160]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4925      	ldr	r1, [pc, #148]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]
 8003a8c:	e015      	b.n	8003aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fe fc50 	bl	8002338 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9c:	f7fe fc4c 	bl	8002338 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e187      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d036      	beq.n	8003b34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <HAL_RCC_OscConfig+0x248>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fc30 	bl	8002338 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003adc:	f7fe fc2c 	bl	8002338 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e167      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCC_OscConfig+0x240>)
 8003af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x200>
 8003afa:	e01b      	b.n	8003b34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCC_OscConfig+0x248>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b02:	f7fe fc19 	bl	8002338 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b08:	e00e      	b.n	8003b28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b0a:	f7fe fc15 	bl	8002338 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d907      	bls.n	8003b28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e150      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	42470000 	.word	0x42470000
 8003b24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b28:	4b88      	ldr	r3, [pc, #544]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1ea      	bne.n	8003b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8097 	beq.w	8003c70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b42:	2300      	movs	r3, #0
 8003b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b46:	4b81      	ldr	r3, [pc, #516]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10f      	bne.n	8003b72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	4b7d      	ldr	r3, [pc, #500]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	4a7c      	ldr	r2, [pc, #496]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b60:	6413      	str	r3, [r2, #64]	; 0x40
 8003b62:	4b7a      	ldr	r3, [pc, #488]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	4b77      	ldr	r3, [pc, #476]	; (8003d50 <HAL_RCC_OscConfig+0x474>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d118      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7e:	4b74      	ldr	r3, [pc, #464]	; (8003d50 <HAL_RCC_OscConfig+0x474>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a73      	ldr	r2, [pc, #460]	; (8003d50 <HAL_RCC_OscConfig+0x474>)
 8003b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8a:	f7fe fbd5 	bl	8002338 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b92:	f7fe fbd1 	bl	8002338 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e10c      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <HAL_RCC_OscConfig+0x474>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x2ea>
 8003bb8:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a63      	ldr	r2, [pc, #396]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc4:	e01c      	b.n	8003c00 <HAL_RCC_OscConfig+0x324>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b05      	cmp	r3, #5
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x30c>
 8003bce:	4b5f      	ldr	r3, [pc, #380]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4a5e      	ldr	r2, [pc, #376]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bd4:	f043 0304 	orr.w	r3, r3, #4
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bda:	4b5c      	ldr	r3, [pc, #368]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a5b      	ldr	r2, [pc, #364]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
 8003be6:	e00b      	b.n	8003c00 <HAL_RCC_OscConfig+0x324>
 8003be8:	4b58      	ldr	r3, [pc, #352]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	4a57      	ldr	r2, [pc, #348]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf4:	4b55      	ldr	r3, [pc, #340]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	4a54      	ldr	r2, [pc, #336]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003bfa:	f023 0304 	bic.w	r3, r3, #4
 8003bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d015      	beq.n	8003c34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fe fb96 	bl	8002338 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c10:	f7fe fb92 	bl	8002338 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e0cb      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c26:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0ee      	beq.n	8003c10 <HAL_RCC_OscConfig+0x334>
 8003c32:	e014      	b.n	8003c5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c34:	f7fe fb80 	bl	8002338 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fe fb7c 	bl	8002338 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e0b5      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c52:	4b3e      	ldr	r3, [pc, #248]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1ee      	bne.n	8003c3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c64:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	4a38      	ldr	r2, [pc, #224]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80a1 	beq.w	8003dbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c7a:	4b34      	ldr	r3, [pc, #208]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d05c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d141      	bne.n	8003d12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8e:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <HAL_RCC_OscConfig+0x478>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fe fb50 	bl	8002338 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9c:	f7fe fb4c 	bl	8002338 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e087      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cae:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69da      	ldr	r2, [r3, #28]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	019b      	lsls	r3, r3, #6
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	085b      	lsrs	r3, r3, #1
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	491b      	ldr	r1, [pc, #108]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_RCC_OscConfig+0x478>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cea:	f7fe fb25 	bl	8002338 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf2:	f7fe fb21 	bl	8002338 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e05c      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d04:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x416>
 8003d10:	e054      	b.n	8003dbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <HAL_RCC_OscConfig+0x478>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fe fb0e 	bl	8002338 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fe fb0a 	bl	8002338 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e045      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_RCC_OscConfig+0x470>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x444>
 8003d3e:	e03d      	b.n	8003dbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d107      	bne.n	8003d58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e038      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40007000 	.word	0x40007000
 8003d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d58:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <HAL_RCC_OscConfig+0x4ec>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d028      	beq.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d121      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d11a      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d88:	4013      	ands	r3, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d111      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	3b01      	subs	r3, #1
 8003da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d107      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800

08003dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0cc      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de0:	4b68      	ldr	r3, [pc, #416]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d90c      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dee:	4b65      	ldr	r3, [pc, #404]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b63      	ldr	r3, [pc, #396]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0b8      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d020      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e20:	4b59      	ldr	r3, [pc, #356]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a58      	ldr	r2, [pc, #352]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e38:	4b53      	ldr	r3, [pc, #332]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a52      	ldr	r2, [pc, #328]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e44:	4b50      	ldr	r3, [pc, #320]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	494d      	ldr	r1, [pc, #308]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d044      	beq.n	8003eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d119      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e07f      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d107      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8a:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e06f      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e067      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eaa:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f023 0203 	bic.w	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4934      	ldr	r1, [pc, #208]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ebc:	f7fe fa3c 	bl	8002338 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec4:	f7fe fa38 	bl	8002338 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e04f      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 020c 	and.w	r2, r3, #12
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d1eb      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eec:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d20c      	bcs.n	8003f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e032      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4916      	ldr	r1, [pc, #88]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	490e      	ldr	r1, [pc, #56]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f52:	f000 f821 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8003f56:	4602      	mov	r2, r0
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	490a      	ldr	r1, [pc, #40]	; (8003f8c <HAL_RCC_ClockConfig+0x1c0>)
 8003f64:	5ccb      	ldrb	r3, [r1, r3]
 8003f66:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6a:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe f99c 	bl	80022b0 <HAL_InitTick>

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023c00 	.word	0x40023c00
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	0800cfbc 	.word	0x0800cfbc
 8003f90:	20000130 	.word	0x20000130
 8003f94:	20000134 	.word	0x20000134

08003f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f9c:	b090      	sub	sp, #64	; 0x40
 8003f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa8:	2300      	movs	r3, #0
 8003faa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fb0:	4b59      	ldr	r3, [pc, #356]	; (8004118 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d00d      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	f200 80a1 	bhi.w	8004104 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x34>
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fca:	e09b      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fcc:	4b53      	ldr	r3, [pc, #332]	; (800411c <HAL_RCC_GetSysClockFreq+0x184>)
 8003fce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fd0:	e09b      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fd2:	4b53      	ldr	r3, [pc, #332]	; (8004120 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fd6:	e098      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd8:	4b4f      	ldr	r3, [pc, #316]	; (8004118 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fe2:	4b4d      	ldr	r3, [pc, #308]	; (8004118 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d028      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fee:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	099b      	lsrs	r3, r3, #6
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	623b      	str	r3, [r7, #32]
 8003ff8:	627a      	str	r2, [r7, #36]	; 0x24
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004000:	2100      	movs	r1, #0
 8004002:	4b47      	ldr	r3, [pc, #284]	; (8004120 <HAL_RCC_GetSysClockFreq+0x188>)
 8004004:	fb03 f201 	mul.w	r2, r3, r1
 8004008:	2300      	movs	r3, #0
 800400a:	fb00 f303 	mul.w	r3, r0, r3
 800400e:	4413      	add	r3, r2
 8004010:	4a43      	ldr	r2, [pc, #268]	; (8004120 <HAL_RCC_GetSysClockFreq+0x188>)
 8004012:	fba0 1202 	umull	r1, r2, r0, r2
 8004016:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004018:	460a      	mov	r2, r1
 800401a:	62ba      	str	r2, [r7, #40]	; 0x28
 800401c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800401e:	4413      	add	r3, r2
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004024:	2200      	movs	r2, #0
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	61fa      	str	r2, [r7, #28]
 800402a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800402e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004032:	f7fc fe09 	bl	8000c48 <__aeabi_uldivmod>
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4613      	mov	r3, r2
 800403c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800403e:	e053      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004040:	4b35      	ldr	r3, [pc, #212]	; (8004118 <HAL_RCC_GetSysClockFreq+0x180>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	099b      	lsrs	r3, r3, #6
 8004046:	2200      	movs	r2, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	617a      	str	r2, [r7, #20]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004052:	f04f 0b00 	mov.w	fp, #0
 8004056:	4652      	mov	r2, sl
 8004058:	465b      	mov	r3, fp
 800405a:	f04f 0000 	mov.w	r0, #0
 800405e:	f04f 0100 	mov.w	r1, #0
 8004062:	0159      	lsls	r1, r3, #5
 8004064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004068:	0150      	lsls	r0, r2, #5
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	ebb2 080a 	subs.w	r8, r2, sl
 8004072:	eb63 090b 	sbc.w	r9, r3, fp
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004082:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004086:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800408a:	ebb2 0408 	subs.w	r4, r2, r8
 800408e:	eb63 0509 	sbc.w	r5, r3, r9
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	00eb      	lsls	r3, r5, #3
 800409c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040a0:	00e2      	lsls	r2, r4, #3
 80040a2:	4614      	mov	r4, r2
 80040a4:	461d      	mov	r5, r3
 80040a6:	eb14 030a 	adds.w	r3, r4, sl
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	eb45 030b 	adc.w	r3, r5, fp
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040be:	4629      	mov	r1, r5
 80040c0:	028b      	lsls	r3, r1, #10
 80040c2:	4621      	mov	r1, r4
 80040c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040c8:	4621      	mov	r1, r4
 80040ca:	028a      	lsls	r2, r1, #10
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d2:	2200      	movs	r2, #0
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	60fa      	str	r2, [r7, #12]
 80040d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040dc:	f7fc fdb4 	bl	8000c48 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4613      	mov	r3, r2
 80040e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	3301      	adds	r3, #1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80040f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004102:	e002      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <HAL_RCC_GetSysClockFreq+0x184>)
 8004106:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800410c:	4618      	mov	r0, r3
 800410e:	3740      	adds	r7, #64	; 0x40
 8004110:	46bd      	mov	sp, r7
 8004112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	00f42400 	.word	0x00f42400
 8004120:	017d7840 	.word	0x017d7840

08004124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <HAL_RCC_GetHCLKFreq+0x14>)
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000130 	.word	0x20000130

0800413c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004140:	f7ff fff0 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	0a9b      	lsrs	r3, r3, #10
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	4903      	ldr	r1, [pc, #12]	; (8004160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004158:	4618      	mov	r0, r3
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40023800 	.word	0x40023800
 8004160:	0800cfcc 	.word	0x0800cfcc

08004164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004168:	f7ff ffdc 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 800416c:	4602      	mov	r2, r0
 800416e:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	0b5b      	lsrs	r3, r3, #13
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	4903      	ldr	r1, [pc, #12]	; (8004188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40023800 	.word	0x40023800
 8004188:	0800cfcc 	.word	0x0800cfcc

0800418c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e07b      	b.n	8004296 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d108      	bne.n	80041b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ae:	d009      	beq.n	80041c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	61da      	str	r2, [r3, #28]
 80041b6:	e005      	b.n	80041c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fd fd32 	bl	8001c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	ea42 0103 	orr.w	r1, r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	f003 0104 	and.w	r1, r3, #4
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f003 0210 	and.w	r2, r3, #16
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004284:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b088      	sub	sp, #32
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_SPI_Transmit+0x22>
 80042bc:	2302      	movs	r3, #2
 80042be:	e126      	b.n	800450e <HAL_SPI_Transmit+0x270>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c8:	f7fe f836 	bl	8002338 <HAL_GetTick>
 80042cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d002      	beq.n	80042e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042de:	2302      	movs	r3, #2
 80042e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042e2:	e10b      	b.n	80044fc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_SPI_Transmit+0x52>
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042f4:	e102      	b.n	80044fc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2203      	movs	r2, #3
 80042fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433c:	d10f      	bne.n	800435e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800435c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d007      	beq.n	800437c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800437a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004384:	d14b      	bne.n	800441e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_SPI_Transmit+0xf6>
 800438e:	8afb      	ldrh	r3, [r7, #22]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d13e      	bne.n	8004412 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	881a      	ldrh	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	1c9a      	adds	r2, r3, #2
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043b8:	e02b      	b.n	8004412 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d112      	bne.n	80043ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	881a      	ldrh	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80043ec:	e011      	b.n	8004412 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ee:	f7fd ffa3 	bl	8002338 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d803      	bhi.n	8004406 <HAL_SPI_Transmit+0x168>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d102      	bne.n	800440c <HAL_SPI_Transmit+0x16e>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004410:	e074      	b.n	80044fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ce      	bne.n	80043ba <HAL_SPI_Transmit+0x11c>
 800441c:	e04c      	b.n	80044b8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_SPI_Transmit+0x18e>
 8004426:	8afb      	ldrh	r3, [r7, #22]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d140      	bne.n	80044ae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	7812      	ldrb	r2, [r2, #0]
 8004438:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004452:	e02c      	b.n	80044ae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b02      	cmp	r3, #2
 8004460:	d113      	bne.n	800448a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330c      	adds	r3, #12
 800446c:	7812      	ldrb	r2, [r2, #0]
 800446e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	86da      	strh	r2, [r3, #54]	; 0x36
 8004488:	e011      	b.n	80044ae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800448a:	f7fd ff55 	bl	8002338 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d803      	bhi.n	80044a2 <HAL_SPI_Transmit+0x204>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d102      	bne.n	80044a8 <HAL_SPI_Transmit+0x20a>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d102      	bne.n	80044ae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044ac:	e026      	b.n	80044fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1cd      	bne.n	8004454 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	6839      	ldr	r1, [r7, #0]
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 fbcb 	bl	8004c58 <SPI_EndRxTxTransaction>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10a      	bne.n	80044ec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e000      	b.n	80044fc <HAL_SPI_Transmit+0x25e>
  }

error:
 80044fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800450c:	7ffb      	ldrb	r3, [r7, #31]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b088      	sub	sp, #32
 800451a:	af02      	add	r7, sp, #8
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4613      	mov	r3, r2
 8004524:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004532:	d112      	bne.n	800455a <HAL_SPI_Receive+0x44>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10e      	bne.n	800455a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2204      	movs	r2, #4
 8004540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004544:	88fa      	ldrh	r2, [r7, #6]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	4613      	mov	r3, r2
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f8f1 	bl	8004738 <HAL_SPI_TransmitReceive>
 8004556:	4603      	mov	r3, r0
 8004558:	e0ea      	b.n	8004730 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_SPI_Receive+0x52>
 8004564:	2302      	movs	r3, #2
 8004566:	e0e3      	b.n	8004730 <HAL_SPI_Receive+0x21a>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004570:	f7fd fee2 	bl	8002338 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b01      	cmp	r3, #1
 8004580:	d002      	beq.n	8004588 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004582:	2302      	movs	r3, #2
 8004584:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004586:	e0ca      	b.n	800471e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_SPI_Receive+0x7e>
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d102      	bne.n	800459a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004598:	e0c1      	b.n	800471e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2204      	movs	r2, #4
 800459e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	88fa      	ldrh	r2, [r7, #6]
 80045b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	88fa      	ldrh	r2, [r7, #6]
 80045b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e0:	d10f      	bne.n	8004602 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004600:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d007      	beq.n	8004620 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d162      	bne.n	80046ee <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004628:	e02e      	b.n	8004688 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d115      	bne.n	8004664 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f103 020c 	add.w	r2, r3, #12
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	7812      	ldrb	r2, [r2, #0]
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004662:	e011      	b.n	8004688 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004664:	f7fd fe68 	bl	8002338 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d803      	bhi.n	800467c <HAL_SPI_Receive+0x166>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d102      	bne.n	8004682 <HAL_SPI_Receive+0x16c>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004686:	e04a      	b.n	800471e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1cb      	bne.n	800462a <HAL_SPI_Receive+0x114>
 8004692:	e031      	b.n	80046f8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d113      	bne.n	80046ca <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	b292      	uxth	r2, r2
 80046ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	1c9a      	adds	r2, r3, #2
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046c8:	e011      	b.n	80046ee <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ca:	f7fd fe35 	bl	8002338 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d803      	bhi.n	80046e2 <HAL_SPI_Receive+0x1cc>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d102      	bne.n	80046e8 <HAL_SPI_Receive+0x1d2>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046ec:	e017      	b.n	800471e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1cd      	bne.n	8004694 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	6839      	ldr	r1, [r7, #0]
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 fa45 	bl	8004b8c <SPI_EndRxTransaction>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2220      	movs	r2, #32
 800470c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
 800471a:	e000      	b.n	800471e <HAL_SPI_Receive+0x208>
  }

error :
 800471c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800472e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08c      	sub	sp, #48	; 0x30
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004746:	2301      	movs	r3, #1
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_SPI_TransmitReceive+0x26>
 800475a:	2302      	movs	r3, #2
 800475c:	e18a      	b.n	8004a74 <HAL_SPI_TransmitReceive+0x33c>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004766:	f7fd fde7 	bl	8002338 <HAL_GetTick>
 800476a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800477c:	887b      	ldrh	r3, [r7, #2]
 800477e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004784:	2b01      	cmp	r3, #1
 8004786:	d00f      	beq.n	80047a8 <HAL_SPI_TransmitReceive+0x70>
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800478e:	d107      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d103      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x68>
 8004798:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800479c:	2b04      	cmp	r3, #4
 800479e:	d003      	beq.n	80047a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047a6:	e15b      	b.n	8004a60 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <HAL_SPI_TransmitReceive+0x82>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <HAL_SPI_TransmitReceive+0x82>
 80047b4:	887b      	ldrh	r3, [r7, #2]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047c0:	e14e      	b.n	8004a60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d003      	beq.n	80047d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2205      	movs	r2, #5
 80047d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	887a      	ldrh	r2, [r7, #2]
 80047e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	887a      	ldrh	r2, [r7, #2]
 80047ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	887a      	ldrh	r2, [r7, #2]
 80047f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	887a      	ldrh	r2, [r7, #2]
 80047fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d007      	beq.n	800482a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004828:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004832:	d178      	bne.n	8004926 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_SPI_TransmitReceive+0x10a>
 800483c:	8b7b      	ldrh	r3, [r7, #26]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d166      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	881a      	ldrh	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	1c9a      	adds	r2, r3, #2
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004866:	e053      	b.n	8004910 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b02      	cmp	r3, #2
 8004874:	d11b      	bne.n	80048ae <HAL_SPI_TransmitReceive+0x176>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d016      	beq.n	80048ae <HAL_SPI_TransmitReceive+0x176>
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d113      	bne.n	80048ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	881a      	ldrh	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	1c9a      	adds	r2, r3, #2
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d119      	bne.n	80048f0 <HAL_SPI_TransmitReceive+0x1b8>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d014      	beq.n	80048f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	b292      	uxth	r2, r2
 80048d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	1c9a      	adds	r2, r3, #2
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048ec:	2301      	movs	r3, #1
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048f0:	f7fd fd22 	bl	8002338 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d807      	bhi.n	8004910 <HAL_SPI_TransmitReceive+0x1d8>
 8004900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d003      	beq.n	8004910 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800490e:	e0a7      	b.n	8004a60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1a6      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x130>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1a1      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x130>
 8004924:	e07c      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_SPI_TransmitReceive+0x1fc>
 800492e:	8b7b      	ldrh	r3, [r7, #26]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d16b      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800495a:	e057      	b.n	8004a0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b02      	cmp	r3, #2
 8004968:	d11c      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x26c>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d017      	beq.n	80049a4 <HAL_SPI_TransmitReceive+0x26c>
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	2b01      	cmp	r3, #1
 8004978:	d114      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d119      	bne.n	80049e6 <HAL_SPI_TransmitReceive+0x2ae>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d014      	beq.n	80049e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049e2:	2301      	movs	r3, #1
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049e6:	f7fd fca7 	bl	8002338 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d803      	bhi.n	80049fe <HAL_SPI_TransmitReceive+0x2c6>
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fc:	d102      	bne.n	8004a04 <HAL_SPI_TransmitReceive+0x2cc>
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d103      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a0a:	e029      	b.n	8004a60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1a2      	bne.n	800495c <HAL_SPI_TransmitReceive+0x224>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d19d      	bne.n	800495c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f917 	bl	8004c58 <SPI_EndRxTxTransaction>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d006      	beq.n	8004a3e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a3c:	e010      	b.n	8004a60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10b      	bne.n	8004a5e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	e000      	b.n	8004a60 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3730      	adds	r7, #48	; 0x30
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a8c:	f7fd fc54 	bl	8002338 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	4413      	add	r3, r2
 8004a9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a9c:	f7fd fc4c 	bl	8002338 <HAL_GetTick>
 8004aa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aa2:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	015b      	lsls	r3, r3, #5
 8004aa8:	0d1b      	lsrs	r3, r3, #20
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	fb02 f303 	mul.w	r3, r2, r3
 8004ab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab2:	e054      	b.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d050      	beq.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004abc:	f7fd fc3c 	bl	8002338 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d902      	bls.n	8004ad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d13d      	bne.n	8004b4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aea:	d111      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af4:	d004      	beq.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afe:	d107      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b18:	d10f      	bne.n	8004b3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e017      	b.n	8004b7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4013      	ands	r3, r2
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d19b      	bne.n	8004ab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000130 	.word	0x20000130

08004b8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba0:	d111      	bne.n	8004bc6 <SPI_EndRxTransaction+0x3a>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004baa:	d004      	beq.n	8004bb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb4:	d107      	bne.n	8004bc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bce:	d12a      	bne.n	8004c26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd8:	d012      	beq.n	8004c00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2180      	movs	r1, #128	; 0x80
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7ff ff49 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d02d      	beq.n	8004c4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e026      	b.n	8004c4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2200      	movs	r2, #0
 8004c08:	2101      	movs	r1, #1
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff ff36 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d01a      	beq.n	8004c4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1a:	f043 0220 	orr.w	r2, r3, #32
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e013      	b.n	8004c4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2101      	movs	r1, #1
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7ff ff23 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	f043 0220 	orr.w	r2, r3, #32
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e000      	b.n	8004c4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c64:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <SPI_EndRxTxTransaction+0x7c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <SPI_EndRxTxTransaction+0x80>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	0d5b      	lsrs	r3, r3, #21
 8004c70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c74:	fb02 f303 	mul.w	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c82:	d112      	bne.n	8004caa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2180      	movs	r1, #128	; 0x80
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f7ff fef4 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d016      	beq.n	8004cc8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9e:	f043 0220 	orr.w	r2, r3, #32
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e00f      	b.n	8004cca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc0:	2b80      	cmp	r3, #128	; 0x80
 8004cc2:	d0f2      	beq.n	8004caa <SPI_EndRxTxTransaction+0x52>
 8004cc4:	e000      	b.n	8004cc8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004cc6:	bf00      	nop
  }

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000130 	.word	0x20000130
 8004cd8:	165e9f81 	.word	0x165e9f81

08004cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e041      	b.n	8004d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fd f9a0 	bl	8002048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 fc7a 	bl	8005614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d001      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e04e      	b.n	8004e32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a23      	ldr	r2, [pc, #140]	; (8004e40 <HAL_TIM_Base_Start_IT+0xc4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d022      	beq.n	8004dfc <HAL_TIM_Base_Start_IT+0x80>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbe:	d01d      	beq.n	8004dfc <HAL_TIM_Base_Start_IT+0x80>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1f      	ldr	r2, [pc, #124]	; (8004e44 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d018      	beq.n	8004dfc <HAL_TIM_Base_Start_IT+0x80>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1e      	ldr	r2, [pc, #120]	; (8004e48 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <HAL_TIM_Base_Start_IT+0x80>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1c      	ldr	r2, [pc, #112]	; (8004e4c <HAL_TIM_Base_Start_IT+0xd0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00e      	beq.n	8004dfc <HAL_TIM_Base_Start_IT+0x80>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1b      	ldr	r2, [pc, #108]	; (8004e50 <HAL_TIM_Base_Start_IT+0xd4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d009      	beq.n	8004dfc <HAL_TIM_Base_Start_IT+0x80>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a19      	ldr	r2, [pc, #100]	; (8004e54 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_TIM_Base_Start_IT+0x80>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a18      	ldr	r2, [pc, #96]	; (8004e58 <HAL_TIM_Base_Start_IT+0xdc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d111      	bne.n	8004e20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b06      	cmp	r3, #6
 8004e0c:	d010      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0201 	orr.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1e:	e007      	b.n	8004e30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0201 	orr.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40010400 	.word	0x40010400
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40001800 	.word	0x40001800

08004e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e041      	b.n	8004ef2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f839 	bl	8004efa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3304      	adds	r3, #4
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	f000 fbba 	bl	8005614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
	...

08004f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d109      	bne.n	8004f34 <HAL_TIM_PWM_Start+0x24>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	bf14      	ite	ne
 8004f2c:	2301      	movne	r3, #1
 8004f2e:	2300      	moveq	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	e022      	b.n	8004f7a <HAL_TIM_PWM_Start+0x6a>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d109      	bne.n	8004f4e <HAL_TIM_PWM_Start+0x3e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	bf14      	ite	ne
 8004f46:	2301      	movne	r3, #1
 8004f48:	2300      	moveq	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	e015      	b.n	8004f7a <HAL_TIM_PWM_Start+0x6a>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d109      	bne.n	8004f68 <HAL_TIM_PWM_Start+0x58>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	e008      	b.n	8004f7a <HAL_TIM_PWM_Start+0x6a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e07c      	b.n	800507c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <HAL_TIM_PWM_Start+0x82>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f90:	e013      	b.n	8004fba <HAL_TIM_PWM_Start+0xaa>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0x92>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa0:	e00b      	b.n	8004fba <HAL_TIM_PWM_Start+0xaa>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d104      	bne.n	8004fb2 <HAL_TIM_PWM_Start+0xa2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb0:	e003      	b.n	8004fba <HAL_TIM_PWM_Start+0xaa>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fe10 	bl	8005be8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2d      	ldr	r2, [pc, #180]	; (8005084 <HAL_TIM_PWM_Start+0x174>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_TIM_PWM_Start+0xcc>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2c      	ldr	r2, [pc, #176]	; (8005088 <HAL_TIM_PWM_Start+0x178>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d101      	bne.n	8004fe0 <HAL_TIM_PWM_Start+0xd0>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xd2>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a22      	ldr	r2, [pc, #136]	; (8005084 <HAL_TIM_PWM_Start+0x174>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d022      	beq.n	8005046 <HAL_TIM_PWM_Start+0x136>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005008:	d01d      	beq.n	8005046 <HAL_TIM_PWM_Start+0x136>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1f      	ldr	r2, [pc, #124]	; (800508c <HAL_TIM_PWM_Start+0x17c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d018      	beq.n	8005046 <HAL_TIM_PWM_Start+0x136>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <HAL_TIM_PWM_Start+0x180>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_TIM_PWM_Start+0x136>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1c      	ldr	r2, [pc, #112]	; (8005094 <HAL_TIM_PWM_Start+0x184>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00e      	beq.n	8005046 <HAL_TIM_PWM_Start+0x136>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a16      	ldr	r2, [pc, #88]	; (8005088 <HAL_TIM_PWM_Start+0x178>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_TIM_PWM_Start+0x136>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a18      	ldr	r2, [pc, #96]	; (8005098 <HAL_TIM_PWM_Start+0x188>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_TIM_PWM_Start+0x136>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a16      	ldr	r2, [pc, #88]	; (800509c <HAL_TIM_PWM_Start+0x18c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d111      	bne.n	800506a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b06      	cmp	r3, #6
 8005056:	d010      	beq.n	800507a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005068:	e007      	b.n	800507a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40014000 	.word	0x40014000
 800509c:	40001800 	.word	0x40001800

080050a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d122      	bne.n	80050fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d11b      	bne.n	80050fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0202 	mvn.w	r2, #2
 80050cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fa77 	bl	80055d6 <HAL_TIM_IC_CaptureCallback>
 80050e8:	e005      	b.n	80050f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fa69 	bl	80055c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fa7a 	bl	80055ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b04      	cmp	r3, #4
 8005108:	d122      	bne.n	8005150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b04      	cmp	r3, #4
 8005116:	d11b      	bne.n	8005150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0204 	mvn.w	r2, #4
 8005120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fa4d 	bl	80055d6 <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fa3f 	bl	80055c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fa50 	bl	80055ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b08      	cmp	r3, #8
 800515c:	d122      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b08      	cmp	r3, #8
 800516a:	d11b      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0208 	mvn.w	r2, #8
 8005174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2204      	movs	r2, #4
 800517a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fa23 	bl	80055d6 <HAL_TIM_IC_CaptureCallback>
 8005190:	e005      	b.n	800519e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fa15 	bl	80055c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fa26 	bl	80055ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d122      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d11b      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0210 	mvn.w	r2, #16
 80051c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2208      	movs	r2, #8
 80051ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f9f9 	bl	80055d6 <HAL_TIM_IC_CaptureCallback>
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f9eb 	bl	80055c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f9fc 	bl	80055ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b01      	cmp	r3, #1
 8005204:	d10e      	bne.n	8005224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b01      	cmp	r3, #1
 8005212:	d107      	bne.n	8005224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0201 	mvn.w	r2, #1
 800521c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fc f906 	bl	8001430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	d10e      	bne.n	8005250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523c:	2b80      	cmp	r3, #128	; 0x80
 800523e:	d107      	bne.n	8005250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fdca 	bl	8005de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d10e      	bne.n	800527c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d107      	bne.n	800527c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9c1 	bl	80055fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b20      	cmp	r3, #32
 8005288:	d10e      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b20      	cmp	r3, #32
 8005296:	d107      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0220 	mvn.w	r2, #32
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fd94 	bl	8005dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e0ae      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b0c      	cmp	r3, #12
 80052da:	f200 809f 	bhi.w	800541c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	08005319 	.word	0x08005319
 80052e8:	0800541d 	.word	0x0800541d
 80052ec:	0800541d 	.word	0x0800541d
 80052f0:	0800541d 	.word	0x0800541d
 80052f4:	08005359 	.word	0x08005359
 80052f8:	0800541d 	.word	0x0800541d
 80052fc:	0800541d 	.word	0x0800541d
 8005300:	0800541d 	.word	0x0800541d
 8005304:	0800539b 	.word	0x0800539b
 8005308:	0800541d 	.word	0x0800541d
 800530c:	0800541d 	.word	0x0800541d
 8005310:	0800541d 	.word	0x0800541d
 8005314:	080053db 	.word	0x080053db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fa18 	bl	8005754 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0208 	orr.w	r2, r2, #8
 8005332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0204 	bic.w	r2, r2, #4
 8005342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6999      	ldr	r1, [r3, #24]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	691a      	ldr	r2, [r3, #16]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	619a      	str	r2, [r3, #24]
      break;
 8005356:	e064      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fa68 	bl	8005834 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6999      	ldr	r1, [r3, #24]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	021a      	lsls	r2, r3, #8
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	619a      	str	r2, [r3, #24]
      break;
 8005398:	e043      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68b9      	ldr	r1, [r7, #8]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fabd 	bl	8005920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0208 	orr.w	r2, r2, #8
 80053b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0204 	bic.w	r2, r2, #4
 80053c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69d9      	ldr	r1, [r3, #28]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	61da      	str	r2, [r3, #28]
      break;
 80053d8:	e023      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fb11 	bl	8005a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69d9      	ldr	r1, [r3, #28]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	021a      	lsls	r2, r3, #8
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	61da      	str	r2, [r3, #28]
      break;
 800541a:	e002      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	75fb      	strb	r3, [r7, #23]
      break;
 8005420:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800542a:	7dfb      	ldrb	r3, [r7, #23]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIM_ConfigClockSource+0x1c>
 800544c:	2302      	movs	r3, #2
 800544e:	e0b4      	b.n	80055ba <HAL_TIM_ConfigClockSource+0x186>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800546e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005488:	d03e      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0xd4>
 800548a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548e:	f200 8087 	bhi.w	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005496:	f000 8086 	beq.w	80055a6 <HAL_TIM_ConfigClockSource+0x172>
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549e:	d87f      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054a0:	2b70      	cmp	r3, #112	; 0x70
 80054a2:	d01a      	beq.n	80054da <HAL_TIM_ConfigClockSource+0xa6>
 80054a4:	2b70      	cmp	r3, #112	; 0x70
 80054a6:	d87b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054a8:	2b60      	cmp	r3, #96	; 0x60
 80054aa:	d050      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x11a>
 80054ac:	2b60      	cmp	r3, #96	; 0x60
 80054ae:	d877      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b0:	2b50      	cmp	r3, #80	; 0x50
 80054b2:	d03c      	beq.n	800552e <HAL_TIM_ConfigClockSource+0xfa>
 80054b4:	2b50      	cmp	r3, #80	; 0x50
 80054b6:	d873      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d058      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x13a>
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d86f      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c0:	2b30      	cmp	r3, #48	; 0x30
 80054c2:	d064      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054c4:	2b30      	cmp	r3, #48	; 0x30
 80054c6:	d86b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d060      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d867      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d05c      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d05a      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054d8:	e062      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6899      	ldr	r1, [r3, #8]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f000 fb5d 	bl	8005ba8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	609a      	str	r2, [r3, #8]
      break;
 8005506:	e04f      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6899      	ldr	r1, [r3, #8]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f000 fb46 	bl	8005ba8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800552a:	609a      	str	r2, [r3, #8]
      break;
 800552c:	e03c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	461a      	mov	r2, r3
 800553c:	f000 faba 	bl	8005ab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2150      	movs	r1, #80	; 0x50
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fb13 	bl	8005b72 <TIM_ITRx_SetConfig>
      break;
 800554c:	e02c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6859      	ldr	r1, [r3, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	461a      	mov	r2, r3
 800555c:	f000 fad9 	bl	8005b12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2160      	movs	r1, #96	; 0x60
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fb03 	bl	8005b72 <TIM_ITRx_SetConfig>
      break;
 800556c:	e01c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	461a      	mov	r2, r3
 800557c:	f000 fa9a 	bl	8005ab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2140      	movs	r1, #64	; 0x40
 8005586:	4618      	mov	r0, r3
 8005588:	f000 faf3 	bl	8005b72 <TIM_ITRx_SetConfig>
      break;
 800558c:	e00c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f000 faea 	bl	8005b72 <TIM_ITRx_SetConfig>
      break;
 800559e:	e003      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
      break;
 80055a4:	e000      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a40      	ldr	r2, [pc, #256]	; (8005728 <TIM_Base_SetConfig+0x114>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005632:	d00f      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a3d      	ldr	r2, [pc, #244]	; (800572c <TIM_Base_SetConfig+0x118>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00b      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a3c      	ldr	r2, [pc, #240]	; (8005730 <TIM_Base_SetConfig+0x11c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d007      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a3b      	ldr	r2, [pc, #236]	; (8005734 <TIM_Base_SetConfig+0x120>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a3a      	ldr	r2, [pc, #232]	; (8005738 <TIM_Base_SetConfig+0x124>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d108      	bne.n	8005666 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a2f      	ldr	r2, [pc, #188]	; (8005728 <TIM_Base_SetConfig+0x114>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d02b      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005674:	d027      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2c      	ldr	r2, [pc, #176]	; (800572c <TIM_Base_SetConfig+0x118>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d023      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a2b      	ldr	r2, [pc, #172]	; (8005730 <TIM_Base_SetConfig+0x11c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01f      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <TIM_Base_SetConfig+0x120>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d01b      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a29      	ldr	r2, [pc, #164]	; (8005738 <TIM_Base_SetConfig+0x124>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d017      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a28      	ldr	r2, [pc, #160]	; (800573c <TIM_Base_SetConfig+0x128>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a27      	ldr	r2, [pc, #156]	; (8005740 <TIM_Base_SetConfig+0x12c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00f      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a26      	ldr	r2, [pc, #152]	; (8005744 <TIM_Base_SetConfig+0x130>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00b      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a25      	ldr	r2, [pc, #148]	; (8005748 <TIM_Base_SetConfig+0x134>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d007      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a24      	ldr	r2, [pc, #144]	; (800574c <TIM_Base_SetConfig+0x138>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a23      	ldr	r2, [pc, #140]	; (8005750 <TIM_Base_SetConfig+0x13c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d108      	bne.n	80056d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a0a      	ldr	r2, [pc, #40]	; (8005728 <TIM_Base_SetConfig+0x114>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0xf8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a0c      	ldr	r2, [pc, #48]	; (8005738 <TIM_Base_SetConfig+0x124>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d103      	bne.n	8005714 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	615a      	str	r2, [r3, #20]
}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40010000 	.word	0x40010000
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40000c00 	.word	0x40000c00
 8005738:	40010400 	.word	0x40010400
 800573c:	40014000 	.word	0x40014000
 8005740:	40014400 	.word	0x40014400
 8005744:	40014800 	.word	0x40014800
 8005748:	40001800 	.word	0x40001800
 800574c:	40001c00 	.word	0x40001c00
 8005750:	40002000 	.word	0x40002000

08005754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f023 0201 	bic.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 0302 	bic.w	r3, r3, #2
 800579c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a20      	ldr	r2, [pc, #128]	; (800582c <TIM_OC1_SetConfig+0xd8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC1_SetConfig+0x64>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a1f      	ldr	r2, [pc, #124]	; (8005830 <TIM_OC1_SetConfig+0xdc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d10c      	bne.n	80057d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 0308 	bic.w	r3, r3, #8
 80057be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 0304 	bic.w	r3, r3, #4
 80057d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a15      	ldr	r2, [pc, #84]	; (800582c <TIM_OC1_SetConfig+0xd8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_OC1_SetConfig+0x8e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a14      	ldr	r2, [pc, #80]	; (8005830 <TIM_OC1_SetConfig+0xdc>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d111      	bne.n	8005806 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	621a      	str	r2, [r3, #32]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	40010000 	.word	0x40010000
 8005830:	40010400 	.word	0x40010400

08005834 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 0210 	bic.w	r2, r3, #16
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0320 	bic.w	r3, r3, #32
 800587e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a22      	ldr	r2, [pc, #136]	; (8005918 <TIM_OC2_SetConfig+0xe4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_OC2_SetConfig+0x68>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a21      	ldr	r2, [pc, #132]	; (800591c <TIM_OC2_SetConfig+0xe8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10d      	bne.n	80058b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a17      	ldr	r2, [pc, #92]	; (8005918 <TIM_OC2_SetConfig+0xe4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_OC2_SetConfig+0x94>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a16      	ldr	r2, [pc, #88]	; (800591c <TIM_OC2_SetConfig+0xe8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d113      	bne.n	80058f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	621a      	str	r2, [r3, #32]
}
 800590a:	bf00      	nop
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40010000 	.word	0x40010000
 800591c:	40010400 	.word	0x40010400

08005920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0303 	bic.w	r3, r3, #3
 8005956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a21      	ldr	r2, [pc, #132]	; (8005a00 <TIM_OC3_SetConfig+0xe0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_OC3_SetConfig+0x66>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a20      	ldr	r2, [pc, #128]	; (8005a04 <TIM_OC3_SetConfig+0xe4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10d      	bne.n	80059a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800598c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <TIM_OC3_SetConfig+0xe0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d003      	beq.n	80059b2 <TIM_OC3_SetConfig+0x92>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <TIM_OC3_SetConfig+0xe4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d113      	bne.n	80059da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40010000 	.word	0x40010000
 8005a04:	40010400 	.word	0x40010400

08005a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	031b      	lsls	r3, r3, #12
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a12      	ldr	r2, [pc, #72]	; (8005aac <TIM_OC4_SetConfig+0xa4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_OC4_SetConfig+0x68>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a11      	ldr	r2, [pc, #68]	; (8005ab0 <TIM_OC4_SetConfig+0xa8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d109      	bne.n	8005a84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	019b      	lsls	r3, r3, #6
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	621a      	str	r2, [r3, #32]
}
 8005a9e:	bf00      	nop
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40010400 	.word	0x40010400

08005ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f023 0201 	bic.w	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 030a 	bic.w	r3, r3, #10
 8005af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b087      	sub	sp, #28
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f023 0210 	bic.w	r2, r3, #16
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	031b      	lsls	r3, r3, #12
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	621a      	str	r2, [r3, #32]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f043 0307 	orr.w	r3, r3, #7
 8005b94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	609a      	str	r2, [r3, #8]
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	021a      	lsls	r2, r3, #8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	609a      	str	r2, [r3, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a1a      	ldr	r2, [r3, #32]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	401a      	ands	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a1a      	ldr	r2, [r3, #32]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 031f 	and.w	r3, r3, #31
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c20:	431a      	orrs	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e05a      	b.n	8005d02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a21      	ldr	r2, [pc, #132]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d022      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c98:	d01d      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d018      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d013      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1a      	ldr	r2, [pc, #104]	; (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00e      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d009      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a17      	ldr	r2, [pc, #92]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d004      	beq.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d10c      	bne.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40000400 	.word	0x40000400
 8005d18:	40000800 	.word	0x40000800
 8005d1c:	40000c00 	.word	0x40000c00
 8005d20:	40010400 	.word	0x40010400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40001800 	.word	0x40001800

08005d2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e03d      	b.n	8005dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e03f      	b.n	8005e8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fc f9b2 	bl	8002188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2224      	movs	r2, #36	; 0x24
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f929 	bl	8006094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695a      	ldr	r2, [r3, #20]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b08a      	sub	sp, #40	; 0x28
 8005e96:	af02      	add	r7, sp, #8
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	603b      	str	r3, [r7, #0]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d17c      	bne.n	8005fac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <HAL_UART_Transmit+0x2c>
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e075      	b.n	8005fae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_UART_Transmit+0x3e>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e06e      	b.n	8005fae <HAL_UART_Transmit+0x11c>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2221      	movs	r2, #33	; 0x21
 8005ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ee6:	f7fc fa27 	bl	8002338 <HAL_GetTick>
 8005eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	88fa      	ldrh	r2, [r7, #6]
 8005ef0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	d108      	bne.n	8005f14 <HAL_UART_Transmit+0x82>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	e003      	b.n	8005f1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f24:	e02a      	b.n	8005f7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2180      	movs	r1, #128	; 0x80
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f840 	bl	8005fb6 <UART_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e036      	b.n	8005fae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	3302      	adds	r3, #2
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e007      	b.n	8005f6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1cf      	bne.n	8005f26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2140      	movs	r1, #64	; 0x40
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f810 	bl	8005fb6 <UART_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e006      	b.n	8005fae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e000      	b.n	8005fae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005fac:	2302      	movs	r3, #2
  }
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b090      	sub	sp, #64	; 0x40
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc6:	e050      	b.n	800606a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d04c      	beq.n	800606a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d007      	beq.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fd6:	f7fc f9af 	bl	8002338 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d241      	bcs.n	800606a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	330c      	adds	r3, #12
 8005fec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006006:	637a      	str	r2, [r7, #52]	; 0x34
 8006008:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800600c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e5      	bne.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3314      	adds	r3, #20
 8006020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	613b      	str	r3, [r7, #16]
   return(result);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f023 0301 	bic.w	r3, r3, #1
 8006030:	63bb      	str	r3, [r7, #56]	; 0x38
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3314      	adds	r3, #20
 8006038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800603a:	623a      	str	r2, [r7, #32]
 800603c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	69f9      	ldr	r1, [r7, #28]
 8006040:	6a3a      	ldr	r2, [r7, #32]
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	61bb      	str	r3, [r7, #24]
   return(result);
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e5      	bne.n	800601a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e00f      	b.n	800608a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4013      	ands	r3, r2
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	429a      	cmp	r2, r3
 8006078:	bf0c      	ite	eq
 800607a:	2301      	moveq	r3, #1
 800607c:	2300      	movne	r3, #0
 800607e:	b2db      	uxtb	r3, r3
 8006080:	461a      	mov	r2, r3
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	429a      	cmp	r2, r3
 8006086:	d09f      	beq.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3740      	adds	r7, #64	; 0x40
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006098:	b0c0      	sub	sp, #256	; 0x100
 800609a:	af00      	add	r7, sp, #0
 800609c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	68d9      	ldr	r1, [r3, #12]
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	ea40 0301 	orr.w	r3, r0, r1
 80060bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060ec:	f021 010c 	bic.w	r1, r1, #12
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060fa:	430b      	orrs	r3, r1
 80060fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800610a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610e:	6999      	ldr	r1, [r3, #24]
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	ea40 0301 	orr.w	r3, r0, r1
 800611a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b8f      	ldr	r3, [pc, #572]	; (8006360 <UART_SetConfig+0x2cc>)
 8006124:	429a      	cmp	r2, r3
 8006126:	d005      	beq.n	8006134 <UART_SetConfig+0xa0>
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b8d      	ldr	r3, [pc, #564]	; (8006364 <UART_SetConfig+0x2d0>)
 8006130:	429a      	cmp	r2, r3
 8006132:	d104      	bne.n	800613e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006134:	f7fe f816 	bl	8004164 <HAL_RCC_GetPCLK2Freq>
 8006138:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800613c:	e003      	b.n	8006146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800613e:	f7fd fffd 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 8006142:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006150:	f040 810c 	bne.w	800636c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006158:	2200      	movs	r2, #0
 800615a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800615e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006166:	4622      	mov	r2, r4
 8006168:	462b      	mov	r3, r5
 800616a:	1891      	adds	r1, r2, r2
 800616c:	65b9      	str	r1, [r7, #88]	; 0x58
 800616e:	415b      	adcs	r3, r3
 8006170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006176:	4621      	mov	r1, r4
 8006178:	eb12 0801 	adds.w	r8, r2, r1
 800617c:	4629      	mov	r1, r5
 800617e:	eb43 0901 	adc.w	r9, r3, r1
 8006182:	f04f 0200 	mov.w	r2, #0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800618e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006196:	4690      	mov	r8, r2
 8006198:	4699      	mov	r9, r3
 800619a:	4623      	mov	r3, r4
 800619c:	eb18 0303 	adds.w	r3, r8, r3
 80061a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061a4:	462b      	mov	r3, r5
 80061a6:	eb49 0303 	adc.w	r3, r9, r3
 80061aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80061be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80061c2:	460b      	mov	r3, r1
 80061c4:	18db      	adds	r3, r3, r3
 80061c6:	653b      	str	r3, [r7, #80]	; 0x50
 80061c8:	4613      	mov	r3, r2
 80061ca:	eb42 0303 	adc.w	r3, r2, r3
 80061ce:	657b      	str	r3, [r7, #84]	; 0x54
 80061d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061d8:	f7fa fd36 	bl	8000c48 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4b61      	ldr	r3, [pc, #388]	; (8006368 <UART_SetConfig+0x2d4>)
 80061e2:	fba3 2302 	umull	r2, r3, r3, r2
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	011c      	lsls	r4, r3, #4
 80061ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061fc:	4642      	mov	r2, r8
 80061fe:	464b      	mov	r3, r9
 8006200:	1891      	adds	r1, r2, r2
 8006202:	64b9      	str	r1, [r7, #72]	; 0x48
 8006204:	415b      	adcs	r3, r3
 8006206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800620c:	4641      	mov	r1, r8
 800620e:	eb12 0a01 	adds.w	sl, r2, r1
 8006212:	4649      	mov	r1, r9
 8006214:	eb43 0b01 	adc.w	fp, r3, r1
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800622c:	4692      	mov	sl, r2
 800622e:	469b      	mov	fp, r3
 8006230:	4643      	mov	r3, r8
 8006232:	eb1a 0303 	adds.w	r3, sl, r3
 8006236:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800623a:	464b      	mov	r3, r9
 800623c:	eb4b 0303 	adc.w	r3, fp, r3
 8006240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006250:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006258:	460b      	mov	r3, r1
 800625a:	18db      	adds	r3, r3, r3
 800625c:	643b      	str	r3, [r7, #64]	; 0x40
 800625e:	4613      	mov	r3, r2
 8006260:	eb42 0303 	adc.w	r3, r2, r3
 8006264:	647b      	str	r3, [r7, #68]	; 0x44
 8006266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800626a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800626e:	f7fa fceb 	bl	8000c48 <__aeabi_uldivmod>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4611      	mov	r1, r2
 8006278:	4b3b      	ldr	r3, [pc, #236]	; (8006368 <UART_SetConfig+0x2d4>)
 800627a:	fba3 2301 	umull	r2, r3, r3, r1
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	2264      	movs	r2, #100	; 0x64
 8006282:	fb02 f303 	mul.w	r3, r2, r3
 8006286:	1acb      	subs	r3, r1, r3
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800628e:	4b36      	ldr	r3, [pc, #216]	; (8006368 <UART_SetConfig+0x2d4>)
 8006290:	fba3 2302 	umull	r2, r3, r3, r2
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800629c:	441c      	add	r4, r3
 800629e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	1891      	adds	r1, r2, r2
 80062b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80062b8:	415b      	adcs	r3, r3
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062c0:	4641      	mov	r1, r8
 80062c2:	1851      	adds	r1, r2, r1
 80062c4:	6339      	str	r1, [r7, #48]	; 0x30
 80062c6:	4649      	mov	r1, r9
 80062c8:	414b      	adcs	r3, r1
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062d8:	4659      	mov	r1, fp
 80062da:	00cb      	lsls	r3, r1, #3
 80062dc:	4651      	mov	r1, sl
 80062de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062e2:	4651      	mov	r1, sl
 80062e4:	00ca      	lsls	r2, r1, #3
 80062e6:	4610      	mov	r0, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	4642      	mov	r2, r8
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062f4:	464b      	mov	r3, r9
 80062f6:	460a      	mov	r2, r1
 80062f8:	eb42 0303 	adc.w	r3, r2, r3
 80062fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800630c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006314:	460b      	mov	r3, r1
 8006316:	18db      	adds	r3, r3, r3
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28
 800631a:	4613      	mov	r3, r2
 800631c:	eb42 0303 	adc.w	r3, r2, r3
 8006320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800632a:	f7fa fc8d 	bl	8000c48 <__aeabi_uldivmod>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4b0d      	ldr	r3, [pc, #52]	; (8006368 <UART_SetConfig+0x2d4>)
 8006334:	fba3 1302 	umull	r1, r3, r3, r2
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	2164      	movs	r1, #100	; 0x64
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	3332      	adds	r3, #50	; 0x32
 8006346:	4a08      	ldr	r2, [pc, #32]	; (8006368 <UART_SetConfig+0x2d4>)
 8006348:	fba2 2303 	umull	r2, r3, r2, r3
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	f003 0207 	and.w	r2, r3, #7
 8006352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4422      	add	r2, r4
 800635a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800635c:	e105      	b.n	800656a <UART_SetConfig+0x4d6>
 800635e:	bf00      	nop
 8006360:	40011000 	.word	0x40011000
 8006364:	40011400 	.word	0x40011400
 8006368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800636c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006370:	2200      	movs	r2, #0
 8006372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006376:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800637a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800637e:	4642      	mov	r2, r8
 8006380:	464b      	mov	r3, r9
 8006382:	1891      	adds	r1, r2, r2
 8006384:	6239      	str	r1, [r7, #32]
 8006386:	415b      	adcs	r3, r3
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
 800638a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800638e:	4641      	mov	r1, r8
 8006390:	1854      	adds	r4, r2, r1
 8006392:	4649      	mov	r1, r9
 8006394:	eb43 0501 	adc.w	r5, r3, r1
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	00eb      	lsls	r3, r5, #3
 80063a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063a6:	00e2      	lsls	r2, r4, #3
 80063a8:	4614      	mov	r4, r2
 80063aa:	461d      	mov	r5, r3
 80063ac:	4643      	mov	r3, r8
 80063ae:	18e3      	adds	r3, r4, r3
 80063b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063b4:	464b      	mov	r3, r9
 80063b6:	eb45 0303 	adc.w	r3, r5, r3
 80063ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063da:	4629      	mov	r1, r5
 80063dc:	008b      	lsls	r3, r1, #2
 80063de:	4621      	mov	r1, r4
 80063e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063e4:	4621      	mov	r1, r4
 80063e6:	008a      	lsls	r2, r1, #2
 80063e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063ec:	f7fa fc2c 	bl	8000c48 <__aeabi_uldivmod>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4b60      	ldr	r3, [pc, #384]	; (8006578 <UART_SetConfig+0x4e4>)
 80063f6:	fba3 2302 	umull	r2, r3, r3, r2
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	011c      	lsls	r4, r3, #4
 80063fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006402:	2200      	movs	r2, #0
 8006404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006408:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800640c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006410:	4642      	mov	r2, r8
 8006412:	464b      	mov	r3, r9
 8006414:	1891      	adds	r1, r2, r2
 8006416:	61b9      	str	r1, [r7, #24]
 8006418:	415b      	adcs	r3, r3
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006420:	4641      	mov	r1, r8
 8006422:	1851      	adds	r1, r2, r1
 8006424:	6139      	str	r1, [r7, #16]
 8006426:	4649      	mov	r1, r9
 8006428:	414b      	adcs	r3, r1
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006438:	4659      	mov	r1, fp
 800643a:	00cb      	lsls	r3, r1, #3
 800643c:	4651      	mov	r1, sl
 800643e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006442:	4651      	mov	r1, sl
 8006444:	00ca      	lsls	r2, r1, #3
 8006446:	4610      	mov	r0, r2
 8006448:	4619      	mov	r1, r3
 800644a:	4603      	mov	r3, r0
 800644c:	4642      	mov	r2, r8
 800644e:	189b      	adds	r3, r3, r2
 8006450:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006454:	464b      	mov	r3, r9
 8006456:	460a      	mov	r2, r1
 8006458:	eb42 0303 	adc.w	r3, r2, r3
 800645c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	67bb      	str	r3, [r7, #120]	; 0x78
 800646a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006478:	4649      	mov	r1, r9
 800647a:	008b      	lsls	r3, r1, #2
 800647c:	4641      	mov	r1, r8
 800647e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006482:	4641      	mov	r1, r8
 8006484:	008a      	lsls	r2, r1, #2
 8006486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800648a:	f7fa fbdd 	bl	8000c48 <__aeabi_uldivmod>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4b39      	ldr	r3, [pc, #228]	; (8006578 <UART_SetConfig+0x4e4>)
 8006494:	fba3 1302 	umull	r1, r3, r3, r2
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	2164      	movs	r1, #100	; 0x64
 800649c:	fb01 f303 	mul.w	r3, r1, r3
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	3332      	adds	r3, #50	; 0x32
 80064a6:	4a34      	ldr	r2, [pc, #208]	; (8006578 <UART_SetConfig+0x4e4>)
 80064a8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064b2:	441c      	add	r4, r3
 80064b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b8:	2200      	movs	r2, #0
 80064ba:	673b      	str	r3, [r7, #112]	; 0x70
 80064bc:	677a      	str	r2, [r7, #116]	; 0x74
 80064be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064c2:	4642      	mov	r2, r8
 80064c4:	464b      	mov	r3, r9
 80064c6:	1891      	adds	r1, r2, r2
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	415b      	adcs	r3, r3
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064d2:	4641      	mov	r1, r8
 80064d4:	1851      	adds	r1, r2, r1
 80064d6:	6039      	str	r1, [r7, #0]
 80064d8:	4649      	mov	r1, r9
 80064da:	414b      	adcs	r3, r1
 80064dc:	607b      	str	r3, [r7, #4]
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064ea:	4659      	mov	r1, fp
 80064ec:	00cb      	lsls	r3, r1, #3
 80064ee:	4651      	mov	r1, sl
 80064f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064f4:	4651      	mov	r1, sl
 80064f6:	00ca      	lsls	r2, r1, #3
 80064f8:	4610      	mov	r0, r2
 80064fa:	4619      	mov	r1, r3
 80064fc:	4603      	mov	r3, r0
 80064fe:	4642      	mov	r2, r8
 8006500:	189b      	adds	r3, r3, r2
 8006502:	66bb      	str	r3, [r7, #104]	; 0x68
 8006504:	464b      	mov	r3, r9
 8006506:	460a      	mov	r2, r1
 8006508:	eb42 0303 	adc.w	r3, r2, r3
 800650c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800650e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	663b      	str	r3, [r7, #96]	; 0x60
 8006518:	667a      	str	r2, [r7, #100]	; 0x64
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006526:	4649      	mov	r1, r9
 8006528:	008b      	lsls	r3, r1, #2
 800652a:	4641      	mov	r1, r8
 800652c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006530:	4641      	mov	r1, r8
 8006532:	008a      	lsls	r2, r1, #2
 8006534:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006538:	f7fa fb86 	bl	8000c48 <__aeabi_uldivmod>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <UART_SetConfig+0x4e4>)
 8006542:	fba3 1302 	umull	r1, r3, r3, r2
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	2164      	movs	r1, #100	; 0x64
 800654a:	fb01 f303 	mul.w	r3, r1, r3
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	3332      	adds	r3, #50	; 0x32
 8006554:	4a08      	ldr	r2, [pc, #32]	; (8006578 <UART_SetConfig+0x4e4>)
 8006556:	fba2 2303 	umull	r2, r3, r2, r3
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	f003 020f 	and.w	r2, r3, #15
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4422      	add	r2, r4
 8006568:	609a      	str	r2, [r3, #8]
}
 800656a:	bf00      	nop
 800656c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006570:	46bd      	mov	sp, r7
 8006572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006576:	bf00      	nop
 8006578:	51eb851f 	.word	0x51eb851f

0800657c <setupESC>:
 *
 * @returns None
 */
//1. Setup ESC function
void setupESC(TIM_HandleTypeDef *HTIMx)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(HTIMx);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7fe fbf9 	bl	8004d7c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_1);
 800658a:	2100      	movs	r1, #0
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7fe fcbf 	bl	8004f10 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_1, 20000 * 0.04);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f44f 7248 	mov.w	r2, #800	; 0x320
 800659a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_2);
 800659c:	2104      	movs	r1, #4
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fe fcb6 	bl	8004f10 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_2, 20000 * 0.04);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_3);
 80065ae:	2108      	movs	r1, #8
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7fe fcad 	bl	8004f10 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_3, 20000 * 0.04);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f44f 7248 	mov.w	r2, #800	; 0x320
 80065be:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_4);
 80065c0:	210c      	movs	r1, #12
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fe fca4 	bl	8004f10 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_4, 20000 * 0.04);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80065d0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(2000);
 80065d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80065d6:	f7fb febb 	bl	8002350 <HAL_Delay>
}
 80065da:	bf00      	nop
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <ESC_Control>:
 *
 * @returns None
 */
//2. ESC control function
void ESC_Control(TIM_HandleTypeDef *HTIMx, uint16_t Duty1,uint16_t Duty2,uint16_t Duty3,uint16_t Duty4)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b085      	sub	sp, #20
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	4608      	mov	r0, r1
 80065ec:	4611      	mov	r1, r2
 80065ee:	461a      	mov	r2, r3
 80065f0:	4603      	mov	r3, r0
 80065f2:	817b      	strh	r3, [r7, #10]
 80065f4:	460b      	mov	r3, r1
 80065f6:	813b      	strh	r3, [r7, #8]
 80065f8:	4613      	mov	r3, r2
 80065fa:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_1, Duty1); // 1000 to 2000
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	897a      	ldrh	r2, [r7, #10]
 8006602:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_2, Duty2); // 1000 to 2000
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	893a      	ldrh	r2, [r7, #8]
 800660a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_3, Duty3); // 1000 to 2000
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	88fa      	ldrh	r2, [r7, #6]
 8006612:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_4, Duty4); // 1000 to 2000
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	8b3a      	ldrh	r2, [r7, #24]
 800661a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800661c:	bf00      	nop
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <MPU6050_Init>:
 *
 * @returns 0 if initialization is successful, 1 otherwise.
 */
//1. Init MPU6050 sensor function
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af04      	add	r7, sp, #16
 800662e:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &check, 1, TIMEOUT);
 8006630:	2364      	movs	r3, #100	; 0x64
 8006632:	9302      	str	r3, [sp, #8]
 8006634:	2301      	movs	r3, #1
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	f107 030f 	add.w	r3, r7, #15
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	2301      	movs	r3, #1
 8006640:	2275      	movs	r2, #117	; 0x75
 8006642:	21d0      	movs	r1, #208	; 0xd0
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7fc fbc7 	bl	8002dd8 <HAL_I2C_Mem_Read>
	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	2b68      	cmp	r3, #104	; 0x68
 800664e:	d15b      	bne.n	8006708 <MPU6050_Init+0xe0>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up, gyroscope based clock
		Data = MPU6050_WAKEUP << 6 | MPU6050_CLKSEL_PLLX;
 8006650:	2301      	movs	r3, #1
 8006652:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &Data, 1, TIMEOUT);
 8006654:	2364      	movs	r3, #100	; 0x64
 8006656:	9302      	str	r3, [sp, #8]
 8006658:	2301      	movs	r3, #1
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	f107 030e 	add.w	r3, r7, #14
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	2301      	movs	r3, #1
 8006664:	226b      	movs	r2, #107	; 0x6b
 8006666:	21d0      	movs	r1, #208	; 0xd0
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7fc fabb 	bl	8002be4 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = MPU6050_SMPLRT_DIV_1;
 800666e:	2300      	movs	r3, #0
 8006670:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_SMPLRT_DIV, 1, &Data, 1, TIMEOUT);
 8006672:	2364      	movs	r3, #100	; 0x64
 8006674:	9302      	str	r3, [sp, #8]
 8006676:	2301      	movs	r3, #1
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	f107 030e 	add.w	r3, r7, #14
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	2301      	movs	r3, #1
 8006682:	2219      	movs	r2, #25
 8006684:	21d0      	movs	r1, #208	; 0xd0
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fc faac 	bl	8002be4 <HAL_I2C_Mem_Write>

		// This register configures the external Frame Synchronization (FSYNC) pin sampling
		// the Digital Low Pass Filter (DLPF) setting for both the gyroscopes and accelerometers
		Data = MPU6050_EXT_SYNC_SET << 3 | MPU6050_DLPF_CFG;
 800668c:	2301      	movs	r3, #1
 800668e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_CONFIG, 1, &Data, 1, TIMEOUT);
 8006690:	2364      	movs	r3, #100	; 0x64
 8006692:	9302      	str	r3, [sp, #8]
 8006694:	2301      	movs	r3, #1
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	f107 030e 	add.w	r3, r7, #14
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	2301      	movs	r3, #1
 80066a0:	221a      	movs	r2, #26
 80066a2:	21d0      	movs	r1, #208	; 0xd0
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7fc fa9d 	bl	8002be4 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> +- 2000 degree/s
		Data = MPU6050_FS_SEL_2000 << 3 | 0x00;
 80066aa:	2318      	movs	r3, #24
 80066ac:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, &Data, 1, TIMEOUT);
 80066ae:	2364      	movs	r3, #100	; 0x64
 80066b0:	9302      	str	r3, [sp, #8]
 80066b2:	2301      	movs	r3, #1
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	f107 030e 	add.w	r3, r7, #14
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	2301      	movs	r3, #1
 80066be:	221b      	movs	r2, #27
 80066c0:	21d0      	movs	r1, #208	; 0xd0
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fc fa8e 	bl	8002be4 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> +- 2g
		Data = MPU6050_AFS_SEL_2 << 3 | 0x00;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1, &Data, 1, TIMEOUT);
 80066cc:	2364      	movs	r3, #100	; 0x64
 80066ce:	9302      	str	r3, [sp, #8]
 80066d0:	2301      	movs	r3, #1
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	f107 030e 	add.w	r3, r7, #14
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	2301      	movs	r3, #1
 80066dc:	221c      	movs	r2, #28
 80066de:	21d0      	movs	r1, #208	; 0xd0
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7fc fa7f 	bl	8002be4 <HAL_I2C_Mem_Write>

		// sets the I2C master clock speed
		Data = MPU6050_I2C_MST_CLK_400;
 80066e6:	230d      	movs	r3, #13
 80066e8:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_MST_CTRL, 1, &Data, 1, TIMEOUT);
 80066ea:	2364      	movs	r3, #100	; 0x64
 80066ec:	9302      	str	r3, [sp, #8]
 80066ee:	2301      	movs	r3, #1
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	f107 030e 	add.w	r3, r7, #14
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	2301      	movs	r3, #1
 80066fa:	2224      	movs	r2, #36	; 0x24
 80066fc:	21d0      	movs	r1, #208	; 0xd0
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fc fa70 	bl	8002be4 <HAL_I2C_Mem_Write>
		return 0;
 8006704:	2300      	movs	r3, #0
 8006706:	e000      	b.n	800670a <MPU6050_Init+0xe2>
	}
	return 1;
 8006708:	2301      	movs	r3, #1
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <MPU6050_Bypass>:
 *
 * @returns None
 */
//2.Enable Bypass MPU6050 function
void MPU6050_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b088      	sub	sp, #32
 8006716:	af04      	add	r7, sp, #16
 8006718:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// disable i2c master mode
	Data = 0x00;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_USER_CTRL, 1, &Data, 1, TIMEOUT);
 800671e:	2364      	movs	r3, #100	; 0x64
 8006720:	9302      	str	r3, [sp, #8]
 8006722:	2301      	movs	r3, #1
 8006724:	9301      	str	r3, [sp, #4]
 8006726:	f107 030f 	add.w	r3, r7, #15
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	2301      	movs	r3, #1
 800672e:	226a      	movs	r2, #106	; 0x6a
 8006730:	21d0      	movs	r1, #208	; 0xd0
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fc fa56 	bl	8002be4 <HAL_I2C_Mem_Write>
	// enable i2c master bypass mode
	Data = 0x02;
 8006738:	2302      	movs	r3, #2
 800673a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_INT_PIN_CFG, 1, &Data, 1, TIMEOUT);
 800673c:	2364      	movs	r3, #100	; 0x64
 800673e:	9302      	str	r3, [sp, #8]
 8006740:	2301      	movs	r3, #1
 8006742:	9301      	str	r3, [sp, #4]
 8006744:	f107 030f 	add.w	r3, r7, #15
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	2301      	movs	r3, #1
 800674c:	2237      	movs	r2, #55	; 0x37
 800674e:	21d0      	movs	r1, #208	; 0xd0
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7fc fa47 	bl	8002be4 <HAL_I2C_Mem_Write>
}
 8006756:	bf00      	nop
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <MPU6050_Master>:
 *
 * @returns None
 */
//3. Enable Master MPU6050 function
void MPU6050_Master(I2C_HandleTypeDef *I2Cx)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b088      	sub	sp, #32
 8006762:	af04      	add	r7, sp, #16
 8006764:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// disable i2c master bypass mode
	Data = 0x00;
 8006766:	2300      	movs	r3, #0
 8006768:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_INT_PIN_CFG, 1, &Data, 1, TIMEOUT);
 800676a:	2364      	movs	r3, #100	; 0x64
 800676c:	9302      	str	r3, [sp, #8]
 800676e:	2301      	movs	r3, #1
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	f107 030f 	add.w	r3, r7, #15
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	2301      	movs	r3, #1
 800677a:	2237      	movs	r2, #55	; 0x37
 800677c:	21d0      	movs	r1, #208	; 0xd0
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fc fa30 	bl	8002be4 <HAL_I2C_Mem_Write>
	// enable i2c master mode
	Data = 0x20;
 8006784:	2320      	movs	r3, #32
 8006786:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_USER_CTRL, 1, &Data, 1, TIMEOUT);
 8006788:	2364      	movs	r3, #100	; 0x64
 800678a:	9302      	str	r3, [sp, #8]
 800678c:	2301      	movs	r3, #1
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	f107 030f 	add.w	r3, r7, #15
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	2301      	movs	r3, #1
 8006798:	226a      	movs	r2, #106	; 0x6a
 800679a:	21d0      	movs	r1, #208	; 0xd0
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7fc fa21 	bl	8002be4 <HAL_I2C_Mem_Write>
}
 80067a2:	bf00      	nop
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <MPU6050_Addslave>:
 *
 * @returns None
 */
//4. Configure the MPU6050 to automatically read the magnetometer
void MPU6050_Addslave(I2C_HandleTypeDef *I2Cx)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b088      	sub	sp, #32
 80067ae:	af04      	add	r7, sp, #16
 80067b0:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// slave 0 i2c address, read mode
	Data = HMC5883L_ADDRESS | 0x80;
 80067b2:	239e      	movs	r3, #158	; 0x9e
 80067b4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_SLV0_ADDR, 1, &Data, 1, TIMEOUT);
 80067b6:	2364      	movs	r3, #100	; 0x64
 80067b8:	9302      	str	r3, [sp, #8]
 80067ba:	2301      	movs	r3, #1
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	f107 030f 	add.w	r3, r7, #15
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	2301      	movs	r3, #1
 80067c6:	2225      	movs	r2, #37	; 0x25
 80067c8:	21d0      	movs	r1, #208	; 0xd0
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fc fa0a 	bl	8002be4 <HAL_I2C_Mem_Write>
	// slave 0 register = 0x03 (x axis)
	Data = HMC5883L_DATAX_H;
 80067d0:	2303      	movs	r3, #3
 80067d2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_SLV0_REG, 1, &Data, 1, TIMEOUT);
 80067d4:	2364      	movs	r3, #100	; 0x64
 80067d6:	9302      	str	r3, [sp, #8]
 80067d8:	2301      	movs	r3, #1
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	f107 030f 	add.w	r3, r7, #15
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	2301      	movs	r3, #1
 80067e4:	2226      	movs	r2, #38	; 0x26
 80067e6:	21d0      	movs	r1, #208	; 0xd0
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7fc f9fb 	bl	8002be4 <HAL_I2C_Mem_Write>
	// slave 0 transfer size = 6, enabled
	Data = 0x06 | 0x80;
 80067ee:	2386      	movs	r3, #134	; 0x86
 80067f0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_SLV0_CTRL, 1, &Data, 1, TIMEOUT);
 80067f2:	2364      	movs	r3, #100	; 0x64
 80067f4:	9302      	str	r3, [sp, #8]
 80067f6:	2301      	movs	r3, #1
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	f107 030f 	add.w	r3, r7, #15
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	2301      	movs	r3, #1
 8006802:	2227      	movs	r2, #39	; 0x27
 8006804:	21d0      	movs	r1, #208	; 0xd0
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7fc f9ec 	bl	8002be4 <HAL_I2C_Mem_Write>
	// enable slave 0 delay
	Data = MPU6050_I2C_SLV0_DLY_EN;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_MST_DELAY_CTRL, 1, &Data, 1, TIMEOUT);
 8006810:	2364      	movs	r3, #100	; 0x64
 8006812:	9302      	str	r3, [sp, #8]
 8006814:	2301      	movs	r3, #1
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	f107 030f 	add.w	r3, r7, #15
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	2301      	movs	r3, #1
 8006820:	2267      	movs	r2, #103	; 0x67
 8006822:	21d0      	movs	r1, #208	; 0xd0
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7fc f9dd 	bl	8002be4 <HAL_I2C_Mem_Write>
}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	0000      	movs	r0, r0
 8006834:	0000      	movs	r0, r0
	...

08006838 <MPU6050_Read_All>:
 *
 * @returns None
 */
//5. Read data from MPU6050
void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08c      	sub	sp, #48	; 0x30
 800683c:	af04      	add	r7, sp, #16
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[20];

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, Rec_Data, 20, TIMEOUT);
 8006842:	2364      	movs	r3, #100	; 0x64
 8006844:	9302      	str	r3, [sp, #8]
 8006846:	2314      	movs	r3, #20
 8006848:	9301      	str	r3, [sp, #4]
 800684a:	f107 030c 	add.w	r3, r7, #12
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	2301      	movs	r3, #1
 8006852:	223b      	movs	r2, #59	; 0x3b
 8006854:	21d0      	movs	r1, #208	; 0xd0
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fc fabe 	bl	8002dd8 <HAL_I2C_Mem_Read>

	DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800685c:	7b3b      	ldrb	r3, [r7, #12]
 800685e:	021b      	lsls	r3, r3, #8
 8006860:	b21a      	sxth	r2, r3
 8006862:	7b7b      	ldrb	r3, [r7, #13]
 8006864:	b21b      	sxth	r3, r3
 8006866:	4313      	orrs	r3, r2
 8006868:	b21a      	sxth	r2, r3
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	b21a      	sxth	r2, r3
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	b21b      	sxth	r3, r3
 8006878:	4313      	orrs	r3, r2
 800687a:	b21a      	sxth	r2, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8006880:	7c3b      	ldrb	r3, [r7, #16]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	b21a      	sxth	r2, r3
 8006886:	7c7b      	ldrb	r3, [r7, #17]
 8006888:	b21b      	sxth	r3, r3
 800688a:	4313      	orrs	r3, r2
 800688c:	b21a      	sxth	r2, r3
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	809a      	strh	r2, [r3, #4]

	//DataStruct->Temp_RAW = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);

	DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8006892:	7d3b      	ldrb	r3, [r7, #20]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	b21a      	sxth	r2, r3
 8006898:	7d7b      	ldrb	r3, [r7, #21]
 800689a:	b21b      	sxth	r3, r3
 800689c:	4313      	orrs	r3, r2
 800689e:	b21a      	sxth	r2, r3
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80068a4:	7dbb      	ldrb	r3, [r7, #22]
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	b21a      	sxth	r2, r3
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	b21b      	sxth	r3, r3
 80068ae:	4313      	orrs	r3, r2
 80068b0:	b21a      	sxth	r2, r3
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	82da      	strh	r2, [r3, #22]
	DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80068b6:	7e3b      	ldrb	r3, [r7, #24]
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	b21a      	sxth	r2, r3
 80068bc:	7e7b      	ldrb	r3, [r7, #25]
 80068be:	b21b      	sxth	r3, r3
 80068c0:	4313      	orrs	r3, r2
 80068c2:	b21a      	sxth	r2, r3
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	831a      	strh	r2, [r3, #24]

	DataStruct->Magn_X_RAW = (int16_t)(Rec_Data[14] << 8 | Rec_Data[15]);
 80068c8:	7ebb      	ldrb	r3, [r7, #26]
 80068ca:	021b      	lsls	r3, r3, #8
 80068cc:	b21a      	sxth	r2, r3
 80068ce:	7efb      	ldrb	r3, [r7, #27]
 80068d0:	b21b      	sxth	r3, r3
 80068d2:	4313      	orrs	r3, r2
 80068d4:	b21a      	sxth	r2, r3
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	851a      	strh	r2, [r3, #40]	; 0x28
	DataStruct->Magn_Z_RAW = (int16_t)(Rec_Data[16] << 8 | Rec_Data[17]);
 80068da:	7f3b      	ldrb	r3, [r7, #28]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	b21a      	sxth	r2, r3
 80068e0:	7f7b      	ldrb	r3, [r7, #29]
 80068e2:	b21b      	sxth	r3, r3
 80068e4:	4313      	orrs	r3, r2
 80068e6:	b21a      	sxth	r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Magn_Y_RAW = (int16_t)(Rec_Data[18] << 8 | Rec_Data[19]);
 80068ec:	7fbb      	ldrb	r3, [r7, #30]
 80068ee:	021b      	lsls	r3, r3, #8
 80068f0:	b21a      	sxth	r2, r3
 80068f2:	7ffb      	ldrb	r3, [r7, #31]
 80068f4:	b21b      	sxth	r3, r3
 80068f6:	4313      	orrs	r3, r2
 80068f8:	b21a      	sxth	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	855a      	strh	r2, [r3, #42]	; 0x2a

	DataStruct->Ax = DataStruct->Accel_X_RAW / MPU6050_ACCE_SENS_2;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006904:	ee07 3a90 	vmov	s15, r3
 8006908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800690c:	eddf 6a56 	vldr	s13, [pc, #344]	; 8006a68 <MPU6050_Read_All+0x230>
 8006910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / MPU6050_ACCE_SENS_2;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006920:	ee07 3a90 	vmov	s15, r3
 8006924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006928:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a68 <MPU6050_Read_All+0x230>
 800692c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Accel_Z_RAW / MPU6050_ACCE_SENS_2;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800693c:	ee07 3a90 	vmov	s15, r3
 8006940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006944:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006a68 <MPU6050_Read_All+0x230>
 8006948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	edc3 7a04 	vstr	s15, [r3, #16]

	//DataStruct->Temperature = DataStruct->Temp_RAW / 340.0 + 36.53;

	DataStruct->Gx = DataStruct->Gyro_X_RAW / MPU6050_GYRO_SENS_2000 * DEG_TO_RAD;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006958:	ee07 3a90 	vmov	s15, r3
 800695c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006960:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006a6c <MPU6050_Read_All+0x234>
 8006964:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006968:	ee16 0a90 	vmov	r0, s13
 800696c:	f7f9 fdec 	bl	8000548 <__aeabi_f2d>
 8006970:	a33b      	add	r3, pc, #236	; (adr r3, 8006a60 <MPU6050_Read_All+0x228>)
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f7f9 fe3f 	bl	80005f8 <__aeabi_dmul>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	4610      	mov	r0, r2
 8006980:	4619      	mov	r1, r3
 8006982:	f7fa f911 	bl	8000ba8 <__aeabi_d2f>
 8006986:	4602      	mov	r2, r0
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	61da      	str	r2, [r3, #28]
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / MPU6050_GYRO_SENS_2000 * DEG_TO_RAD;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800699a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006a6c <MPU6050_Read_All+0x234>
 800699e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80069a2:	ee16 0a90 	vmov	r0, s13
 80069a6:	f7f9 fdcf 	bl	8000548 <__aeabi_f2d>
 80069aa:	a32d      	add	r3, pc, #180	; (adr r3, 8006a60 <MPU6050_Read_All+0x228>)
 80069ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b0:	f7f9 fe22 	bl	80005f8 <__aeabi_dmul>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	4610      	mov	r0, r2
 80069ba:	4619      	mov	r1, r3
 80069bc:	f7fa f8f4 	bl	8000ba8 <__aeabi_d2f>
 80069c0:	4602      	mov	r2, r0
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	621a      	str	r2, [r3, #32]
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / MPU6050_GYRO_SENS_2000 * DEG_TO_RAD;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80069cc:	ee07 3a90 	vmov	s15, r3
 80069d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069d4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006a6c <MPU6050_Read_All+0x234>
 80069d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80069dc:	ee16 0a90 	vmov	r0, s13
 80069e0:	f7f9 fdb2 	bl	8000548 <__aeabi_f2d>
 80069e4:	a31e      	add	r3, pc, #120	; (adr r3, 8006a60 <MPU6050_Read_All+0x228>)
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	f7f9 fe05 	bl	80005f8 <__aeabi_dmul>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4610      	mov	r0, r2
 80069f4:	4619      	mov	r1, r3
 80069f6:	f7fa f8d7 	bl	8000ba8 <__aeabi_d2f>
 80069fa:	4602      	mov	r2, r0
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	625a      	str	r2, [r3, #36]	; 0x24

	DataStruct->Mx = DataStruct->Magn_X_RAW / HMC5883L_MAGN_SENS_1P3;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a0e:	eddf 6a18 	vldr	s13, [pc, #96]	; 8006a70 <MPU6050_Read_All+0x238>
 8006a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->My = DataStruct->Magn_Y_RAW / HMC5883L_MAGN_SENS_1P3;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a2a:	eddf 6a11 	vldr	s13, [pc, #68]	; 8006a70 <MPU6050_Read_All+0x238>
 8006a2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Mz = DataStruct->Magn_Z_RAW / HMC5883L_MAGN_SENS_1P3;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a46:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006a70 <MPU6050_Read_All+0x238>
 8006a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8006a54:	bf00      	nop
 8006a56:	3720      	adds	r7, #32
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	f3af 8000 	nop.w
 8006a60:	a252dd11 	.word	0xa252dd11
 8006a64:	3f91df46 	.word	0x3f91df46
 8006a68:	46800000 	.word	0x46800000
 8006a6c:	41833333 	.word	0x41833333
 8006a70:	44884000 	.word	0x44884000

08006a74 <HMC5883L_Init>:
 *
 * @returns None
 */
//6. Init HMC5883L sensor
void HMC5883L_Init(I2C_HandleTypeDef *I2Cx)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af04      	add	r7, sp, #16
 8006a7a:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// write CONFIG_A register
	Data = HMC5883L_AVERAGING_1 << 5 | HMC5883L_RATE_75 << 2 | HMC5883L_BIAS_NORMAL;
 8006a7c:	2318      	movs	r3, #24
 8006a7e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDR, HMC5883L_CONFIG_A, 1, &Data, 1, TIMEOUT);
 8006a80:	2364      	movs	r3, #100	; 0x64
 8006a82:	9302      	str	r3, [sp, #8]
 8006a84:	2301      	movs	r3, #1
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	f107 030f 	add.w	r3, r7, #15
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	2301      	movs	r3, #1
 8006a90:	2200      	movs	r2, #0
 8006a92:	213c      	movs	r1, #60	; 0x3c
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7fc f8a5 	bl	8002be4 <HAL_I2C_Mem_Write>
	// write CONFIG_B register
	Data = HMC5883L_SEL_1P3 << 5 | 0x00;
 8006a9a:	2320      	movs	r3, #32
 8006a9c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDR, HMC5883L_CONFIG_B, 1, &Data, 1, TIMEOUT);
 8006a9e:	2364      	movs	r3, #100	; 0x64
 8006aa0:	9302      	str	r3, [sp, #8]
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	f107 030f 	add.w	r3, r7, #15
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	2301      	movs	r3, #1
 8006aae:	2201      	movs	r2, #1
 8006ab0:	213c      	movs	r1, #60	; 0x3c
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fc f896 	bl	8002be4 <HAL_I2C_Mem_Write>
	// write MODE register
	Data = HMC5883L_MODE_CONTINUOUS;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDR, HMC5883L_MODE, 1, &Data, 1, TIMEOUT);
 8006abc:	2364      	movs	r3, #100	; 0x64
 8006abe:	9302      	str	r3, [sp, #8]
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	9301      	str	r3, [sp, #4]
 8006ac4:	f107 030f 	add.w	r3, r7, #15
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	2301      	movs	r3, #1
 8006acc:	2202      	movs	r2, #2
 8006ace:	213c      	movs	r1, #60	; 0x3c
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7fc f887 	bl	8002be4 <HAL_I2C_Mem_Write>
}
 8006ad6:	bf00      	nop
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <MS5611_Rest>:
 *
 * @returns None
 */
//7. Reset MS5611 sensor
void MS5611_Rest(I2C_HandleTypeDef *I2Cx)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b088      	sub	sp, #32
 8006ae2:	af04      	add	r7, sp, #16
 8006ae4:	6078      	str	r0, [r7, #4]
	uint8_t Data;

	Data = 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MS5611_ADDR, MS5611_CMD_REST, 1, &Data, 1, TIMEOUT);
 8006aea:	2364      	movs	r3, #100	; 0x64
 8006aec:	9302      	str	r3, [sp, #8]
 8006aee:	2301      	movs	r3, #1
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	f107 030f 	add.w	r3, r7, #15
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	2301      	movs	r3, #1
 8006afa:	221e      	movs	r2, #30
 8006afc:	21ee      	movs	r1, #238	; 0xee
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fc f870 	bl	8002be4 <HAL_I2C_Mem_Write>
	HAL_Delay(4);
 8006b04:	2004      	movs	r0, #4
 8006b06:	f7fb fc23 	bl	8002350 <HAL_Delay>
}
 8006b0a:	bf00      	nop
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <MS5611_PROM_read>:
 *
 * @returns MS5611_OK if the operation was successful.
 */
//8. Read PROM from MS5611 sensor
uint8_t MS5611_PROM_read(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	; 0x28
 8006b18:	af04      	add	r7, sp, #16
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint8_t data[2];
	uint8_t PROM[8] = {	MS5611_PROM_READ_0,
 8006b1e:	4a32      	ldr	r2, [pc, #200]	; (8006be8 <MS5611_PROM_read+0xd4>)
 8006b20:	f107 030c 	add.w	r3, r7, #12
 8006b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b28:	e883 0003 	stmia.w	r3, {r0, r1}
						MS5611_PROM_READ_4,
						MS5611_PROM_READ_5,
						MS5611_PROM_READ_6,
						MS5611_PROM_READ_7};
	//Address 0 contains factory data and the setup
	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, PROM[0], 1, data, 2, TIMEOUT);
 8006b2c:	7b3b      	ldrb	r3, [r7, #12]
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	2364      	movs	r3, #100	; 0x64
 8006b32:	9302      	str	r3, [sp, #8]
 8006b34:	2302      	movs	r3, #2
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	f107 0314 	add.w	r3, r7, #20
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	2301      	movs	r3, #1
 8006b40:	21ee      	movs	r1, #238	; 0xee
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fc f948 	bl	8002dd8 <HAL_I2C_Mem_Read>
	datastruct->reserve = (uint16_t)(data[0] << 8 | data[1]);
 8006b48:	7d3b      	ldrb	r3, [r7, #20]
 8006b4a:	021b      	lsls	r3, r3, #8
 8006b4c:	b21a      	sxth	r2, r3
 8006b4e:	7d7b      	ldrb	r3, [r7, #21]
 8006b50:	b21b      	sxth	r3, r3
 8006b52:	4313      	orrs	r3, r2
 8006b54:	b21b      	sxth	r3, r3
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	819a      	strh	r2, [r3, #12]
	// Addresses 1-6 calibration coefficients
	for (i = 1; i < 7; i++)
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
 8006b60:	e021      	b.n	8006ba6 <MS5611_PROM_read+0x92>
	{
		HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, PROM[i], 1, data, 2, TIMEOUT);
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	3318      	adds	r3, #24
 8006b66:	443b      	add	r3, r7
 8006b68:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	2364      	movs	r3, #100	; 0x64
 8006b70:	9302      	str	r3, [sp, #8]
 8006b72:	2302      	movs	r3, #2
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	f107 0314 	add.w	r3, r7, #20
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	21ee      	movs	r1, #238	; 0xee
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7fc f929 	bl	8002dd8 <HAL_I2C_Mem_Read>
		datastruct->C[i - 1] = (uint16_t)(data[0] << 8 | data[1]);
 8006b86:	7d3b      	ldrb	r3, [r7, #20]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	b21a      	sxth	r2, r3
 8006b8c:	7d7b      	ldrb	r3, [r7, #21]
 8006b8e:	b21b      	sxth	r3, r3
 8006b90:	4313      	orrs	r3, r2
 8006b92:	b219      	sxth	r1, r3
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
 8006b96:	1e5a      	subs	r2, r3, #1
 8006b98:	b289      	uxth	r1, r1
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 1; i < 7; i++)
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	75fb      	strb	r3, [r7, #23]
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	2b06      	cmp	r3, #6
 8006baa:	d9da      	bls.n	8006b62 <MS5611_PROM_read+0x4e>
	}
	//Address 7 contains the serial code and CRC
	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, PROM[7], 1, data, 2, TIMEOUT);
 8006bac:	7cfb      	ldrb	r3, [r7, #19]
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	2364      	movs	r3, #100	; 0x64
 8006bb2:	9302      	str	r3, [sp, #8]
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	f107 0314 	add.w	r3, r7, #20
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	21ee      	movs	r1, #238	; 0xee
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fc f908 	bl	8002dd8 <HAL_I2C_Mem_Read>
	datastruct->crc = (uint16_t)(data[0] << 8 | data[1]);
 8006bc8:	7d3b      	ldrb	r3, [r7, #20]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	b21a      	sxth	r2, r3
 8006bce:	7d7b      	ldrb	r3, [r7, #21]
 8006bd0:	b21b      	sxth	r3, r3
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	b21b      	sxth	r3, r3
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	81da      	strh	r2, [r3, #14]

	return MS5611_OK;
 8006bdc:	2301      	movs	r3, #1
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	0800ca70 	.word	0x0800ca70

08006bec <MS5611_init>:
 *
 * @returns MS5611_OK if initialization is successful.
 */
//9. Init MS5611 sensor
uint8_t MS5611_init(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
	MS5611_Rest(I2Cx);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff ff71 	bl	8006ade <MS5611_Rest>
	MS5611_PROM_read(I2Cx, datastruct);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff ff88 	bl	8006b14 <MS5611_PROM_read>
	return MS5611_OK;
 8006c04:	2301      	movs	r3, #1
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <MS5611_read_temp>:
 *
 * @returns MS5611_OK if the temperature was successfully read.
 */
//10. Read temp from MS5611 sensor
uint8_t MS5611_read_temp(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b088      	sub	sp, #32
 8006c12:	af04      	add	r7, sp, #16
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
	uint8_t data[3];
	uint8_t Data;

	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, MS6511_ADC_READ, 1, data, 3, TIMEOUT);
 8006c18:	2364      	movs	r3, #100	; 0x64
 8006c1a:	9302      	str	r3, [sp, #8]
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	f107 030c 	add.w	r3, r7, #12
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	2301      	movs	r3, #1
 8006c28:	2200      	movs	r2, #0
 8006c2a:	21ee      	movs	r1, #238	; 0xee
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7fc f8d3 	bl	8002dd8 <HAL_I2C_Mem_Read>
	datastruct->D[1] = (data[0] << 16 | data[1] << 8 | data[2]);
 8006c32:	7b3b      	ldrb	r3, [r7, #12]
 8006c34:	041a      	lsls	r2, r3, #16
 8006c36:	7b7b      	ldrb	r3, [r7, #13]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	7bba      	ldrb	r2, [r7, #14]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	615a      	str	r2, [r3, #20]
	Data = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(I2Cx, MS5611_ADDR, MS5611_CMD_CONVERT_D1_2048, 1, &Data, 1, TIMEOUT);// delay 4.13ms read press
 8006c4a:	2364      	movs	r3, #100	; 0x64
 8006c4c:	9302      	str	r3, [sp, #8]
 8006c4e:	2301      	movs	r3, #1
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	f107 030b 	add.w	r3, r7, #11
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	2301      	movs	r3, #1
 8006c5a:	2246      	movs	r2, #70	; 0x46
 8006c5c:	21ee      	movs	r1, #238	; 0xee
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fb ffc0 	bl	8002be4 <HAL_I2C_Mem_Write>
	return MS5611_OK;
 8006c64:	2301      	movs	r3, #1
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <MS5611_read_press>:
 *
 * @returns MS5611_OK if the operation was successful.
 */
//11. Read pressure from MS5611 sensor
uint8_t MS5611_read_press(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b088      	sub	sp, #32
 8006c72:	af04      	add	r7, sp, #16
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
	uint8_t data[3];
	uint8_t Data;
	
	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, MS6511_ADC_READ, 1, data, 3, TIMEOUT);
 8006c78:	2364      	movs	r3, #100	; 0x64
 8006c7a:	9302      	str	r3, [sp, #8]
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	f107 030c 	add.w	r3, r7, #12
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	2301      	movs	r3, #1
 8006c88:	2200      	movs	r2, #0
 8006c8a:	21ee      	movs	r1, #238	; 0xee
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fc f8a3 	bl	8002dd8 <HAL_I2C_Mem_Read>
	datastruct->D[0] = (data[0] << 16 | data[1] << 8 | data[2]);
 8006c92:	7b3b      	ldrb	r3, [r7, #12]
 8006c94:	041a      	lsls	r2, r3, #16
 8006c96:	7b7b      	ldrb	r3, [r7, #13]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	7bba      	ldrb	r2, [r7, #14]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	611a      	str	r2, [r3, #16]
	Data = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(I2Cx, MS5611_ADDR, MS5611_CMD_CONVERT_D2_2048, 1, &Data, 1, TIMEOUT);// delay 4.13ms read temp
 8006caa:	2364      	movs	r3, #100	; 0x64
 8006cac:	9302      	str	r3, [sp, #8]
 8006cae:	2301      	movs	r3, #1
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	f107 030b 	add.w	r3, r7, #11
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	2301      	movs	r3, #1
 8006cba:	2256      	movs	r2, #86	; 0x56
 8006cbc:	21ee      	movs	r1, #238	; 0xee
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fb ff90 	bl	8002be4 <HAL_I2C_Mem_Write>
	return MS5611_OK;
 8006cc4:	2301      	movs	r3, #1
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <MS5611_calculate>:
 *
 * @returns MS5611_OK if the operation was successful.
 */
//12. Caculator pressure
uint8_t MS5611_calculate(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	b0e1      	sub	sp, #388	; 0x184
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8006cdc:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
	static int time = 0;
	static int8_t mode = 0;
	int64_t dT = 0, TEMP = 0, T2 = 0, OFF = 0, OFF2 = 0, SENS2 = 0, SENS = 0, PRES = 0;
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	f04f 0300 	mov.w	r3, #0
 8006ce8:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 8006d1c:	f04f 0200 	mov.w	r2, #0
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	f04f 0300 	mov.w	r3, #0
 8006d30:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	time++;
 8006d40:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <MS5611_calculate+0xa8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <MS5611_calculate+0xa8>)
 8006d48:	601a      	str	r2, [r3, #0]
	if(time>2)
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <MS5611_calculate+0xa8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	f340 8334 	ble.w	80073bc <MS5611_calculate+0x6ec>
	{
	time = 0;
 8006d54:	4a08      	ldr	r2, [pc, #32]	; (8006d78 <MS5611_calculate+0xa8>)
 8006d56:	2300      	movs	r3, #0
 8006d58:	6013      	str	r3, [r2, #0]
	if (mode)
 8006d5a:	4b08      	ldr	r3, [pc, #32]	; (8006d7c <MS5611_calculate+0xac>)
 8006d5c:	f993 3000 	ldrsb.w	r3, [r3]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00d      	beq.n	8006d80 <MS5611_calculate+0xb0>
	{
		MS5611_read_temp(I2Cx,datastruct);
 8006d64:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8006d68:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006d6c:	f7ff ff4f 	bl	8006c0e <MS5611_read_temp>
		mode = 0;
 8006d70:	4a02      	ldr	r2, [pc, #8]	; (8006d7c <MS5611_calculate+0xac>)
 8006d72:	2300      	movs	r3, #0
 8006d74:	7013      	strb	r3, [r2, #0]
 8006d76:	e00c      	b.n	8006d92 <MS5611_calculate+0xc2>
 8006d78:	20000524 	.word	0x20000524
 8006d7c:	20000528 	.word	0x20000528
	}
	else 
	{
		MS5611_read_press(I2Cx,datastruct);
 8006d80:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8006d84:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006d88:	f7ff ff71 	bl	8006c6e <MS5611_read_press>
		mode = 1;
 8006d8c:	4ad5      	ldr	r2, [pc, #852]	; (80070e4 <MS5611_calculate+0x414>)
 8006d8e:	2301      	movs	r3, #1
 8006d90:	7013      	strb	r3, [r2, #0]
	}
	if(mode == 0)
 8006d92:	4bd4      	ldr	r3, [pc, #848]	; (80070e4 <MS5611_calculate+0x414>)
 8006d94:	f993 3000 	ldrsb.w	r3, [r3]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f040 830f 	bne.w	80073bc <MS5611_calculate+0x6ec>
	{
	dT = datastruct->D[1] - ((int32_t)(datastruct->C[4]) << 8);
 8006d9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006da2:	695a      	ldr	r2, [r3, #20]
 8006da4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006da8:	891b      	ldrh	r3, [r3, #8]
 8006daa:	021b      	lsls	r3, r3, #8
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2200      	movs	r2, #0
 8006db0:	663b      	str	r3, [r7, #96]	; 0x60
 8006db2:	667a      	str	r2, [r7, #100]	; 0x64
 8006db4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006db8:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	TEMP = 2000 + ((int32_t)(dT * (datastruct->C[5])) >> 23);
 8006dbc:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8006dc0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006dc4:	895b      	ldrh	r3, [r3, #10]
 8006dc6:	fb02 f303 	mul.w	r3, r2, r3
 8006dca:	15db      	asrs	r3, r3, #23
 8006dcc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006dd0:	17da      	asrs	r2, r3, #31
 8006dd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dd4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006dd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006dda:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	OFF = (((int64_t)(datastruct->C[1])) << 16) + (((datastruct->C[3]) * dT) >> 7);
 8006dde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006de2:	885b      	ldrh	r3, [r3, #2]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006dec:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006df0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006df4:	460b      	mov	r3, r1
 8006df6:	0c1b      	lsrs	r3, r3, #16
 8006df8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006e08:	88db      	ldrh	r3, [r3, #6]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006e12:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8006e16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006e1a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8006e1e:	460a      	mov	r2, r1
 8006e20:	fb02 f203 	mul.w	r2, r2, r3
 8006e24:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006e28:	e9c7 014c 	strd	r0, r1, [r7, #304]	; 0x130
 8006e2c:	4601      	mov	r1, r0
 8006e2e:	fb01 f303 	mul.w	r3, r1, r3
 8006e32:	441a      	add	r2, r3
 8006e34:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006e38:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8006e3c:	fba3 4501 	umull	r4, r5, r3, r1
 8006e40:	1953      	adds	r3, r2, r5
 8006e42:	461d      	mov	r5, r3
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	f04f 0300 	mov.w	r3, #0
 8006e4c:	09e2      	lsrs	r2, r4, #7
 8006e4e:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8006e52:	11eb      	asrs	r3, r5, #7
 8006e54:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8006e58:	4621      	mov	r1, r4
 8006e5a:	1889      	adds	r1, r1, r2
 8006e5c:	6539      	str	r1, [r7, #80]	; 0x50
 8006e5e:	4629      	mov	r1, r5
 8006e60:	eb43 0101 	adc.w	r1, r3, r1
 8006e64:	6579      	str	r1, [r7, #84]	; 0x54
 8006e66:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006e6a:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	SENS = (((int64_t)(datastruct->C[0])) << 15) + (((datastruct->C[2]) * dT) >> 8);
 8006e6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e7c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006e80:	f04f 0000 	mov.w	r0, #0
 8006e84:	f04f 0100 	mov.w	r1, #0
 8006e88:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	03d9      	lsls	r1, r3, #15
 8006e90:	4623      	mov	r3, r4
 8006e92:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 8006e96:	4623      	mov	r3, r4
 8006e98:	03d8      	lsls	r0, r3, #15
 8006e9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006e9e:	889b      	ldrh	r3, [r3, #4]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ea8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006eac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006eb0:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	; 0xe8
 8006eb4:	4632      	mov	r2, r6
 8006eb6:	fb02 f203 	mul.w	r2, r2, r3
 8006eba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006ebe:	462c      	mov	r4, r5
 8006ec0:	fb04 f303 	mul.w	r3, r4, r3
 8006ec4:	441a      	add	r2, r3
 8006ec6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006eca:	462c      	mov	r4, r5
 8006ecc:	fba3 8904 	umull	r8, r9, r3, r4
 8006ed0:	eb02 0309 	add.w	r3, r2, r9
 8006ed4:	4699      	mov	r9, r3
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006ee2:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8006ee6:	ea4f 2329 	mov.w	r3, r9, asr #8
 8006eea:	1884      	adds	r4, r0, r2
 8006eec:	64bc      	str	r4, [r7, #72]	; 0x48
 8006eee:	eb41 0303 	adc.w	r3, r1, r3
 8006ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006ef8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148

	if (TEMP < 2000)
 8006efc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8006f00:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8006f04:	f173 0300 	sbcs.w	r3, r3, #0
 8006f08:	f280 81ce 	bge.w	80072a8 <MS5611_calculate+0x5d8>
	{ // temperature < 20�C
		T2 = (dT * dT) >> 31;
 8006f0c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8006f10:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f14:	fb03 f102 	mul.w	r1, r3, r2
 8006f18:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8006f1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f20:	fb02 f303 	mul.w	r3, r2, r3
 8006f24:	18ca      	adds	r2, r1, r3
 8006f26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f2a:	fba3 ab03 	umull	sl, fp, r3, r3
 8006f2e:	eb02 030b 	add.w	r3, r2, fp
 8006f32:	469b      	mov	fp, r3
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	ea4f 72da 	mov.w	r2, sl, lsr #31
 8006f40:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
 8006f44:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8006f48:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2;
 8006f4c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8006f50:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8006f54:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8006f58:	f143 33ff 	adc.w	r3, r3, #4294967295
 8006f5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f60:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8006f64:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8006f68:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006f6c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8006f70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f74:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006f78:	462b      	mov	r3, r5
 8006f7a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8006f7e:	4642      	mov	r2, r8
 8006f80:	fb02 f203 	mul.w	r2, r2, r3
 8006f84:	464b      	mov	r3, r9
 8006f86:	4621      	mov	r1, r4
 8006f88:	fb01 f303 	mul.w	r3, r1, r3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	4622      	mov	r2, r4
 8006f90:	4641      	mov	r1, r8
 8006f92:	fba2 1201 	umull	r1, r2, r2, r1
 8006f96:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8006f9a:	460a      	mov	r2, r1
 8006f9c:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8006fa0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006faa:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8006fae:	4622      	mov	r2, r4
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f04f 0100 	mov.w	r1, #0
 8006fba:	0099      	lsls	r1, r3, #2
 8006fbc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006fc0:	0090      	lsls	r0, r2, #2
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	1851      	adds	r1, r2, r1
 8006fca:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006fce:	4629      	mov	r1, r5
 8006fd0:	eb43 0101 	adc.w	r1, r3, r1
 8006fd4:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8006fd8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	0fdb      	lsrs	r3, r3, #31
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fe4:	647a      	str	r2, [r7, #68]	; 0x44
 8006fe6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8006fea:	4623      	mov	r3, r4
 8006fec:	4602      	mov	r2, r0
 8006fee:	189b      	adds	r3, r3, r2
 8006ff0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	eb42 0303 	adc.w	r3, r2, r3
 8006ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007008:	4621      	mov	r1, r4
 800700a:	084a      	lsrs	r2, r1, #1
 800700c:	4629      	mov	r1, r5
 800700e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8007012:	4629      	mov	r1, r5
 8007014:	104b      	asrs	r3, r1, #1
 8007016:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
		SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 4;
 800701a:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800701e:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8007022:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8007026:	f143 33ff 	adc.w	r3, r3, #4294967295
 800702a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800702e:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8007032:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8007036:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800703a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800703e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007042:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8007046:	462b      	mov	r3, r5
 8007048:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800704c:	4642      	mov	r2, r8
 800704e:	fb02 f203 	mul.w	r2, r2, r3
 8007052:	464b      	mov	r3, r9
 8007054:	4621      	mov	r1, r4
 8007056:	fb01 f303 	mul.w	r3, r1, r3
 800705a:	4413      	add	r3, r2
 800705c:	4622      	mov	r2, r4
 800705e:	4641      	mov	r1, r8
 8007060:	fba2 1201 	umull	r1, r2, r2, r1
 8007064:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8007068:	460a      	mov	r2, r1
 800706a:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800706e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007072:	4413      	add	r3, r2
 8007074:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007078:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800707c:	4622      	mov	r2, r4
 800707e:	462b      	mov	r3, r5
 8007080:	f04f 0000 	mov.w	r0, #0
 8007084:	f04f 0100 	mov.w	r1, #0
 8007088:	0099      	lsls	r1, r3, #2
 800708a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800708e:	0090      	lsls	r0, r2, #2
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4621      	mov	r1, r4
 8007096:	1851      	adds	r1, r2, r1
 8007098:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800709c:	4629      	mov	r1, r5
 800709e:	eb43 0101 	adc.w	r1, r3, r1
 80070a2:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 80070a6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da06      	bge.n	80070bc <MS5611_calculate+0x3ec>
 80070ae:	1cd1      	adds	r1, r2, #3
 80070b0:	6339      	str	r1, [r7, #48]	; 0x30
 80070b2:	f143 0300 	adc.w	r3, r3, #0
 80070b6:	637b      	str	r3, [r7, #52]	; 0x34
 80070b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80070bc:	f04f 0000 	mov.w	r0, #0
 80070c0:	f04f 0100 	mov.w	r1, #0
 80070c4:	0890      	lsrs	r0, r2, #2
 80070c6:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80070ca:	1099      	asrs	r1, r3, #2
 80070cc:	e9c7 015a 	strd	r0, r1, [r7, #360]	; 0x168

		if (TEMP < -1500)
 80070d0:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80070d4:	4904      	ldr	r1, [pc, #16]	; (80070e8 <MS5611_calculate+0x418>)
 80070d6:	428a      	cmp	r2, r1
 80070d8:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80070dc:	f280 80f6 	bge.w	80072cc <MS5611_calculate+0x5fc>
 80070e0:	e004      	b.n	80070ec <MS5611_calculate+0x41c>
 80070e2:	bf00      	nop
 80070e4:	20000528 	.word	0x20000528
 80070e8:	fffffa24 	.word	0xfffffa24
		{ // temperature < -15�C
			OFF2 = OFF2 + (7 * (TEMP + 1500) * (TEMP + 1500));
 80070ec:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80070f0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80070f4:	1851      	adds	r1, r2, r1
 80070f6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80070fa:	f143 0300 	adc.w	r3, r3, #0
 80070fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007102:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8007106:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800710a:	1851      	adds	r1, r2, r1
 800710c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8007110:	f143 0300 	adc.w	r3, r3, #0
 8007114:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007118:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800711c:	462b      	mov	r3, r5
 800711e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8007122:	4642      	mov	r2, r8
 8007124:	fb02 f203 	mul.w	r2, r2, r3
 8007128:	464b      	mov	r3, r9
 800712a:	4621      	mov	r1, r4
 800712c:	fb01 f303 	mul.w	r3, r1, r3
 8007130:	4413      	add	r3, r2
 8007132:	4622      	mov	r2, r4
 8007134:	4641      	mov	r1, r8
 8007136:	fba2 1201 	umull	r1, r2, r2, r1
 800713a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800713e:	460a      	mov	r2, r1
 8007140:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007144:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007148:	4413      	add	r3, r2
 800714a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800714e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8007152:	4622      	mov	r2, r4
 8007154:	462b      	mov	r3, r5
 8007156:	f04f 0000 	mov.w	r0, #0
 800715a:	f04f 0100 	mov.w	r1, #0
 800715e:	00d9      	lsls	r1, r3, #3
 8007160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007164:	00d0      	lsls	r0, r2, #3
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	4621      	mov	r1, r4
 800716c:	1a51      	subs	r1, r2, r1
 800716e:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8007172:	4629      	mov	r1, r5
 8007174:	eb63 0301 	sbc.w	r3, r3, r1
 8007178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800717c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8007180:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8007184:	4621      	mov	r1, r4
 8007186:	1851      	adds	r1, r2, r1
 8007188:	62b9      	str	r1, [r7, #40]	; 0x28
 800718a:	4629      	mov	r1, r5
 800718c:	eb43 0101 	adc.w	r1, r3, r1
 8007190:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007192:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007196:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
			SENS2 = SENS2 + (11 * (TEMP + 1500) * (TEMP + 1500) / 2);
 800719a:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800719e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80071a2:	1851      	adds	r1, r2, r1
 80071a4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80071a8:	f143 0300 	adc.w	r3, r3, #0
 80071ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071b0:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80071b4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80071b8:	1851      	adds	r1, r2, r1
 80071ba:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80071be:	f143 0300 	adc.w	r3, r3, #0
 80071c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071c6:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80071ca:	462b      	mov	r3, r5
 80071cc:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80071d0:	4642      	mov	r2, r8
 80071d2:	fb02 f203 	mul.w	r2, r2, r3
 80071d6:	464b      	mov	r3, r9
 80071d8:	4621      	mov	r1, r4
 80071da:	fb01 f303 	mul.w	r3, r1, r3
 80071de:	4413      	add	r3, r2
 80071e0:	4622      	mov	r2, r4
 80071e2:	4641      	mov	r1, r8
 80071e4:	fba2 1201 	umull	r1, r2, r2, r1
 80071e8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 80071ec:	460a      	mov	r2, r1
 80071ee:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 80071f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80071f6:	4413      	add	r3, r2
 80071f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80071fc:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8007200:	4622      	mov	r2, r4
 8007202:	462b      	mov	r3, r5
 8007204:	1891      	adds	r1, r2, r2
 8007206:	6239      	str	r1, [r7, #32]
 8007208:	415b      	adcs	r3, r3
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
 800720c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007210:	4621      	mov	r1, r4
 8007212:	1851      	adds	r1, r2, r1
 8007214:	61b9      	str	r1, [r7, #24]
 8007216:	4629      	mov	r1, r5
 8007218:	414b      	adcs	r3, r1
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	f04f 0200 	mov.w	r2, #0
 8007220:	f04f 0300 	mov.w	r3, #0
 8007224:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8007228:	4649      	mov	r1, r9
 800722a:	008b      	lsls	r3, r1, #2
 800722c:	4641      	mov	r1, r8
 800722e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007232:	4641      	mov	r1, r8
 8007234:	008a      	lsls	r2, r1, #2
 8007236:	4610      	mov	r0, r2
 8007238:	4619      	mov	r1, r3
 800723a:	4603      	mov	r3, r0
 800723c:	4622      	mov	r2, r4
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007244:	460b      	mov	r3, r1
 8007246:	462a      	mov	r2, r5
 8007248:	eb63 0302 	sbc.w	r3, r3, r2
 800724c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007250:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007254:	460b      	mov	r3, r1
 8007256:	0fdb      	lsrs	r3, r3, #31
 8007258:	2200      	movs	r2, #0
 800725a:	613b      	str	r3, [r7, #16]
 800725c:	617a      	str	r2, [r7, #20]
 800725e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007262:	4623      	mov	r3, r4
 8007264:	4602      	mov	r2, r0
 8007266:	189b      	adds	r3, r3, r2
 8007268:	60bb      	str	r3, [r7, #8]
 800726a:	460b      	mov	r3, r1
 800726c:	462a      	mov	r2, r5
 800726e:	eb42 0303 	adc.w	r3, r2, r3
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	f04f 0300 	mov.w	r3, #0
 800727c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007280:	4621      	mov	r1, r4
 8007282:	084a      	lsrs	r2, r1, #1
 8007284:	4629      	mov	r1, r5
 8007286:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800728a:	4629      	mov	r1, r5
 800728c:	104b      	asrs	r3, r1, #1
 800728e:	4610      	mov	r0, r2
 8007290:	4619      	mov	r1, r3
 8007292:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8007296:	1814      	adds	r4, r2, r0
 8007298:	603c      	str	r4, [r7, #0]
 800729a:	414b      	adcs	r3, r1
 800729c:	607b      	str	r3, [r7, #4]
 800729e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80072a2:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
 80072a6:	e011      	b.n	80072cc <MS5611_calculate+0x5fc>
		}
	}
	else
	{ // temperature > 20�C
		T2 = 0;
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		OFF2 = 0;
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
		SENS2 = 0;
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
	}

	datastruct->dT = dT;
 80072cc:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80072d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80072d4:	619a      	str	r2, [r3, #24]
	datastruct->OFF = OFF - OFF2;
 80072d6:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80072da:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80072de:	1a84      	subs	r4, r0, r2
 80072e0:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80072e4:	eb61 0303 	sbc.w	r3, r1, r3
 80072e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80072f0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80072f4:	e9c3 1208 	strd	r1, r2, [r3, #32]
	datastruct->TEMP = TEMP - T2;
 80072f8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80072fc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	461a      	mov	r2, r3
 8007304:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
	datastruct->SENS = SENS - SENS2;
 800730a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800730e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8007312:	1a84      	subs	r4, r0, r2
 8007314:	67bc      	str	r4, [r7, #120]	; 0x78
 8007316:	eb61 0303 	sbc.w	r3, r1, r3
 800731a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800731c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007320:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007324:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

	PRES = ((((int32_t)(datastruct->D[0]) * (datastruct->SENS)) >> 21) - (datastruct->OFF)) >> 15;
 8007328:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	17da      	asrs	r2, r3, #31
 8007330:	673b      	str	r3, [r7, #112]	; 0x70
 8007332:	677a      	str	r2, [r7, #116]	; 0x74
 8007334:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007338:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800733c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8007340:	4629      	mov	r1, r5
 8007342:	fb02 f001 	mul.w	r0, r2, r1
 8007346:	4621      	mov	r1, r4
 8007348:	fb01 f103 	mul.w	r1, r1, r3
 800734c:	4401      	add	r1, r0
 800734e:	4620      	mov	r0, r4
 8007350:	fba0 2302 	umull	r2, r3, r0, r2
 8007354:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007358:	4613      	mov	r3, r2
 800735a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800735e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007362:	18cb      	adds	r3, r1, r3
 8007364:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8007374:	4621      	mov	r1, r4
 8007376:	0d4a      	lsrs	r2, r1, #21
 8007378:	4629      	mov	r1, r5
 800737a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800737e:	4629      	mov	r1, r5
 8007380:	154b      	asrs	r3, r1, #21
 8007382:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8007386:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800738a:	1a14      	subs	r4, r2, r0
 800738c:	66bc      	str	r4, [r7, #104]	; 0x68
 800738e:	eb63 0301 	sbc.w	r3, r3, r1
 8007392:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	f04f 0300 	mov.w	r3, #0
 800739c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80073a0:	4621      	mov	r1, r4
 80073a2:	0bca      	lsrs	r2, r1, #15
 80073a4:	4629      	mov	r1, r5
 80073a6:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80073aa:	4629      	mov	r1, r5
 80073ac:	13cb      	asrs	r3, r1, #15
 80073ae:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	datastruct->P = PRES;
 80073b2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80073b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80073ba:	635a      	str	r2, [r3, #52]	; 0x34
	}
	}
	return MS5611_OK;
 80073bc:	2301      	movs	r3, #1
}
 80073be:	4618      	mov	r0, r3
 80073c0:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 80073c4:	46bd      	mov	sp, r7
 80073c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ca:	bf00      	nop
 80073cc:	0000      	movs	r0, r0
	...

080073d0 <getAltitude>:
 *
 * @returns The altitude in meters.
 */
//13. Calculator height
double getAltitude(double pressure, double referencePressure)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	ed87 0b02 	vstr	d0, [r7, #8]
 80073da:	ed87 1b00 	vstr	d1, [r7]
    return (44330.0f * (1.0f - pow((double)pressure / (double)referencePressure, 0.1902949f)));
 80073de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073e6:	f7f9 fa31 	bl	800084c <__aeabi_ddiv>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	ec43 2b17 	vmov	d7, r2, r3
 80073f2:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8007438 <getAltitude+0x68>
 80073f6:	eeb0 0a47 	vmov.f32	s0, s14
 80073fa:	eef0 0a67 	vmov.f32	s1, s15
 80073fe:	f003 fdd7 	bl	800afb0 <pow>
 8007402:	ec53 2b10 	vmov	r2, r3, d0
 8007406:	f04f 0000 	mov.w	r0, #0
 800740a:	490f      	ldr	r1, [pc, #60]	; (8007448 <getAltitude+0x78>)
 800740c:	f7f8 ff3c 	bl	8000288 <__aeabi_dsub>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4610      	mov	r0, r2
 8007416:	4619      	mov	r1, r3
 8007418:	a309      	add	r3, pc, #36	; (adr r3, 8007440 <getAltitude+0x70>)
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f7f9 f8eb 	bl	80005f8 <__aeabi_dmul>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	ec43 2b17 	vmov	d7, r2, r3
}
 800742a:	eeb0 0a47 	vmov.f32	s0, s14
 800742e:	eef0 0a67 	vmov.f32	s1, s15
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	60000000 	.word	0x60000000
 800743c:	3fc85b95 	.word	0x3fc85b95
 8007440:	00000000 	.word	0x00000000
 8007444:	40e5a540 	.word	0x40e5a540
 8007448:	3ff00000 	.word	0x3ff00000
 800744c:	00000000 	.word	0x00000000

08007450 <MPU2Angle>:
 *
 * @returns None
 */
//14. Calculator Euler angle
void MPU2Angle(MPU6050_t DataStruct, Euler_t *Angle)
{
 8007450:	b084      	sub	sp, #16
 8007452:	b5b0      	push	{r4, r5, r7, lr}
 8007454:	af00      	add	r7, sp, #0
 8007456:	f107 0410 	add.w	r4, r7, #16
 800745a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Angle->roll 	= RAD_TO_DEG*atan2(DataStruct.Ay, DataStruct.Az);
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	4618      	mov	r0, r3
 8007462:	f7f9 f871 	bl	8000548 <__aeabi_f2d>
 8007466:	4604      	mov	r4, r0
 8007468:	460d      	mov	r5, r1
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	4618      	mov	r0, r3
 800746e:	f7f9 f86b 	bl	8000548 <__aeabi_f2d>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	ec43 2b11 	vmov	d1, r2, r3
 800747a:	ec45 4b10 	vmov	d0, r4, r5
 800747e:	f003 fd4d 	bl	800af1c <atan2>
 8007482:	ec51 0b10 	vmov	r0, r1, d0
 8007486:	a32c      	add	r3, pc, #176	; (adr r3, 8007538 <MPU2Angle+0xe8>)
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	f7f9 f8b4 	bl	80005f8 <__aeabi_dmul>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4610      	mov	r0, r2
 8007496:	4619      	mov	r1, r3
 8007498:	f7f9 fb86 	bl	8000ba8 <__aeabi_d2f>
 800749c:	4602      	mov	r2, r0
 800749e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074a0:	601a      	str	r2, [r3, #0]
	Angle->pitch 	= RAD_TO_DEG*atan2(-DataStruct.Ax, sqrt(DataStruct.Ay*DataStruct.Ay + DataStruct.Az*DataStruct.Az));
 80074a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80074a6:	eef1 7a67 	vneg.f32	s15, s15
 80074aa:	ee17 3a90 	vmov	r3, s15
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7f9 f84a 	bl	8000548 <__aeabi_f2d>
 80074b4:	4604      	mov	r4, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80074bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80074c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074c4:	edd7 6a08 	vldr	s13, [r7, #32]
 80074c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80074cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074d4:	ee17 0a90 	vmov	r0, s15
 80074d8:	f7f9 f836 	bl	8000548 <__aeabi_f2d>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	ec43 2b10 	vmov	d0, r2, r3
 80074e4:	f003 fdd4 	bl	800b090 <sqrt>
 80074e8:	eeb0 7a40 	vmov.f32	s14, s0
 80074ec:	eef0 7a60 	vmov.f32	s15, s1
 80074f0:	eeb0 1a47 	vmov.f32	s2, s14
 80074f4:	eef0 1a67 	vmov.f32	s3, s15
 80074f8:	ec45 4b10 	vmov	d0, r4, r5
 80074fc:	f003 fd0e 	bl	800af1c <atan2>
 8007500:	ec51 0b10 	vmov	r0, r1, d0
 8007504:	a30c      	add	r3, pc, #48	; (adr r3, 8007538 <MPU2Angle+0xe8>)
 8007506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750a:	f7f9 f875 	bl	80005f8 <__aeabi_dmul>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4610      	mov	r0, r2
 8007514:	4619      	mov	r1, r3
 8007516:	f7f9 fb47 	bl	8000ba8 <__aeabi_d2f>
 800751a:	4602      	mov	r2, r0
 800751c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800751e:	605a      	str	r2, [r3, #4]
	Angle->yaw		= 0;
 8007520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007522:	f04f 0200 	mov.w	r2, #0
 8007526:	609a      	str	r2, [r3, #8]
}
 8007528:	bf00      	nop
 800752a:	46bd      	mov	sp, r7
 800752c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007530:	b004      	add	sp, #16
 8007532:	4770      	bx	lr
 8007534:	f3af 8000 	nop.w
 8007538:	1a6394b6 	.word	0x1a6394b6
 800753c:	404ca5dc 	.word	0x404ca5dc

08007540 <OffsetAngle>:
 *
 * @returns None
 */
//15. Offset euler angle
void OffsetAngle(Euler_t *Angle, Euler_t Offset)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	eef0 6a40 	vmov.f32	s13, s0
 800754c:	eeb0 7a60 	vmov.f32	s14, s1
 8007550:	eef0 7a41 	vmov.f32	s15, s2
 8007554:	edc7 6a00 	vstr	s13, [r7]
 8007558:	ed87 7a01 	vstr	s14, [r7, #4]
 800755c:	edc7 7a02 	vstr	s15, [r7, #8]
    Angle->roll += Offset.roll;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	ed93 7a00 	vldr	s14, [r3]
 8007566:	edd7 7a00 	vldr	s15, [r7]
 800756a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	edc3 7a00 	vstr	s15, [r3]
    Angle->pitch += Offset.pitch;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	ed93 7a01 	vldr	s14, [r3, #4]
 800757a:	edd7 7a01 	vldr	s15, [r7, #4]
 800757e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	edc3 7a01 	vstr	s15, [r3, #4]
    Angle->yaw += Offset.yaw;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	ed93 7a02 	vldr	s14, [r3, #8]
 800758e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800759c:	bf00      	nop
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <compute_control>:
 *
 * @returns None
 */
//1. LQR controller
void compute_control(double x[6], double K[4][6], double u[4])
{
 80075a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075aa:	b089      	sub	sp, #36	; 0x24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
    int m = 4, n = 6;
 80075b4:	2304      	movs	r3, #4
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	2306      	movs	r3, #6
 80075ba:	613b      	str	r3, [r7, #16]
    // Compute u = -K * x
    for (int i = 0; i < m; i++)
 80075bc:	2300      	movs	r3, #0
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	e039      	b.n	8007636 <compute_control+0x8e>
    {
        for (int j = 0; j < n; j++)
 80075c2:	2300      	movs	r3, #0
 80075c4:	61bb      	str	r3, [r7, #24]
 80075c6:	e02f      	b.n	8007628 <compute_control+0x80>
        {
            u[i] += K[i][j] * x[j];
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	4413      	add	r3, r2
 80075d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	4613      	mov	r3, r2
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4413      	add	r3, r2
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	461a      	mov	r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	441a      	add	r2, r3
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	4413      	add	r3, r2
 80075ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	00db      	lsls	r3, r3, #3
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4413      	add	r3, r2
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f8 fffd 	bl	80005f8 <__aeabi_dmul>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4610      	mov	r0, r2
 8007604:	4619      	mov	r1, r3
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	00db      	lsls	r3, r3, #3
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	18d6      	adds	r6, r2, r3
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4620      	mov	r0, r4
 8007614:	4629      	mov	r1, r5
 8007616:	f7f8 fe39 	bl	800028c <__adddf3>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	e9c6 2300 	strd	r2, r3, [r6]
        for (int j = 0; j < n; j++)
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	3301      	adds	r3, #1
 8007626:	61bb      	str	r3, [r7, #24]
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	429a      	cmp	r2, r3
 800762e:	dbcb      	blt.n	80075c8 <compute_control+0x20>
    for (int i = 0; i < m; i++)
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	3301      	adds	r3, #1
 8007634:	61fb      	str	r3, [r7, #28]
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	429a      	cmp	r2, r3
 800763c:	dbc1      	blt.n	80075c2 <compute_control+0x1a>
        }
    }
}
 800763e:	bf00      	nop
 8007640:	bf00      	nop
 8007642:	3724      	adds	r7, #36	; 0x24
 8007644:	46bd      	mov	sp, r7
 8007646:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007648 <Lowpass>:
 *
 * @returns None
 */
//1. Lowpass filter
void Lowpass(float in,Lowpass_t *filter, float iCutOffFrequency)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	ed87 0a03 	vstr	s0, [r7, #12]
 8007652:	60b8      	str	r0, [r7, #8]
 8007654:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->ePow = (1-exp(-DELTA_T * 2 * PI * iCutOffFrequency));
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7f8 ff75 	bl	8000548 <__aeabi_f2d>
 800765e:	a31d      	add	r3, pc, #116	; (adr r3, 80076d4 <Lowpass+0x8c>)
 8007660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007664:	f7f8 ffc8 	bl	80005f8 <__aeabi_dmul>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	ec43 2b17 	vmov	d7, r2, r3
 8007670:	eeb0 0a47 	vmov.f32	s0, s14
 8007674:	eef0 0a67 	vmov.f32	s1, s15
 8007678:	f003 fc52 	bl	800af20 <exp>
 800767c:	ec53 2b10 	vmov	r2, r3, d0
 8007680:	f04f 0000 	mov.w	r0, #0
 8007684:	4912      	ldr	r1, [pc, #72]	; (80076d0 <Lowpass+0x88>)
 8007686:	f7f8 fdff 	bl	8000288 <__aeabi_dsub>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4610      	mov	r0, r2
 8007690:	4619      	mov	r1, r3
 8007692:	f7f9 fa89 	bl	8000ba8 <__aeabi_d2f>
 8007696:	4602      	mov	r2, r0
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	605a      	str	r2, [r3, #4]
	filter->out += (in - filter->out) * filter->ePow;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	ed93 7a00 	vldr	s14, [r3]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	edd3 7a00 	vldr	s15, [r3]
 80076a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80076ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80076b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	edc3 7a00 	vstr	s15, [r3]
}
 80076c4:	bf00      	nop
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	f3af 8000 	nop.w
 80076d0:	3ff00000 	.word	0x3ff00000
 80076d4:	b68b71bc 	.word	0xb68b71bc
 80076d8:	bf89bc65 	.word	0xbf89bc65

080076dc <Lowpass4MPU>:
//2. Lowpass filter for Accel
void Lowpass4MPU(MPU6050_t input,MPU6050_t *output)
{
 80076dc:	b084      	sub	sp, #16
 80076de:	b490      	push	{r4, r7}
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	f107 0408 	add.w	r4, r7, #8
 80076e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	static float ePow_Accel = 1-exp(-DELTA_T * 2 * PI * 2);
//	float ePow_Gyro 	=	1-exp(-DELTA_T * 2 * PI * 1.5);
//	float ePow_Magn	= 1-exp(-DELTA_T * 2 * PI * 1);

	output->Ax += (input.Ax - output->Ax) * ePow_Accel;
 80076ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80076f0:	edd7 6a04 	vldr	s13, [r7, #16]
 80076f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80076fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80076fe:	4b24      	ldr	r3, [pc, #144]	; (8007790 <Lowpass4MPU+0xb4>)
 8007700:	edd3 7a00 	vldr	s15, [r3]
 8007704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800770c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770e:	edc3 7a02 	vstr	s15, [r3, #8]
	output->Ay += (input.Ay - output->Ay) * ePow_Accel;
 8007712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007714:	ed93 7a03 	vldr	s14, [r3, #12]
 8007718:	edd7 6a05 	vldr	s13, [r7, #20]
 800771c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800771e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007722:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007726:	4b1a      	ldr	r3, [pc, #104]	; (8007790 <Lowpass4MPU+0xb4>)
 8007728:	edd3 7a00 	vldr	s15, [r3]
 800772c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007736:	edc3 7a03 	vstr	s15, [r3, #12]
	output->Az += (input.Az - output->Az) * ePow_Accel;
 800773a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773c:	ed93 7a04 	vldr	s14, [r3, #16]
 8007740:	edd7 6a06 	vldr	s13, [r7, #24]
 8007744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007746:	edd3 7a04 	vldr	s15, [r3, #16]
 800774a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800774e:	4b10      	ldr	r3, [pc, #64]	; (8007790 <Lowpass4MPU+0xb4>)
 8007750:	edd3 7a00 	vldr	s15, [r3]
 8007754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800775c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800775e:	edc3 7a04 	vstr	s15, [r3, #16]
//
//	output->Mx += (input.Mx - output->Mx) * ePow_Magn;
//	output->My += (input.My - output->My) * ePow_Magn;
//	output->Mz += (input.Mz - output->Mz) * ePow_Magn;

	output->Gx = input.Gx;
 8007762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007766:	61da      	str	r2, [r3, #28]
	output->Gy = input.Gy;
 8007768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800776a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776c:	621a      	str	r2, [r3, #32]
	output->Gz = input.Gz;
 800776e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007772:	625a      	str	r2, [r3, #36]	; 0x24

	output->Mx = input.Mx;
 8007774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007778:	631a      	str	r2, [r3, #48]	; 0x30
	output->My = input.My;
 800777a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800777c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800777e:	635a      	str	r2, [r3, #52]	; 0x34
	output->Mz = input.Mz;
 8007780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007784:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007786:	bf00      	nop
 8007788:	46bd      	mov	sp, r7
 800778a:	bc90      	pop	{r4, r7}
 800778c:	b004      	add	sp, #16
 800778e:	4770      	bx	lr
 8007790:	2000013c 	.word	0x2000013c

08007794 <quat_mult>:
 *
 * @returns The product of the two quaternions.
 */
//1. Multiply two quaternions and return a copy of the result, prod = L * R
Quaternion_t quat_mult(Quaternion_t L, Quaternion_t R)
{
 8007794:	b490      	push	{r4, r7}
 8007796:	b094      	sub	sp, #80	; 0x50
 8007798:	af00      	add	r7, sp, #0
 800779a:	eeb0 4a40 	vmov.f32	s8, s0
 800779e:	eef0 4a60 	vmov.f32	s9, s1
 80077a2:	eeb0 5a41 	vmov.f32	s10, s2
 80077a6:	eef0 5a61 	vmov.f32	s11, s3
 80077aa:	eeb0 6a42 	vmov.f32	s12, s4
 80077ae:	eef0 6a62 	vmov.f32	s13, s5
 80077b2:	eeb0 7a43 	vmov.f32	s14, s6
 80077b6:	eef0 7a63 	vmov.f32	s15, s7
 80077ba:	ed87 4a08 	vstr	s8, [r7, #32]
 80077be:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 80077c2:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 80077c6:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 80077ca:	ed87 6a04 	vstr	s12, [r7, #16]
 80077ce:	edc7 6a05 	vstr	s13, [r7, #20]
 80077d2:	ed87 7a06 	vstr	s14, [r7, #24]
 80077d6:	edc7 7a07 	vstr	s15, [r7, #28]
    Quaternion_t product;
    product.q1 = (L.q1 * R.q1) - (L.q2 * R.q2) - (L.q3 * R.q3) - (L.q4 * R.q4);
 80077da:	ed97 7a08 	vldr	s14, [r7, #32]
 80077de:	edd7 7a04 	vldr	s15, [r7, #16]
 80077e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077e6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80077ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80077ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077f6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80077fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80077fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007802:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007806:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800780a:	edd7 7a07 	vldr	s15, [r7, #28]
 800780e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007816:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
 800781a:	ed97 7a08 	vldr	s14, [r7, #32]
 800781e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007822:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007826:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800782a:	edd7 7a04 	vldr	s15, [r7, #16]
 800782e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007836:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800783a:	edd7 7a07 	vldr	s15, [r7, #28]
 800783e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007846:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800784a:	edd7 7a06 	vldr	s15, [r7, #24]
 800784e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007856:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
 800785a:	ed97 7a08 	vldr	s14, [r7, #32]
 800785e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007862:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007866:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800786a:	edd7 7a07 	vldr	s15, [r7, #28]
 800786e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007876:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800787a:	edd7 7a04 	vldr	s15, [r7, #16]
 800787e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007882:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007886:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800788a:	edd7 7a05 	vldr	s15, [r7, #20]
 800788e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007896:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
 800789a:	ed97 7a08 	vldr	s14, [r7, #32]
 800789e:	edd7 7a07 	vldr	s15, [r7, #28]
 80078a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078a6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80078aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80078ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078b6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80078ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80078be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078c6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80078ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80078ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078d6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    return product;
 80078da:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80078de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80078e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80078ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f0:	ee06 0a10 	vmov	s12, r0
 80078f4:	ee06 1a90 	vmov	s13, r1
 80078f8:	ee07 2a10 	vmov	s14, r2
 80078fc:	ee07 3a90 	vmov	s15, r3
}
 8007900:	eeb0 0a46 	vmov.f32	s0, s12
 8007904:	eef0 0a66 	vmov.f32	s1, s13
 8007908:	eeb0 1a47 	vmov.f32	s2, s14
 800790c:	eef0 1a67 	vmov.f32	s3, s15
 8007910:	3750      	adds	r7, #80	; 0x50
 8007912:	46bd      	mov	sp, r7
 8007914:	bc90      	pop	{r4, r7}
 8007916:	4770      	bx	lr

08007918 <quat_scalar>:
 *
 * @returns None
 */
//2. Multiply a reference of a quaternion by a scalar, q = s*q
void quat_scalar(Quaternion_t *q, float scalar)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	ed87 0a00 	vstr	s0, [r7]
    q->q1 *= scalar;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	ed93 7a00 	vldr	s14, [r3]
 800792a:	edd7 7a00 	vldr	s15, [r7]
 800792e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	edc3 7a00 	vstr	s15, [r3]
    q->q2 *= scalar;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	ed93 7a01 	vldr	s14, [r3, #4]
 800793e:	edd7 7a00 	vldr	s15, [r7]
 8007942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	edc3 7a01 	vstr	s15, [r3, #4]
    q->q3 *= scalar;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007952:	edd7 7a00 	vldr	s15, [r7]
 8007956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	edc3 7a02 	vstr	s15, [r3, #8]
    q->q4 *= scalar;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	ed93 7a03 	vldr	s14, [r3, #12]
 8007966:	edd7 7a00 	vldr	s15, [r7]
 800796a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <quat_add>:
 *
 * @returns None
 */
//3. Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
void quat_add(Quaternion_t *Sum, Quaternion_t L, Quaternion_t R)
{
 8007980:	b480      	push	{r7}
 8007982:	b08b      	sub	sp, #44	; 0x2c
 8007984:	af00      	add	r7, sp, #0
 8007986:	6278      	str	r0, [r7, #36]	; 0x24
 8007988:	eeb0 4a40 	vmov.f32	s8, s0
 800798c:	eef0 4a60 	vmov.f32	s9, s1
 8007990:	eeb0 5a41 	vmov.f32	s10, s2
 8007994:	eef0 5a61 	vmov.f32	s11, s3
 8007998:	eeb0 6a42 	vmov.f32	s12, s4
 800799c:	eef0 6a62 	vmov.f32	s13, s5
 80079a0:	eeb0 7a43 	vmov.f32	s14, s6
 80079a4:	eef0 7a63 	vmov.f32	s15, s7
 80079a8:	ed87 4a05 	vstr	s8, [r7, #20]
 80079ac:	edc7 4a06 	vstr	s9, [r7, #24]
 80079b0:	ed87 5a07 	vstr	s10, [r7, #28]
 80079b4:	edc7 5a08 	vstr	s11, [r7, #32]
 80079b8:	ed87 6a01 	vstr	s12, [r7, #4]
 80079bc:	edc7 6a02 	vstr	s13, [r7, #8]
 80079c0:	ed87 7a03 	vstr	s14, [r7, #12]
 80079c4:	edc7 7a04 	vstr	s15, [r7, #16]
    Sum->q1 = L.q1 + R.q1;
 80079c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80079cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80079d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	edc3 7a00 	vstr	s15, [r3]
    Sum->q2 = L.q2 + R.q2;
 80079da:	ed97 7a06 	vldr	s14, [r7, #24]
 80079de:	edd7 7a02 	vldr	s15, [r7, #8]
 80079e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	edc3 7a01 	vstr	s15, [r3, #4]
    Sum->q3 = L.q3 + R.q3;
 80079ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80079f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80079f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	edc3 7a02 	vstr	s15, [r3, #8]
    Sum->q4 = L.q4 + R.q4;
 80079fe:	ed97 7a08 	vldr	s14, [r7, #32]
 8007a02:	edd7 7a04 	vldr	s15, [r7, #16]
 8007a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007a10:	bf00      	nop
 8007a12:	372c      	adds	r7, #44	; 0x2c
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <quat_sub>:
 *
 * @returns None
 */
//4. Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
void quat_sub(Quaternion_t *Sum, Quaternion_t L, Quaternion_t R)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b08b      	sub	sp, #44	; 0x2c
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6278      	str	r0, [r7, #36]	; 0x24
 8007a24:	eeb0 4a40 	vmov.f32	s8, s0
 8007a28:	eef0 4a60 	vmov.f32	s9, s1
 8007a2c:	eeb0 5a41 	vmov.f32	s10, s2
 8007a30:	eef0 5a61 	vmov.f32	s11, s3
 8007a34:	eeb0 6a42 	vmov.f32	s12, s4
 8007a38:	eef0 6a62 	vmov.f32	s13, s5
 8007a3c:	eeb0 7a43 	vmov.f32	s14, s6
 8007a40:	eef0 7a63 	vmov.f32	s15, s7
 8007a44:	ed87 4a05 	vstr	s8, [r7, #20]
 8007a48:	edc7 4a06 	vstr	s9, [r7, #24]
 8007a4c:	ed87 5a07 	vstr	s10, [r7, #28]
 8007a50:	edc7 5a08 	vstr	s11, [r7, #32]
 8007a54:	ed87 6a01 	vstr	s12, [r7, #4]
 8007a58:	edc7 6a02 	vstr	s13, [r7, #8]
 8007a5c:	ed87 7a03 	vstr	s14, [r7, #12]
 8007a60:	edc7 7a04 	vstr	s15, [r7, #16]
    Sum->q1 = L.q1 - R.q1;
 8007a64:	ed97 7a05 	vldr	s14, [r7, #20]
 8007a68:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	edc3 7a00 	vstr	s15, [r3]
    Sum->q2 = L.q2 - R.q2;
 8007a76:	ed97 7a06 	vldr	s14, [r7, #24]
 8007a7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	edc3 7a01 	vstr	s15, [r3, #4]
    Sum->q3 = L.q3 - R.q3;
 8007a88:	ed97 7a07 	vldr	s14, [r7, #28]
 8007a8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	edc3 7a02 	vstr	s15, [r3, #8]
    Sum->q4 = L.q4 - R.q4;
 8007a9a:	ed97 7a08 	vldr	s14, [r7, #32]
 8007a9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007aac:	bf00      	nop
 8007aae:	372c      	adds	r7, #44	; 0x2c
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <quat_conjugate>:
 *
 * @returns The conjugate of the input quaternion.
 */
//5. the conjugate of a quaternion is it's imaginary component sign changed  q* = [s, -v] if q = [s, v]
Quaternion_t quat_conjugate(Quaternion_t q)
{
 8007ab8:	b490      	push	{r4, r7}
 8007aba:	b08c      	sub	sp, #48	; 0x30
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	eeb0 6a40 	vmov.f32	s12, s0
 8007ac2:	eef0 6a60 	vmov.f32	s13, s1
 8007ac6:	eeb0 7a41 	vmov.f32	s14, s2
 8007aca:	eef0 7a61 	vmov.f32	s15, s3
 8007ace:	ed87 6a04 	vstr	s12, [r7, #16]
 8007ad2:	edc7 6a05 	vstr	s13, [r7, #20]
 8007ad6:	ed87 7a06 	vstr	s14, [r7, #24]
 8007ada:	edc7 7a07 	vstr	s15, [r7, #28]
    q.q2 = -q.q2;
 8007ade:	edd7 7a05 	vldr	s15, [r7, #20]
 8007ae2:	eef1 7a67 	vneg.f32	s15, s15
 8007ae6:	edc7 7a05 	vstr	s15, [r7, #20]
    q.q3 = -q.q3;
 8007aea:	edd7 7a06 	vldr	s15, [r7, #24]
 8007aee:	eef1 7a67 	vneg.f32	s15, s15
 8007af2:	edc7 7a06 	vstr	s15, [r7, #24]
    q.q4 = -q.q4;
 8007af6:	edd7 7a07 	vldr	s15, [r7, #28]
 8007afa:	eef1 7a67 	vneg.f32	s15, s15
 8007afe:	edc7 7a07 	vstr	s15, [r7, #28]
    return q;
 8007b02:	f107 0420 	add.w	r4, r7, #32
 8007b06:	f107 0310 	add.w	r3, r7, #16
 8007b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007b10:	6a38      	ldr	r0, [r7, #32]
 8007b12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	ee06 0a10 	vmov	s12, r0
 8007b1c:	ee06 1a90 	vmov	s13, r1
 8007b20:	ee07 2a10 	vmov	s14, r2
 8007b24:	ee07 3a90 	vmov	s15, r3
}
 8007b28:	eeb0 0a46 	vmov.f32	s0, s12
 8007b2c:	eef0 0a66 	vmov.f32	s1, s13
 8007b30:	eeb0 1a47 	vmov.f32	s2, s14
 8007b34:	eef0 1a67 	vmov.f32	s3, s15
 8007b38:	3730      	adds	r7, #48	; 0x30
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc90      	pop	{r4, r7}
 8007b3e:	4770      	bx	lr

08007b40 <quat_Norm>:
 *
 * @returns The norm of the quaternion.
 */
//6. norm of a quaternion is the same as a complex number
float quat_Norm(Quaternion_t q)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	eeb0 6a40 	vmov.f32	s12, s0
 8007b4a:	eef0 6a60 	vmov.f32	s13, s1
 8007b4e:	eeb0 7a41 	vmov.f32	s14, s2
 8007b52:	eef0 7a61 	vmov.f32	s15, s3
 8007b56:	ed87 6a00 	vstr	s12, [r7]
 8007b5a:	edc7 6a01 	vstr	s13, [r7, #4]
 8007b5e:	ed87 7a02 	vstr	s14, [r7, #8]
 8007b62:	edc7 7a03 	vstr	s15, [r7, #12]
    return sqrt(q.q1 * q.q1 + q.q2 * q.q2 + q.q3 * q.q3 + q.q4 * q.q4);
 8007b66:	ed97 7a00 	vldr	s14, [r7]
 8007b6a:	edd7 7a00 	vldr	s15, [r7]
 8007b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b72:	edd7 6a01 	vldr	s13, [r7, #4]
 8007b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b82:	edd7 6a02 	vldr	s13, [r7, #8]
 8007b86:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b92:	edd7 6a03 	vldr	s13, [r7, #12]
 8007b96:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ba2:	ee17 0a90 	vmov	r0, s15
 8007ba6:	f7f8 fccf 	bl	8000548 <__aeabi_f2d>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	ec43 2b10 	vmov	d0, r2, r3
 8007bb2:	f003 fa6d 	bl	800b090 <sqrt>
 8007bb6:	ec53 2b10 	vmov	r2, r3, d0
 8007bba:	4610      	mov	r0, r2
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	f7f8 fff3 	bl	8000ba8 <__aeabi_d2f>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	ee07 3a90 	vmov	s15, r3
}
 8007bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <quat_Normalization>:
 *
 * @returns None
 */
//7. Normalizes pointer q by calling quat_Norm(q),
void quat_Normalization(Quaternion_t *q)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
    float norm = quat_Norm(*q);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	ed93 6a00 	vldr	s12, [r3]
 8007be0:	edd3 6a01 	vldr	s13, [r3, #4]
 8007be4:	ed93 7a02 	vldr	s14, [r3, #8]
 8007be8:	edd3 7a03 	vldr	s15, [r3, #12]
 8007bec:	eeb0 0a46 	vmov.f32	s0, s12
 8007bf0:	eef0 0a66 	vmov.f32	s1, s13
 8007bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8007bf8:	eef0 1a67 	vmov.f32	s3, s15
 8007bfc:	f7ff ffa0 	bl	8007b40 <quat_Norm>
 8007c00:	ed87 0a03 	vstr	s0, [r7, #12]
    q->q1 /= norm;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	edd3 6a00 	vldr	s13, [r3]
 8007c0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8007c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	edc3 7a00 	vstr	s15, [r3]
    q->q2 /= norm;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	edd3 6a01 	vldr	s13, [r3, #4]
 8007c1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	edc3 7a01 	vstr	s15, [r3, #4]
    q->q3 /= norm;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	edd3 6a02 	vldr	s13, [r3, #8]
 8007c32:	ed97 7a03 	vldr	s14, [r7, #12]
 8007c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	edc3 7a02 	vstr	s15, [r3, #8]
    q->q4 /= norm;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	edd3 6a03 	vldr	s13, [r3, #12]
 8007c46:	ed97 7a03 	vldr	s14, [r7, #12]
 8007c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <Madgwick_update>:
 *
 * @returns None
 */
//8. Madgwick filter for MARG
void Madgwick_update(MPU6050_t *DataStruct, Quaternion_t *q_est)
{
 8007c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c60:	b0de      	sub	sp, #376	; 0x178
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007c68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007c6c:	6018      	str	r0, [r3, #0]
 8007c6e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007c72:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8007c76:	6019      	str	r1, [r3, #0]
    float ax = DataStruct->Ax;
 8007c78:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007c7c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    float ay = DataStruct->Ay;
 8007c88:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007c8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    float az = DataStruct->Az;
 8007c98:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007c9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    float gx = DataStruct->Gx;
 8007ca8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007cac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    float gy = DataStruct->Gy;
 8007cb8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007cbc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    float gz = DataStruct->Gz;
 8007cc8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007ccc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    float mx = DataStruct->Mx;
 8007cd8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007cdc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    float my = DataStruct->My;
 8007ce8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007cec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    float mz = DataStruct->Mz;
 8007cf8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007cfc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    // Variables and constants
    float F_g[3] = {0};    // eq(15/21/25) objective function for gravity
 8007d08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	605a      	str	r2, [r3, #4]
 8007d12:	609a      	str	r2, [r3, #8]
    float J_g[3][4] = {0}; // jacobian matrix for gravity
 8007d14:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007d18:	2230      	movs	r2, #48	; 0x30
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f002 fc61 	bl	800a5e4 <memset>
    float F_b[3] = {0};    // eq(15/21/29) objective function for magnetic
 8007d22:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	605a      	str	r2, [r3, #4]
 8007d2c:	609a      	str	r2, [r3, #8]
    float J_b[3][4] = {0}; // jacobian matrix for magnetic
 8007d2e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007d32:	2230      	movs	r2, #48	; 0x30
 8007d34:	2100      	movs	r1, #0
 8007d36:	4618      	mov	r0, r3
 8007d38:	f002 fc54 	bl	800a5e4 <memset>
    static Quaternion_t q_w_gradient_integral = {0};
    Quaternion_t q_est_prev = *q_est;
 8007d3c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007d40:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8007d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Quaternion_t q_est_dot = {0}; // eq 42 and 43
 8007d50:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	605a      	str	r2, [r3, #4]
 8007d5a:	609a      	str	r2, [r3, #8]
 8007d5c:	60da      	str	r2, [r3, #12]
    Quaternion_t gradient = {0};
 8007d5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	605a      	str	r2, [r3, #4]
 8007d68:	609a      	str	r2, [r3, #8]
 8007d6a:	60da      	str	r2, [r3, #12]

    Quaternion_t q_a = {0, ax, ay, az}; // eq (24)
 8007d6c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007d70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007d74:	f04f 0200 	mov.w	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007d7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007d82:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007d86:	605a      	str	r2, [r3, #4]
 8007d88:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007d8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007d90:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8007d94:	609a      	str	r2, [r3, #8]
 8007d96:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007d9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007d9e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8007da2:	60da      	str	r2, [r3, #12]
    if (quat_Norm(q_a) == 0)
 8007da4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007da8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007dac:	ed93 6a00 	vldr	s12, [r3]
 8007db0:	edd3 6a01 	vldr	s13, [r3, #4]
 8007db4:	ed93 7a02 	vldr	s14, [r3, #8]
 8007db8:	edd3 7a03 	vldr	s15, [r3, #12]
 8007dbc:	eeb0 0a46 	vmov.f32	s0, s12
 8007dc0:	eef0 0a66 	vmov.f32	s1, s13
 8007dc4:	eeb0 1a47 	vmov.f32	s2, s14
 8007dc8:	eef0 1a67 	vmov.f32	s3, s15
 8007dcc:	f7ff feb8 	bl	8007b40 <quat_Norm>
 8007dd0:	eef0 7a40 	vmov.f32	s15, s0
 8007dd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ddc:	f000 86ac 	beq.w	8008b38 <Madgwick_update+0xedc>
        return;
    quat_Normalization(&q_a); // normalize the acceleration quaternion to be a unit quaternion
 8007de0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff fef4 	bl	8007bd2 <quat_Normalization>
    // const Quaternion_t q_g_ref = {0, 0, 0, 1};// eq (23) not needed because I used eq 25 instead of eq 21

    Quaternion_t q_m = {0, mx, my, mz}; // eq (28)
 8007dea:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007dee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007dfc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e00:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8007e04:	605a      	str	r2, [r3, #4]
 8007e06:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007e0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e0e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8007e12:	609a      	str	r2, [r3, #8]
 8007e14:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007e18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e1c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8007e20:	60da      	str	r2, [r3, #12]
    if (quat_Norm(q_m) == 0)
 8007e22:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007e26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e2a:	ed93 6a00 	vldr	s12, [r3]
 8007e2e:	edd3 6a01 	vldr	s13, [r3, #4]
 8007e32:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e36:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e3a:	eeb0 0a46 	vmov.f32	s0, s12
 8007e3e:	eef0 0a66 	vmov.f32	s1, s13
 8007e42:	eeb0 1a47 	vmov.f32	s2, s14
 8007e46:	eef0 1a67 	vmov.f32	s3, s15
 8007e4a:	f7ff fe79 	bl	8007b40 <quat_Norm>
 8007e4e:	eef0 7a40 	vmov.f32	s15, s0
 8007e52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e5a:	d10d      	bne.n	8007e78 <Madgwick_update+0x21c>
    {
        Madgwick_imu(DataStruct, q_est);
 8007e5c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007e60:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8007e64:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007e68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007e6c:	6811      	ldr	r1, [r2, #0]
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	f000 fe70 	bl	8008b54 <Madgwick_imu>
        return;
 8007e74:	f000 be61 	b.w	8008b3a <Madgwick_update+0xede>
    }
    quat_Normalization(&q_m); // normalize the magnetic quaternion to be a unit quaternion
 8007e78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff fea8 	bl	8007bd2 <quat_Normalization>
    // const Quaternion_t q_b_ref = {0, 0.99, 0, -0.13};
    //  Magnetic distortion compensation
    Quaternion_t h = quat_mult(q_est_prev, quat_mult(q_m, quat_conjugate(q_est_prev))); // eq(45) (Group 1)
 8007e82:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8007e86:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8007e8a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8007e8e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007e92:	eeb0 0a46 	vmov.f32	s0, s12
 8007e96:	eef0 0a66 	vmov.f32	s1, s13
 8007e9a:	eeb0 1a47 	vmov.f32	s2, s14
 8007e9e:	eef0 1a67 	vmov.f32	s3, s15
 8007ea2:	f7ff fe09 	bl	8007ab8 <quat_conjugate>
 8007ea6:	eeb0 6a40 	vmov.f32	s12, s0
 8007eaa:	eef0 6a60 	vmov.f32	s13, s1
 8007eae:	eeb0 7a41 	vmov.f32	s14, s2
 8007eb2:	eef0 7a61 	vmov.f32	s15, s3
 8007eb6:	ed87 6a49 	vstr	s12, [r7, #292]	; 0x124
 8007eba:	edc7 6a4a 	vstr	s13, [r7, #296]	; 0x128
 8007ebe:	ed87 7a4b 	vstr	s14, [r7, #300]	; 0x12c
 8007ec2:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
 8007ec6:	ed97 4a49 	vldr	s8, [r7, #292]	; 0x124
 8007eca:	edd7 4a4a 	vldr	s9, [r7, #296]	; 0x128
 8007ece:	ed97 5a4b 	vldr	s10, [r7, #300]	; 0x12c
 8007ed2:	edd7 5a4c 	vldr	s11, [r7, #304]	; 0x130
 8007ed6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007eda:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ede:	ed93 6a00 	vldr	s12, [r3]
 8007ee2:	edd3 6a01 	vldr	s13, [r3, #4]
 8007ee6:	ed93 7a02 	vldr	s14, [r3, #8]
 8007eea:	edd3 7a03 	vldr	s15, [r3, #12]
 8007eee:	eeb0 2a44 	vmov.f32	s4, s8
 8007ef2:	eef0 2a64 	vmov.f32	s5, s9
 8007ef6:	eeb0 3a45 	vmov.f32	s6, s10
 8007efa:	eef0 3a65 	vmov.f32	s7, s11
 8007efe:	eeb0 0a46 	vmov.f32	s0, s12
 8007f02:	eef0 0a66 	vmov.f32	s1, s13
 8007f06:	eeb0 1a47 	vmov.f32	s2, s14
 8007f0a:	eef0 1a67 	vmov.f32	s3, s15
 8007f0e:	f7ff fc41 	bl	8007794 <quat_mult>
 8007f12:	eeb0 6a40 	vmov.f32	s12, s0
 8007f16:	eef0 6a60 	vmov.f32	s13, s1
 8007f1a:	eeb0 7a41 	vmov.f32	s14, s2
 8007f1e:	eef0 7a61 	vmov.f32	s15, s3
 8007f22:	ed87 6a4d 	vstr	s12, [r7, #308]	; 0x134
 8007f26:	edc7 6a4e 	vstr	s13, [r7, #312]	; 0x138
 8007f2a:	ed87 7a4f 	vstr	s14, [r7, #316]	; 0x13c
 8007f2e:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
 8007f32:	ed97 4a4d 	vldr	s8, [r7, #308]	; 0x134
 8007f36:	edd7 4a4e 	vldr	s9, [r7, #312]	; 0x138
 8007f3a:	ed97 5a4f 	vldr	s10, [r7, #316]	; 0x13c
 8007f3e:	edd7 5a50 	vldr	s11, [r7, #320]	; 0x140
 8007f42:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8007f46:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8007f4a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8007f4e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007f52:	eeb0 2a44 	vmov.f32	s4, s8
 8007f56:	eef0 2a64 	vmov.f32	s5, s9
 8007f5a:	eeb0 3a45 	vmov.f32	s6, s10
 8007f5e:	eef0 3a65 	vmov.f32	s7, s11
 8007f62:	eeb0 0a46 	vmov.f32	s0, s12
 8007f66:	eef0 0a66 	vmov.f32	s1, s13
 8007f6a:	eeb0 1a47 	vmov.f32	s2, s14
 8007f6e:	eef0 1a67 	vmov.f32	s3, s15
 8007f72:	f7ff fc0f 	bl	8007794 <quat_mult>
 8007f76:	eeb0 6a40 	vmov.f32	s12, s0
 8007f7a:	eef0 6a60 	vmov.f32	s13, s1
 8007f7e:	eeb0 7a41 	vmov.f32	s14, s2
 8007f82:	eef0 7a61 	vmov.f32	s15, s3
 8007f86:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007f8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f8e:	ed83 6a00 	vstr	s12, [r3]
 8007f92:	edc3 6a01 	vstr	s13, [r3, #4]
 8007f96:	ed83 7a02 	vstr	s14, [r3, #8]
 8007f9a:	edc3 7a03 	vstr	s15, [r3, #12]
    Quaternion_t b = {0, sqrt(h.q2 * h.q2 + h.q3 * h.q3), 0, h.q4};                     // {0, 0.99, 0, -0.13} // eq(46)
 8007f9e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007fa2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007fb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fb4:	ed93 7a01 	vldr	s14, [r3, #4]
 8007fb8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007fbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8007fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007fc8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007fcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fd0:	edd3 6a02 	vldr	s13, [r3, #8]
 8007fd4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007fd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8007fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fe8:	ee17 0a90 	vmov	r0, s15
 8007fec:	f7f8 faac 	bl	8000548 <__aeabi_f2d>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	ec43 2b10 	vmov	d0, r2, r3
 8007ff8:	f003 f84a 	bl	800b090 <sqrt>
 8007ffc:	ec53 2b10 	vmov	r2, r3, d0
 8008000:	4610      	mov	r0, r2
 8008002:	4619      	mov	r1, r3
 8008004:	f7f8 fdd0 	bl	8000ba8 <__aeabi_d2f>
 8008008:	4602      	mov	r2, r0
 800800a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800800e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008012:	605a      	str	r2, [r3, #4]
 8008014:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008018:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	609a      	str	r2, [r3, #8]
 8008022:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008026:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008030:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008034:	60da      	str	r2, [r3, #12]

    Quaternion_t q_w = {0, gx, gy, gz}; // eq (10), places gyroscope readings in a quaternion
 8008036:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800803a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008048:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800804c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8008050:	605a      	str	r2, [r3, #4]
 8008052:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008056:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800805a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800805e:	609a      	str	r2, [r3, #8]
 8008060:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008064:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008068:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800806c:	60da      	str	r2, [r3, #12]

    // Compute the objective function for gravity, simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2 * (q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 800806e:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8008072:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800807a:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 800807e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8008082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800808a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800808e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008092:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008096:	edd3 7a01 	vldr	s15, [r3, #4]
 800809a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800809e:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
    F_g[1] = 2 * (q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3 * q_est_prev.q4) - q_a.q3;
 80080a2:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80080a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80080aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80080ae:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80080b2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80080b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80080ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080be:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80080c2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80080c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80080ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80080ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080d2:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
    F_g[2] = 2 * (0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 80080d6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80080da:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80080de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e2:	ee17 0a90 	vmov	r0, s15
 80080e6:	f7f8 fa2f 	bl	8000548 <__aeabi_f2d>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	f04f 0000 	mov.w	r0, #0
 80080f2:	49f8      	ldr	r1, [pc, #992]	; (80084d4 <Madgwick_update+0x878>)
 80080f4:	f7f8 f8c8 	bl	8000288 <__aeabi_dsub>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4614      	mov	r4, r2
 80080fe:	461d      	mov	r5, r3
 8008100:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8008104:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8008108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810c:	ee17 0a90 	vmov	r0, s15
 8008110:	f7f8 fa1a 	bl	8000548 <__aeabi_f2d>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	4620      	mov	r0, r4
 800811a:	4629      	mov	r1, r5
 800811c:	f7f8 f8b4 	bl	8000288 <__aeabi_dsub>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4610      	mov	r0, r2
 8008126:	4619      	mov	r1, r3
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	f7f8 f8ae 	bl	800028c <__adddf3>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4614      	mov	r4, r2
 8008136:	461d      	mov	r5, r3
 8008138:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800813c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	4618      	mov	r0, r3
 8008144:	f7f8 fa00 	bl	8000548 <__aeabi_f2d>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4620      	mov	r0, r4
 800814e:	4629      	mov	r1, r5
 8008150:	f7f8 f89a 	bl	8000288 <__aeabi_dsub>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4610      	mov	r0, r2
 800815a:	4619      	mov	r1, r3
 800815c:	f7f8 fd24 	bl	8000ba8 <__aeabi_d2f>
 8008160:	4603      	mov	r3, r0
 8008162:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    // Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2 * q_est_prev.q3;
 8008166:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800816a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800816e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008172:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
    J_g[0][1] = 2 * q_est_prev.q4;
 8008176:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800817a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800817e:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
    J_g[0][2] = -2 * q_est_prev.q1;
 8008182:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008186:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800818a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800818e:	edc7 7a3c 	vstr	s15, [r7, #240]	; 0xf0
    J_g[0][3] = 2 * q_est_prev.q2;
 8008192:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8008196:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800819a:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4

    J_g[1][0] = 2 * q_est_prev.q2;
 800819e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80081a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80081a6:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
    J_g[1][1] = 2 * q_est_prev.q1;
 80081aa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80081ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80081b2:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
    J_g[1][2] = 2 * q_est_prev.q4;
 80081b6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80081ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80081be:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
    J_g[1][3] = 2 * q_est_prev.q3;
 80081c2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80081c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80081ca:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104

    J_g[2][0] = 0;
 80081ce:	f04f 0300 	mov.w	r3, #0
 80081d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    J_g[2][1] = -4 * q_est_prev.q2;
 80081d6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80081da:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 80081de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081e2:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
    J_g[2][2] = -4 * q_est_prev.q3;
 80081e6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80081ea:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 80081ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081f2:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
    J_g[2][3] = 0;
 80081f6:	f04f 0300 	mov.w	r3, #0
 80081fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    // Compute the objective function for magnetic, simplified to equation (29) due to the 0's in the magnetic reference quaternion
    F_b[0] = 2 * b.q2 * (0.5 - q_est_prev.q3 * q_est_prev.q3 - q_est_prev.q4 * q_est_prev.q4) + 2 * b.q4 * (q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_m.q2;
 80081fe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008202:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008206:	edd3 7a01 	vldr	s15, [r3, #4]
 800820a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800820e:	ee17 0a90 	vmov	r0, s15
 8008212:	f7f8 f999 	bl	8000548 <__aeabi_f2d>
 8008216:	4604      	mov	r4, r0
 8008218:	460d      	mov	r5, r1
 800821a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800821e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8008222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008226:	ee17 0a90 	vmov	r0, s15
 800822a:	f7f8 f98d 	bl	8000548 <__aeabi_f2d>
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	f04f 0000 	mov.w	r0, #0
 8008236:	49a7      	ldr	r1, [pc, #668]	; (80084d4 <Madgwick_update+0x878>)
 8008238:	f7f8 f826 	bl	8000288 <__aeabi_dsub>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4690      	mov	r8, r2
 8008242:	4699      	mov	r9, r3
 8008244:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8008248:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800824c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008250:	ee17 0a90 	vmov	r0, s15
 8008254:	f7f8 f978 	bl	8000548 <__aeabi_f2d>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4640      	mov	r0, r8
 800825e:	4649      	mov	r1, r9
 8008260:	f7f8 f812 	bl	8000288 <__aeabi_dsub>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4620      	mov	r0, r4
 800826a:	4629      	mov	r1, r5
 800826c:	f7f8 f9c4 	bl	80005f8 <__aeabi_dmul>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	4614      	mov	r4, r2
 8008276:	461d      	mov	r5, r3
 8008278:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800827c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008280:	edd3 7a03 	vldr	s15, [r3, #12]
 8008284:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008288:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800828c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008290:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008294:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8008298:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800829c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80082a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80082a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a8:	ee17 0a90 	vmov	r0, s15
 80082ac:	f7f8 f94c 	bl	8000548 <__aeabi_f2d>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4620      	mov	r0, r4
 80082b6:	4629      	mov	r1, r5
 80082b8:	f7f7 ffe8 	bl	800028c <__adddf3>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4614      	mov	r4, r2
 80082c2:	461d      	mov	r5, r3
 80082c4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80082c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7f8 f93a 	bl	8000548 <__aeabi_f2d>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4620      	mov	r0, r4
 80082da:	4629      	mov	r1, r5
 80082dc:	f7f7 ffd4 	bl	8000288 <__aeabi_dsub>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4610      	mov	r0, r2
 80082e6:	4619      	mov	r1, r3
 80082e8:	f7f8 fc5e 	bl	8000ba8 <__aeabi_d2f>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    F_b[1] = 2 * b.q2 * (q_est_prev.q2 * q_est_prev.q3 - q_est_prev.q1 * q_est_prev.q4) + 2 * b.q4 * (q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3 * q_est_prev.q4) - q_m.q3;
 80082f2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80082f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80082fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80082fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008302:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8008306:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800830a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800830e:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8008312:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008316:	ee66 7a27 	vmul.f32	s15, s12, s15
 800831a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800831e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008322:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008326:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800832a:	edd3 7a03 	vldr	s15, [r3, #12]
 800832e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008332:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8008336:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800833a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800833e:	edd7 5a29 	vldr	s11, [r7, #164]	; 0xa4
 8008342:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008346:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800834a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800834e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008352:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008356:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800835a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800835e:	edd3 7a02 	vldr	s15, [r3, #8]
 8008362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008366:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
    F_b[2] = 2 * b.q2 * (q_est_prev.q1 * q_est_prev.q3 + q_est_prev.q2 * q_est_prev.q4) + 2 * b.q4 * (0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_m.q4;
 800836a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800836e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008372:	edd3 7a01 	vldr	s15, [r3, #4]
 8008376:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800837a:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 800837e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8008382:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008386:	ed97 6a28 	vldr	s12, [r7, #160]	; 0xa0
 800838a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800838e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800839a:	ee17 0a90 	vmov	r0, s15
 800839e:	f7f8 f8d3 	bl	8000548 <__aeabi_f2d>
 80083a2:	4604      	mov	r4, r0
 80083a4:	460d      	mov	r5, r1
 80083a6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80083aa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80083ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80083b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80083b6:	ee17 0a90 	vmov	r0, s15
 80083ba:	f7f8 f8c5 	bl	8000548 <__aeabi_f2d>
 80083be:	4680      	mov	r8, r0
 80083c0:	4689      	mov	r9, r1
 80083c2:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80083c6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80083ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ce:	ee17 0a90 	vmov	r0, s15
 80083d2:	f7f8 f8b9 	bl	8000548 <__aeabi_f2d>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	f04f 0000 	mov.w	r0, #0
 80083de:	493d      	ldr	r1, [pc, #244]	; (80084d4 <Madgwick_update+0x878>)
 80083e0:	f7f7 ff52 	bl	8000288 <__aeabi_dsub>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4692      	mov	sl, r2
 80083ea:	469b      	mov	fp, r3
 80083ec:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80083f0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80083f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f8:	ee17 0a90 	vmov	r0, s15
 80083fc:	f7f8 f8a4 	bl	8000548 <__aeabi_f2d>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4650      	mov	r0, sl
 8008406:	4659      	mov	r1, fp
 8008408:	f7f7 ff3e 	bl	8000288 <__aeabi_dsub>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4640      	mov	r0, r8
 8008412:	4649      	mov	r1, r9
 8008414:	f7f8 f8f0 	bl	80005f8 <__aeabi_dmul>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4620      	mov	r0, r4
 800841e:	4629      	mov	r1, r5
 8008420:	f7f7 ff34 	bl	800028c <__adddf3>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4614      	mov	r4, r2
 800842a:	461d      	mov	r5, r3
 800842c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008430:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	4618      	mov	r0, r3
 8008438:	f7f8 f886 	bl	8000548 <__aeabi_f2d>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4620      	mov	r0, r4
 8008442:	4629      	mov	r1, r5
 8008444:	f7f7 ff20 	bl	8000288 <__aeabi_dsub>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	4610      	mov	r0, r2
 800844e:	4619      	mov	r1, r3
 8008450:	f7f8 fbaa 	bl	8000ba8 <__aeabi_d2f>
 8008454:	4603      	mov	r3, r0
 8008456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    // Compute the Jacobian matrix, equation (26), for magnetic

    J_b[0][0] = -2 * b.q4 * q_est_prev.q3;
 800845a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800845e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008462:	edd3 7a03 	vldr	s15, [r3, #12]
 8008466:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800846a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800846e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8008472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008476:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    J_b[0][1] = 2 * b.q4 * q_est_prev.q4;
 800847a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800847e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008482:	edd3 7a03 	vldr	s15, [r3, #12]
 8008486:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800848a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800848e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008492:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    J_b[0][2] = -4 * b.q2 * q_est_prev.q3 - 2 * b.q4 * q_est_prev.q1;
 8008496:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800849a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800849e:	edd3 7a01 	vldr	s15, [r3, #4]
 80084a2:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 80084a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80084aa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80084ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084b2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80084b6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80084ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80084be:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80084c2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80084c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084ce:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 80084d2:	e001      	b.n	80084d8 <Madgwick_update+0x87c>
 80084d4:	3fe00000 	.word	0x3fe00000
    J_b[0][3] = -4 * b.q2 * q_est_prev.q4 + 2 * b.q4 * q_est_prev.q2;
 80084d8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80084dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80084e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80084e4:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 80084e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80084ec:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80084f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084f4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80084f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80084fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8008500:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008504:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8008508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800850c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008510:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

    J_b[1][0] = -2 * b.q2 * q_est_prev.q4 + 2 * b.q4 * q_est_prev.q2;
 8008514:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008518:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800851c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008520:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8008524:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008528:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800852c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008530:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008534:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008538:	edd3 7a03 	vldr	s15, [r3, #12]
 800853c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008540:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8008544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800854c:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
    J_b[1][1] = 2 * b.q2 * q_est_prev.q3 + 2 * b.q4 * q_est_prev.q1;
 8008550:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008554:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008558:	edd3 7a01 	vldr	s15, [r3, #4]
 800855c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008560:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8008564:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008568:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800856c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008570:	edd3 7a03 	vldr	s15, [r3, #12]
 8008574:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008578:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800857c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008584:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
    J_b[1][2] = 2 * b.q2 * q_est_prev.q2 + 2 * b.q4 * q_est_prev.q4;
 8008588:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800858c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008590:	edd3 7a01 	vldr	s15, [r3, #4]
 8008594:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008598:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800859c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085a0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80085a4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80085a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80085ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80085b0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80085b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085bc:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
    J_b[1][3] = -2 * b.q2 * q_est_prev.q1 + 2 * b.q4 * q_est_prev.q3;
 80085c0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80085c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80085c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80085cc:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80085d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80085d4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80085d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085dc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80085e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80085e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80085e8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80085ec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80085f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085f8:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

    J_b[2][0] = 2 * b.q2 * q_est_prev.q3;
 80085fc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008600:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008604:	edd3 7a01 	vldr	s15, [r3, #4]
 8008608:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800860c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8008610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008614:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
    J_b[2][1] = 2 * b.q2 * q_est_prev.q4 - 4 * b.q4 * q_est_prev.q2;
 8008618:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800861c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008620:	edd3 7a01 	vldr	s15, [r3, #4]
 8008624:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008628:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800862c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008630:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008634:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008638:	edd3 7a03 	vldr	s15, [r3, #12]
 800863c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008640:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008644:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8008648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800864c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008650:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
    J_b[2][2] = 2 * b.q2 * q_est_prev.q1 - 4 * b.q4 * q_est_prev.q3;
 8008654:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008658:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800865c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008660:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008664:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800866c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008670:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008674:	edd3 7a03 	vldr	s15, [r3, #12]
 8008678:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800867c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008680:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8008684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800868c:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
    J_b[2][3] = 2 * b.q2 * q_est_prev.q2;
 8008690:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008694:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008698:	edd3 7a01 	vldr	s15, [r3, #4]
 800869c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80086a0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80086a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a8:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8

    // now computer the gradient, equation (20), gradient = J_g'*F_g + J_b'*F_b
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2] + J_b[0][0] * F_b[0] + J_b[1][0] * F_b[1] + J_b[2][0] * F_b[2];
 80086ac:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 80086b0:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 80086b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086b8:	edd7 6a3e 	vldr	s13, [r7, #248]	; 0xf8
 80086bc:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 80086c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086c8:	edd7 6a42 	vldr	s13, [r7, #264]	; 0x108
 80086cc:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 80086d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086d8:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80086dc:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80086e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086e8:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80086ec:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80086f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086f8:	edd7 6a33 	vldr	s13, [r7, #204]	; 0xcc
 80086fc:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8008700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008708:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2] + J_b[0][1] * F_b[0] + J_b[1][1] * F_b[1] + J_b[2][1] * F_b[2];
 800870c:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8008710:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8008714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008718:	edd7 6a3f 	vldr	s13, [r7, #252]	; 0xfc
 800871c:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 8008720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008728:	edd7 6a43 	vldr	s13, [r7, #268]	; 0x10c
 800872c:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8008730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008734:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008738:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 800873c:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8008740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008748:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800874c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8008750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008754:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008758:	edd7 6a34 	vldr	s13, [r7, #208]	; 0xd0
 800875c:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8008760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008768:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2] + J_b[0][2] * F_b[0] + J_b[1][2] * F_b[1] + J_b[2][2] * F_b[2];
 800876c:	ed97 7a3c 	vldr	s14, [r7, #240]	; 0xf0
 8008770:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8008774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008778:	edd7 6a40 	vldr	s13, [r7, #256]	; 0x100
 800877c:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 8008780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008788:	edd7 6a44 	vldr	s13, [r7, #272]	; 0x110
 800878c:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8008790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008798:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 800879c:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80087a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087a8:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 80087ac:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80087b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087b8:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 80087bc:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80087c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087c8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    gradient.q4 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2] + J_b[0][3] * F_b[0] + J_b[1][3] * F_b[1] + J_b[2][3] * F_b[2];
 80087cc:	ed97 7a3d 	vldr	s14, [r7, #244]	; 0xf4
 80087d0:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 80087d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087d8:	edd7 6a41 	vldr	s13, [r7, #260]	; 0x104
 80087dc:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 80087e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087e8:	edd7 6a45 	vldr	s13, [r7, #276]	; 0x114
 80087ec:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 80087f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087f8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80087fc:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8008800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008804:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008808:	edd7 6a32 	vldr	s13, [r7, #200]	; 0xc8
 800880c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8008810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008814:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008818:	edd7 6a36 	vldr	s13, [r7, #216]	; 0xd8
 800881c:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8008820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008828:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    // Normalize the gradient, equation (44)
    quat_Normalization(&gradient);
 800882c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff f9ce 	bl	8007bd2 <quat_Normalization>

    // Gyroscope bias drift compensation (Group 2)
    Quaternion_t q_pro = q_est_prev;
 8008836:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800883a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800883e:	461c      	mov	r4, r3
 8008840:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    quat_scalar(&q_pro, 2);
 800884a:	f107 031c 	add.w	r3, r7, #28
 800884e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8008852:	4618      	mov	r0, r3
 8008854:	f7ff f860 	bl	8007918 <quat_scalar>
    q_pro = quat_mult(quat_conjugate(q_pro), gradient);
 8008858:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800885c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8008860:	ed93 6a00 	vldr	s12, [r3]
 8008864:	edd3 6a01 	vldr	s13, [r3, #4]
 8008868:	ed93 7a02 	vldr	s14, [r3, #8]
 800886c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008870:	eeb0 0a46 	vmov.f32	s0, s12
 8008874:	eef0 0a66 	vmov.f32	s1, s13
 8008878:	eeb0 1a47 	vmov.f32	s2, s14
 800887c:	eef0 1a67 	vmov.f32	s3, s15
 8008880:	f7ff f91a 	bl	8007ab8 <quat_conjugate>
 8008884:	eeb0 6a40 	vmov.f32	s12, s0
 8008888:	eef0 6a60 	vmov.f32	s13, s1
 800888c:	eeb0 7a41 	vmov.f32	s14, s2
 8008890:	eef0 7a61 	vmov.f32	s15, s3
 8008894:	ed87 6a51 	vstr	s12, [r7, #324]	; 0x144
 8008898:	edc7 6a52 	vstr	s13, [r7, #328]	; 0x148
 800889c:	ed87 7a53 	vstr	s14, [r7, #332]	; 0x14c
 80088a0:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
 80088a4:	ed97 4a1f 	vldr	s8, [r7, #124]	; 0x7c
 80088a8:	edd7 4a20 	vldr	s9, [r7, #128]	; 0x80
 80088ac:	ed97 5a21 	vldr	s10, [r7, #132]	; 0x84
 80088b0:	edd7 5a22 	vldr	s11, [r7, #136]	; 0x88
 80088b4:	ed97 6a51 	vldr	s12, [r7, #324]	; 0x144
 80088b8:	edd7 6a52 	vldr	s13, [r7, #328]	; 0x148
 80088bc:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 80088c0:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 80088c4:	eeb0 2a44 	vmov.f32	s4, s8
 80088c8:	eef0 2a64 	vmov.f32	s5, s9
 80088cc:	eeb0 3a45 	vmov.f32	s6, s10
 80088d0:	eef0 3a65 	vmov.f32	s7, s11
 80088d4:	eeb0 0a46 	vmov.f32	s0, s12
 80088d8:	eef0 0a66 	vmov.f32	s1, s13
 80088dc:	eeb0 1a47 	vmov.f32	s2, s14
 80088e0:	eef0 1a67 	vmov.f32	s3, s15
 80088e4:	f7fe ff56 	bl	8007794 <quat_mult>
 80088e8:	eeb0 6a40 	vmov.f32	s12, s0
 80088ec:	eef0 6a60 	vmov.f32	s13, s1
 80088f0:	eeb0 7a41 	vmov.f32	s14, s2
 80088f4:	eef0 7a61 	vmov.f32	s15, s3
 80088f8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80088fc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8008900:	ed83 6a00 	vstr	s12, [r3]
 8008904:	edc3 6a01 	vstr	s13, [r3, #4]
 8008908:	ed83 7a02 	vstr	s14, [r3, #8]
 800890c:	edc3 7a03 	vstr	s15, [r3, #12]

    quat_scalar(&q_pro, DELTA_T);
 8008910:	f107 031c 	add.w	r3, r7, #28
 8008914:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8008b44 <Madgwick_update+0xee8>
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe fffd 	bl	8007918 <quat_scalar>
    quat_add(&q_w_gradient_integral, q_w_gradient_integral, q_pro);
 800891e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008922:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8008926:	ed93 4a00 	vldr	s8, [r3]
 800892a:	edd3 4a01 	vldr	s9, [r3, #4]
 800892e:	ed93 5a02 	vldr	s10, [r3, #8]
 8008932:	edd3 5a03 	vldr	s11, [r3, #12]
 8008936:	4b84      	ldr	r3, [pc, #528]	; (8008b48 <Madgwick_update+0xeec>)
 8008938:	ed93 6a00 	vldr	s12, [r3]
 800893c:	edd3 6a01 	vldr	s13, [r3, #4]
 8008940:	ed93 7a02 	vldr	s14, [r3, #8]
 8008944:	edd3 7a03 	vldr	s15, [r3, #12]
 8008948:	eeb0 2a44 	vmov.f32	s4, s8
 800894c:	eef0 2a64 	vmov.f32	s5, s9
 8008950:	eeb0 3a45 	vmov.f32	s6, s10
 8008954:	eef0 3a65 	vmov.f32	s7, s11
 8008958:	eeb0 0a46 	vmov.f32	s0, s12
 800895c:	eef0 0a66 	vmov.f32	s1, s13
 8008960:	eeb0 1a47 	vmov.f32	s2, s14
 8008964:	eef0 1a67 	vmov.f32	s3, s15
 8008968:	4877      	ldr	r0, [pc, #476]	; (8008b48 <Madgwick_update+0xeec>)
 800896a:	f7ff f809 	bl	8007980 <quat_add>

    Quaternion_t q_gradient_integral = q_w_gradient_integral;
 800896e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008972:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008976:	4a74      	ldr	r2, [pc, #464]	; (8008b48 <Madgwick_update+0xeec>)
 8008978:	461c      	mov	r4, r3
 800897a:	4613      	mov	r3, r2
 800897c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800897e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    quat_scalar(&q_gradient_integral, ZETA);
 8008982:	f107 030c 	add.w	r3, r7, #12
 8008986:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8008b4c <Madgwick_update+0xef0>
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe ffc4 	bl	8007918 <quat_scalar>

    quat_sub(&q_w, q_w, q_gradient_integral);
 8008990:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008994:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008998:	ed93 4a00 	vldr	s8, [r3]
 800899c:	edd3 4a01 	vldr	s9, [r3, #4]
 80089a0:	ed93 5a02 	vldr	s10, [r3, #8]
 80089a4:	edd3 5a03 	vldr	s11, [r3, #12]
 80089a8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80089ac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80089b0:	ed93 6a00 	vldr	s12, [r3]
 80089b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80089b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80089bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80089c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089c4:	eeb0 2a44 	vmov.f32	s4, s8
 80089c8:	eef0 2a64 	vmov.f32	s5, s9
 80089cc:	eeb0 3a45 	vmov.f32	s6, s10
 80089d0:	eef0 3a65 	vmov.f32	s7, s11
 80089d4:	eeb0 0a46 	vmov.f32	s0, s12
 80089d8:	eef0 0a66 	vmov.f32	s1, s13
 80089dc:	eeb0 1a47 	vmov.f32	s2, s14
 80089e0:	eef0 1a67 	vmov.f32	s3, s15
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7ff f819 	bl	8007a1c <quat_sub>
    // Orientation from angular rate
    quat_scalar(&q_est_prev, 0.5);// equation (12) dq/dt = (1/2)q*w
 80089ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80089ee:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe ff90 	bl	8007918 <quat_scalar>
    q_w = quat_mult(q_est_prev, q_w); // equation (12)
 80089f8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80089fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008a00:	ed93 4a00 	vldr	s8, [r3]
 8008a04:	edd3 4a01 	vldr	s9, [r3, #4]
 8008a08:	ed93 5a02 	vldr	s10, [r3, #8]
 8008a0c:	edd3 5a03 	vldr	s11, [r3, #12]
 8008a10:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8008a14:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8008a18:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8008a1c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008a20:	eeb0 2a44 	vmov.f32	s4, s8
 8008a24:	eef0 2a64 	vmov.f32	s5, s9
 8008a28:	eeb0 3a45 	vmov.f32	s6, s10
 8008a2c:	eef0 3a65 	vmov.f32	s7, s11
 8008a30:	eeb0 0a46 	vmov.f32	s0, s12
 8008a34:	eef0 0a66 	vmov.f32	s1, s13
 8008a38:	eeb0 1a47 	vmov.f32	s2, s14
 8008a3c:	eef0 1a67 	vmov.f32	s3, s15
 8008a40:	f7fe fea8 	bl	8007794 <quat_mult>
 8008a44:	eeb0 6a40 	vmov.f32	s12, s0
 8008a48:	eef0 6a60 	vmov.f32	s13, s1
 8008a4c:	eeb0 7a41 	vmov.f32	s14, s2
 8008a50:	eef0 7a61 	vmov.f32	s15, s3
 8008a54:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008a58:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008a5c:	ed83 6a00 	vstr	s12, [r3]
 8008a60:	edc3 6a01 	vstr	s13, [r3, #4]
 8008a64:	ed83 7a02 	vstr	s14, [r3, #8]
 8008a68:	edc3 7a03 	vstr	s15, [r3, #12]

    // quat_scalar(&q_w, deltaT);             // eq (13) integrates the angles velocity to position
    // quat_add(&q_w, q_w, q_est_prev);       // addition part of equation (13)

    // Combining
    quat_scalar(&gradient, BETA);        // multiply normalized gradient by beta
 8008a6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008a70:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8008b50 <Madgwick_update+0xef4>
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe ff4f 	bl	8007918 <quat_scalar>
    quat_sub(&q_est_dot, q_w, gradient); // subtract above from q_w, the integrated gyro quaternion
 8008a7a:	ed97 4a1f 	vldr	s8, [r7, #124]	; 0x7c
 8008a7e:	edd7 4a20 	vldr	s9, [r7, #128]	; 0x80
 8008a82:	ed97 5a21 	vldr	s10, [r7, #132]	; 0x84
 8008a86:	edd7 5a22 	vldr	s11, [r7, #136]	; 0x88
 8008a8a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008a8e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008a92:	ed93 6a00 	vldr	s12, [r3]
 8008a96:	edd3 6a01 	vldr	s13, [r3, #4]
 8008a9a:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008aa2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008aa6:	eeb0 2a44 	vmov.f32	s4, s8
 8008aaa:	eef0 2a64 	vmov.f32	s5, s9
 8008aae:	eeb0 3a45 	vmov.f32	s6, s10
 8008ab2:	eef0 3a65 	vmov.f32	s7, s11
 8008ab6:	eeb0 0a46 	vmov.f32	s0, s12
 8008aba:	eef0 0a66 	vmov.f32	s1, s13
 8008abe:	eeb0 1a47 	vmov.f32	s2, s14
 8008ac2:	eef0 1a67 	vmov.f32	s3, s15
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fe ffa8 	bl	8007a1c <quat_sub>
    quat_scalar(&q_est_dot, DELTA_T);
 8008acc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008ad0:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8008b44 <Madgwick_update+0xee8>
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fe ff1f 	bl	8007918 <quat_scalar>
    quat_add(q_est, q_est_prev, q_est_dot); // Integrate orientation rate to find position
 8008ada:	ed97 4a23 	vldr	s8, [r7, #140]	; 0x8c
 8008ade:	edd7 4a24 	vldr	s9, [r7, #144]	; 0x90
 8008ae2:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 8008ae6:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8008aea:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8008aee:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8008af2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8008af6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008afa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008afe:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8008b02:	eeb0 2a44 	vmov.f32	s4, s8
 8008b06:	eef0 2a64 	vmov.f32	s5, s9
 8008b0a:	eeb0 3a45 	vmov.f32	s6, s10
 8008b0e:	eef0 3a65 	vmov.f32	s7, s11
 8008b12:	eeb0 0a46 	vmov.f32	s0, s12
 8008b16:	eef0 0a66 	vmov.f32	s1, s13
 8008b1a:	eeb0 1a47 	vmov.f32	s2, s14
 8008b1e:	eef0 1a67 	vmov.f32	s3, s15
 8008b22:	6818      	ldr	r0, [r3, #0]
 8008b24:	f7fe ff2c 	bl	8007980 <quat_add>
    quat_Normalization(q_est);              // normalize the orientation of the estimate
 8008b28:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008b2c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	f7ff f84e 	bl	8007bd2 <quat_Normalization>
 8008b36:	e000      	b.n	8008b3a <Madgwick_update+0xede>
        return;
 8008b38:	bf00      	nop
                                            //(shown in diagram, plus always use unit quaternions for orientation)
}
 8008b3a:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b44:	3b03126f 	.word	0x3b03126f
 8008b48:	2000052c 	.word	0x2000052c
 8008b4c:	3c75c28f 	.word	0x3c75c28f
 8008b50:	3d27ef9e 	.word	0x3d27ef9e

08008b54 <Madgwick_imu>:
 *
 * @returns None
 */
//9. Madgwick filter for IMU
void Madgwick_imu(MPU6050_t *DataStruct, Quaternion_t *q_est)
{
 8008b54:	b5b0      	push	{r4, r5, r7, lr}
 8008b56:	b0ac      	sub	sp, #176	; 0xb0
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
    float ax = DataStruct->Ax;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    float ay = DataStruct->Ay;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    float az = DataStruct->Az;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    float gx = DataStruct->Gx;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float gy = DataStruct->Gy;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float gz = DataStruct->Gz;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    // Variables and constants
    float F_g[3] = {0};    // eq(15/21/25) objective function for gravity
 8008b8e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	605a      	str	r2, [r3, #4]
 8008b98:	609a      	str	r2, [r3, #8]
    float J_g[3][4] = {0}; // jacobian matrix for gravity
 8008b9a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008b9e:	2230      	movs	r2, #48	; 0x30
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f001 fd1e 	bl	800a5e4 <memset>
    Quaternion_t q_est_prev = *q_est;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8008bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Quaternion_t q_est_dot = {0}; // eq 42 and 43
 8008bb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008bb8:	2200      	movs	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	605a      	str	r2, [r3, #4]
 8008bbe:	609a      	str	r2, [r3, #8]
 8008bc0:	60da      	str	r2, [r3, #12]
    Quaternion_t gradient = {0};
 8008bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	605a      	str	r2, [r3, #4]
 8008bcc:	609a      	str	r2, [r3, #8]
 8008bce:	60da      	str	r2, [r3, #12]
    // const Quaternion_t q_g_ref = {0, 0, 0, 1};// eq (23) not needed because I used eq 25 instead of eq 21

    Quaternion_t q_a = {0, ax, ay, az}; // eq (24) raw acceleration values, needs to be normalized
 8008bd0:	f04f 0300 	mov.w	r3, #0
 8008bd4:	61fb      	str	r3, [r7, #28]
 8008bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bda:	623b      	str	r3, [r7, #32]
 8008bdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
 8008be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (quat_Norm(q_a) == 0)
 8008be8:	ed97 6a07 	vldr	s12, [r7, #28]
 8008bec:	edd7 6a08 	vldr	s13, [r7, #32]
 8008bf0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008bf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008bf8:	eeb0 0a46 	vmov.f32	s0, s12
 8008bfc:	eef0 0a66 	vmov.f32	s1, s13
 8008c00:	eeb0 1a47 	vmov.f32	s2, s14
 8008c04:	eef0 1a67 	vmov.f32	s3, s15
 8008c08:	f7fe ff9a 	bl	8007b40 <quat_Norm>
 8008c0c:	eef0 7a40 	vmov.f32	s15, s0
 8008c10:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c18:	f000 81c4 	beq.w	8008fa4 <Madgwick_imu+0x450>
        return;
    quat_Normalization(&q_a); // normalize the acceleration quaternion to be a unit quaternion
 8008c1c:	f107 031c 	add.w	r3, r7, #28
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fe ffd6 	bl	8007bd2 <quat_Normalization>

    Quaternion_t q_w = {0, gx, gy, gz}; // equation (10), places gyroscope readings in a quaternion
 8008c26:	f04f 0300 	mov.w	r3, #0
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c30:	613b      	str	r3, [r7, #16]
 8008c32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c36:	617b      	str	r3, [r7, #20]
 8008c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c3c:	61bb      	str	r3, [r7, #24]

    quat_scalar(&q_w, 0.5);           // equation (12) dq/dt = (1/2)q*w
 8008c3e:	f107 030c 	add.w	r3, r7, #12
 8008c42:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fe66 	bl	8007918 <quat_scalar>
    q_w = quat_mult(q_est_prev, q_w); // equation (12)
 8008c4c:	ed97 4a03 	vldr	s8, [r7, #12]
 8008c50:	edd7 4a04 	vldr	s9, [r7, #16]
 8008c54:	ed97 5a05 	vldr	s10, [r7, #20]
 8008c58:	edd7 5a06 	vldr	s11, [r7, #24]
 8008c5c:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8008c60:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8008c64:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008c68:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008c6c:	eeb0 2a44 	vmov.f32	s4, s8
 8008c70:	eef0 2a64 	vmov.f32	s5, s9
 8008c74:	eeb0 3a45 	vmov.f32	s6, s10
 8008c78:	eef0 3a65 	vmov.f32	s7, s11
 8008c7c:	eeb0 0a46 	vmov.f32	s0, s12
 8008c80:	eef0 0a66 	vmov.f32	s1, s13
 8008c84:	eeb0 1a47 	vmov.f32	s2, s14
 8008c88:	eef0 1a67 	vmov.f32	s3, s15
 8008c8c:	f7fe fd82 	bl	8007794 <quat_mult>
 8008c90:	eeb0 6a40 	vmov.f32	s12, s0
 8008c94:	eef0 6a60 	vmov.f32	s13, s1
 8008c98:	eeb0 7a41 	vmov.f32	s14, s2
 8008c9c:	eef0 7a61 	vmov.f32	s15, s3
 8008ca0:	ed87 6a03 	vstr	s12, [r7, #12]
 8008ca4:	edc7 6a04 	vstr	s13, [r7, #16]
 8008ca8:	ed87 7a05 	vstr	s14, [r7, #20]
 8008cac:	edc7 7a06 	vstr	s15, [r7, #24]

    // quat_scalar(&q_w, deltaT);             // eq (13) integrates the angles velocity to position
    // quat_add(&q_w, q_w, q_est_prev);       // addition part of equation (13)

    // Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2 * (q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 8008cb0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008cb4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008cb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008cbc:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8008cc0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ccc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008cd0:	edd7 7a08 	vldr	s15, [r7, #32]
 8008cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cd8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    F_g[1] = 2 * (q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3 * q_est_prev.q4) - q_a.q3;
 8008cdc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008ce0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ce8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8008cec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cf8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008cfc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d04:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    F_g[2] = 2 * (0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 8008d08:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008d0c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d14:	ee17 0a90 	vmov	r0, s15
 8008d18:	f7f7 fc16 	bl	8000548 <__aeabi_f2d>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	f04f 0000 	mov.w	r0, #0
 8008d24:	49a1      	ldr	r1, [pc, #644]	; (8008fac <Madgwick_imu+0x458>)
 8008d26:	f7f7 faaf 	bl	8000288 <__aeabi_dsub>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4614      	mov	r4, r2
 8008d30:	461d      	mov	r5, r3
 8008d32:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008d36:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3e:	ee17 0a90 	vmov	r0, s15
 8008d42:	f7f7 fc01 	bl	8000548 <__aeabi_f2d>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	f7f7 fa9b 	bl	8000288 <__aeabi_dsub>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4610      	mov	r0, r2
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	f7f7 fa95 	bl	800028c <__adddf3>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4614      	mov	r4, r2
 8008d68:	461d      	mov	r5, r3
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7f7 fbeb 	bl	8000548 <__aeabi_f2d>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4620      	mov	r0, r4
 8008d78:	4629      	mov	r1, r5
 8008d7a:	f7f7 fa85 	bl	8000288 <__aeabi_dsub>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4610      	mov	r0, r2
 8008d84:	4619      	mov	r1, r3
 8008d86:	f7f7 ff0f 	bl	8000ba8 <__aeabi_d2f>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2 * q_est_prev.q3;
 8008d90:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008d94:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8008d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d9c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    J_g[0][1] = 2 * q_est_prev.q4;
 8008da0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008da4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008da8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    J_g[0][2] = -2 * q_est_prev.q1;
 8008dac:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008db0:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8008db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008db8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    J_g[0][3] = 2 * q_est_prev.q2;
 8008dbc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008dc0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008dc4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    J_g[1][0] = 2 * q_est_prev.q2;
 8008dc8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008dcc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008dd0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    J_g[1][1] = 2 * q_est_prev.q1;
 8008dd4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008dd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008ddc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    J_g[1][2] = 2 * q_est_prev.q4;
 8008de0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008de4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008de8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    J_g[1][3] = 2 * q_est_prev.q3;
 8008dec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008df0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008df4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    J_g[2][0] = 0;
 8008df8:	f04f 0300 	mov.w	r3, #0
 8008dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
    J_g[2][1] = -4 * q_est_prev.q2;
 8008dfe:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008e02:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8008e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e0a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    J_g[2][2] = -4 * q_est_prev.q3;
 8008e0e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008e12:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8008e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e1a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    J_g[2][3] = 0;
 8008e1e:	f04f 0300 	mov.w	r3, #0
 8008e22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8008e26:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008e2a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e32:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8008e36:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e42:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8008e46:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e52:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8008e56:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008e5a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e62:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8008e66:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e72:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8008e76:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e82:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8008e86:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8008e8a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008e8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e92:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8008e96:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ea2:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8008ea6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eb2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    gradient.q4 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 8008eb6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8008eba:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ec2:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8008ec6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ece:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ed2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8008ed6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ee2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    // Normalize the gradient, equation (44)
    quat_Normalization(&gradient);
 8008ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fe71 	bl	8007bd2 <quat_Normalization>
    // Combining
    quat_scalar(&gradient, BETA);        // multiply normalized gradient by beta
 8008ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ef4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8008fb0 <Madgwick_imu+0x45c>
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe fd0d 	bl	8007918 <quat_scalar>
    quat_sub(&q_est_dot, q_w, gradient); // subtract above from q_w, the integrated gyro quaternion
 8008efe:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8008f02:	edd7 4a0c 	vldr	s9, [r7, #48]	; 0x30
 8008f06:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 8008f0a:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 8008f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f12:	edd7 6a04 	vldr	s13, [r7, #16]
 8008f16:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008f1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008f22:	eeb0 2a44 	vmov.f32	s4, s8
 8008f26:	eef0 2a64 	vmov.f32	s5, s9
 8008f2a:	eeb0 3a45 	vmov.f32	s6, s10
 8008f2e:	eef0 3a65 	vmov.f32	s7, s11
 8008f32:	eeb0 0a46 	vmov.f32	s0, s12
 8008f36:	eef0 0a66 	vmov.f32	s1, s13
 8008f3a:	eeb0 1a47 	vmov.f32	s2, s14
 8008f3e:	eef0 1a67 	vmov.f32	s3, s15
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fd6a 	bl	8007a1c <quat_sub>
    quat_scalar(&q_est_dot, DELTA_T);
 8008f48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008f4c:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008fb4 <Madgwick_imu+0x460>
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe fce1 	bl	8007918 <quat_scalar>
    quat_add(q_est, q_est_prev, q_est_dot); // Integrate orientation rate to find position
 8008f56:	ed97 4a0f 	vldr	s8, [r7, #60]	; 0x3c
 8008f5a:	edd7 4a10 	vldr	s9, [r7, #64]	; 0x40
 8008f5e:	ed97 5a11 	vldr	s10, [r7, #68]	; 0x44
 8008f62:	edd7 5a12 	vldr	s11, [r7, #72]	; 0x48
 8008f66:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8008f6a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8008f6e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008f72:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008f76:	eeb0 2a44 	vmov.f32	s4, s8
 8008f7a:	eef0 2a64 	vmov.f32	s5, s9
 8008f7e:	eeb0 3a45 	vmov.f32	s6, s10
 8008f82:	eef0 3a65 	vmov.f32	s7, s11
 8008f86:	eeb0 0a46 	vmov.f32	s0, s12
 8008f8a:	eef0 0a66 	vmov.f32	s1, s13
 8008f8e:	eeb0 1a47 	vmov.f32	s2, s14
 8008f92:	eef0 1a67 	vmov.f32	s3, s15
 8008f96:	6838      	ldr	r0, [r7, #0]
 8008f98:	f7fe fcf2 	bl	8007980 <quat_add>
    quat_Normalization(q_est);              // normalize the orientation of the estimate
 8008f9c:	6838      	ldr	r0, [r7, #0]
 8008f9e:	f7fe fe18 	bl	8007bd2 <quat_Normalization>
 8008fa2:	e000      	b.n	8008fa6 <Madgwick_imu+0x452>
        return;
 8008fa4:	bf00      	nop
                                            //(shown in diagram, plus always use unit quaternions for orientation)
}
 8008fa6:	37b0      	adds	r7, #176	; 0xb0
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bdb0      	pop	{r4, r5, r7, pc}
 8008fac:	3fe00000 	.word	0x3fe00000
 8008fb0:	3d27ef9e 	.word	0x3d27ef9e
 8008fb4:	3b03126f 	.word	0x3b03126f

08008fb8 <Quat2Angle>:
 *
 * @returns None
 */
//10. Calculator Euler angle from quaternions
void Quat2Angle(Quaternion_t q, Euler_t *Angle)
{
 8008fb8:	b5b0      	push	{r4, r5, r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	eeb0 6a40 	vmov.f32	s12, s0
 8008fc2:	eef0 6a60 	vmov.f32	s13, s1
 8008fc6:	eeb0 7a41 	vmov.f32	s14, s2
 8008fca:	eef0 7a61 	vmov.f32	s15, s3
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	ed87 6a02 	vstr	s12, [r7, #8]
 8008fd4:	edc7 6a03 	vstr	s13, [r7, #12]
 8008fd8:	ed87 7a04 	vstr	s14, [r7, #16]
 8008fdc:	edc7 7a05 	vstr	s15, [r7, #20]
    Angle->roll = atan2(2 * (q.q1 * q.q2 + q.q3 * q.q4), q.q1 * q.q1 - q.q2 * q.q2 - q.q3 * q.q3 + q.q4 * q.q4);
 8008fe0:	ed97 7a02 	vldr	s14, [r7, #8]
 8008fe4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fec:	edd7 6a04 	vldr	s13, [r7, #16]
 8008ff0:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ffc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009000:	ee17 0a90 	vmov	r0, s15
 8009004:	f7f7 faa0 	bl	8000548 <__aeabi_f2d>
 8009008:	4604      	mov	r4, r0
 800900a:	460d      	mov	r5, r1
 800900c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009010:	edd7 7a02 	vldr	s15, [r7, #8]
 8009014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009018:	edd7 6a03 	vldr	s13, [r7, #12]
 800901c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009024:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009028:	edd7 6a04 	vldr	s13, [r7, #16]
 800902c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009034:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009038:	edd7 6a05 	vldr	s13, [r7, #20]
 800903c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009048:	ee17 0a90 	vmov	r0, s15
 800904c:	f7f7 fa7c 	bl	8000548 <__aeabi_f2d>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	ec43 2b11 	vmov	d1, r2, r3
 8009058:	ec45 4b10 	vmov	d0, r4, r5
 800905c:	f001 ff5e 	bl	800af1c <atan2>
 8009060:	ec53 2b10 	vmov	r2, r3, d0
 8009064:	4610      	mov	r0, r2
 8009066:	4619      	mov	r1, r3
 8009068:	f7f7 fd9e 	bl	8000ba8 <__aeabi_d2f>
 800906c:	4602      	mov	r2, r0
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	601a      	str	r2, [r3, #0]
    Angle->pitch = asin(2 * (q.q1 * q.q3 - q.q2 * q.q4));
 8009072:	ed97 7a02 	vldr	s14, [r7, #8]
 8009076:	edd7 7a04 	vldr	s15, [r7, #16]
 800907a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800907e:	edd7 6a03 	vldr	s13, [r7, #12]
 8009082:	edd7 7a05 	vldr	s15, [r7, #20]
 8009086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800908a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800908e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009092:	ee17 0a90 	vmov	r0, s15
 8009096:	f7f7 fa57 	bl	8000548 <__aeabi_f2d>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	ec43 2b10 	vmov	d0, r2, r3
 80090a2:	f001 ff07 	bl	800aeb4 <asin>
 80090a6:	ec53 2b10 	vmov	r2, r3, d0
 80090aa:	4610      	mov	r0, r2
 80090ac:	4619      	mov	r1, r3
 80090ae:	f7f7 fd7b 	bl	8000ba8 <__aeabi_d2f>
 80090b2:	4602      	mov	r2, r0
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	605a      	str	r2, [r3, #4]
    Angle->yaw = atan2(2 * (q.q1 * q.q4 + q.q2 * q.q3), q.q1 * q.q1 + q.q2 * q.q2 - q.q3 * q.q3 - q.q4 * q.q4);
 80090b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80090bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80090c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80090c4:	edd7 6a03 	vldr	s13, [r7, #12]
 80090c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80090cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80090d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80090d8:	ee17 0a90 	vmov	r0, s15
 80090dc:	f7f7 fa34 	bl	8000548 <__aeabi_f2d>
 80090e0:	4604      	mov	r4, r0
 80090e2:	460d      	mov	r5, r1
 80090e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80090e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80090ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80090f0:	edd7 6a03 	vldr	s13, [r7, #12]
 80090f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80090f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80090fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009100:	edd7 6a04 	vldr	s13, [r7, #16]
 8009104:	edd7 7a04 	vldr	s15, [r7, #16]
 8009108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800910c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009110:	edd7 6a05 	vldr	s13, [r7, #20]
 8009114:	edd7 7a05 	vldr	s15, [r7, #20]
 8009118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800911c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009120:	ee17 0a90 	vmov	r0, s15
 8009124:	f7f7 fa10 	bl	8000548 <__aeabi_f2d>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	ec43 2b11 	vmov	d1, r2, r3
 8009130:	ec45 4b10 	vmov	d0, r4, r5
 8009134:	f001 fef2 	bl	800af1c <atan2>
 8009138:	ec53 2b10 	vmov	r2, r3, d0
 800913c:	4610      	mov	r0, r2
 800913e:	4619      	mov	r1, r3
 8009140:	f7f7 fd32 	bl	8000ba8 <__aeabi_d2f>
 8009144:	4602      	mov	r2, r0
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	609a      	str	r2, [r3, #8]
    if (Angle->pitch == PI / 2)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	4618      	mov	r0, r3
 8009150:	f7f7 f9fa 	bl	8000548 <__aeabi_f2d>
 8009154:	a34e      	add	r3, pc, #312	; (adr r3, 8009290 <Quat2Angle+0x2d8>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f7f7 fcb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d026      	beq.n	80091b2 <Quat2Angle+0x1fa>
    {
        Angle->roll = 0;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f04f 0200 	mov.w	r2, #0
 800916a:	601a      	str	r2, [r3, #0]
        Angle->yaw = -2 * atan2(q.q2, q.q1);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4618      	mov	r0, r3
 8009170:	f7f7 f9ea 	bl	8000548 <__aeabi_f2d>
 8009174:	4604      	mov	r4, r0
 8009176:	460d      	mov	r5, r1
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	4618      	mov	r0, r3
 800917c:	f7f7 f9e4 	bl	8000548 <__aeabi_f2d>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	ec43 2b11 	vmov	d1, r2, r3
 8009188:	ec45 4b10 	vmov	d0, r4, r5
 800918c:	f001 fec6 	bl	800af1c <atan2>
 8009190:	ec51 0b10 	vmov	r0, r1, d0
 8009194:	f04f 0200 	mov.w	r2, #0
 8009198:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800919c:	f7f7 fa2c 	bl	80005f8 <__aeabi_dmul>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4610      	mov	r0, r2
 80091a6:	4619      	mov	r1, r3
 80091a8:	f7f7 fcfe 	bl	8000ba8 <__aeabi_d2f>
 80091ac:	4602      	mov	r2, r0
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	609a      	str	r2, [r3, #8]
    }
    if (Angle->pitch == -PI / 2)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7f7 f9c6 	bl	8000548 <__aeabi_f2d>
 80091bc:	a336      	add	r3, pc, #216	; (adr r3, 8009298 <Quat2Angle+0x2e0>)
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f7f7 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d024      	beq.n	8009216 <Quat2Angle+0x25e>
    {
        Angle->roll = 0;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f04f 0200 	mov.w	r2, #0
 80091d2:	601a      	str	r2, [r3, #0]
        Angle->yaw = 2 * atan2(q.q2, q.q1);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f7 f9b6 	bl	8000548 <__aeabi_f2d>
 80091dc:	4604      	mov	r4, r0
 80091de:	460d      	mov	r5, r1
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7f7 f9b0 	bl	8000548 <__aeabi_f2d>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	ec43 2b11 	vmov	d1, r2, r3
 80091f0:	ec45 4b10 	vmov	d0, r4, r5
 80091f4:	f001 fe92 	bl	800af1c <atan2>
 80091f8:	ec51 0b10 	vmov	r0, r1, d0
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	f7f7 f844 	bl	800028c <__adddf3>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4610      	mov	r0, r2
 800920a:	4619      	mov	r1, r3
 800920c:	f7f7 fccc 	bl	8000ba8 <__aeabi_d2f>
 8009210:	4602      	mov	r2, r0
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	609a      	str	r2, [r3, #8]
    }
    Angle->roll *= RAD_TO_DEG;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4618      	mov	r0, r3
 800921c:	f7f7 f994 	bl	8000548 <__aeabi_f2d>
 8009220:	a31f      	add	r3, pc, #124	; (adr r3, 80092a0 <Quat2Angle+0x2e8>)
 8009222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009226:	f7f7 f9e7 	bl	80005f8 <__aeabi_dmul>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	4610      	mov	r0, r2
 8009230:	4619      	mov	r1, r3
 8009232:	f7f7 fcb9 	bl	8000ba8 <__aeabi_d2f>
 8009236:	4602      	mov	r2, r0
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	601a      	str	r2, [r3, #0]
    Angle->pitch *= RAD_TO_DEG;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	4618      	mov	r0, r3
 8009242:	f7f7 f981 	bl	8000548 <__aeabi_f2d>
 8009246:	a316      	add	r3, pc, #88	; (adr r3, 80092a0 <Quat2Angle+0x2e8>)
 8009248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924c:	f7f7 f9d4 	bl	80005f8 <__aeabi_dmul>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	4610      	mov	r0, r2
 8009256:	4619      	mov	r1, r3
 8009258:	f7f7 fca6 	bl	8000ba8 <__aeabi_d2f>
 800925c:	4602      	mov	r2, r0
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	605a      	str	r2, [r3, #4]
    Angle->yaw *= RAD_TO_DEG;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	4618      	mov	r0, r3
 8009268:	f7f7 f96e 	bl	8000548 <__aeabi_f2d>
 800926c:	a30c      	add	r3, pc, #48	; (adr r3, 80092a0 <Quat2Angle+0x2e8>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f7f7 f9c1 	bl	80005f8 <__aeabi_dmul>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4610      	mov	r0, r2
 800927c:	4619      	mov	r1, r3
 800927e:	f7f7 fc93 	bl	8000ba8 <__aeabi_d2f>
 8009282:	4602      	mov	r2, r0
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	609a      	str	r2, [r3, #8]
}
 8009288:	bf00      	nop
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bdb0      	pop	{r4, r5, r7, pc}
 8009290:	54442d11 	.word	0x54442d11
 8009294:	3ff921fb 	.word	0x3ff921fb
 8009298:	54442d11 	.word	0x54442d11
 800929c:	bff921fb 	.word	0xbff921fb
 80092a0:	1a6394b6 	.word	0x1a6394b6
 80092a4:	404ca5dc 	.word	0x404ca5dc

080092a8 <NRF24_DelayMicroSeconds>:
 *
 * @returns None
 */
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80092b4:	4b0b      	ldr	r3, [pc, #44]	; (80092e4 <NRF24_DelayMicroSeconds+0x3c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a0b      	ldr	r2, [pc, #44]	; (80092e8 <NRF24_DelayMicroSeconds+0x40>)
 80092ba:	fba2 2303 	umull	r2, r3, r2, r3
 80092be:	0c9a      	lsrs	r2, r3, #18
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	fb02 f303 	mul.w	r3, r2, r3
 80092c6:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80092c8:	bf00      	nop
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	1e5a      	subs	r2, r3, #1
 80092ce:	60fa      	str	r2, [r7, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1fa      	bne.n	80092ca <NRF24_DelayMicroSeconds+0x22>
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	20000130 	.word	0x20000130
 80092e8:	165e9f81 	.word	0x165e9f81

080092ec <NRF24_csn>:
 *
 * @returns None
 */
//1. Chip Select function
void NRF24_csn(int state)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d008      	beq.n	800930c <NRF24_csn+0x20>
 80092fa:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <NRF24_csn+0x38>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a0a      	ldr	r2, [pc, #40]	; (8009328 <NRF24_csn+0x3c>)
 8009300:	8811      	ldrh	r1, [r2, #0]
 8009302:	2201      	movs	r2, #1
 8009304:	4618      	mov	r0, r3
 8009306:	f7f9 faf5 	bl	80028f4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800930a:	e007      	b.n	800931c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800930c:	4b05      	ldr	r3, [pc, #20]	; (8009324 <NRF24_csn+0x38>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a05      	ldr	r2, [pc, #20]	; (8009328 <NRF24_csn+0x3c>)
 8009312:	8811      	ldrh	r1, [r2, #0]
 8009314:	2200      	movs	r2, #0
 8009316:	4618      	mov	r0, r3
 8009318:	f7f9 faec 	bl	80028f4 <HAL_GPIO_WritePin>
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20000544 	.word	0x20000544
 8009328:	20000548 	.word	0x20000548

0800932c <NRF24_ce>:
 *
 * @returns None
 */
//2. Chip Enable
void NRF24_ce(int state)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d008      	beq.n	800934c <NRF24_ce+0x20>
 800933a:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <NRF24_ce+0x38>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a0a      	ldr	r2, [pc, #40]	; (8009368 <NRF24_ce+0x3c>)
 8009340:	8811      	ldrh	r1, [r2, #0]
 8009342:	2201      	movs	r2, #1
 8009344:	4618      	mov	r0, r3
 8009346:	f7f9 fad5 	bl	80028f4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800934a:	e007      	b.n	800935c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800934c:	4b05      	ldr	r3, [pc, #20]	; (8009364 <NRF24_ce+0x38>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a05      	ldr	r2, [pc, #20]	; (8009368 <NRF24_ce+0x3c>)
 8009352:	8811      	ldrh	r1, [r2, #0]
 8009354:	2200      	movs	r2, #0
 8009356:	4618      	mov	r0, r3
 8009358:	f7f9 facc 	bl	80028f4 <HAL_GPIO_WritePin>
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	20000544 	.word	0x20000544
 8009368:	2000054a 	.word	0x2000054a

0800936c <NRF24_read_register>:
 *
 * @returns The value of the specified register.
 */
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8009376:	2000      	movs	r0, #0
 8009378:	f7ff ffb8 	bl	80092ec <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8009380:	f107 010c 	add.w	r1, r7, #12
 8009384:	2364      	movs	r3, #100	; 0x64
 8009386:	2201      	movs	r2, #1
 8009388:	480a      	ldr	r0, [pc, #40]	; (80093b4 <NRF24_read_register+0x48>)
 800938a:	f7fa ff88 	bl	800429e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800938e:	f107 030c 	add.w	r3, r7, #12
 8009392:	1c59      	adds	r1, r3, #1
 8009394:	2364      	movs	r3, #100	; 0x64
 8009396:	2201      	movs	r2, #1
 8009398:	4806      	ldr	r0, [pc, #24]	; (80093b4 <NRF24_read_register+0x48>)
 800939a:	f7fb f8bc 	bl	8004516 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800939e:	7b7b      	ldrb	r3, [r7, #13]
 80093a0:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80093a2:	2001      	movs	r0, #1
 80093a4:	f7ff ffa2 	bl	80092ec <NRF24_csn>
	return retData;
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	2000054c 	.word	0x2000054c

080093b8 <NRF24_read_registerN>:
 *
 * @returns None
 */
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	4603      	mov	r3, r0
 80093c0:	6039      	str	r1, [r7, #0]
 80093c2:	71fb      	strb	r3, [r7, #7]
 80093c4:	4613      	mov	r3, r2
 80093c6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80093c8:	2000      	movs	r0, #0
 80093ca:	f7ff ff8f 	bl	80092ec <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80093d2:	f107 010c 	add.w	r1, r7, #12
 80093d6:	2364      	movs	r3, #100	; 0x64
 80093d8:	2201      	movs	r2, #1
 80093da:	4808      	ldr	r0, [pc, #32]	; (80093fc <NRF24_read_registerN+0x44>)
 80093dc:	f7fa ff5f 	bl	800429e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80093e0:	79bb      	ldrb	r3, [r7, #6]
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	2364      	movs	r3, #100	; 0x64
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	4804      	ldr	r0, [pc, #16]	; (80093fc <NRF24_read_registerN+0x44>)
 80093ea:	f7fb f894 	bl	8004516 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80093ee:	2001      	movs	r0, #1
 80093f0:	f7ff ff7c 	bl	80092ec <NRF24_csn>
}
 80093f4:	bf00      	nop
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	2000054c 	.word	0x2000054c

08009400 <NRF24_write_register>:
 *
 * @returns None
 */
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	460a      	mov	r2, r1
 800940a:	71fb      	strb	r3, [r7, #7]
 800940c:	4613      	mov	r3, r2
 800940e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8009410:	2000      	movs	r0, #0
 8009412:	f7ff ff6b 	bl	80092ec <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	f043 0320 	orr.w	r3, r3, #32
 800941c:	b2db      	uxtb	r3, r3
 800941e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8009420:	79bb      	ldrb	r3, [r7, #6]
 8009422:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8009424:	f107 010c 	add.w	r1, r7, #12
 8009428:	2364      	movs	r3, #100	; 0x64
 800942a:	2202      	movs	r2, #2
 800942c:	4804      	ldr	r0, [pc, #16]	; (8009440 <NRF24_write_register+0x40>)
 800942e:	f7fa ff36 	bl	800429e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8009432:	2001      	movs	r0, #1
 8009434:	f7ff ff5a 	bl	80092ec <NRF24_csn>
}
 8009438:	bf00      	nop
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	2000054c 	.word	0x2000054c

08009444 <NRF24_write_registerN>:
 *
 * @returns None
 */
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	6039      	str	r1, [r7, #0]
 800944e:	71fb      	strb	r3, [r7, #7]
 8009450:	4613      	mov	r3, r2
 8009452:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8009454:	2000      	movs	r0, #0
 8009456:	f7ff ff49 	bl	80092ec <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	f043 0320 	orr.w	r3, r3, #32
 8009460:	b2db      	uxtb	r3, r3
 8009462:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8009464:	f107 010c 	add.w	r1, r7, #12
 8009468:	2364      	movs	r3, #100	; 0x64
 800946a:	2201      	movs	r2, #1
 800946c:	4808      	ldr	r0, [pc, #32]	; (8009490 <NRF24_write_registerN+0x4c>)
 800946e:	f7fa ff16 	bl	800429e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8009472:	79bb      	ldrb	r3, [r7, #6]
 8009474:	b29a      	uxth	r2, r3
 8009476:	2364      	movs	r3, #100	; 0x64
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	4805      	ldr	r0, [pc, #20]	; (8009490 <NRF24_write_registerN+0x4c>)
 800947c:	f7fa ff0f 	bl	800429e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8009480:	2001      	movs	r0, #1
 8009482:	f7ff ff33 	bl	80092ec <NRF24_csn>
}
 8009486:	bf00      	nop
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	2000054c 	.word	0x2000054c

08009494 <NRF24_write_payload>:
 *
 * @returns None
 */
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80094a0:	2000      	movs	r0, #0
 80094a2:	f7ff ff23 	bl	80092ec <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80094a6:	23a0      	movs	r3, #160	; 0xa0
 80094a8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80094aa:	f107 010f 	add.w	r1, r7, #15
 80094ae:	2364      	movs	r3, #100	; 0x64
 80094b0:	2201      	movs	r2, #1
 80094b2:	4808      	ldr	r0, [pc, #32]	; (80094d4 <NRF24_write_payload+0x40>)
 80094b4:	f7fa fef3 	bl	800429e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80094b8:	78fb      	ldrb	r3, [r7, #3]
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	2364      	movs	r3, #100	; 0x64
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	4804      	ldr	r0, [pc, #16]	; (80094d4 <NRF24_write_payload+0x40>)
 80094c2:	f7fa feec 	bl	800429e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80094c6:	2001      	movs	r0, #1
 80094c8:	f7ff ff10 	bl	80092ec <NRF24_csn>
}
 80094cc:	bf00      	nop
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	2000054c 	.word	0x2000054c

080094d8 <NRF24_read_payload>:
 *
 * @returns None
 */
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80094e4:	f000 fa12 	bl	800990c <NRF24_getPayloadSize>
 80094e8:	4603      	mov	r3, r0
 80094ea:	461a      	mov	r2, r3
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d303      	bcc.n	80094fa <NRF24_read_payload+0x22>
 80094f2:	f000 fa0b 	bl	800990c <NRF24_getPayloadSize>
 80094f6:	4603      	mov	r3, r0
 80094f8:	e000      	b.n	80094fc <NRF24_read_payload+0x24>
 80094fa:	78fb      	ldrb	r3, [r7, #3]
 80094fc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80094fe:	2000      	movs	r0, #0
 8009500:	f7ff fef4 	bl	80092ec <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8009504:	2361      	movs	r3, #97	; 0x61
 8009506:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8009508:	f107 010e 	add.w	r1, r7, #14
 800950c:	2364      	movs	r3, #100	; 0x64
 800950e:	2201      	movs	r2, #1
 8009510:	4808      	ldr	r0, [pc, #32]	; (8009534 <NRF24_read_payload+0x5c>)
 8009512:	f7fa fec4 	bl	800429e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8009516:	7bfb      	ldrb	r3, [r7, #15]
 8009518:	b29a      	uxth	r2, r3
 800951a:	2364      	movs	r3, #100	; 0x64
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4805      	ldr	r0, [pc, #20]	; (8009534 <NRF24_read_payload+0x5c>)
 8009520:	f7fa fff9 	bl	8004516 <HAL_SPI_Receive>
	NRF24_csn(1);
 8009524:	2001      	movs	r0, #1
 8009526:	f7ff fee1 	bl	80092ec <NRF24_csn>
}
 800952a:	bf00      	nop
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	2000054c 	.word	0x2000054c

08009538 <NRF24_flush_tx>:
 *
 * @returns None
 */
//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800953c:	21ff      	movs	r1, #255	; 0xff
 800953e:	20e1      	movs	r0, #225	; 0xe1
 8009540:	f7ff ff5e 	bl	8009400 <NRF24_write_register>
}
 8009544:	bf00      	nop
 8009546:	bd80      	pop	{r7, pc}

08009548 <NRF24_flush_rx>:
 *
 * @returns None
 */
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800954c:	21ff      	movs	r1, #255	; 0xff
 800954e:	20e2      	movs	r0, #226	; 0xe2
 8009550:	f7ff ff56 	bl	8009400 <NRF24_write_register>
}
 8009554:	bf00      	nop
 8009556:	bd80      	pop	{r7, pc}

08009558 <NRF24_get_status>:
 *
 * @returns The value of the status register.
 */
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800955e:	2007      	movs	r0, #7
 8009560:	f7ff ff04 	bl	800936c <NRF24_read_register>
 8009564:	4603      	mov	r3, r0
 8009566:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8009568:	79fb      	ldrb	r3, [r7, #7]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <NRF24_begin>:
 *
 * @returns None
 */
//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8009574:	b082      	sub	sp, #8
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	61fb      	str	r3, [r7, #28]
 8009580:	460b      	mov	r3, r1
 8009582:	807b      	strh	r3, [r7, #2]
 8009584:	4613      	mov	r3, r2
 8009586:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8009588:	4b66      	ldr	r3, [pc, #408]	; (8009724 <NRF24_begin+0x1b0>)
 800958a:	4618      	mov	r0, r3
 800958c:	f107 031c 	add.w	r3, r7, #28
 8009590:	2258      	movs	r2, #88	; 0x58
 8009592:	4619      	mov	r1, r3
 8009594:	f001 f818 	bl	800a5c8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8009598:	4a63      	ldr	r2, [pc, #396]	; (8009728 <NRF24_begin+0x1b4>)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800959e:	4a63      	ldr	r2, [pc, #396]	; (800972c <NRF24_begin+0x1b8>)
 80095a0:	887b      	ldrh	r3, [r7, #2]
 80095a2:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;  
 80095a4:	4a62      	ldr	r2, [pc, #392]	; (8009730 <NRF24_begin+0x1bc>)
 80095a6:	883b      	ldrh	r3, [r7, #0]
 80095a8:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80095aa:	2001      	movs	r0, #1
 80095ac:	f7ff fe9e 	bl	80092ec <NRF24_csn>
	NRF24_ce(0);
 80095b0:	2000      	movs	r0, #0
 80095b2:	f7ff febb 	bl	800932c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80095b6:	2005      	movs	r0, #5
 80095b8:	f7f8 feca 	bl	8002350 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08); //0x08
 80095bc:	2108      	movs	r1, #8
 80095be:	2000      	movs	r0, #0
 80095c0:	f7ff ff1e 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f); //0x3f
 80095c4:	213f      	movs	r1, #63	; 0x3f
 80095c6:	2001      	movs	r0, #1
 80095c8:	f7ff ff1a 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03); //0x03
 80095cc:	2103      	movs	r1, #3
 80095ce:	2002      	movs	r0, #2
 80095d0:	f7ff ff16 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03); //0x03
 80095d4:	2103      	movs	r1, #3
 80095d6:	2003      	movs	r0, #3
 80095d8:	f7ff ff12 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03); //0x03
 80095dc:	2103      	movs	r1, #3
 80095de:	2004      	movs	r0, #4
 80095e0:	f7ff ff0e 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02); //0x02
 80095e4:	2102      	movs	r1, #2
 80095e6:	2005      	movs	r0, #5
 80095e8:	f7ff ff0a 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f); //0x0f
 80095ec:	210f      	movs	r1, #15
 80095ee:	2006      	movs	r0, #6
 80095f0:	f7ff ff06 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e); //0x0e
 80095f4:	210e      	movs	r1, #14
 80095f6:	2007      	movs	r0, #7
 80095f8:	f7ff ff02 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00); //0x00
 80095fc:	2100      	movs	r1, #0
 80095fe:	2008      	movs	r0, #8
 8009600:	f7ff fefe 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00); //0x00
 8009604:	2100      	movs	r1, #0
 8009606:	2009      	movs	r0, #9
 8009608:	f7ff fefa 	bl	8009400 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800960c:	23e7      	movs	r3, #231	; 0xe7
 800960e:	733b      	strb	r3, [r7, #12]
 8009610:	23e7      	movs	r3, #231	; 0xe7
 8009612:	72fb      	strb	r3, [r7, #11]
 8009614:	23e7      	movs	r3, #231	; 0xe7
 8009616:	72bb      	strb	r3, [r7, #10]
 8009618:	23e7      	movs	r3, #231	; 0xe7
 800961a:	727b      	strb	r3, [r7, #9]
 800961c:	23e7      	movs	r3, #231	; 0xe7
 800961e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8009620:	f107 0308 	add.w	r3, r7, #8
 8009624:	2205      	movs	r2, #5
 8009626:	4619      	mov	r1, r3
 8009628:	200a      	movs	r0, #10
 800962a:	f7ff ff0b 	bl	8009444 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800962e:	23c2      	movs	r3, #194	; 0xc2
 8009630:	733b      	strb	r3, [r7, #12]
 8009632:	23c2      	movs	r3, #194	; 0xc2
 8009634:	72fb      	strb	r3, [r7, #11]
 8009636:	23c2      	movs	r3, #194	; 0xc2
 8009638:	72bb      	strb	r3, [r7, #10]
 800963a:	23c2      	movs	r3, #194	; 0xc2
 800963c:	727b      	strb	r3, [r7, #9]
 800963e:	23c2      	movs	r3, #194	; 0xc2
 8009640:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8009642:	f107 0308 	add.w	r3, r7, #8
 8009646:	2205      	movs	r2, #5
 8009648:	4619      	mov	r1, r3
 800964a:	200b      	movs	r0, #11
 800964c:	f7ff fefa 	bl	8009444 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8009650:	21c3      	movs	r1, #195	; 0xc3
 8009652:	200c      	movs	r0, #12
 8009654:	f7ff fed4 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8009658:	21c4      	movs	r1, #196	; 0xc4
 800965a:	200d      	movs	r0, #13
 800965c:	f7ff fed0 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8009660:	21c5      	movs	r1, #197	; 0xc5
 8009662:	200e      	movs	r0, #14
 8009664:	f7ff fecc 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8009668:	21c6      	movs	r1, #198	; 0xc6
 800966a:	200f      	movs	r0, #15
 800966c:	f7ff fec8 	bl	8009400 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8009670:	23e7      	movs	r3, #231	; 0xe7
 8009672:	733b      	strb	r3, [r7, #12]
 8009674:	23e7      	movs	r3, #231	; 0xe7
 8009676:	72fb      	strb	r3, [r7, #11]
 8009678:	23e7      	movs	r3, #231	; 0xe7
 800967a:	72bb      	strb	r3, [r7, #10]
 800967c:	23e7      	movs	r3, #231	; 0xe7
 800967e:	727b      	strb	r3, [r7, #9]
 8009680:	23e7      	movs	r3, #231	; 0xe7
 8009682:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8009684:	f107 0308 	add.w	r3, r7, #8
 8009688:	2205      	movs	r2, #5
 800968a:	4619      	mov	r1, r3
 800968c:	2010      	movs	r0, #16
 800968e:	f7ff fed9 	bl	8009444 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8009692:	2100      	movs	r1, #0
 8009694:	2011      	movs	r0, #17
 8009696:	f7ff feb3 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800969a:	2100      	movs	r1, #0
 800969c:	2012      	movs	r0, #18
 800969e:	f7ff feaf 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80096a2:	2100      	movs	r1, #0
 80096a4:	2013      	movs	r0, #19
 80096a6:	f7ff feab 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80096aa:	2100      	movs	r1, #0
 80096ac:	2014      	movs	r0, #20
 80096ae:	f7ff fea7 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80096b2:	2100      	movs	r1, #0
 80096b4:	2015      	movs	r0, #21
 80096b6:	f7ff fea3 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80096ba:	2100      	movs	r1, #0
 80096bc:	2016      	movs	r0, #22
 80096be:	f7ff fe9f 	bl	8009400 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80096c2:	f000 fb15 	bl	8009cf0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80096c6:	2100      	movs	r1, #0
 80096c8:	201c      	movs	r0, #28
 80096ca:	f7ff fe99 	bl	8009400 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80096ce:	2100      	movs	r1, #0
 80096d0:	201d      	movs	r0, #29
 80096d2:	f7ff fe95 	bl	8009400 <NRF24_write_register>
	printRadioSettings();
 80096d6:	f000 fb25 	bl	8009d24 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80096da:	210f      	movs	r1, #15
 80096dc:	200f      	movs	r0, #15
 80096de:	f000 f8cd 	bl	800987c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m18dB);
 80096e2:	2000      	movs	r0, #0
 80096e4:	f000 f9b3 	bl	8009a4e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80096e8:	2001      	movs	r0, #1
 80096ea:	f000 f9e9 	bl	8009ac0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80096ee:	2001      	movs	r0, #1
 80096f0:	f000 fa2c 	bl	8009b4c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80096f4:	f000 f97e 	bl	80099f4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80096f8:	2020      	movs	r0, #32
 80096fa:	f000 f8ef 	bl	80098dc <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80096fe:	f000 faee 	bl	8009cde <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(52);
 8009702:	2034      	movs	r0, #52	; 0x34
 8009704:	f000 f8d5 	bl	80098b2 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8009708:	f7ff ff16 	bl	8009538 <NRF24_flush_tx>
	NRF24_flush_rx();
 800970c:	f7ff ff1c 	bl	8009548 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8009710:	f000 fa44 	bl	8009b9c <NRF24_powerDown>
	
}
 8009714:	bf00      	nop
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800971e:	b002      	add	sp, #8
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	2000054c 	.word	0x2000054c
 8009728:	20000544 	.word	0x20000544
 800972c:	20000548 	.word	0x20000548
 8009730:	2000054a 	.word	0x2000054a

08009734 <NRF24_stopListening>:
 *
 * @returns None
 */
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8009738:	2000      	movs	r0, #0
 800973a:	f7ff fdf7 	bl	800932c <NRF24_ce>
	NRF24_flush_tx();
 800973e:	f7ff fefb 	bl	8009538 <NRF24_flush_tx>
	NRF24_flush_rx();
 8009742:	f7ff ff01 	bl	8009548 <NRF24_flush_rx>
}
 8009746:	bf00      	nop
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <NRF24_write>:
 *
 * @returns True if the data was successfully sent, false otherwise.
 */
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8009758:	f000 fac1 	bl	8009cde <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 800975c:	78fb      	ldrb	r3, [r7, #3]
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fa5a 	bl	8009c1a <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8009766:	f7f8 fde7 	bl	8002338 <HAL_GetTick>
 800976a:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 800976c:	230a      	movs	r3, #10
 800976e:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8009770:	f107 030d 	add.w	r3, r7, #13
 8009774:	2201      	movs	r2, #1
 8009776:	4619      	mov	r1, r3
 8009778:	2008      	movs	r0, #8
 800977a:	f7ff fe1d 	bl	80093b8 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800977e:	f7ff feeb 	bl	8009558 <NRF24_get_status>
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800978c:	2b00      	cmp	r3, #0
 800978e:	d107      	bne.n	80097a0 <NRF24_write+0x54>
 8009790:	f7f8 fdd2 	bl	8002338 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	429a      	cmp	r2, r3
 800979e:	d8e7      	bhi.n	8009770 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80097a0:	f107 010b 	add.w	r1, r7, #11
 80097a4:	f107 030c 	add.w	r3, r7, #12
 80097a8:	4a0c      	ldr	r2, [pc, #48]	; (80097dc <NRF24_write+0x90>)
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 fa64 	bl	8009c78 <NRF24_whatHappened>
	retStatus = tx_ok;
 80097b0:	7b3b      	ldrb	r3, [r7, #12]
 80097b2:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 80097b4:	4b09      	ldr	r3, [pc, #36]	; (80097dc <NRF24_write+0x90>)
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d005      	beq.n	80097c8 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 80097bc:	f000 f8b2 	bl	8009924 <NRF24_getDynamicPayloadSize>
 80097c0:	4603      	mov	r3, r0
 80097c2:	461a      	mov	r2, r3
 80097c4:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <NRF24_write+0x94>)
 80097c6:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 80097c8:	f000 f80c 	bl	80097e4 <NRF24_available>
	NRF24_flush_tx();
 80097cc:	f7ff feb4 	bl	8009538 <NRF24_flush_tx>
	return retStatus;
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3718      	adds	r7, #24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	2000053c 	.word	0x2000053c
 80097e0:	2000053d 	.word	0x2000053d

080097e4 <NRF24_available>:
 *
 * @returns True if there is available data to read, false otherwise.
 */
//16. Check for available data to read
bool NRF24_available(void)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80097e8:	2000      	movs	r0, #0
 80097ea:	f000 f9e6 	bl	8009bba <NRF24_availablePipe>
 80097ee:	4603      	mov	r3, r0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <NRF24_read>:
 *
 * @returns True if the read operation was successful, false otherwise.
 */
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff fe67 	bl	80094d8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800980a:	2017      	movs	r0, #23
 800980c:	f7ff fdae 	bl	800936c <NRF24_read_register>
 8009810:	4603      	mov	r3, r0
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8009818:	f7ff fe96 	bl	8009548 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800981c:	f000 f882 	bl	8009924 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	2b00      	cmp	r3, #0
 8009824:	bf14      	ite	ne
 8009826:	2301      	movne	r3, #1
 8009828:	2300      	moveq	r3, #0
 800982a:	b2db      	uxtb	r3, r3
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <NRF24_openWritingPipe>:
 *
 * @returns None
 */
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800983e:	463b      	mov	r3, r7
 8009840:	2205      	movs	r2, #5
 8009842:	4619      	mov	r1, r3
 8009844:	200a      	movs	r0, #10
 8009846:	f7ff fdfd 	bl	8009444 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800984a:	463b      	mov	r3, r7
 800984c:	2205      	movs	r2, #5
 800984e:	4619      	mov	r1, r3
 8009850:	2010      	movs	r0, #16
 8009852:	f7ff fdf7 	bl	8009444 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8009856:	2320      	movs	r3, #32
 8009858:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800985a:	4b07      	ldr	r3, [pc, #28]	; (8009878 <NRF24_openWritingPipe+0x44>)
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	7bfa      	ldrb	r2, [r7, #15]
 8009860:	4293      	cmp	r3, r2
 8009862:	bf28      	it	cs
 8009864:	4613      	movcs	r3, r2
 8009866:	b2db      	uxtb	r3, r3
 8009868:	4619      	mov	r1, r3
 800986a:	2011      	movs	r0, #17
 800986c:	f7ff fdc8 	bl	8009400 <NRF24_write_register>
}
 8009870:	bf00      	nop
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	2000053e 	.word	0x2000053e

0800987c <NRF24_setRetries>:
 *
 * @returns None
 */
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	460a      	mov	r2, r1
 8009886:	71fb      	strb	r3, [r7, #7]
 8009888:	4613      	mov	r3, r2
 800988a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	011b      	lsls	r3, r3, #4
 8009890:	b25a      	sxtb	r2, r3
 8009892:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009896:	f003 030f 	and.w	r3, r3, #15
 800989a:	b25b      	sxtb	r3, r3
 800989c:	4313      	orrs	r3, r2
 800989e:	b25b      	sxtb	r3, r3
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	4619      	mov	r1, r3
 80098a4:	2004      	movs	r0, #4
 80098a6:	f7ff fdab 	bl	8009400 <NRF24_write_register>
}
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <NRF24_setChannel>:
 *
 * @returns None
 */
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	4603      	mov	r3, r0
 80098ba:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80098bc:	237f      	movs	r3, #127	; 0x7f
 80098be:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80098c0:	7bfa      	ldrb	r2, [r7, #15]
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	4293      	cmp	r3, r2
 80098c6:	bf28      	it	cs
 80098c8:	4613      	movcs	r3, r2
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	4619      	mov	r1, r3
 80098ce:	2005      	movs	r0, #5
 80098d0:	f7ff fd96 	bl	8009400 <NRF24_write_register>
}
 80098d4:	bf00      	nop
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <NRF24_setPayloadSize>:
 *
 * @returns None
 */
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	4603      	mov	r3, r0
 80098e4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80098e6:	2320      	movs	r3, #32
 80098e8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80098ea:	7bfa      	ldrb	r2, [r7, #15]
 80098ec:	79fb      	ldrb	r3, [r7, #7]
 80098ee:	4293      	cmp	r3, r2
 80098f0:	bf28      	it	cs
 80098f2:	4613      	movcs	r3, r2
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	4b04      	ldr	r3, [pc, #16]	; (8009908 <NRF24_setPayloadSize+0x2c>)
 80098f8:	701a      	strb	r2, [r3, #0]
}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	2000053e 	.word	0x2000053e

0800990c <NRF24_getPayloadSize>:
 *
 * @returns The payload size of the NRF24 module.
 */
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 800990c:	b480      	push	{r7}
 800990e:	af00      	add	r7, sp, #0
	return payload_size;
 8009910:	4b03      	ldr	r3, [pc, #12]	; (8009920 <NRF24_getPayloadSize+0x14>)
 8009912:	781b      	ldrb	r3, [r3, #0]
}
 8009914:	4618      	mov	r0, r3
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	2000053e 	.word	0x2000053e

08009924 <NRF24_getDynamicPayloadSize>:
 *
 * @returns The size of the dynamic payload.
 */
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8009928:	2060      	movs	r0, #96	; 0x60
 800992a:	f7ff fd1f 	bl	800936c <NRF24_read_register>
 800992e:	4603      	mov	r3, r0
}
 8009930:	4618      	mov	r0, r3
 8009932:	bd80      	pop	{r7, pc}

08009934 <NRF24_enableAckPayload>:
 *
 * @returns None
 */
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8009938:	201d      	movs	r0, #29
 800993a:	f7ff fd17 	bl	800936c <NRF24_read_register>
 800993e:	4603      	mov	r3, r0
 8009940:	f043 0306 	orr.w	r3, r3, #6
 8009944:	b2db      	uxtb	r3, r3
 8009946:	4619      	mov	r1, r3
 8009948:	201d      	movs	r0, #29
 800994a:	f7ff fd59 	bl	8009400 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800994e:	201d      	movs	r0, #29
 8009950:	f7ff fd0c 	bl	800936c <NRF24_read_register>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10c      	bne.n	8009974 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800995a:	f000 f9c9 	bl	8009cf0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800995e:	201d      	movs	r0, #29
 8009960:	f7ff fd04 	bl	800936c <NRF24_read_register>
 8009964:	4603      	mov	r3, r0
 8009966:	f043 0306 	orr.w	r3, r3, #6
 800996a:	b2db      	uxtb	r3, r3
 800996c:	4619      	mov	r1, r3
 800996e:	201d      	movs	r0, #29
 8009970:	f7ff fd46 	bl	8009400 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8009974:	201c      	movs	r0, #28
 8009976:	f7ff fcf9 	bl	800936c <NRF24_read_register>
 800997a:	4603      	mov	r3, r0
 800997c:	f043 0303 	orr.w	r3, r3, #3
 8009980:	b2db      	uxtb	r3, r3
 8009982:	4619      	mov	r1, r3
 8009984:	201c      	movs	r0, #28
 8009986:	f7ff fd3b 	bl	8009400 <NRF24_write_register>
}
 800998a:	bf00      	nop
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <NRF24_enableDynamicPayloads>:
 *
 * @returns None
 */
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8009994:	201d      	movs	r0, #29
 8009996:	f7ff fce9 	bl	800936c <NRF24_read_register>
 800999a:	4603      	mov	r3, r0
 800999c:	f043 0304 	orr.w	r3, r3, #4
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	4619      	mov	r1, r3
 80099a4:	201d      	movs	r0, #29
 80099a6:	f7ff fd2b 	bl	8009400 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80099aa:	201d      	movs	r0, #29
 80099ac:	f7ff fcde 	bl	800936c <NRF24_read_register>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10c      	bne.n	80099d0 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80099b6:	f000 f99b 	bl	8009cf0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80099ba:	201d      	movs	r0, #29
 80099bc:	f7ff fcd6 	bl	800936c <NRF24_read_register>
 80099c0:	4603      	mov	r3, r0
 80099c2:	f043 0304 	orr.w	r3, r3, #4
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	4619      	mov	r1, r3
 80099ca:	201d      	movs	r0, #29
 80099cc:	f7ff fd18 	bl	8009400 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80099d0:	201c      	movs	r0, #28
 80099d2:	f7ff fccb 	bl	800936c <NRF24_read_register>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	4619      	mov	r1, r3
 80099e0:	201c      	movs	r0, #28
 80099e2:	f7ff fd0d 	bl	8009400 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 80099e6:	4b02      	ldr	r3, [pc, #8]	; (80099f0 <NRF24_enableDynamicPayloads+0x60>)
 80099e8:	2201      	movs	r2, #1
 80099ea:	701a      	strb	r2, [r3, #0]
	
}
 80099ec:	bf00      	nop
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	2000053f 	.word	0x2000053f

080099f4 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80099f8:	201d      	movs	r0, #29
 80099fa:	f7ff fcb7 	bl	800936c <NRF24_read_register>
 80099fe:	4603      	mov	r3, r0
 8009a00:	f023 0304 	bic.w	r3, r3, #4
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	4619      	mov	r1, r3
 8009a08:	201d      	movs	r0, #29
 8009a0a:	f7ff fcf9 	bl	8009400 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8009a0e:	2100      	movs	r1, #0
 8009a10:	201c      	movs	r0, #28
 8009a12:	f7ff fcf5 	bl	8009400 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8009a16:	4b02      	ldr	r3, [pc, #8]	; (8009a20 <NRF24_disableDynamicPayloads+0x2c>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	701a      	strb	r2, [r3, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	2000053f 	.word	0x2000053f

08009a24 <NRF24_setAutoAck>:
 *
 * @returns None
 */
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d004      	beq.n	8009a3e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8009a34:	213f      	movs	r1, #63	; 0x3f
 8009a36:	2001      	movs	r0, #1
 8009a38:	f7ff fce2 	bl	8009400 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8009a3c:	e003      	b.n	8009a46 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8009a3e:	2100      	movs	r1, #0
 8009a40:	2001      	movs	r0, #1
 8009a42:	f7ff fcdd 	bl	8009400 <NRF24_write_register>
}
 8009a46:	bf00      	nop
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <NRF24_setPALevel>:
 *
 * @returns None
 */
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	4603      	mov	r3, r0
 8009a56:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8009a58:	2006      	movs	r0, #6
 8009a5a:	f7ff fc87 	bl	800936c <NRF24_read_register>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	f023 0306 	bic.w	r3, r3, #6
 8009a68:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d104      	bne.n	8009a7a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
 8009a72:	f043 0306 	orr.w	r3, r3, #6
 8009a76:	73fb      	strb	r3, [r7, #15]
 8009a78:	e019      	b.n	8009aae <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8009a7a:	79fb      	ldrb	r3, [r7, #7]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d104      	bne.n	8009a8a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	f043 0304 	orr.w	r3, r3, #4
 8009a86:	73fb      	strb	r3, [r7, #15]
 8009a88:	e011      	b.n	8009aae <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8009a8a:	79fb      	ldrb	r3, [r7, #7]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d104      	bne.n	8009a9a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	f043 0302 	orr.w	r3, r3, #2
 8009a96:	73fb      	strb	r3, [r7, #15]
 8009a98:	e009      	b.n	8009aae <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8009a9a:	79fb      	ldrb	r3, [r7, #7]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d006      	beq.n	8009aae <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8009aa0:	79fb      	ldrb	r3, [r7, #7]
 8009aa2:	2b04      	cmp	r3, #4
 8009aa4:	d103      	bne.n	8009aae <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	f043 0306 	orr.w	r3, r3, #6
 8009aac:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	2006      	movs	r0, #6
 8009ab4:	f7ff fca4 	bl	8009400 <NRF24_write_register>
}
 8009ab8:	bf00      	nop
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <NRF24_setDataRate>:
 *
 * @returns True if the data rate was successfully set, false otherwise.
 */
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8009aca:	2300      	movs	r3, #0
 8009acc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8009ace:	2006      	movs	r0, #6
 8009ad0:	f7ff fc4c 	bl	800936c <NRF24_read_register>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8009ad8:	4b1b      	ldr	r3, [pc, #108]	; (8009b48 <NRF24_setDataRate+0x88>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
 8009ae0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8009ae4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8009ae6:	79fb      	ldrb	r3, [r7, #7]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d107      	bne.n	8009afc <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8009aec:	4b16      	ldr	r3, [pc, #88]	; (8009b48 <NRF24_setDataRate+0x88>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	f043 0320 	orr.w	r3, r3, #32
 8009af8:	73bb      	strb	r3, [r7, #14]
 8009afa:	e00d      	b.n	8009b18 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8009afc:	79fb      	ldrb	r3, [r7, #7]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d107      	bne.n	8009b12 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8009b02:	4b11      	ldr	r3, [pc, #68]	; (8009b48 <NRF24_setDataRate+0x88>)
 8009b04:	2201      	movs	r2, #1
 8009b06:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	f043 0308 	orr.w	r3, r3, #8
 8009b0e:	73bb      	strb	r3, [r7, #14]
 8009b10:	e002      	b.n	8009b18 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8009b12:	4b0d      	ldr	r3, [pc, #52]	; (8009b48 <NRF24_setDataRate+0x88>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	2006      	movs	r0, #6
 8009b1e:	f7ff fc6f 	bl	8009400 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8009b22:	2006      	movs	r0, #6
 8009b24:	f7ff fc22 	bl	800936c <NRF24_read_register>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d102      	bne.n	8009b38 <NRF24_setDataRate+0x78>
  {
    result = true;
 8009b32:	2301      	movs	r3, #1
 8009b34:	73fb      	strb	r3, [r7, #15]
 8009b36:	e002      	b.n	8009b3e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8009b38:	4b03      	ldr	r3, [pc, #12]	; (8009b48 <NRF24_setDataRate+0x88>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	20000540 	.word	0x20000540

08009b4c <NRF24_setCRCLength>:
 *
 * @returns None
 */
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8009b56:	2000      	movs	r0, #0
 8009b58:	f7ff fc08 	bl	800936c <NRF24_read_register>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f023 030c 	bic.w	r3, r3, #12
 8009b62:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8009b64:	79fb      	ldrb	r3, [r7, #7]
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d00f      	beq.n	8009b8a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d104      	bne.n	8009b7a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	f043 0308 	orr.w	r3, r3, #8
 8009b76:	73fb      	strb	r3, [r7, #15]
 8009b78:	e007      	b.n	8009b8a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	f043 0308 	orr.w	r3, r3, #8
 8009b80:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	f043 0304 	orr.w	r3, r3, #4
 8009b88:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	2000      	movs	r0, #0
 8009b90:	f7ff fc36 	bl	8009400 <NRF24_write_register>
}
 8009b94:	bf00      	nop
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <NRF24_powerDown>:
 *
 * @returns None
 */
//38. power down
void NRF24_powerDown(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	f7ff fbe3 	bl	800936c <NRF24_read_register>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	f023 0302 	bic.w	r3, r3, #2
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	4619      	mov	r1, r3
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	f7ff fc25 	bl	8009400 <NRF24_write_register>
}
 8009bb6:	bf00      	nop
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <NRF24_availablePipe>:
 *
 * @returns True if data is available on any of the pipes, false otherwise.
 */
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8009bc2:	f7ff fcc9 	bl	8009558 <NRF24_get_status>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	bf14      	ite	ne
 8009bd4:	2301      	movne	r3, #1
 8009bd6:	2300      	moveq	r3, #0
 8009bd8:	73bb      	strb	r3, [r7, #14]

  if (result)
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d017      	beq.n	8009c10 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d007      	beq.n	8009bf6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	085b      	lsrs	r3, r3, #1
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f003 0307 	and.w	r3, r3, #7
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8009bf6:	2140      	movs	r1, #64	; 0x40
 8009bf8:	2007      	movs	r0, #7
 8009bfa:	f7ff fc01 	bl	8009400 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8009bfe:	7bfb      	ldrb	r3, [r7, #15]
 8009c00:	f003 0320 	and.w	r3, r3, #32
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d003      	beq.n	8009c10 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8009c08:	2120      	movs	r1, #32
 8009c0a:	2007      	movs	r0, #7
 8009c0c:	f7ff fbf8 	bl	8009400 <NRF24_write_register>
    }
  }
  return result;
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <NRF24_startWrite>:
 *
 * @returns None
 */
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	460b      	mov	r3, r1
 8009c24:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8009c26:	2000      	movs	r0, #0
 8009c28:	f7ff fb80 	bl	800932c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	f7ff fb9d 	bl	800936c <NRF24_read_register>
 8009c32:	4603      	mov	r3, r0
 8009c34:	f043 0302 	orr.w	r3, r3, #2
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	f023 0301 	bic.w	r3, r3, #1
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	4619      	mov	r1, r3
 8009c42:	2000      	movs	r0, #0
 8009c44:	f7ff fbdc 	bl	8009400 <NRF24_write_register>
  NRF24_ce(1);
 8009c48:	2001      	movs	r0, #1
 8009c4a:	f7ff fb6f 	bl	800932c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8009c4e:	2096      	movs	r0, #150	; 0x96
 8009c50:	f7ff fb2a 	bl	80092a8 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff fc1b 	bl	8009494 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8009c5e:	2001      	movs	r0, #1
 8009c60:	f7ff fb64 	bl	800932c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8009c64:	200f      	movs	r0, #15
 8009c66:	f7ff fb1f 	bl	80092a8 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	f7ff fb5e 	bl	800932c <NRF24_ce>
}
 8009c70:	bf00      	nop
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <NRF24_whatHappened>:
 *
 * @returns None
 */
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8009c84:	f7ff fc68 	bl	8009558 <NRF24_get_status>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8009c92:	2170      	movs	r1, #112	; 0x70
 8009c94:	2007      	movs	r0, #7
 8009c96:	f7ff fbb3 	bl	8009400 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8009c9a:	7dfb      	ldrb	r3, [r7, #23]
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	bf14      	ite	ne
 8009ca4:	2301      	movne	r3, #1
 8009ca6:	2300      	moveq	r3, #0
 8009ca8:	b2da      	uxtb	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8009cae:	7dfb      	ldrb	r3, [r7, #23]
 8009cb0:	f003 0310 	and.w	r3, r3, #16
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	bf14      	ite	ne
 8009cb8:	2301      	movne	r3, #1
 8009cba:	2300      	moveq	r3, #0
 8009cbc:	b2da      	uxtb	r2, r3
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8009cc2:	7dfb      	ldrb	r3, [r7, #23]
 8009cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	bf14      	ite	ne
 8009ccc:	2301      	movne	r3, #1
 8009cce:	2300      	moveq	r3, #0
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	701a      	strb	r2, [r3, #0]
}
 8009cd6:	bf00      	nop
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <NRF24_resetStatus>:
 *
 * @returns None
 */
//46. Reset Status
void NRF24_resetStatus(void)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8009ce2:	2170      	movs	r1, #112	; 0x70
 8009ce4:	2007      	movs	r0, #7
 8009ce6:	f7ff fb8b 	bl	8009400 <NRF24_write_register>
}
 8009cea:	bf00      	nop
 8009cec:	bd80      	pop	{r7, pc}
	...

08009cf0 <NRF24_ACTIVATE_cmd>:
 *
 * @returns None
 */
//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	f7ff faf8 	bl	80092ec <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8009cfc:	2350      	movs	r3, #80	; 0x50
 8009cfe:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8009d00:	2373      	movs	r3, #115	; 0x73
 8009d02:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8009d04:	1d39      	adds	r1, r7, #4
 8009d06:	2364      	movs	r3, #100	; 0x64
 8009d08:	2202      	movs	r2, #2
 8009d0a:	4805      	ldr	r0, [pc, #20]	; (8009d20 <NRF24_ACTIVATE_cmd+0x30>)
 8009d0c:	f7fa fac7 	bl	800429e <HAL_SPI_Transmit>
	NRF24_csn(1);
 8009d10:	2001      	movs	r0, #1
 8009d12:	f7ff faeb 	bl	80092ec <NRF24_csn>
}
 8009d16:	bf00      	nop
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	2000054c 	.word	0x2000054c

08009d24 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8009d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d26:	b0a1      	sub	sp, #132	; 0x84
 8009d28:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8009d2a:	f107 0308 	add.w	r3, r7, #8
 8009d2e:	49c3      	ldr	r1, [pc, #780]	; (800a03c <printRadioSettings+0x318>)
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 fc5f 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009d36:	f107 0308 	add.w	r3, r7, #8
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7f6 fa48 	bl	80001d0 <strlen>
 8009d40:	4603      	mov	r3, r0
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	f107 0108 	add.w	r1, r7, #8
 8009d48:	230a      	movs	r3, #10
 8009d4a:	48bd      	ldr	r0, [pc, #756]	; (800a040 <printRadioSettings+0x31c>)
 8009d4c:	f7fc f8a1 	bl	8005e92 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8009d50:	2000      	movs	r0, #0
 8009d52:	f7ff fb0b 	bl	800936c <NRF24_read_register>
 8009d56:	4603      	mov	r3, r0
 8009d58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8009d5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009d60:	f003 0308 	and.w	r3, r3, #8
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d013      	beq.n	8009d90 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8009d68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d006      	beq.n	8009d82 <printRadioSettings+0x5e>
 8009d74:	f107 0308 	add.w	r3, r7, #8
 8009d78:	49b2      	ldr	r1, [pc, #712]	; (800a044 <printRadioSettings+0x320>)
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 fc3a 	bl	800a5f4 <siprintf>
 8009d80:	e00c      	b.n	8009d9c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8009d82:	f107 0308 	add.w	r3, r7, #8
 8009d86:	49b0      	ldr	r1, [pc, #704]	; (800a048 <printRadioSettings+0x324>)
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 fc33 	bl	800a5f4 <siprintf>
 8009d8e:	e005      	b.n	8009d9c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8009d90:	f107 0308 	add.w	r3, r7, #8
 8009d94:	49ad      	ldr	r1, [pc, #692]	; (800a04c <printRadioSettings+0x328>)
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 fc2c 	bl	800a5f4 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009d9c:	f107 0308 	add.w	r3, r7, #8
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7f6 fa15 	bl	80001d0 <strlen>
 8009da6:	4603      	mov	r3, r0
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	f107 0108 	add.w	r1, r7, #8
 8009dae:	230a      	movs	r3, #10
 8009db0:	48a3      	ldr	r0, [pc, #652]	; (800a040 <printRadioSettings+0x31c>)
 8009db2:	f7fc f86e 	bl	8005e92 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8009db6:	2001      	movs	r0, #1
 8009db8:	f7ff fad8 	bl	800936c <NRF24_read_register>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009dc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009dc6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	bfcc      	ite	gt
 8009dce:	2301      	movgt	r3, #1
 8009dd0:	2300      	movle	r3, #0
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009dd6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009dda:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bfcc      	ite	gt
 8009de2:	2301      	movgt	r3, #1
 8009de4:	2300      	movle	r3, #0
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009dea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009dee:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	bfcc      	ite	gt
 8009df6:	2301      	movgt	r3, #1
 8009df8:	2300      	movle	r3, #0
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009dfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009e02:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bfcc      	ite	gt
 8009e0a:	2301      	movgt	r3, #1
 8009e0c:	2300      	movle	r3, #0
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009e12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009e16:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	bfcc      	ite	gt
 8009e1e:	2301      	movgt	r3, #1
 8009e20:	2300      	movle	r3, #0
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009e26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009e2a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	bfcc      	ite	gt
 8009e32:	2301      	movgt	r3, #1
 8009e34:	2300      	movle	r3, #0
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	f107 0008 	add.w	r0, r7, #8
 8009e3c:	9303      	str	r3, [sp, #12]
 8009e3e:	9402      	str	r4, [sp, #8]
 8009e40:	9101      	str	r1, [sp, #4]
 8009e42:	9200      	str	r2, [sp, #0]
 8009e44:	4633      	mov	r3, r6
 8009e46:	462a      	mov	r2, r5
 8009e48:	4981      	ldr	r1, [pc, #516]	; (800a050 <printRadioSettings+0x32c>)
 8009e4a:	f000 fbd3 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009e4e:	f107 0308 	add.w	r3, r7, #8
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7f6 f9bc 	bl	80001d0 <strlen>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	f107 0108 	add.w	r1, r7, #8
 8009e60:	230a      	movs	r3, #10
 8009e62:	4877      	ldr	r0, [pc, #476]	; (800a040 <printRadioSettings+0x31c>)
 8009e64:	f7fc f815 	bl	8005e92 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8009e68:	2002      	movs	r0, #2
 8009e6a:	f7ff fa7f 	bl	800936c <NRF24_read_register>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009e74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009e78:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bfcc      	ite	gt
 8009e80:	2301      	movgt	r3, #1
 8009e82:	2300      	movle	r3, #0
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009e88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009e8c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	bfcc      	ite	gt
 8009e94:	2301      	movgt	r3, #1
 8009e96:	2300      	movle	r3, #0
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009e9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009ea0:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	bfcc      	ite	gt
 8009ea8:	2301      	movgt	r3, #1
 8009eaa:	2300      	movle	r3, #0
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009eb0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009eb4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	bfcc      	ite	gt
 8009ebc:	2301      	movgt	r3, #1
 8009ebe:	2300      	movle	r3, #0
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009ec4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009ec8:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	bfcc      	ite	gt
 8009ed0:	2301      	movgt	r3, #1
 8009ed2:	2300      	movle	r3, #0
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009ed8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009edc:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	bfcc      	ite	gt
 8009ee4:	2301      	movgt	r3, #1
 8009ee6:	2300      	movle	r3, #0
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	f107 0008 	add.w	r0, r7, #8
 8009eee:	9303      	str	r3, [sp, #12]
 8009ef0:	9402      	str	r4, [sp, #8]
 8009ef2:	9101      	str	r1, [sp, #4]
 8009ef4:	9200      	str	r2, [sp, #0]
 8009ef6:	4633      	mov	r3, r6
 8009ef8:	462a      	mov	r2, r5
 8009efa:	4956      	ldr	r1, [pc, #344]	; (800a054 <printRadioSettings+0x330>)
 8009efc:	f000 fb7a 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009f00:	f107 0308 	add.w	r3, r7, #8
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7f6 f963 	bl	80001d0 <strlen>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	f107 0108 	add.w	r1, r7, #8
 8009f12:	230a      	movs	r3, #10
 8009f14:	484a      	ldr	r0, [pc, #296]	; (800a040 <printRadioSettings+0x31c>)
 8009f16:	f7fb ffbc 	bl	8005e92 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8009f1a:	2003      	movs	r0, #3
 8009f1c:	f7ff fa26 	bl	800936c <NRF24_read_register>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f003 0303 	and.w	r3, r3, #3
 8009f26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8009f2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009f2e:	3302      	adds	r3, #2
 8009f30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8009f34:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8009f38:	f107 0308 	add.w	r3, r7, #8
 8009f3c:	4946      	ldr	r1, [pc, #280]	; (800a058 <printRadioSettings+0x334>)
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fb58 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009f44:	f107 0308 	add.w	r3, r7, #8
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7f6 f941 	bl	80001d0 <strlen>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	f107 0108 	add.w	r1, r7, #8
 8009f56:	230a      	movs	r3, #10
 8009f58:	4839      	ldr	r0, [pc, #228]	; (800a040 <printRadioSettings+0x31c>)
 8009f5a:	f7fb ff9a 	bl	8005e92 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8009f5e:	2005      	movs	r0, #5
 8009f60:	f7ff fa04 	bl	800936c <NRF24_read_register>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8009f6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f72:	f107 0308 	add.w	r3, r7, #8
 8009f76:	4939      	ldr	r1, [pc, #228]	; (800a05c <printRadioSettings+0x338>)
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f000 fb3b 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009f7e:	f107 0308 	add.w	r3, r7, #8
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7f6 f924 	bl	80001d0 <strlen>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	f107 0108 	add.w	r1, r7, #8
 8009f90:	230a      	movs	r3, #10
 8009f92:	482b      	ldr	r0, [pc, #172]	; (800a040 <printRadioSettings+0x31c>)
 8009f94:	f7fb ff7d 	bl	8005e92 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8009f98:	2006      	movs	r0, #6
 8009f9a:	f7ff f9e7 	bl	800936c <NRF24_read_register>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8009fa4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009fa8:	f003 0308 	and.w	r3, r3, #8
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d006      	beq.n	8009fbe <printRadioSettings+0x29a>
 8009fb0:	f107 0308 	add.w	r3, r7, #8
 8009fb4:	492a      	ldr	r1, [pc, #168]	; (800a060 <printRadioSettings+0x33c>)
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 fb1c 	bl	800a5f4 <siprintf>
 8009fbc:	e005      	b.n	8009fca <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8009fbe:	f107 0308 	add.w	r3, r7, #8
 8009fc2:	4928      	ldr	r1, [pc, #160]	; (800a064 <printRadioSettings+0x340>)
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 fb15 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009fca:	f107 0308 	add.w	r3, r7, #8
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f6 f8fe 	bl	80001d0 <strlen>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	f107 0108 	add.w	r1, r7, #8
 8009fdc:	230a      	movs	r3, #10
 8009fde:	4818      	ldr	r0, [pc, #96]	; (800a040 <printRadioSettings+0x31c>)
 8009fe0:	f7fb ff57 	bl	8005e92 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8009fe4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009fe8:	f003 0306 	and.w	r3, r3, #6
 8009fec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8009ff0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009ff4:	085b      	lsrs	r3, r3, #1
 8009ff6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8009ffa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d106      	bne.n	800a010 <printRadioSettings+0x2ec>
 800a002:	f107 0308 	add.w	r3, r7, #8
 800a006:	4918      	ldr	r1, [pc, #96]	; (800a068 <printRadioSettings+0x344>)
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 faf3 	bl	800a5f4 <siprintf>
 800a00e:	e03b      	b.n	800a088 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800a010:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a014:	2b01      	cmp	r3, #1
 800a016:	d106      	bne.n	800a026 <printRadioSettings+0x302>
 800a018:	f107 0308 	add.w	r3, r7, #8
 800a01c:	4913      	ldr	r1, [pc, #76]	; (800a06c <printRadioSettings+0x348>)
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 fae8 	bl	800a5f4 <siprintf>
 800a024:	e030      	b.n	800a088 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800a026:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d122      	bne.n	800a074 <printRadioSettings+0x350>
 800a02e:	f107 0308 	add.w	r3, r7, #8
 800a032:	490f      	ldr	r1, [pc, #60]	; (800a070 <printRadioSettings+0x34c>)
 800a034:	4618      	mov	r0, r3
 800a036:	f000 fadd 	bl	800a5f4 <siprintf>
 800a03a:	e025      	b.n	800a088 <printRadioSettings+0x364>
 800a03c:	0800ca78 	.word	0x0800ca78
 800a040:	200005a4 	.word	0x200005a4
 800a044:	0800caac 	.word	0x0800caac
 800a048:	0800cac8 	.word	0x0800cac8
 800a04c:	0800cae4 	.word	0x0800cae4
 800a050:	0800caf8 	.word	0x0800caf8
 800a054:	0800cb3c 	.word	0x0800cb3c
 800a058:	0800cb88 	.word	0x0800cb88
 800a05c:	0800cba4 	.word	0x0800cba4
 800a060:	0800cbb8 	.word	0x0800cbb8
 800a064:	0800cbd0 	.word	0x0800cbd0
 800a068:	0800cbe8 	.word	0x0800cbe8
 800a06c:	0800cbfc 	.word	0x0800cbfc
 800a070:	0800cc10 	.word	0x0800cc10
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800a074:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d105      	bne.n	800a088 <printRadioSettings+0x364>
 800a07c:	f107 0308 	add.w	r3, r7, #8
 800a080:	49d7      	ldr	r1, [pc, #860]	; (800a3e0 <printRadioSettings+0x6bc>)
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fab6 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a088:	f107 0308 	add.w	r3, r7, #8
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7f6 f89f 	bl	80001d0 <strlen>
 800a092:	4603      	mov	r3, r0
 800a094:	b29a      	uxth	r2, r3
 800a096:	f107 0108 	add.w	r1, r7, #8
 800a09a:	230a      	movs	r3, #10
 800a09c:	48d1      	ldr	r0, [pc, #836]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a09e:	f7fb fef8 	bl	8005e92 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800a0a2:	463b      	mov	r3, r7
 800a0a4:	2205      	movs	r2, #5
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	200a      	movs	r0, #10
 800a0aa:	f7ff f985 	bl	80093b8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800a0ae:	793b      	ldrb	r3, [r7, #4]
 800a0b0:	461c      	mov	r4, r3
 800a0b2:	78fb      	ldrb	r3, [r7, #3]
 800a0b4:	461d      	mov	r5, r3
 800a0b6:	78bb      	ldrb	r3, [r7, #2]
 800a0b8:	787a      	ldrb	r2, [r7, #1]
 800a0ba:	7839      	ldrb	r1, [r7, #0]
 800a0bc:	f107 0008 	add.w	r0, r7, #8
 800a0c0:	9102      	str	r1, [sp, #8]
 800a0c2:	9201      	str	r2, [sp, #4]
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	462b      	mov	r3, r5
 800a0c8:	4622      	mov	r2, r4
 800a0ca:	49c7      	ldr	r1, [pc, #796]	; (800a3e8 <printRadioSettings+0x6c4>)
 800a0cc:	f000 fa92 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a0d0:	f107 0308 	add.w	r3, r7, #8
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7f6 f87b 	bl	80001d0 <strlen>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	f107 0108 	add.w	r1, r7, #8
 800a0e2:	230a      	movs	r3, #10
 800a0e4:	48bf      	ldr	r0, [pc, #764]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a0e6:	f7fb fed4 	bl	8005e92 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800a0ea:	463b      	mov	r3, r7
 800a0ec:	2205      	movs	r2, #5
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	200b      	movs	r0, #11
 800a0f2:	f7ff f961 	bl	80093b8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800a0f6:	793b      	ldrb	r3, [r7, #4]
 800a0f8:	461c      	mov	r4, r3
 800a0fa:	78fb      	ldrb	r3, [r7, #3]
 800a0fc:	461d      	mov	r5, r3
 800a0fe:	78bb      	ldrb	r3, [r7, #2]
 800a100:	787a      	ldrb	r2, [r7, #1]
 800a102:	7839      	ldrb	r1, [r7, #0]
 800a104:	f107 0008 	add.w	r0, r7, #8
 800a108:	9102      	str	r1, [sp, #8]
 800a10a:	9201      	str	r2, [sp, #4]
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	462b      	mov	r3, r5
 800a110:	4622      	mov	r2, r4
 800a112:	49b6      	ldr	r1, [pc, #728]	; (800a3ec <printRadioSettings+0x6c8>)
 800a114:	f000 fa6e 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a118:	f107 0308 	add.w	r3, r7, #8
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7f6 f857 	bl	80001d0 <strlen>
 800a122:	4603      	mov	r3, r0
 800a124:	b29a      	uxth	r2, r3
 800a126:	f107 0108 	add.w	r1, r7, #8
 800a12a:	230a      	movs	r3, #10
 800a12c:	48ad      	ldr	r0, [pc, #692]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a12e:	f7fb feb0 	bl	8005e92 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800a132:	463b      	mov	r3, r7
 800a134:	2201      	movs	r2, #1
 800a136:	4619      	mov	r1, r3
 800a138:	200c      	movs	r0, #12
 800a13a:	f7ff f93d 	bl	80093b8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800a13e:	783b      	ldrb	r3, [r7, #0]
 800a140:	461a      	mov	r2, r3
 800a142:	f107 0308 	add.w	r3, r7, #8
 800a146:	49aa      	ldr	r1, [pc, #680]	; (800a3f0 <printRadioSettings+0x6cc>)
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fa53 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a14e:	f107 0308 	add.w	r3, r7, #8
 800a152:	4618      	mov	r0, r3
 800a154:	f7f6 f83c 	bl	80001d0 <strlen>
 800a158:	4603      	mov	r3, r0
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	f107 0108 	add.w	r1, r7, #8
 800a160:	230a      	movs	r3, #10
 800a162:	48a0      	ldr	r0, [pc, #640]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a164:	f7fb fe95 	bl	8005e92 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800a168:	463b      	mov	r3, r7
 800a16a:	2201      	movs	r2, #1
 800a16c:	4619      	mov	r1, r3
 800a16e:	200d      	movs	r0, #13
 800a170:	f7ff f922 	bl	80093b8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800a174:	783b      	ldrb	r3, [r7, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	f107 0308 	add.w	r3, r7, #8
 800a17c:	499d      	ldr	r1, [pc, #628]	; (800a3f4 <printRadioSettings+0x6d0>)
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fa38 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a184:	f107 0308 	add.w	r3, r7, #8
 800a188:	4618      	mov	r0, r3
 800a18a:	f7f6 f821 	bl	80001d0 <strlen>
 800a18e:	4603      	mov	r3, r0
 800a190:	b29a      	uxth	r2, r3
 800a192:	f107 0108 	add.w	r1, r7, #8
 800a196:	230a      	movs	r3, #10
 800a198:	4892      	ldr	r0, [pc, #584]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a19a:	f7fb fe7a 	bl	8005e92 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800a19e:	463b      	mov	r3, r7
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	200e      	movs	r0, #14
 800a1a6:	f7ff f907 	bl	80093b8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800a1aa:	783b      	ldrb	r3, [r7, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	f107 0308 	add.w	r3, r7, #8
 800a1b2:	4991      	ldr	r1, [pc, #580]	; (800a3f8 <printRadioSettings+0x6d4>)
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fa1d 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a1ba:	f107 0308 	add.w	r3, r7, #8
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7f6 f806 	bl	80001d0 <strlen>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	f107 0108 	add.w	r1, r7, #8
 800a1cc:	230a      	movs	r3, #10
 800a1ce:	4885      	ldr	r0, [pc, #532]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a1d0:	f7fb fe5f 	bl	8005e92 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800a1d4:	463b      	mov	r3, r7
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	4619      	mov	r1, r3
 800a1da:	200f      	movs	r0, #15
 800a1dc:	f7ff f8ec 	bl	80093b8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800a1e0:	783b      	ldrb	r3, [r7, #0]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	f107 0308 	add.w	r3, r7, #8
 800a1e8:	4984      	ldr	r1, [pc, #528]	; (800a3fc <printRadioSettings+0x6d8>)
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 fa02 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a1f0:	f107 0308 	add.w	r3, r7, #8
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7f5 ffeb 	bl	80001d0 <strlen>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	f107 0108 	add.w	r1, r7, #8
 800a202:	230a      	movs	r3, #10
 800a204:	4877      	ldr	r0, [pc, #476]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a206:	f7fb fe44 	bl	8005e92 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800a20a:	463b      	mov	r3, r7
 800a20c:	2205      	movs	r2, #5
 800a20e:	4619      	mov	r1, r3
 800a210:	2010      	movs	r0, #16
 800a212:	f7ff f8d1 	bl	80093b8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800a216:	793b      	ldrb	r3, [r7, #4]
 800a218:	461c      	mov	r4, r3
 800a21a:	78fb      	ldrb	r3, [r7, #3]
 800a21c:	461d      	mov	r5, r3
 800a21e:	78bb      	ldrb	r3, [r7, #2]
 800a220:	787a      	ldrb	r2, [r7, #1]
 800a222:	7839      	ldrb	r1, [r7, #0]
 800a224:	f107 0008 	add.w	r0, r7, #8
 800a228:	9102      	str	r1, [sp, #8]
 800a22a:	9201      	str	r2, [sp, #4]
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	462b      	mov	r3, r5
 800a230:	4622      	mov	r2, r4
 800a232:	4973      	ldr	r1, [pc, #460]	; (800a400 <printRadioSettings+0x6dc>)
 800a234:	f000 f9de 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a238:	f107 0308 	add.w	r3, r7, #8
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7f5 ffc7 	bl	80001d0 <strlen>
 800a242:	4603      	mov	r3, r0
 800a244:	b29a      	uxth	r2, r3
 800a246:	f107 0108 	add.w	r1, r7, #8
 800a24a:	230a      	movs	r3, #10
 800a24c:	4865      	ldr	r0, [pc, #404]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a24e:	f7fb fe20 	bl	8005e92 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800a252:	2011      	movs	r0, #17
 800a254:	f7ff f88a 	bl	800936c <NRF24_read_register>
 800a258:	4603      	mov	r3, r0
 800a25a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800a25e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a262:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a266:	f107 0308 	add.w	r3, r7, #8
 800a26a:	4966      	ldr	r1, [pc, #408]	; (800a404 <printRadioSettings+0x6e0>)
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 f9c1 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a272:	f107 0308 	add.w	r3, r7, #8
 800a276:	4618      	mov	r0, r3
 800a278:	f7f5 ffaa 	bl	80001d0 <strlen>
 800a27c:	4603      	mov	r3, r0
 800a27e:	b29a      	uxth	r2, r3
 800a280:	f107 0108 	add.w	r1, r7, #8
 800a284:	230a      	movs	r3, #10
 800a286:	4857      	ldr	r0, [pc, #348]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a288:	f7fb fe03 	bl	8005e92 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 800a28c:	2012      	movs	r0, #18
 800a28e:	f7ff f86d 	bl	800936c <NRF24_read_register>
 800a292:	4603      	mov	r3, r0
 800a294:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800a298:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a29c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a2a0:	f107 0308 	add.w	r3, r7, #8
 800a2a4:	4958      	ldr	r1, [pc, #352]	; (800a408 <printRadioSettings+0x6e4>)
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 f9a4 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a2ac:	f107 0308 	add.w	r3, r7, #8
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7f5 ff8d 	bl	80001d0 <strlen>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	f107 0108 	add.w	r1, r7, #8
 800a2be:	230a      	movs	r3, #10
 800a2c0:	4848      	ldr	r0, [pc, #288]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a2c2:	f7fb fde6 	bl	8005e92 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 800a2c6:	2013      	movs	r0, #19
 800a2c8:	f7ff f850 	bl	800936c <NRF24_read_register>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800a2d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a2d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a2da:	f107 0308 	add.w	r3, r7, #8
 800a2de:	494b      	ldr	r1, [pc, #300]	; (800a40c <printRadioSettings+0x6e8>)
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 f987 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a2e6:	f107 0308 	add.w	r3, r7, #8
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7f5 ff70 	bl	80001d0 <strlen>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	f107 0108 	add.w	r1, r7, #8
 800a2f8:	230a      	movs	r3, #10
 800a2fa:	483a      	ldr	r0, [pc, #232]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a2fc:	f7fb fdc9 	bl	8005e92 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 800a300:	2014      	movs	r0, #20
 800a302:	f7ff f833 	bl	800936c <NRF24_read_register>
 800a306:	4603      	mov	r3, r0
 800a308:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800a30c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a310:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a314:	f107 0308 	add.w	r3, r7, #8
 800a318:	493d      	ldr	r1, [pc, #244]	; (800a410 <printRadioSettings+0x6ec>)
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 f96a 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a320:	f107 0308 	add.w	r3, r7, #8
 800a324:	4618      	mov	r0, r3
 800a326:	f7f5 ff53 	bl	80001d0 <strlen>
 800a32a:	4603      	mov	r3, r0
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	f107 0108 	add.w	r1, r7, #8
 800a332:	230a      	movs	r3, #10
 800a334:	482b      	ldr	r0, [pc, #172]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a336:	f7fb fdac 	bl	8005e92 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 800a33a:	2015      	movs	r0, #21
 800a33c:	f7ff f816 	bl	800936c <NRF24_read_register>
 800a340:	4603      	mov	r3, r0
 800a342:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800a346:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a34a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a34e:	f107 0308 	add.w	r3, r7, #8
 800a352:	4930      	ldr	r1, [pc, #192]	; (800a414 <printRadioSettings+0x6f0>)
 800a354:	4618      	mov	r0, r3
 800a356:	f000 f94d 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a35a:	f107 0308 	add.w	r3, r7, #8
 800a35e:	4618      	mov	r0, r3
 800a360:	f7f5 ff36 	bl	80001d0 <strlen>
 800a364:	4603      	mov	r3, r0
 800a366:	b29a      	uxth	r2, r3
 800a368:	f107 0108 	add.w	r1, r7, #8
 800a36c:	230a      	movs	r3, #10
 800a36e:	481d      	ldr	r0, [pc, #116]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a370:	f7fb fd8f 	bl	8005e92 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800a374:	2016      	movs	r0, #22
 800a376:	f7fe fff9 	bl	800936c <NRF24_read_register>
 800a37a:	4603      	mov	r3, r0
 800a37c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800a380:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a384:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a388:	f107 0308 	add.w	r3, r7, #8
 800a38c:	4922      	ldr	r1, [pc, #136]	; (800a418 <printRadioSettings+0x6f4>)
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 f930 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a394:	f107 0308 	add.w	r3, r7, #8
 800a398:	4618      	mov	r0, r3
 800a39a:	f7f5 ff19 	bl	80001d0 <strlen>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	f107 0108 	add.w	r1, r7, #8
 800a3a6:	230a      	movs	r3, #10
 800a3a8:	480e      	ldr	r0, [pc, #56]	; (800a3e4 <printRadioSettings+0x6c0>)
 800a3aa:	f7fb fd72 	bl	8005e92 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800a3ae:	201c      	movs	r0, #28
 800a3b0:	f7fe ffdc 	bl	800936c <NRF24_read_register>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a3ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a3be:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	bfcc      	ite	gt
 800a3c6:	2301      	movgt	r3, #1
 800a3c8:	2300      	movle	r3, #0
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a3ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a3d2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	bfcc      	ite	gt
 800a3da:	2301      	movgt	r3, #1
 800a3dc:	2300      	movle	r3, #0
 800a3de:	e01d      	b.n	800a41c <printRadioSettings+0x6f8>
 800a3e0:	0800cc24 	.word	0x0800cc24
 800a3e4:	200005a4 	.word	0x200005a4
 800a3e8:	0800cc38 	.word	0x0800cc38
 800a3ec:	0800cc68 	.word	0x0800cc68
 800a3f0:	0800cc98 	.word	0x0800cc98
 800a3f4:	0800ccc0 	.word	0x0800ccc0
 800a3f8:	0800cce8 	.word	0x0800cce8
 800a3fc:	0800cd10 	.word	0x0800cd10
 800a400:	0800cd38 	.word	0x0800cd38
 800a404:	0800cd64 	.word	0x0800cd64
 800a408:	0800cd80 	.word	0x0800cd80
 800a40c:	0800cd9c 	.word	0x0800cd9c
 800a410:	0800cdb8 	.word	0x0800cdb8
 800a414:	0800cdd4 	.word	0x0800cdd4
 800a418:	0800cdf0 	.word	0x0800cdf0
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a420:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a424:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a428:	2b00      	cmp	r3, #0
 800a42a:	bfcc      	ite	gt
 800a42c:	2301      	movgt	r3, #1
 800a42e:	2300      	movle	r3, #0
 800a430:	b2db      	uxtb	r3, r3
 800a432:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a434:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a438:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	bfcc      	ite	gt
 800a440:	2301      	movgt	r3, #1
 800a442:	2300      	movle	r3, #0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a448:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a44c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a450:	2b00      	cmp	r3, #0
 800a452:	bfcc      	ite	gt
 800a454:	2301      	movgt	r3, #1
 800a456:	2300      	movle	r3, #0
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a45c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a460:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a464:	2b00      	cmp	r3, #0
 800a466:	bfcc      	ite	gt
 800a468:	2301      	movgt	r3, #1
 800a46a:	2300      	movle	r3, #0
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	f107 0008 	add.w	r0, r7, #8
 800a472:	9303      	str	r3, [sp, #12]
 800a474:	9402      	str	r4, [sp, #8]
 800a476:	9101      	str	r1, [sp, #4]
 800a478:	9200      	str	r2, [sp, #0]
 800a47a:	4633      	mov	r3, r6
 800a47c:	462a      	mov	r2, r5
 800a47e:	4936      	ldr	r1, [pc, #216]	; (800a558 <printRadioSettings+0x834>)
 800a480:	f000 f8b8 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a484:	f107 0308 	add.w	r3, r7, #8
 800a488:	4618      	mov	r0, r3
 800a48a:	f7f5 fea1 	bl	80001d0 <strlen>
 800a48e:	4603      	mov	r3, r0
 800a490:	b29a      	uxth	r2, r3
 800a492:	f107 0108 	add.w	r1, r7, #8
 800a496:	230a      	movs	r3, #10
 800a498:	4830      	ldr	r0, [pc, #192]	; (800a55c <printRadioSettings+0x838>)
 800a49a:	f7fb fcfa 	bl	8005e92 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800a49e:	201d      	movs	r0, #29
 800a4a0:	f7fe ff64 	bl	800936c <NRF24_read_register>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800a4aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a4ae:	f003 0304 	and.w	r3, r3, #4
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d006      	beq.n	800a4c4 <printRadioSettings+0x7a0>
 800a4b6:	f107 0308 	add.w	r3, r7, #8
 800a4ba:	4929      	ldr	r1, [pc, #164]	; (800a560 <printRadioSettings+0x83c>)
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f000 f899 	bl	800a5f4 <siprintf>
 800a4c2:	e005      	b.n	800a4d0 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800a4c4:	f107 0308 	add.w	r3, r7, #8
 800a4c8:	4926      	ldr	r1, [pc, #152]	; (800a564 <printRadioSettings+0x840>)
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 f892 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a4d0:	f107 0308 	add.w	r3, r7, #8
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7f5 fe7b 	bl	80001d0 <strlen>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	f107 0108 	add.w	r1, r7, #8
 800a4e2:	230a      	movs	r3, #10
 800a4e4:	481d      	ldr	r0, [pc, #116]	; (800a55c <printRadioSettings+0x838>)
 800a4e6:	f7fb fcd4 	bl	8005e92 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800a4ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a4ee:	f003 0302 	and.w	r3, r3, #2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d006      	beq.n	800a504 <printRadioSettings+0x7e0>
 800a4f6:	f107 0308 	add.w	r3, r7, #8
 800a4fa:	491b      	ldr	r1, [pc, #108]	; (800a568 <printRadioSettings+0x844>)
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f000 f879 	bl	800a5f4 <siprintf>
 800a502:	e005      	b.n	800a510 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800a504:	f107 0308 	add.w	r3, r7, #8
 800a508:	4918      	ldr	r1, [pc, #96]	; (800a56c <printRadioSettings+0x848>)
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 f872 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a510:	f107 0308 	add.w	r3, r7, #8
 800a514:	4618      	mov	r0, r3
 800a516:	f7f5 fe5b 	bl	80001d0 <strlen>
 800a51a:	4603      	mov	r3, r0
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	f107 0108 	add.w	r1, r7, #8
 800a522:	230a      	movs	r3, #10
 800a524:	480d      	ldr	r0, [pc, #52]	; (800a55c <printRadioSettings+0x838>)
 800a526:	f7fb fcb4 	bl	8005e92 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800a52a:	f107 0308 	add.w	r3, r7, #8
 800a52e:	4910      	ldr	r1, [pc, #64]	; (800a570 <printRadioSettings+0x84c>)
 800a530:	4618      	mov	r0, r3
 800a532:	f000 f85f 	bl	800a5f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800a536:	f107 0308 	add.w	r3, r7, #8
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7f5 fe48 	bl	80001d0 <strlen>
 800a540:	4603      	mov	r3, r0
 800a542:	b29a      	uxth	r2, r3
 800a544:	f107 0108 	add.w	r1, r7, #8
 800a548:	230a      	movs	r3, #10
 800a54a:	4804      	ldr	r0, [pc, #16]	; (800a55c <printRadioSettings+0x838>)
 800a54c:	f7fb fca1 	bl	8005e92 <HAL_UART_Transmit>
}
 800a550:	bf00      	nop
 800a552:	3774      	adds	r7, #116	; 0x74
 800a554:	46bd      	mov	sp, r7
 800a556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a558:	0800ce0c 	.word	0x0800ce0c
 800a55c:	200005a4 	.word	0x200005a4
 800a560:	0800ce58 	.word	0x0800ce58
 800a564:	0800ce70 	.word	0x0800ce70
 800a568:	0800ce88 	.word	0x0800ce88
 800a56c:	0800cea4 	.word	0x0800cea4
 800a570:	0800ca78 	.word	0x0800ca78

0800a574 <__errno>:
 800a574:	4b01      	ldr	r3, [pc, #4]	; (800a57c <__errno+0x8>)
 800a576:	6818      	ldr	r0, [r3, #0]
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	20000140 	.word	0x20000140

0800a580 <__libc_init_array>:
 800a580:	b570      	push	{r4, r5, r6, lr}
 800a582:	4d0d      	ldr	r5, [pc, #52]	; (800a5b8 <__libc_init_array+0x38>)
 800a584:	4c0d      	ldr	r4, [pc, #52]	; (800a5bc <__libc_init_array+0x3c>)
 800a586:	1b64      	subs	r4, r4, r5
 800a588:	10a4      	asrs	r4, r4, #2
 800a58a:	2600      	movs	r6, #0
 800a58c:	42a6      	cmp	r6, r4
 800a58e:	d109      	bne.n	800a5a4 <__libc_init_array+0x24>
 800a590:	4d0b      	ldr	r5, [pc, #44]	; (800a5c0 <__libc_init_array+0x40>)
 800a592:	4c0c      	ldr	r4, [pc, #48]	; (800a5c4 <__libc_init_array+0x44>)
 800a594:	f002 fa5e 	bl	800ca54 <_init>
 800a598:	1b64      	subs	r4, r4, r5
 800a59a:	10a4      	asrs	r4, r4, #2
 800a59c:	2600      	movs	r6, #0
 800a59e:	42a6      	cmp	r6, r4
 800a5a0:	d105      	bne.n	800a5ae <__libc_init_array+0x2e>
 800a5a2:	bd70      	pop	{r4, r5, r6, pc}
 800a5a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a8:	4798      	blx	r3
 800a5aa:	3601      	adds	r6, #1
 800a5ac:	e7ee      	b.n	800a58c <__libc_init_array+0xc>
 800a5ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5b2:	4798      	blx	r3
 800a5b4:	3601      	adds	r6, #1
 800a5b6:	e7f2      	b.n	800a59e <__libc_init_array+0x1e>
 800a5b8:	0800d0e0 	.word	0x0800d0e0
 800a5bc:	0800d0e0 	.word	0x0800d0e0
 800a5c0:	0800d0e0 	.word	0x0800d0e0
 800a5c4:	0800d0e4 	.word	0x0800d0e4

0800a5c8 <memcpy>:
 800a5c8:	440a      	add	r2, r1
 800a5ca:	4291      	cmp	r1, r2
 800a5cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5d0:	d100      	bne.n	800a5d4 <memcpy+0xc>
 800a5d2:	4770      	bx	lr
 800a5d4:	b510      	push	{r4, lr}
 800a5d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5de:	4291      	cmp	r1, r2
 800a5e0:	d1f9      	bne.n	800a5d6 <memcpy+0xe>
 800a5e2:	bd10      	pop	{r4, pc}

0800a5e4 <memset>:
 800a5e4:	4402      	add	r2, r0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d100      	bne.n	800a5ee <memset+0xa>
 800a5ec:	4770      	bx	lr
 800a5ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a5f2:	e7f9      	b.n	800a5e8 <memset+0x4>

0800a5f4 <siprintf>:
 800a5f4:	b40e      	push	{r1, r2, r3}
 800a5f6:	b500      	push	{lr}
 800a5f8:	b09c      	sub	sp, #112	; 0x70
 800a5fa:	ab1d      	add	r3, sp, #116	; 0x74
 800a5fc:	9002      	str	r0, [sp, #8]
 800a5fe:	9006      	str	r0, [sp, #24]
 800a600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a604:	4809      	ldr	r0, [pc, #36]	; (800a62c <siprintf+0x38>)
 800a606:	9107      	str	r1, [sp, #28]
 800a608:	9104      	str	r1, [sp, #16]
 800a60a:	4909      	ldr	r1, [pc, #36]	; (800a630 <siprintf+0x3c>)
 800a60c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a610:	9105      	str	r1, [sp, #20]
 800a612:	6800      	ldr	r0, [r0, #0]
 800a614:	9301      	str	r3, [sp, #4]
 800a616:	a902      	add	r1, sp, #8
 800a618:	f000 f868 	bl	800a6ec <_svfiprintf_r>
 800a61c:	9b02      	ldr	r3, [sp, #8]
 800a61e:	2200      	movs	r2, #0
 800a620:	701a      	strb	r2, [r3, #0]
 800a622:	b01c      	add	sp, #112	; 0x70
 800a624:	f85d eb04 	ldr.w	lr, [sp], #4
 800a628:	b003      	add	sp, #12
 800a62a:	4770      	bx	lr
 800a62c:	20000140 	.word	0x20000140
 800a630:	ffff0208 	.word	0xffff0208

0800a634 <__ssputs_r>:
 800a634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a638:	688e      	ldr	r6, [r1, #8]
 800a63a:	429e      	cmp	r6, r3
 800a63c:	4682      	mov	sl, r0
 800a63e:	460c      	mov	r4, r1
 800a640:	4690      	mov	r8, r2
 800a642:	461f      	mov	r7, r3
 800a644:	d838      	bhi.n	800a6b8 <__ssputs_r+0x84>
 800a646:	898a      	ldrh	r2, [r1, #12]
 800a648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a64c:	d032      	beq.n	800a6b4 <__ssputs_r+0x80>
 800a64e:	6825      	ldr	r5, [r4, #0]
 800a650:	6909      	ldr	r1, [r1, #16]
 800a652:	eba5 0901 	sub.w	r9, r5, r1
 800a656:	6965      	ldr	r5, [r4, #20]
 800a658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a65c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a660:	3301      	adds	r3, #1
 800a662:	444b      	add	r3, r9
 800a664:	106d      	asrs	r5, r5, #1
 800a666:	429d      	cmp	r5, r3
 800a668:	bf38      	it	cc
 800a66a:	461d      	movcc	r5, r3
 800a66c:	0553      	lsls	r3, r2, #21
 800a66e:	d531      	bpl.n	800a6d4 <__ssputs_r+0xa0>
 800a670:	4629      	mov	r1, r5
 800a672:	f000 fb55 	bl	800ad20 <_malloc_r>
 800a676:	4606      	mov	r6, r0
 800a678:	b950      	cbnz	r0, 800a690 <__ssputs_r+0x5c>
 800a67a:	230c      	movs	r3, #12
 800a67c:	f8ca 3000 	str.w	r3, [sl]
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a686:	81a3      	strh	r3, [r4, #12]
 800a688:	f04f 30ff 	mov.w	r0, #4294967295
 800a68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a690:	6921      	ldr	r1, [r4, #16]
 800a692:	464a      	mov	r2, r9
 800a694:	f7ff ff98 	bl	800a5c8 <memcpy>
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a69e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6a2:	81a3      	strh	r3, [r4, #12]
 800a6a4:	6126      	str	r6, [r4, #16]
 800a6a6:	6165      	str	r5, [r4, #20]
 800a6a8:	444e      	add	r6, r9
 800a6aa:	eba5 0509 	sub.w	r5, r5, r9
 800a6ae:	6026      	str	r6, [r4, #0]
 800a6b0:	60a5      	str	r5, [r4, #8]
 800a6b2:	463e      	mov	r6, r7
 800a6b4:	42be      	cmp	r6, r7
 800a6b6:	d900      	bls.n	800a6ba <__ssputs_r+0x86>
 800a6b8:	463e      	mov	r6, r7
 800a6ba:	6820      	ldr	r0, [r4, #0]
 800a6bc:	4632      	mov	r2, r6
 800a6be:	4641      	mov	r1, r8
 800a6c0:	f000 faa8 	bl	800ac14 <memmove>
 800a6c4:	68a3      	ldr	r3, [r4, #8]
 800a6c6:	1b9b      	subs	r3, r3, r6
 800a6c8:	60a3      	str	r3, [r4, #8]
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	4433      	add	r3, r6
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	e7db      	b.n	800a68c <__ssputs_r+0x58>
 800a6d4:	462a      	mov	r2, r5
 800a6d6:	f000 fb97 	bl	800ae08 <_realloc_r>
 800a6da:	4606      	mov	r6, r0
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d1e1      	bne.n	800a6a4 <__ssputs_r+0x70>
 800a6e0:	6921      	ldr	r1, [r4, #16]
 800a6e2:	4650      	mov	r0, sl
 800a6e4:	f000 fab0 	bl	800ac48 <_free_r>
 800a6e8:	e7c7      	b.n	800a67a <__ssputs_r+0x46>
	...

0800a6ec <_svfiprintf_r>:
 800a6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	4698      	mov	r8, r3
 800a6f2:	898b      	ldrh	r3, [r1, #12]
 800a6f4:	061b      	lsls	r3, r3, #24
 800a6f6:	b09d      	sub	sp, #116	; 0x74
 800a6f8:	4607      	mov	r7, r0
 800a6fa:	460d      	mov	r5, r1
 800a6fc:	4614      	mov	r4, r2
 800a6fe:	d50e      	bpl.n	800a71e <_svfiprintf_r+0x32>
 800a700:	690b      	ldr	r3, [r1, #16]
 800a702:	b963      	cbnz	r3, 800a71e <_svfiprintf_r+0x32>
 800a704:	2140      	movs	r1, #64	; 0x40
 800a706:	f000 fb0b 	bl	800ad20 <_malloc_r>
 800a70a:	6028      	str	r0, [r5, #0]
 800a70c:	6128      	str	r0, [r5, #16]
 800a70e:	b920      	cbnz	r0, 800a71a <_svfiprintf_r+0x2e>
 800a710:	230c      	movs	r3, #12
 800a712:	603b      	str	r3, [r7, #0]
 800a714:	f04f 30ff 	mov.w	r0, #4294967295
 800a718:	e0d1      	b.n	800a8be <_svfiprintf_r+0x1d2>
 800a71a:	2340      	movs	r3, #64	; 0x40
 800a71c:	616b      	str	r3, [r5, #20]
 800a71e:	2300      	movs	r3, #0
 800a720:	9309      	str	r3, [sp, #36]	; 0x24
 800a722:	2320      	movs	r3, #32
 800a724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a728:	f8cd 800c 	str.w	r8, [sp, #12]
 800a72c:	2330      	movs	r3, #48	; 0x30
 800a72e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8d8 <_svfiprintf_r+0x1ec>
 800a732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a736:	f04f 0901 	mov.w	r9, #1
 800a73a:	4623      	mov	r3, r4
 800a73c:	469a      	mov	sl, r3
 800a73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a742:	b10a      	cbz	r2, 800a748 <_svfiprintf_r+0x5c>
 800a744:	2a25      	cmp	r2, #37	; 0x25
 800a746:	d1f9      	bne.n	800a73c <_svfiprintf_r+0x50>
 800a748:	ebba 0b04 	subs.w	fp, sl, r4
 800a74c:	d00b      	beq.n	800a766 <_svfiprintf_r+0x7a>
 800a74e:	465b      	mov	r3, fp
 800a750:	4622      	mov	r2, r4
 800a752:	4629      	mov	r1, r5
 800a754:	4638      	mov	r0, r7
 800a756:	f7ff ff6d 	bl	800a634 <__ssputs_r>
 800a75a:	3001      	adds	r0, #1
 800a75c:	f000 80aa 	beq.w	800a8b4 <_svfiprintf_r+0x1c8>
 800a760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a762:	445a      	add	r2, fp
 800a764:	9209      	str	r2, [sp, #36]	; 0x24
 800a766:	f89a 3000 	ldrb.w	r3, [sl]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 80a2 	beq.w	800a8b4 <_svfiprintf_r+0x1c8>
 800a770:	2300      	movs	r3, #0
 800a772:	f04f 32ff 	mov.w	r2, #4294967295
 800a776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a77a:	f10a 0a01 	add.w	sl, sl, #1
 800a77e:	9304      	str	r3, [sp, #16]
 800a780:	9307      	str	r3, [sp, #28]
 800a782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a786:	931a      	str	r3, [sp, #104]	; 0x68
 800a788:	4654      	mov	r4, sl
 800a78a:	2205      	movs	r2, #5
 800a78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a790:	4851      	ldr	r0, [pc, #324]	; (800a8d8 <_svfiprintf_r+0x1ec>)
 800a792:	f7f5 fd25 	bl	80001e0 <memchr>
 800a796:	9a04      	ldr	r2, [sp, #16]
 800a798:	b9d8      	cbnz	r0, 800a7d2 <_svfiprintf_r+0xe6>
 800a79a:	06d0      	lsls	r0, r2, #27
 800a79c:	bf44      	itt	mi
 800a79e:	2320      	movmi	r3, #32
 800a7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7a4:	0711      	lsls	r1, r2, #28
 800a7a6:	bf44      	itt	mi
 800a7a8:	232b      	movmi	r3, #43	; 0x2b
 800a7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7b4:	d015      	beq.n	800a7e2 <_svfiprintf_r+0xf6>
 800a7b6:	9a07      	ldr	r2, [sp, #28]
 800a7b8:	4654      	mov	r4, sl
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	f04f 0c0a 	mov.w	ip, #10
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7c6:	3b30      	subs	r3, #48	; 0x30
 800a7c8:	2b09      	cmp	r3, #9
 800a7ca:	d94e      	bls.n	800a86a <_svfiprintf_r+0x17e>
 800a7cc:	b1b0      	cbz	r0, 800a7fc <_svfiprintf_r+0x110>
 800a7ce:	9207      	str	r2, [sp, #28]
 800a7d0:	e014      	b.n	800a7fc <_svfiprintf_r+0x110>
 800a7d2:	eba0 0308 	sub.w	r3, r0, r8
 800a7d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	9304      	str	r3, [sp, #16]
 800a7de:	46a2      	mov	sl, r4
 800a7e0:	e7d2      	b.n	800a788 <_svfiprintf_r+0x9c>
 800a7e2:	9b03      	ldr	r3, [sp, #12]
 800a7e4:	1d19      	adds	r1, r3, #4
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	9103      	str	r1, [sp, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	bfbb      	ittet	lt
 800a7ee:	425b      	neglt	r3, r3
 800a7f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a7f4:	9307      	strge	r3, [sp, #28]
 800a7f6:	9307      	strlt	r3, [sp, #28]
 800a7f8:	bfb8      	it	lt
 800a7fa:	9204      	strlt	r2, [sp, #16]
 800a7fc:	7823      	ldrb	r3, [r4, #0]
 800a7fe:	2b2e      	cmp	r3, #46	; 0x2e
 800a800:	d10c      	bne.n	800a81c <_svfiprintf_r+0x130>
 800a802:	7863      	ldrb	r3, [r4, #1]
 800a804:	2b2a      	cmp	r3, #42	; 0x2a
 800a806:	d135      	bne.n	800a874 <_svfiprintf_r+0x188>
 800a808:	9b03      	ldr	r3, [sp, #12]
 800a80a:	1d1a      	adds	r2, r3, #4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	9203      	str	r2, [sp, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	bfb8      	it	lt
 800a814:	f04f 33ff 	movlt.w	r3, #4294967295
 800a818:	3402      	adds	r4, #2
 800a81a:	9305      	str	r3, [sp, #20]
 800a81c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a8e8 <_svfiprintf_r+0x1fc>
 800a820:	7821      	ldrb	r1, [r4, #0]
 800a822:	2203      	movs	r2, #3
 800a824:	4650      	mov	r0, sl
 800a826:	f7f5 fcdb 	bl	80001e0 <memchr>
 800a82a:	b140      	cbz	r0, 800a83e <_svfiprintf_r+0x152>
 800a82c:	2340      	movs	r3, #64	; 0x40
 800a82e:	eba0 000a 	sub.w	r0, r0, sl
 800a832:	fa03 f000 	lsl.w	r0, r3, r0
 800a836:	9b04      	ldr	r3, [sp, #16]
 800a838:	4303      	orrs	r3, r0
 800a83a:	3401      	adds	r4, #1
 800a83c:	9304      	str	r3, [sp, #16]
 800a83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a842:	4826      	ldr	r0, [pc, #152]	; (800a8dc <_svfiprintf_r+0x1f0>)
 800a844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a848:	2206      	movs	r2, #6
 800a84a:	f7f5 fcc9 	bl	80001e0 <memchr>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d038      	beq.n	800a8c4 <_svfiprintf_r+0x1d8>
 800a852:	4b23      	ldr	r3, [pc, #140]	; (800a8e0 <_svfiprintf_r+0x1f4>)
 800a854:	bb1b      	cbnz	r3, 800a89e <_svfiprintf_r+0x1b2>
 800a856:	9b03      	ldr	r3, [sp, #12]
 800a858:	3307      	adds	r3, #7
 800a85a:	f023 0307 	bic.w	r3, r3, #7
 800a85e:	3308      	adds	r3, #8
 800a860:	9303      	str	r3, [sp, #12]
 800a862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a864:	4433      	add	r3, r6
 800a866:	9309      	str	r3, [sp, #36]	; 0x24
 800a868:	e767      	b.n	800a73a <_svfiprintf_r+0x4e>
 800a86a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a86e:	460c      	mov	r4, r1
 800a870:	2001      	movs	r0, #1
 800a872:	e7a5      	b.n	800a7c0 <_svfiprintf_r+0xd4>
 800a874:	2300      	movs	r3, #0
 800a876:	3401      	adds	r4, #1
 800a878:	9305      	str	r3, [sp, #20]
 800a87a:	4619      	mov	r1, r3
 800a87c:	f04f 0c0a 	mov.w	ip, #10
 800a880:	4620      	mov	r0, r4
 800a882:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a886:	3a30      	subs	r2, #48	; 0x30
 800a888:	2a09      	cmp	r2, #9
 800a88a:	d903      	bls.n	800a894 <_svfiprintf_r+0x1a8>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d0c5      	beq.n	800a81c <_svfiprintf_r+0x130>
 800a890:	9105      	str	r1, [sp, #20]
 800a892:	e7c3      	b.n	800a81c <_svfiprintf_r+0x130>
 800a894:	fb0c 2101 	mla	r1, ip, r1, r2
 800a898:	4604      	mov	r4, r0
 800a89a:	2301      	movs	r3, #1
 800a89c:	e7f0      	b.n	800a880 <_svfiprintf_r+0x194>
 800a89e:	ab03      	add	r3, sp, #12
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	462a      	mov	r2, r5
 800a8a4:	4b0f      	ldr	r3, [pc, #60]	; (800a8e4 <_svfiprintf_r+0x1f8>)
 800a8a6:	a904      	add	r1, sp, #16
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f3af 8000 	nop.w
 800a8ae:	1c42      	adds	r2, r0, #1
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	d1d6      	bne.n	800a862 <_svfiprintf_r+0x176>
 800a8b4:	89ab      	ldrh	r3, [r5, #12]
 800a8b6:	065b      	lsls	r3, r3, #25
 800a8b8:	f53f af2c 	bmi.w	800a714 <_svfiprintf_r+0x28>
 800a8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8be:	b01d      	add	sp, #116	; 0x74
 800a8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c4:	ab03      	add	r3, sp, #12
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4b06      	ldr	r3, [pc, #24]	; (800a8e4 <_svfiprintf_r+0x1f8>)
 800a8cc:	a904      	add	r1, sp, #16
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	f000 f87a 	bl	800a9c8 <_printf_i>
 800a8d4:	e7eb      	b.n	800a8ae <_svfiprintf_r+0x1c2>
 800a8d6:	bf00      	nop
 800a8d8:	0800cfd4 	.word	0x0800cfd4
 800a8dc:	0800cfde 	.word	0x0800cfde
 800a8e0:	00000000 	.word	0x00000000
 800a8e4:	0800a635 	.word	0x0800a635
 800a8e8:	0800cfda 	.word	0x0800cfda

0800a8ec <_printf_common>:
 800a8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f0:	4616      	mov	r6, r2
 800a8f2:	4699      	mov	r9, r3
 800a8f4:	688a      	ldr	r2, [r1, #8]
 800a8f6:	690b      	ldr	r3, [r1, #16]
 800a8f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	bfb8      	it	lt
 800a900:	4613      	movlt	r3, r2
 800a902:	6033      	str	r3, [r6, #0]
 800a904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a908:	4607      	mov	r7, r0
 800a90a:	460c      	mov	r4, r1
 800a90c:	b10a      	cbz	r2, 800a912 <_printf_common+0x26>
 800a90e:	3301      	adds	r3, #1
 800a910:	6033      	str	r3, [r6, #0]
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	0699      	lsls	r1, r3, #26
 800a916:	bf42      	ittt	mi
 800a918:	6833      	ldrmi	r3, [r6, #0]
 800a91a:	3302      	addmi	r3, #2
 800a91c:	6033      	strmi	r3, [r6, #0]
 800a91e:	6825      	ldr	r5, [r4, #0]
 800a920:	f015 0506 	ands.w	r5, r5, #6
 800a924:	d106      	bne.n	800a934 <_printf_common+0x48>
 800a926:	f104 0a19 	add.w	sl, r4, #25
 800a92a:	68e3      	ldr	r3, [r4, #12]
 800a92c:	6832      	ldr	r2, [r6, #0]
 800a92e:	1a9b      	subs	r3, r3, r2
 800a930:	42ab      	cmp	r3, r5
 800a932:	dc26      	bgt.n	800a982 <_printf_common+0x96>
 800a934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a938:	1e13      	subs	r3, r2, #0
 800a93a:	6822      	ldr	r2, [r4, #0]
 800a93c:	bf18      	it	ne
 800a93e:	2301      	movne	r3, #1
 800a940:	0692      	lsls	r2, r2, #26
 800a942:	d42b      	bmi.n	800a99c <_printf_common+0xb0>
 800a944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a948:	4649      	mov	r1, r9
 800a94a:	4638      	mov	r0, r7
 800a94c:	47c0      	blx	r8
 800a94e:	3001      	adds	r0, #1
 800a950:	d01e      	beq.n	800a990 <_printf_common+0xa4>
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	68e5      	ldr	r5, [r4, #12]
 800a956:	6832      	ldr	r2, [r6, #0]
 800a958:	f003 0306 	and.w	r3, r3, #6
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	bf08      	it	eq
 800a960:	1aad      	subeq	r5, r5, r2
 800a962:	68a3      	ldr	r3, [r4, #8]
 800a964:	6922      	ldr	r2, [r4, #16]
 800a966:	bf0c      	ite	eq
 800a968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a96c:	2500      	movne	r5, #0
 800a96e:	4293      	cmp	r3, r2
 800a970:	bfc4      	itt	gt
 800a972:	1a9b      	subgt	r3, r3, r2
 800a974:	18ed      	addgt	r5, r5, r3
 800a976:	2600      	movs	r6, #0
 800a978:	341a      	adds	r4, #26
 800a97a:	42b5      	cmp	r5, r6
 800a97c:	d11a      	bne.n	800a9b4 <_printf_common+0xc8>
 800a97e:	2000      	movs	r0, #0
 800a980:	e008      	b.n	800a994 <_printf_common+0xa8>
 800a982:	2301      	movs	r3, #1
 800a984:	4652      	mov	r2, sl
 800a986:	4649      	mov	r1, r9
 800a988:	4638      	mov	r0, r7
 800a98a:	47c0      	blx	r8
 800a98c:	3001      	adds	r0, #1
 800a98e:	d103      	bne.n	800a998 <_printf_common+0xac>
 800a990:	f04f 30ff 	mov.w	r0, #4294967295
 800a994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a998:	3501      	adds	r5, #1
 800a99a:	e7c6      	b.n	800a92a <_printf_common+0x3e>
 800a99c:	18e1      	adds	r1, r4, r3
 800a99e:	1c5a      	adds	r2, r3, #1
 800a9a0:	2030      	movs	r0, #48	; 0x30
 800a9a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9a6:	4422      	add	r2, r4
 800a9a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9b0:	3302      	adds	r3, #2
 800a9b2:	e7c7      	b.n	800a944 <_printf_common+0x58>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	4622      	mov	r2, r4
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	47c0      	blx	r8
 800a9be:	3001      	adds	r0, #1
 800a9c0:	d0e6      	beq.n	800a990 <_printf_common+0xa4>
 800a9c2:	3601      	adds	r6, #1
 800a9c4:	e7d9      	b.n	800a97a <_printf_common+0x8e>
	...

0800a9c8 <_printf_i>:
 800a9c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9cc:	7e0f      	ldrb	r7, [r1, #24]
 800a9ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9d0:	2f78      	cmp	r7, #120	; 0x78
 800a9d2:	4691      	mov	r9, r2
 800a9d4:	4680      	mov	r8, r0
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	469a      	mov	sl, r3
 800a9da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9de:	d807      	bhi.n	800a9f0 <_printf_i+0x28>
 800a9e0:	2f62      	cmp	r7, #98	; 0x62
 800a9e2:	d80a      	bhi.n	800a9fa <_printf_i+0x32>
 800a9e4:	2f00      	cmp	r7, #0
 800a9e6:	f000 80d8 	beq.w	800ab9a <_printf_i+0x1d2>
 800a9ea:	2f58      	cmp	r7, #88	; 0x58
 800a9ec:	f000 80a3 	beq.w	800ab36 <_printf_i+0x16e>
 800a9f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9f8:	e03a      	b.n	800aa70 <_printf_i+0xa8>
 800a9fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9fe:	2b15      	cmp	r3, #21
 800aa00:	d8f6      	bhi.n	800a9f0 <_printf_i+0x28>
 800aa02:	a101      	add	r1, pc, #4	; (adr r1, 800aa08 <_printf_i+0x40>)
 800aa04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa08:	0800aa61 	.word	0x0800aa61
 800aa0c:	0800aa75 	.word	0x0800aa75
 800aa10:	0800a9f1 	.word	0x0800a9f1
 800aa14:	0800a9f1 	.word	0x0800a9f1
 800aa18:	0800a9f1 	.word	0x0800a9f1
 800aa1c:	0800a9f1 	.word	0x0800a9f1
 800aa20:	0800aa75 	.word	0x0800aa75
 800aa24:	0800a9f1 	.word	0x0800a9f1
 800aa28:	0800a9f1 	.word	0x0800a9f1
 800aa2c:	0800a9f1 	.word	0x0800a9f1
 800aa30:	0800a9f1 	.word	0x0800a9f1
 800aa34:	0800ab81 	.word	0x0800ab81
 800aa38:	0800aaa5 	.word	0x0800aaa5
 800aa3c:	0800ab63 	.word	0x0800ab63
 800aa40:	0800a9f1 	.word	0x0800a9f1
 800aa44:	0800a9f1 	.word	0x0800a9f1
 800aa48:	0800aba3 	.word	0x0800aba3
 800aa4c:	0800a9f1 	.word	0x0800a9f1
 800aa50:	0800aaa5 	.word	0x0800aaa5
 800aa54:	0800a9f1 	.word	0x0800a9f1
 800aa58:	0800a9f1 	.word	0x0800a9f1
 800aa5c:	0800ab6b 	.word	0x0800ab6b
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	1d1a      	adds	r2, r3, #4
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	602a      	str	r2, [r5, #0]
 800aa68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa70:	2301      	movs	r3, #1
 800aa72:	e0a3      	b.n	800abbc <_printf_i+0x1f4>
 800aa74:	6820      	ldr	r0, [r4, #0]
 800aa76:	6829      	ldr	r1, [r5, #0]
 800aa78:	0606      	lsls	r6, r0, #24
 800aa7a:	f101 0304 	add.w	r3, r1, #4
 800aa7e:	d50a      	bpl.n	800aa96 <_printf_i+0xce>
 800aa80:	680e      	ldr	r6, [r1, #0]
 800aa82:	602b      	str	r3, [r5, #0]
 800aa84:	2e00      	cmp	r6, #0
 800aa86:	da03      	bge.n	800aa90 <_printf_i+0xc8>
 800aa88:	232d      	movs	r3, #45	; 0x2d
 800aa8a:	4276      	negs	r6, r6
 800aa8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa90:	485e      	ldr	r0, [pc, #376]	; (800ac0c <_printf_i+0x244>)
 800aa92:	230a      	movs	r3, #10
 800aa94:	e019      	b.n	800aaca <_printf_i+0x102>
 800aa96:	680e      	ldr	r6, [r1, #0]
 800aa98:	602b      	str	r3, [r5, #0]
 800aa9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa9e:	bf18      	it	ne
 800aaa0:	b236      	sxthne	r6, r6
 800aaa2:	e7ef      	b.n	800aa84 <_printf_i+0xbc>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	6820      	ldr	r0, [r4, #0]
 800aaa8:	1d19      	adds	r1, r3, #4
 800aaaa:	6029      	str	r1, [r5, #0]
 800aaac:	0601      	lsls	r1, r0, #24
 800aaae:	d501      	bpl.n	800aab4 <_printf_i+0xec>
 800aab0:	681e      	ldr	r6, [r3, #0]
 800aab2:	e002      	b.n	800aaba <_printf_i+0xf2>
 800aab4:	0646      	lsls	r6, r0, #25
 800aab6:	d5fb      	bpl.n	800aab0 <_printf_i+0xe8>
 800aab8:	881e      	ldrh	r6, [r3, #0]
 800aaba:	4854      	ldr	r0, [pc, #336]	; (800ac0c <_printf_i+0x244>)
 800aabc:	2f6f      	cmp	r7, #111	; 0x6f
 800aabe:	bf0c      	ite	eq
 800aac0:	2308      	moveq	r3, #8
 800aac2:	230a      	movne	r3, #10
 800aac4:	2100      	movs	r1, #0
 800aac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aaca:	6865      	ldr	r5, [r4, #4]
 800aacc:	60a5      	str	r5, [r4, #8]
 800aace:	2d00      	cmp	r5, #0
 800aad0:	bfa2      	ittt	ge
 800aad2:	6821      	ldrge	r1, [r4, #0]
 800aad4:	f021 0104 	bicge.w	r1, r1, #4
 800aad8:	6021      	strge	r1, [r4, #0]
 800aada:	b90e      	cbnz	r6, 800aae0 <_printf_i+0x118>
 800aadc:	2d00      	cmp	r5, #0
 800aade:	d04d      	beq.n	800ab7c <_printf_i+0x1b4>
 800aae0:	4615      	mov	r5, r2
 800aae2:	fbb6 f1f3 	udiv	r1, r6, r3
 800aae6:	fb03 6711 	mls	r7, r3, r1, r6
 800aaea:	5dc7      	ldrb	r7, [r0, r7]
 800aaec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aaf0:	4637      	mov	r7, r6
 800aaf2:	42bb      	cmp	r3, r7
 800aaf4:	460e      	mov	r6, r1
 800aaf6:	d9f4      	bls.n	800aae2 <_printf_i+0x11a>
 800aaf8:	2b08      	cmp	r3, #8
 800aafa:	d10b      	bne.n	800ab14 <_printf_i+0x14c>
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	07de      	lsls	r6, r3, #31
 800ab00:	d508      	bpl.n	800ab14 <_printf_i+0x14c>
 800ab02:	6923      	ldr	r3, [r4, #16]
 800ab04:	6861      	ldr	r1, [r4, #4]
 800ab06:	4299      	cmp	r1, r3
 800ab08:	bfde      	ittt	le
 800ab0a:	2330      	movle	r3, #48	; 0x30
 800ab0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab14:	1b52      	subs	r2, r2, r5
 800ab16:	6122      	str	r2, [r4, #16]
 800ab18:	f8cd a000 	str.w	sl, [sp]
 800ab1c:	464b      	mov	r3, r9
 800ab1e:	aa03      	add	r2, sp, #12
 800ab20:	4621      	mov	r1, r4
 800ab22:	4640      	mov	r0, r8
 800ab24:	f7ff fee2 	bl	800a8ec <_printf_common>
 800ab28:	3001      	adds	r0, #1
 800ab2a:	d14c      	bne.n	800abc6 <_printf_i+0x1fe>
 800ab2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab30:	b004      	add	sp, #16
 800ab32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab36:	4835      	ldr	r0, [pc, #212]	; (800ac0c <_printf_i+0x244>)
 800ab38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab3c:	6829      	ldr	r1, [r5, #0]
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab44:	6029      	str	r1, [r5, #0]
 800ab46:	061d      	lsls	r5, r3, #24
 800ab48:	d514      	bpl.n	800ab74 <_printf_i+0x1ac>
 800ab4a:	07df      	lsls	r7, r3, #31
 800ab4c:	bf44      	itt	mi
 800ab4e:	f043 0320 	orrmi.w	r3, r3, #32
 800ab52:	6023      	strmi	r3, [r4, #0]
 800ab54:	b91e      	cbnz	r6, 800ab5e <_printf_i+0x196>
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	f023 0320 	bic.w	r3, r3, #32
 800ab5c:	6023      	str	r3, [r4, #0]
 800ab5e:	2310      	movs	r3, #16
 800ab60:	e7b0      	b.n	800aac4 <_printf_i+0xfc>
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	f043 0320 	orr.w	r3, r3, #32
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	2378      	movs	r3, #120	; 0x78
 800ab6c:	4828      	ldr	r0, [pc, #160]	; (800ac10 <_printf_i+0x248>)
 800ab6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab72:	e7e3      	b.n	800ab3c <_printf_i+0x174>
 800ab74:	0659      	lsls	r1, r3, #25
 800ab76:	bf48      	it	mi
 800ab78:	b2b6      	uxthmi	r6, r6
 800ab7a:	e7e6      	b.n	800ab4a <_printf_i+0x182>
 800ab7c:	4615      	mov	r5, r2
 800ab7e:	e7bb      	b.n	800aaf8 <_printf_i+0x130>
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	6826      	ldr	r6, [r4, #0]
 800ab84:	6961      	ldr	r1, [r4, #20]
 800ab86:	1d18      	adds	r0, r3, #4
 800ab88:	6028      	str	r0, [r5, #0]
 800ab8a:	0635      	lsls	r5, r6, #24
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	d501      	bpl.n	800ab94 <_printf_i+0x1cc>
 800ab90:	6019      	str	r1, [r3, #0]
 800ab92:	e002      	b.n	800ab9a <_printf_i+0x1d2>
 800ab94:	0670      	lsls	r0, r6, #25
 800ab96:	d5fb      	bpl.n	800ab90 <_printf_i+0x1c8>
 800ab98:	8019      	strh	r1, [r3, #0]
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	6123      	str	r3, [r4, #16]
 800ab9e:	4615      	mov	r5, r2
 800aba0:	e7ba      	b.n	800ab18 <_printf_i+0x150>
 800aba2:	682b      	ldr	r3, [r5, #0]
 800aba4:	1d1a      	adds	r2, r3, #4
 800aba6:	602a      	str	r2, [r5, #0]
 800aba8:	681d      	ldr	r5, [r3, #0]
 800abaa:	6862      	ldr	r2, [r4, #4]
 800abac:	2100      	movs	r1, #0
 800abae:	4628      	mov	r0, r5
 800abb0:	f7f5 fb16 	bl	80001e0 <memchr>
 800abb4:	b108      	cbz	r0, 800abba <_printf_i+0x1f2>
 800abb6:	1b40      	subs	r0, r0, r5
 800abb8:	6060      	str	r0, [r4, #4]
 800abba:	6863      	ldr	r3, [r4, #4]
 800abbc:	6123      	str	r3, [r4, #16]
 800abbe:	2300      	movs	r3, #0
 800abc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abc4:	e7a8      	b.n	800ab18 <_printf_i+0x150>
 800abc6:	6923      	ldr	r3, [r4, #16]
 800abc8:	462a      	mov	r2, r5
 800abca:	4649      	mov	r1, r9
 800abcc:	4640      	mov	r0, r8
 800abce:	47d0      	blx	sl
 800abd0:	3001      	adds	r0, #1
 800abd2:	d0ab      	beq.n	800ab2c <_printf_i+0x164>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	079b      	lsls	r3, r3, #30
 800abd8:	d413      	bmi.n	800ac02 <_printf_i+0x23a>
 800abda:	68e0      	ldr	r0, [r4, #12]
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	4298      	cmp	r0, r3
 800abe0:	bfb8      	it	lt
 800abe2:	4618      	movlt	r0, r3
 800abe4:	e7a4      	b.n	800ab30 <_printf_i+0x168>
 800abe6:	2301      	movs	r3, #1
 800abe8:	4632      	mov	r2, r6
 800abea:	4649      	mov	r1, r9
 800abec:	4640      	mov	r0, r8
 800abee:	47d0      	blx	sl
 800abf0:	3001      	adds	r0, #1
 800abf2:	d09b      	beq.n	800ab2c <_printf_i+0x164>
 800abf4:	3501      	adds	r5, #1
 800abf6:	68e3      	ldr	r3, [r4, #12]
 800abf8:	9903      	ldr	r1, [sp, #12]
 800abfa:	1a5b      	subs	r3, r3, r1
 800abfc:	42ab      	cmp	r3, r5
 800abfe:	dcf2      	bgt.n	800abe6 <_printf_i+0x21e>
 800ac00:	e7eb      	b.n	800abda <_printf_i+0x212>
 800ac02:	2500      	movs	r5, #0
 800ac04:	f104 0619 	add.w	r6, r4, #25
 800ac08:	e7f5      	b.n	800abf6 <_printf_i+0x22e>
 800ac0a:	bf00      	nop
 800ac0c:	0800cfe5 	.word	0x0800cfe5
 800ac10:	0800cff6 	.word	0x0800cff6

0800ac14 <memmove>:
 800ac14:	4288      	cmp	r0, r1
 800ac16:	b510      	push	{r4, lr}
 800ac18:	eb01 0402 	add.w	r4, r1, r2
 800ac1c:	d902      	bls.n	800ac24 <memmove+0x10>
 800ac1e:	4284      	cmp	r4, r0
 800ac20:	4623      	mov	r3, r4
 800ac22:	d807      	bhi.n	800ac34 <memmove+0x20>
 800ac24:	1e43      	subs	r3, r0, #1
 800ac26:	42a1      	cmp	r1, r4
 800ac28:	d008      	beq.n	800ac3c <memmove+0x28>
 800ac2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac32:	e7f8      	b.n	800ac26 <memmove+0x12>
 800ac34:	4402      	add	r2, r0
 800ac36:	4601      	mov	r1, r0
 800ac38:	428a      	cmp	r2, r1
 800ac3a:	d100      	bne.n	800ac3e <memmove+0x2a>
 800ac3c:	bd10      	pop	{r4, pc}
 800ac3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac46:	e7f7      	b.n	800ac38 <memmove+0x24>

0800ac48 <_free_r>:
 800ac48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac4a:	2900      	cmp	r1, #0
 800ac4c:	d044      	beq.n	800acd8 <_free_r+0x90>
 800ac4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac52:	9001      	str	r0, [sp, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f1a1 0404 	sub.w	r4, r1, #4
 800ac5a:	bfb8      	it	lt
 800ac5c:	18e4      	addlt	r4, r4, r3
 800ac5e:	f000 f913 	bl	800ae88 <__malloc_lock>
 800ac62:	4a1e      	ldr	r2, [pc, #120]	; (800acdc <_free_r+0x94>)
 800ac64:	9801      	ldr	r0, [sp, #4]
 800ac66:	6813      	ldr	r3, [r2, #0]
 800ac68:	b933      	cbnz	r3, 800ac78 <_free_r+0x30>
 800ac6a:	6063      	str	r3, [r4, #4]
 800ac6c:	6014      	str	r4, [r2, #0]
 800ac6e:	b003      	add	sp, #12
 800ac70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac74:	f000 b90e 	b.w	800ae94 <__malloc_unlock>
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	d908      	bls.n	800ac8e <_free_r+0x46>
 800ac7c:	6825      	ldr	r5, [r4, #0]
 800ac7e:	1961      	adds	r1, r4, r5
 800ac80:	428b      	cmp	r3, r1
 800ac82:	bf01      	itttt	eq
 800ac84:	6819      	ldreq	r1, [r3, #0]
 800ac86:	685b      	ldreq	r3, [r3, #4]
 800ac88:	1949      	addeq	r1, r1, r5
 800ac8a:	6021      	streq	r1, [r4, #0]
 800ac8c:	e7ed      	b.n	800ac6a <_free_r+0x22>
 800ac8e:	461a      	mov	r2, r3
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	b10b      	cbz	r3, 800ac98 <_free_r+0x50>
 800ac94:	42a3      	cmp	r3, r4
 800ac96:	d9fa      	bls.n	800ac8e <_free_r+0x46>
 800ac98:	6811      	ldr	r1, [r2, #0]
 800ac9a:	1855      	adds	r5, r2, r1
 800ac9c:	42a5      	cmp	r5, r4
 800ac9e:	d10b      	bne.n	800acb8 <_free_r+0x70>
 800aca0:	6824      	ldr	r4, [r4, #0]
 800aca2:	4421      	add	r1, r4
 800aca4:	1854      	adds	r4, r2, r1
 800aca6:	42a3      	cmp	r3, r4
 800aca8:	6011      	str	r1, [r2, #0]
 800acaa:	d1e0      	bne.n	800ac6e <_free_r+0x26>
 800acac:	681c      	ldr	r4, [r3, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	6053      	str	r3, [r2, #4]
 800acb2:	4421      	add	r1, r4
 800acb4:	6011      	str	r1, [r2, #0]
 800acb6:	e7da      	b.n	800ac6e <_free_r+0x26>
 800acb8:	d902      	bls.n	800acc0 <_free_r+0x78>
 800acba:	230c      	movs	r3, #12
 800acbc:	6003      	str	r3, [r0, #0]
 800acbe:	e7d6      	b.n	800ac6e <_free_r+0x26>
 800acc0:	6825      	ldr	r5, [r4, #0]
 800acc2:	1961      	adds	r1, r4, r5
 800acc4:	428b      	cmp	r3, r1
 800acc6:	bf04      	itt	eq
 800acc8:	6819      	ldreq	r1, [r3, #0]
 800acca:	685b      	ldreq	r3, [r3, #4]
 800accc:	6063      	str	r3, [r4, #4]
 800acce:	bf04      	itt	eq
 800acd0:	1949      	addeq	r1, r1, r5
 800acd2:	6021      	streq	r1, [r4, #0]
 800acd4:	6054      	str	r4, [r2, #4]
 800acd6:	e7ca      	b.n	800ac6e <_free_r+0x26>
 800acd8:	b003      	add	sp, #12
 800acda:	bd30      	pop	{r4, r5, pc}
 800acdc:	200005e8 	.word	0x200005e8

0800ace0 <sbrk_aligned>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	4e0e      	ldr	r6, [pc, #56]	; (800ad1c <sbrk_aligned+0x3c>)
 800ace4:	460c      	mov	r4, r1
 800ace6:	6831      	ldr	r1, [r6, #0]
 800ace8:	4605      	mov	r5, r0
 800acea:	b911      	cbnz	r1, 800acf2 <sbrk_aligned+0x12>
 800acec:	f000 f8bc 	bl	800ae68 <_sbrk_r>
 800acf0:	6030      	str	r0, [r6, #0]
 800acf2:	4621      	mov	r1, r4
 800acf4:	4628      	mov	r0, r5
 800acf6:	f000 f8b7 	bl	800ae68 <_sbrk_r>
 800acfa:	1c43      	adds	r3, r0, #1
 800acfc:	d00a      	beq.n	800ad14 <sbrk_aligned+0x34>
 800acfe:	1cc4      	adds	r4, r0, #3
 800ad00:	f024 0403 	bic.w	r4, r4, #3
 800ad04:	42a0      	cmp	r0, r4
 800ad06:	d007      	beq.n	800ad18 <sbrk_aligned+0x38>
 800ad08:	1a21      	subs	r1, r4, r0
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f000 f8ac 	bl	800ae68 <_sbrk_r>
 800ad10:	3001      	adds	r0, #1
 800ad12:	d101      	bne.n	800ad18 <sbrk_aligned+0x38>
 800ad14:	f04f 34ff 	mov.w	r4, #4294967295
 800ad18:	4620      	mov	r0, r4
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
 800ad1c:	200005ec 	.word	0x200005ec

0800ad20 <_malloc_r>:
 800ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad24:	1ccd      	adds	r5, r1, #3
 800ad26:	f025 0503 	bic.w	r5, r5, #3
 800ad2a:	3508      	adds	r5, #8
 800ad2c:	2d0c      	cmp	r5, #12
 800ad2e:	bf38      	it	cc
 800ad30:	250c      	movcc	r5, #12
 800ad32:	2d00      	cmp	r5, #0
 800ad34:	4607      	mov	r7, r0
 800ad36:	db01      	blt.n	800ad3c <_malloc_r+0x1c>
 800ad38:	42a9      	cmp	r1, r5
 800ad3a:	d905      	bls.n	800ad48 <_malloc_r+0x28>
 800ad3c:	230c      	movs	r3, #12
 800ad3e:	603b      	str	r3, [r7, #0]
 800ad40:	2600      	movs	r6, #0
 800ad42:	4630      	mov	r0, r6
 800ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad48:	4e2e      	ldr	r6, [pc, #184]	; (800ae04 <_malloc_r+0xe4>)
 800ad4a:	f000 f89d 	bl	800ae88 <__malloc_lock>
 800ad4e:	6833      	ldr	r3, [r6, #0]
 800ad50:	461c      	mov	r4, r3
 800ad52:	bb34      	cbnz	r4, 800ada2 <_malloc_r+0x82>
 800ad54:	4629      	mov	r1, r5
 800ad56:	4638      	mov	r0, r7
 800ad58:	f7ff ffc2 	bl	800ace0 <sbrk_aligned>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	4604      	mov	r4, r0
 800ad60:	d14d      	bne.n	800adfe <_malloc_r+0xde>
 800ad62:	6834      	ldr	r4, [r6, #0]
 800ad64:	4626      	mov	r6, r4
 800ad66:	2e00      	cmp	r6, #0
 800ad68:	d140      	bne.n	800adec <_malloc_r+0xcc>
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	4631      	mov	r1, r6
 800ad6e:	4638      	mov	r0, r7
 800ad70:	eb04 0803 	add.w	r8, r4, r3
 800ad74:	f000 f878 	bl	800ae68 <_sbrk_r>
 800ad78:	4580      	cmp	r8, r0
 800ad7a:	d13a      	bne.n	800adf2 <_malloc_r+0xd2>
 800ad7c:	6821      	ldr	r1, [r4, #0]
 800ad7e:	3503      	adds	r5, #3
 800ad80:	1a6d      	subs	r5, r5, r1
 800ad82:	f025 0503 	bic.w	r5, r5, #3
 800ad86:	3508      	adds	r5, #8
 800ad88:	2d0c      	cmp	r5, #12
 800ad8a:	bf38      	it	cc
 800ad8c:	250c      	movcc	r5, #12
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4638      	mov	r0, r7
 800ad92:	f7ff ffa5 	bl	800ace0 <sbrk_aligned>
 800ad96:	3001      	adds	r0, #1
 800ad98:	d02b      	beq.n	800adf2 <_malloc_r+0xd2>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	442b      	add	r3, r5
 800ad9e:	6023      	str	r3, [r4, #0]
 800ada0:	e00e      	b.n	800adc0 <_malloc_r+0xa0>
 800ada2:	6822      	ldr	r2, [r4, #0]
 800ada4:	1b52      	subs	r2, r2, r5
 800ada6:	d41e      	bmi.n	800ade6 <_malloc_r+0xc6>
 800ada8:	2a0b      	cmp	r2, #11
 800adaa:	d916      	bls.n	800adda <_malloc_r+0xba>
 800adac:	1961      	adds	r1, r4, r5
 800adae:	42a3      	cmp	r3, r4
 800adb0:	6025      	str	r5, [r4, #0]
 800adb2:	bf18      	it	ne
 800adb4:	6059      	strne	r1, [r3, #4]
 800adb6:	6863      	ldr	r3, [r4, #4]
 800adb8:	bf08      	it	eq
 800adba:	6031      	streq	r1, [r6, #0]
 800adbc:	5162      	str	r2, [r4, r5]
 800adbe:	604b      	str	r3, [r1, #4]
 800adc0:	4638      	mov	r0, r7
 800adc2:	f104 060b 	add.w	r6, r4, #11
 800adc6:	f000 f865 	bl	800ae94 <__malloc_unlock>
 800adca:	f026 0607 	bic.w	r6, r6, #7
 800adce:	1d23      	adds	r3, r4, #4
 800add0:	1af2      	subs	r2, r6, r3
 800add2:	d0b6      	beq.n	800ad42 <_malloc_r+0x22>
 800add4:	1b9b      	subs	r3, r3, r6
 800add6:	50a3      	str	r3, [r4, r2]
 800add8:	e7b3      	b.n	800ad42 <_malloc_r+0x22>
 800adda:	6862      	ldr	r2, [r4, #4]
 800addc:	42a3      	cmp	r3, r4
 800adde:	bf0c      	ite	eq
 800ade0:	6032      	streq	r2, [r6, #0]
 800ade2:	605a      	strne	r2, [r3, #4]
 800ade4:	e7ec      	b.n	800adc0 <_malloc_r+0xa0>
 800ade6:	4623      	mov	r3, r4
 800ade8:	6864      	ldr	r4, [r4, #4]
 800adea:	e7b2      	b.n	800ad52 <_malloc_r+0x32>
 800adec:	4634      	mov	r4, r6
 800adee:	6876      	ldr	r6, [r6, #4]
 800adf0:	e7b9      	b.n	800ad66 <_malloc_r+0x46>
 800adf2:	230c      	movs	r3, #12
 800adf4:	603b      	str	r3, [r7, #0]
 800adf6:	4638      	mov	r0, r7
 800adf8:	f000 f84c 	bl	800ae94 <__malloc_unlock>
 800adfc:	e7a1      	b.n	800ad42 <_malloc_r+0x22>
 800adfe:	6025      	str	r5, [r4, #0]
 800ae00:	e7de      	b.n	800adc0 <_malloc_r+0xa0>
 800ae02:	bf00      	nop
 800ae04:	200005e8 	.word	0x200005e8

0800ae08 <_realloc_r>:
 800ae08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0c:	4680      	mov	r8, r0
 800ae0e:	4614      	mov	r4, r2
 800ae10:	460e      	mov	r6, r1
 800ae12:	b921      	cbnz	r1, 800ae1e <_realloc_r+0x16>
 800ae14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae18:	4611      	mov	r1, r2
 800ae1a:	f7ff bf81 	b.w	800ad20 <_malloc_r>
 800ae1e:	b92a      	cbnz	r2, 800ae2c <_realloc_r+0x24>
 800ae20:	f7ff ff12 	bl	800ac48 <_free_r>
 800ae24:	4625      	mov	r5, r4
 800ae26:	4628      	mov	r0, r5
 800ae28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2c:	f000 f838 	bl	800aea0 <_malloc_usable_size_r>
 800ae30:	4284      	cmp	r4, r0
 800ae32:	4607      	mov	r7, r0
 800ae34:	d802      	bhi.n	800ae3c <_realloc_r+0x34>
 800ae36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae3a:	d812      	bhi.n	800ae62 <_realloc_r+0x5a>
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4640      	mov	r0, r8
 800ae40:	f7ff ff6e 	bl	800ad20 <_malloc_r>
 800ae44:	4605      	mov	r5, r0
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d0ed      	beq.n	800ae26 <_realloc_r+0x1e>
 800ae4a:	42bc      	cmp	r4, r7
 800ae4c:	4622      	mov	r2, r4
 800ae4e:	4631      	mov	r1, r6
 800ae50:	bf28      	it	cs
 800ae52:	463a      	movcs	r2, r7
 800ae54:	f7ff fbb8 	bl	800a5c8 <memcpy>
 800ae58:	4631      	mov	r1, r6
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	f7ff fef4 	bl	800ac48 <_free_r>
 800ae60:	e7e1      	b.n	800ae26 <_realloc_r+0x1e>
 800ae62:	4635      	mov	r5, r6
 800ae64:	e7df      	b.n	800ae26 <_realloc_r+0x1e>
	...

0800ae68 <_sbrk_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4d06      	ldr	r5, [pc, #24]	; (800ae84 <_sbrk_r+0x1c>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4604      	mov	r4, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	602b      	str	r3, [r5, #0]
 800ae74:	f7f6 ff8c 	bl	8001d90 <_sbrk>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_sbrk_r+0x1a>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_sbrk_r+0x1a>
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	200005f0 	.word	0x200005f0

0800ae88 <__malloc_lock>:
 800ae88:	4801      	ldr	r0, [pc, #4]	; (800ae90 <__malloc_lock+0x8>)
 800ae8a:	f000 b811 	b.w	800aeb0 <__retarget_lock_acquire_recursive>
 800ae8e:	bf00      	nop
 800ae90:	200005f4 	.word	0x200005f4

0800ae94 <__malloc_unlock>:
 800ae94:	4801      	ldr	r0, [pc, #4]	; (800ae9c <__malloc_unlock+0x8>)
 800ae96:	f000 b80c 	b.w	800aeb2 <__retarget_lock_release_recursive>
 800ae9a:	bf00      	nop
 800ae9c:	200005f4 	.word	0x200005f4

0800aea0 <_malloc_usable_size_r>:
 800aea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aea4:	1f18      	subs	r0, r3, #4
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	bfbc      	itt	lt
 800aeaa:	580b      	ldrlt	r3, [r1, r0]
 800aeac:	18c0      	addlt	r0, r0, r3
 800aeae:	4770      	bx	lr

0800aeb0 <__retarget_lock_acquire_recursive>:
 800aeb0:	4770      	bx	lr

0800aeb2 <__retarget_lock_release_recursive>:
 800aeb2:	4770      	bx	lr

0800aeb4 <asin>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	ed2d 8b02 	vpush	{d8}
 800aeba:	ec55 4b10 	vmov	r4, r5, d0
 800aebe:	f000 f913 	bl	800b0e8 <__ieee754_asin>
 800aec2:	4622      	mov	r2, r4
 800aec4:	462b      	mov	r3, r5
 800aec6:	4620      	mov	r0, r4
 800aec8:	4629      	mov	r1, r5
 800aeca:	eeb0 8a40 	vmov.f32	s16, s0
 800aece:	eef0 8a60 	vmov.f32	s17, s1
 800aed2:	f7f5 fe2b 	bl	8000b2c <__aeabi_dcmpun>
 800aed6:	b9a8      	cbnz	r0, 800af04 <asin+0x50>
 800aed8:	ec45 4b10 	vmov	d0, r4, r5
 800aedc:	f001 fd18 	bl	800c910 <fabs>
 800aee0:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <asin+0x60>)
 800aee2:	ec51 0b10 	vmov	r0, r1, d0
 800aee6:	2200      	movs	r2, #0
 800aee8:	f7f5 fe16 	bl	8000b18 <__aeabi_dcmpgt>
 800aeec:	b150      	cbz	r0, 800af04 <asin+0x50>
 800aeee:	f7ff fb41 	bl	800a574 <__errno>
 800aef2:	ecbd 8b02 	vpop	{d8}
 800aef6:	2321      	movs	r3, #33	; 0x21
 800aef8:	6003      	str	r3, [r0, #0]
 800aefa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aefe:	4806      	ldr	r0, [pc, #24]	; (800af18 <asin+0x64>)
 800af00:	f001 bd1a 	b.w	800c938 <nan>
 800af04:	eeb0 0a48 	vmov.f32	s0, s16
 800af08:	eef0 0a68 	vmov.f32	s1, s17
 800af0c:	ecbd 8b02 	vpop	{d8}
 800af10:	bd38      	pop	{r3, r4, r5, pc}
 800af12:	bf00      	nop
 800af14:	3ff00000 	.word	0x3ff00000
 800af18:	0800cfd9 	.word	0x0800cfd9

0800af1c <atan2>:
 800af1c:	f000 baf8 	b.w	800b510 <__ieee754_atan2>

0800af20 <exp>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	ed2d 8b02 	vpush	{d8}
 800af26:	ec55 4b10 	vmov	r4, r5, d0
 800af2a:	f000 fbbd 	bl	800b6a8 <__ieee754_exp>
 800af2e:	eeb0 8a40 	vmov.f32	s16, s0
 800af32:	eef0 8a60 	vmov.f32	s17, s1
 800af36:	ec45 4b10 	vmov	d0, r4, r5
 800af3a:	f001 fcf2 	bl	800c922 <finite>
 800af3e:	b168      	cbz	r0, 800af5c <exp+0x3c>
 800af40:	a317      	add	r3, pc, #92	; (adr r3, 800afa0 <exp+0x80>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	4620      	mov	r0, r4
 800af48:	4629      	mov	r1, r5
 800af4a:	f7f5 fde5 	bl	8000b18 <__aeabi_dcmpgt>
 800af4e:	b160      	cbz	r0, 800af6a <exp+0x4a>
 800af50:	f7ff fb10 	bl	800a574 <__errno>
 800af54:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800af90 <exp+0x70>
 800af58:	2322      	movs	r3, #34	; 0x22
 800af5a:	6003      	str	r3, [r0, #0]
 800af5c:	eeb0 0a48 	vmov.f32	s0, s16
 800af60:	eef0 0a68 	vmov.f32	s1, s17
 800af64:	ecbd 8b02 	vpop	{d8}
 800af68:	bd38      	pop	{r3, r4, r5, pc}
 800af6a:	a30f      	add	r3, pc, #60	; (adr r3, 800afa8 <exp+0x88>)
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	4620      	mov	r0, r4
 800af72:	4629      	mov	r1, r5
 800af74:	f7f5 fdb2 	bl	8000adc <__aeabi_dcmplt>
 800af78:	2800      	cmp	r0, #0
 800af7a:	d0ef      	beq.n	800af5c <exp+0x3c>
 800af7c:	f7ff fafa 	bl	800a574 <__errno>
 800af80:	2322      	movs	r3, #34	; 0x22
 800af82:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800af98 <exp+0x78>
 800af86:	6003      	str	r3, [r0, #0]
 800af88:	e7e8      	b.n	800af5c <exp+0x3c>
 800af8a:	bf00      	nop
 800af8c:	f3af 8000 	nop.w
 800af90:	00000000 	.word	0x00000000
 800af94:	7ff00000 	.word	0x7ff00000
	...
 800afa0:	fefa39ef 	.word	0xfefa39ef
 800afa4:	40862e42 	.word	0x40862e42
 800afa8:	d52d3051 	.word	0xd52d3051
 800afac:	c0874910 	.word	0xc0874910

0800afb0 <pow>:
 800afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb2:	ed2d 8b02 	vpush	{d8}
 800afb6:	eeb0 8a40 	vmov.f32	s16, s0
 800afba:	eef0 8a60 	vmov.f32	s17, s1
 800afbe:	ec55 4b11 	vmov	r4, r5, d1
 800afc2:	f000 fcf5 	bl	800b9b0 <__ieee754_pow>
 800afc6:	4622      	mov	r2, r4
 800afc8:	462b      	mov	r3, r5
 800afca:	4620      	mov	r0, r4
 800afcc:	4629      	mov	r1, r5
 800afce:	ec57 6b10 	vmov	r6, r7, d0
 800afd2:	f7f5 fdab 	bl	8000b2c <__aeabi_dcmpun>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d13b      	bne.n	800b052 <pow+0xa2>
 800afda:	ec51 0b18 	vmov	r0, r1, d8
 800afde:	2200      	movs	r2, #0
 800afe0:	2300      	movs	r3, #0
 800afe2:	f7f5 fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 800afe6:	b1b8      	cbz	r0, 800b018 <pow+0x68>
 800afe8:	2200      	movs	r2, #0
 800afea:	2300      	movs	r3, #0
 800afec:	4620      	mov	r0, r4
 800afee:	4629      	mov	r1, r5
 800aff0:	f7f5 fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d146      	bne.n	800b086 <pow+0xd6>
 800aff8:	ec45 4b10 	vmov	d0, r4, r5
 800affc:	f001 fc91 	bl	800c922 <finite>
 800b000:	b338      	cbz	r0, 800b052 <pow+0xa2>
 800b002:	2200      	movs	r2, #0
 800b004:	2300      	movs	r3, #0
 800b006:	4620      	mov	r0, r4
 800b008:	4629      	mov	r1, r5
 800b00a:	f7f5 fd67 	bl	8000adc <__aeabi_dcmplt>
 800b00e:	b300      	cbz	r0, 800b052 <pow+0xa2>
 800b010:	f7ff fab0 	bl	800a574 <__errno>
 800b014:	2322      	movs	r3, #34	; 0x22
 800b016:	e01b      	b.n	800b050 <pow+0xa0>
 800b018:	ec47 6b10 	vmov	d0, r6, r7
 800b01c:	f001 fc81 	bl	800c922 <finite>
 800b020:	b9e0      	cbnz	r0, 800b05c <pow+0xac>
 800b022:	eeb0 0a48 	vmov.f32	s0, s16
 800b026:	eef0 0a68 	vmov.f32	s1, s17
 800b02a:	f001 fc7a 	bl	800c922 <finite>
 800b02e:	b1a8      	cbz	r0, 800b05c <pow+0xac>
 800b030:	ec45 4b10 	vmov	d0, r4, r5
 800b034:	f001 fc75 	bl	800c922 <finite>
 800b038:	b180      	cbz	r0, 800b05c <pow+0xac>
 800b03a:	4632      	mov	r2, r6
 800b03c:	463b      	mov	r3, r7
 800b03e:	4630      	mov	r0, r6
 800b040:	4639      	mov	r1, r7
 800b042:	f7f5 fd73 	bl	8000b2c <__aeabi_dcmpun>
 800b046:	2800      	cmp	r0, #0
 800b048:	d0e2      	beq.n	800b010 <pow+0x60>
 800b04a:	f7ff fa93 	bl	800a574 <__errno>
 800b04e:	2321      	movs	r3, #33	; 0x21
 800b050:	6003      	str	r3, [r0, #0]
 800b052:	ecbd 8b02 	vpop	{d8}
 800b056:	ec47 6b10 	vmov	d0, r6, r7
 800b05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b05c:	2200      	movs	r2, #0
 800b05e:	2300      	movs	r3, #0
 800b060:	4630      	mov	r0, r6
 800b062:	4639      	mov	r1, r7
 800b064:	f7f5 fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 800b068:	2800      	cmp	r0, #0
 800b06a:	d0f2      	beq.n	800b052 <pow+0xa2>
 800b06c:	eeb0 0a48 	vmov.f32	s0, s16
 800b070:	eef0 0a68 	vmov.f32	s1, s17
 800b074:	f001 fc55 	bl	800c922 <finite>
 800b078:	2800      	cmp	r0, #0
 800b07a:	d0ea      	beq.n	800b052 <pow+0xa2>
 800b07c:	ec45 4b10 	vmov	d0, r4, r5
 800b080:	f001 fc4f 	bl	800c922 <finite>
 800b084:	e7c3      	b.n	800b00e <pow+0x5e>
 800b086:	4f01      	ldr	r7, [pc, #4]	; (800b08c <pow+0xdc>)
 800b088:	2600      	movs	r6, #0
 800b08a:	e7e2      	b.n	800b052 <pow+0xa2>
 800b08c:	3ff00000 	.word	0x3ff00000

0800b090 <sqrt>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	ed2d 8b02 	vpush	{d8}
 800b096:	ec55 4b10 	vmov	r4, r5, d0
 800b09a:	f001 f9b7 	bl	800c40c <__ieee754_sqrt>
 800b09e:	4622      	mov	r2, r4
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	eeb0 8a40 	vmov.f32	s16, s0
 800b0aa:	eef0 8a60 	vmov.f32	s17, s1
 800b0ae:	f7f5 fd3d 	bl	8000b2c <__aeabi_dcmpun>
 800b0b2:	b990      	cbnz	r0, 800b0da <sqrt+0x4a>
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	f7f5 fd0e 	bl	8000adc <__aeabi_dcmplt>
 800b0c0:	b158      	cbz	r0, 800b0da <sqrt+0x4a>
 800b0c2:	f7ff fa57 	bl	800a574 <__errno>
 800b0c6:	2321      	movs	r3, #33	; 0x21
 800b0c8:	6003      	str	r3, [r0, #0]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	f7f5 fbbb 	bl	800084c <__aeabi_ddiv>
 800b0d6:	ec41 0b18 	vmov	d8, r0, r1
 800b0da:	eeb0 0a48 	vmov.f32	s0, s16
 800b0de:	eef0 0a68 	vmov.f32	s1, s17
 800b0e2:	ecbd 8b02 	vpop	{d8}
 800b0e6:	bd38      	pop	{r3, r4, r5, pc}

0800b0e8 <__ieee754_asin>:
 800b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ec:	ed2d 8b04 	vpush	{d8-d9}
 800b0f0:	ec55 4b10 	vmov	r4, r5, d0
 800b0f4:	4bcc      	ldr	r3, [pc, #816]	; (800b428 <__ieee754_asin+0x340>)
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b0fc:	4598      	cmp	r8, r3
 800b0fe:	9501      	str	r5, [sp, #4]
 800b100:	dd35      	ble.n	800b16e <__ieee754_asin+0x86>
 800b102:	ee10 3a10 	vmov	r3, s0
 800b106:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800b10a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800b10e:	ea58 0303 	orrs.w	r3, r8, r3
 800b112:	d117      	bne.n	800b144 <__ieee754_asin+0x5c>
 800b114:	a3aa      	add	r3, pc, #680	; (adr r3, 800b3c0 <__ieee754_asin+0x2d8>)
 800b116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11a:	ee10 0a10 	vmov	r0, s0
 800b11e:	4629      	mov	r1, r5
 800b120:	f7f5 fa6a 	bl	80005f8 <__aeabi_dmul>
 800b124:	a3a8      	add	r3, pc, #672	; (adr r3, 800b3c8 <__ieee754_asin+0x2e0>)
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	4606      	mov	r6, r0
 800b12c:	460f      	mov	r7, r1
 800b12e:	4620      	mov	r0, r4
 800b130:	4629      	mov	r1, r5
 800b132:	f7f5 fa61 	bl	80005f8 <__aeabi_dmul>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	4630      	mov	r0, r6
 800b13c:	4639      	mov	r1, r7
 800b13e:	f7f5 f8a5 	bl	800028c <__adddf3>
 800b142:	e00b      	b.n	800b15c <__ieee754_asin+0x74>
 800b144:	ee10 2a10 	vmov	r2, s0
 800b148:	462b      	mov	r3, r5
 800b14a:	ee10 0a10 	vmov	r0, s0
 800b14e:	4629      	mov	r1, r5
 800b150:	f7f5 f89a 	bl	8000288 <__aeabi_dsub>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	f7f5 fb78 	bl	800084c <__aeabi_ddiv>
 800b15c:	4604      	mov	r4, r0
 800b15e:	460d      	mov	r5, r1
 800b160:	ec45 4b10 	vmov	d0, r4, r5
 800b164:	b003      	add	sp, #12
 800b166:	ecbd 8b04 	vpop	{d8-d9}
 800b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16e:	4baf      	ldr	r3, [pc, #700]	; (800b42c <__ieee754_asin+0x344>)
 800b170:	4598      	cmp	r8, r3
 800b172:	dc11      	bgt.n	800b198 <__ieee754_asin+0xb0>
 800b174:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b178:	f280 80ae 	bge.w	800b2d8 <__ieee754_asin+0x1f0>
 800b17c:	a394      	add	r3, pc, #592	; (adr r3, 800b3d0 <__ieee754_asin+0x2e8>)
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	ee10 0a10 	vmov	r0, s0
 800b186:	4629      	mov	r1, r5
 800b188:	f7f5 f880 	bl	800028c <__adddf3>
 800b18c:	4ba8      	ldr	r3, [pc, #672]	; (800b430 <__ieee754_asin+0x348>)
 800b18e:	2200      	movs	r2, #0
 800b190:	f7f5 fcc2 	bl	8000b18 <__aeabi_dcmpgt>
 800b194:	2800      	cmp	r0, #0
 800b196:	d1e3      	bne.n	800b160 <__ieee754_asin+0x78>
 800b198:	ec45 4b10 	vmov	d0, r4, r5
 800b19c:	f001 fbb8 	bl	800c910 <fabs>
 800b1a0:	49a3      	ldr	r1, [pc, #652]	; (800b430 <__ieee754_asin+0x348>)
 800b1a2:	ec53 2b10 	vmov	r2, r3, d0
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	f7f5 f86e 	bl	8000288 <__aeabi_dsub>
 800b1ac:	4ba1      	ldr	r3, [pc, #644]	; (800b434 <__ieee754_asin+0x34c>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f7f5 fa22 	bl	80005f8 <__aeabi_dmul>
 800b1b4:	a388      	add	r3, pc, #544	; (adr r3, 800b3d8 <__ieee754_asin+0x2f0>)
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	460d      	mov	r5, r1
 800b1be:	f7f5 fa1b 	bl	80005f8 <__aeabi_dmul>
 800b1c2:	a387      	add	r3, pc, #540	; (adr r3, 800b3e0 <__ieee754_asin+0x2f8>)
 800b1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c8:	f7f5 f860 	bl	800028c <__adddf3>
 800b1cc:	4622      	mov	r2, r4
 800b1ce:	462b      	mov	r3, r5
 800b1d0:	f7f5 fa12 	bl	80005f8 <__aeabi_dmul>
 800b1d4:	a384      	add	r3, pc, #528	; (adr r3, 800b3e8 <__ieee754_asin+0x300>)
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	f7f5 f855 	bl	8000288 <__aeabi_dsub>
 800b1de:	4622      	mov	r2, r4
 800b1e0:	462b      	mov	r3, r5
 800b1e2:	f7f5 fa09 	bl	80005f8 <__aeabi_dmul>
 800b1e6:	a382      	add	r3, pc, #520	; (adr r3, 800b3f0 <__ieee754_asin+0x308>)
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f7f5 f84e 	bl	800028c <__adddf3>
 800b1f0:	4622      	mov	r2, r4
 800b1f2:	462b      	mov	r3, r5
 800b1f4:	f7f5 fa00 	bl	80005f8 <__aeabi_dmul>
 800b1f8:	a37f      	add	r3, pc, #508	; (adr r3, 800b3f8 <__ieee754_asin+0x310>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f7f5 f843 	bl	8000288 <__aeabi_dsub>
 800b202:	4622      	mov	r2, r4
 800b204:	462b      	mov	r3, r5
 800b206:	f7f5 f9f7 	bl	80005f8 <__aeabi_dmul>
 800b20a:	a37d      	add	r3, pc, #500	; (adr r3, 800b400 <__ieee754_asin+0x318>)
 800b20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b210:	f7f5 f83c 	bl	800028c <__adddf3>
 800b214:	4622      	mov	r2, r4
 800b216:	462b      	mov	r3, r5
 800b218:	f7f5 f9ee 	bl	80005f8 <__aeabi_dmul>
 800b21c:	a37a      	add	r3, pc, #488	; (adr r3, 800b408 <__ieee754_asin+0x320>)
 800b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b222:	ec41 0b18 	vmov	d8, r0, r1
 800b226:	4620      	mov	r0, r4
 800b228:	4629      	mov	r1, r5
 800b22a:	f7f5 f9e5 	bl	80005f8 <__aeabi_dmul>
 800b22e:	a378      	add	r3, pc, #480	; (adr r3, 800b410 <__ieee754_asin+0x328>)
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	f7f5 f828 	bl	8000288 <__aeabi_dsub>
 800b238:	4622      	mov	r2, r4
 800b23a:	462b      	mov	r3, r5
 800b23c:	f7f5 f9dc 	bl	80005f8 <__aeabi_dmul>
 800b240:	a375      	add	r3, pc, #468	; (adr r3, 800b418 <__ieee754_asin+0x330>)
 800b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b246:	f7f5 f821 	bl	800028c <__adddf3>
 800b24a:	4622      	mov	r2, r4
 800b24c:	462b      	mov	r3, r5
 800b24e:	f7f5 f9d3 	bl	80005f8 <__aeabi_dmul>
 800b252:	a373      	add	r3, pc, #460	; (adr r3, 800b420 <__ieee754_asin+0x338>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f7f5 f816 	bl	8000288 <__aeabi_dsub>
 800b25c:	4622      	mov	r2, r4
 800b25e:	462b      	mov	r3, r5
 800b260:	f7f5 f9ca 	bl	80005f8 <__aeabi_dmul>
 800b264:	4b72      	ldr	r3, [pc, #456]	; (800b430 <__ieee754_asin+0x348>)
 800b266:	2200      	movs	r2, #0
 800b268:	f7f5 f810 	bl	800028c <__adddf3>
 800b26c:	ec45 4b10 	vmov	d0, r4, r5
 800b270:	4606      	mov	r6, r0
 800b272:	460f      	mov	r7, r1
 800b274:	f001 f8ca 	bl	800c40c <__ieee754_sqrt>
 800b278:	4b6f      	ldr	r3, [pc, #444]	; (800b438 <__ieee754_asin+0x350>)
 800b27a:	4598      	cmp	r8, r3
 800b27c:	ec5b ab10 	vmov	sl, fp, d0
 800b280:	f340 80dc 	ble.w	800b43c <__ieee754_asin+0x354>
 800b284:	4632      	mov	r2, r6
 800b286:	463b      	mov	r3, r7
 800b288:	ec51 0b18 	vmov	r0, r1, d8
 800b28c:	f7f5 fade 	bl	800084c <__aeabi_ddiv>
 800b290:	4652      	mov	r2, sl
 800b292:	465b      	mov	r3, fp
 800b294:	f7f5 f9b0 	bl	80005f8 <__aeabi_dmul>
 800b298:	4652      	mov	r2, sl
 800b29a:	465b      	mov	r3, fp
 800b29c:	f7f4 fff6 	bl	800028c <__adddf3>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	f7f4 fff2 	bl	800028c <__adddf3>
 800b2a8:	a347      	add	r3, pc, #284	; (adr r3, 800b3c8 <__ieee754_asin+0x2e0>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	f7f4 ffeb 	bl	8000288 <__aeabi_dsub>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	a142      	add	r1, pc, #264	; (adr r1, 800b3c0 <__ieee754_asin+0x2d8>)
 800b2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2bc:	f7f4 ffe4 	bl	8000288 <__aeabi_dsub>
 800b2c0:	9b01      	ldr	r3, [sp, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	bfdc      	itt	le
 800b2c6:	4602      	movle	r2, r0
 800b2c8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	460d      	mov	r5, r1
 800b2d0:	bfdc      	itt	le
 800b2d2:	4614      	movle	r4, r2
 800b2d4:	461d      	movle	r5, r3
 800b2d6:	e743      	b.n	800b160 <__ieee754_asin+0x78>
 800b2d8:	ee10 2a10 	vmov	r2, s0
 800b2dc:	ee10 0a10 	vmov	r0, s0
 800b2e0:	462b      	mov	r3, r5
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	f7f5 f988 	bl	80005f8 <__aeabi_dmul>
 800b2e8:	a33b      	add	r3, pc, #236	; (adr r3, 800b3d8 <__ieee754_asin+0x2f0>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	460f      	mov	r7, r1
 800b2f2:	f7f5 f981 	bl	80005f8 <__aeabi_dmul>
 800b2f6:	a33a      	add	r3, pc, #232	; (adr r3, 800b3e0 <__ieee754_asin+0x2f8>)
 800b2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fc:	f7f4 ffc6 	bl	800028c <__adddf3>
 800b300:	4632      	mov	r2, r6
 800b302:	463b      	mov	r3, r7
 800b304:	f7f5 f978 	bl	80005f8 <__aeabi_dmul>
 800b308:	a337      	add	r3, pc, #220	; (adr r3, 800b3e8 <__ieee754_asin+0x300>)
 800b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30e:	f7f4 ffbb 	bl	8000288 <__aeabi_dsub>
 800b312:	4632      	mov	r2, r6
 800b314:	463b      	mov	r3, r7
 800b316:	f7f5 f96f 	bl	80005f8 <__aeabi_dmul>
 800b31a:	a335      	add	r3, pc, #212	; (adr r3, 800b3f0 <__ieee754_asin+0x308>)
 800b31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b320:	f7f4 ffb4 	bl	800028c <__adddf3>
 800b324:	4632      	mov	r2, r6
 800b326:	463b      	mov	r3, r7
 800b328:	f7f5 f966 	bl	80005f8 <__aeabi_dmul>
 800b32c:	a332      	add	r3, pc, #200	; (adr r3, 800b3f8 <__ieee754_asin+0x310>)
 800b32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b332:	f7f4 ffa9 	bl	8000288 <__aeabi_dsub>
 800b336:	4632      	mov	r2, r6
 800b338:	463b      	mov	r3, r7
 800b33a:	f7f5 f95d 	bl	80005f8 <__aeabi_dmul>
 800b33e:	a330      	add	r3, pc, #192	; (adr r3, 800b400 <__ieee754_asin+0x318>)
 800b340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b344:	f7f4 ffa2 	bl	800028c <__adddf3>
 800b348:	4632      	mov	r2, r6
 800b34a:	463b      	mov	r3, r7
 800b34c:	f7f5 f954 	bl	80005f8 <__aeabi_dmul>
 800b350:	a32d      	add	r3, pc, #180	; (adr r3, 800b408 <__ieee754_asin+0x320>)
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	4680      	mov	r8, r0
 800b358:	4689      	mov	r9, r1
 800b35a:	4630      	mov	r0, r6
 800b35c:	4639      	mov	r1, r7
 800b35e:	f7f5 f94b 	bl	80005f8 <__aeabi_dmul>
 800b362:	a32b      	add	r3, pc, #172	; (adr r3, 800b410 <__ieee754_asin+0x328>)
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	f7f4 ff8e 	bl	8000288 <__aeabi_dsub>
 800b36c:	4632      	mov	r2, r6
 800b36e:	463b      	mov	r3, r7
 800b370:	f7f5 f942 	bl	80005f8 <__aeabi_dmul>
 800b374:	a328      	add	r3, pc, #160	; (adr r3, 800b418 <__ieee754_asin+0x330>)
 800b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37a:	f7f4 ff87 	bl	800028c <__adddf3>
 800b37e:	4632      	mov	r2, r6
 800b380:	463b      	mov	r3, r7
 800b382:	f7f5 f939 	bl	80005f8 <__aeabi_dmul>
 800b386:	a326      	add	r3, pc, #152	; (adr r3, 800b420 <__ieee754_asin+0x338>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f7f4 ff7c 	bl	8000288 <__aeabi_dsub>
 800b390:	4632      	mov	r2, r6
 800b392:	463b      	mov	r3, r7
 800b394:	f7f5 f930 	bl	80005f8 <__aeabi_dmul>
 800b398:	4b25      	ldr	r3, [pc, #148]	; (800b430 <__ieee754_asin+0x348>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	f7f4 ff76 	bl	800028c <__adddf3>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4640      	mov	r0, r8
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	f7f5 fa50 	bl	800084c <__aeabi_ddiv>
 800b3ac:	4622      	mov	r2, r4
 800b3ae:	462b      	mov	r3, r5
 800b3b0:	f7f5 f922 	bl	80005f8 <__aeabi_dmul>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	e6bf      	b.n	800b13e <__ieee754_asin+0x56>
 800b3be:	bf00      	nop
 800b3c0:	54442d18 	.word	0x54442d18
 800b3c4:	3ff921fb 	.word	0x3ff921fb
 800b3c8:	33145c07 	.word	0x33145c07
 800b3cc:	3c91a626 	.word	0x3c91a626
 800b3d0:	8800759c 	.word	0x8800759c
 800b3d4:	7e37e43c 	.word	0x7e37e43c
 800b3d8:	0dfdf709 	.word	0x0dfdf709
 800b3dc:	3f023de1 	.word	0x3f023de1
 800b3e0:	7501b288 	.word	0x7501b288
 800b3e4:	3f49efe0 	.word	0x3f49efe0
 800b3e8:	b5688f3b 	.word	0xb5688f3b
 800b3ec:	3fa48228 	.word	0x3fa48228
 800b3f0:	0e884455 	.word	0x0e884455
 800b3f4:	3fc9c155 	.word	0x3fc9c155
 800b3f8:	03eb6f7d 	.word	0x03eb6f7d
 800b3fc:	3fd4d612 	.word	0x3fd4d612
 800b400:	55555555 	.word	0x55555555
 800b404:	3fc55555 	.word	0x3fc55555
 800b408:	b12e9282 	.word	0xb12e9282
 800b40c:	3fb3b8c5 	.word	0x3fb3b8c5
 800b410:	1b8d0159 	.word	0x1b8d0159
 800b414:	3fe6066c 	.word	0x3fe6066c
 800b418:	9c598ac8 	.word	0x9c598ac8
 800b41c:	40002ae5 	.word	0x40002ae5
 800b420:	1c8a2d4b 	.word	0x1c8a2d4b
 800b424:	40033a27 	.word	0x40033a27
 800b428:	3fefffff 	.word	0x3fefffff
 800b42c:	3fdfffff 	.word	0x3fdfffff
 800b430:	3ff00000 	.word	0x3ff00000
 800b434:	3fe00000 	.word	0x3fe00000
 800b438:	3fef3332 	.word	0x3fef3332
 800b43c:	ee10 2a10 	vmov	r2, s0
 800b440:	ee10 0a10 	vmov	r0, s0
 800b444:	465b      	mov	r3, fp
 800b446:	4659      	mov	r1, fp
 800b448:	f7f4 ff20 	bl	800028c <__adddf3>
 800b44c:	4632      	mov	r2, r6
 800b44e:	463b      	mov	r3, r7
 800b450:	ec41 0b19 	vmov	d9, r0, r1
 800b454:	ec51 0b18 	vmov	r0, r1, d8
 800b458:	f7f5 f9f8 	bl	800084c <__aeabi_ddiv>
 800b45c:	4602      	mov	r2, r0
 800b45e:	460b      	mov	r3, r1
 800b460:	ec51 0b19 	vmov	r0, r1, d9
 800b464:	f7f5 f8c8 	bl	80005f8 <__aeabi_dmul>
 800b468:	f04f 0800 	mov.w	r8, #0
 800b46c:	4606      	mov	r6, r0
 800b46e:	460f      	mov	r7, r1
 800b470:	4642      	mov	r2, r8
 800b472:	465b      	mov	r3, fp
 800b474:	4640      	mov	r0, r8
 800b476:	4659      	mov	r1, fp
 800b478:	f7f5 f8be 	bl	80005f8 <__aeabi_dmul>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	4620      	mov	r0, r4
 800b482:	4629      	mov	r1, r5
 800b484:	f7f4 ff00 	bl	8000288 <__aeabi_dsub>
 800b488:	4642      	mov	r2, r8
 800b48a:	4604      	mov	r4, r0
 800b48c:	460d      	mov	r5, r1
 800b48e:	465b      	mov	r3, fp
 800b490:	4650      	mov	r0, sl
 800b492:	4659      	mov	r1, fp
 800b494:	f7f4 fefa 	bl	800028c <__adddf3>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	4620      	mov	r0, r4
 800b49e:	4629      	mov	r1, r5
 800b4a0:	f7f5 f9d4 	bl	800084c <__aeabi_ddiv>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	f7f4 fef0 	bl	800028c <__adddf3>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	a113      	add	r1, pc, #76	; (adr r1, 800b500 <__ieee754_asin+0x418>)
 800b4b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4b6:	f7f4 fee7 	bl	8000288 <__aeabi_dsub>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	4630      	mov	r0, r6
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	f7f4 fee1 	bl	8000288 <__aeabi_dsub>
 800b4c6:	4642      	mov	r2, r8
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	460d      	mov	r5, r1
 800b4cc:	465b      	mov	r3, fp
 800b4ce:	4640      	mov	r0, r8
 800b4d0:	4659      	mov	r1, fp
 800b4d2:	f7f4 fedb 	bl	800028c <__adddf3>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	a10b      	add	r1, pc, #44	; (adr r1, 800b508 <__ieee754_asin+0x420>)
 800b4dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4e0:	f7f4 fed2 	bl	8000288 <__aeabi_dsub>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	f7f4 fecc 	bl	8000288 <__aeabi_dsub>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	a104      	add	r1, pc, #16	; (adr r1, 800b508 <__ieee754_asin+0x420>)
 800b4f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4fa:	e6df      	b.n	800b2bc <__ieee754_asin+0x1d4>
 800b4fc:	f3af 8000 	nop.w
 800b500:	33145c07 	.word	0x33145c07
 800b504:	3c91a626 	.word	0x3c91a626
 800b508:	54442d18 	.word	0x54442d18
 800b50c:	3fe921fb 	.word	0x3fe921fb

0800b510 <__ieee754_atan2>:
 800b510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b514:	ec57 6b11 	vmov	r6, r7, d1
 800b518:	4273      	negs	r3, r6
 800b51a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b6a0 <__ieee754_atan2+0x190>
 800b51e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b522:	4333      	orrs	r3, r6
 800b524:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b528:	4573      	cmp	r3, lr
 800b52a:	ec51 0b10 	vmov	r0, r1, d0
 800b52e:	ee11 8a10 	vmov	r8, s2
 800b532:	d80a      	bhi.n	800b54a <__ieee754_atan2+0x3a>
 800b534:	4244      	negs	r4, r0
 800b536:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b53a:	4304      	orrs	r4, r0
 800b53c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b540:	4574      	cmp	r4, lr
 800b542:	ee10 9a10 	vmov	r9, s0
 800b546:	468c      	mov	ip, r1
 800b548:	d907      	bls.n	800b55a <__ieee754_atan2+0x4a>
 800b54a:	4632      	mov	r2, r6
 800b54c:	463b      	mov	r3, r7
 800b54e:	f7f4 fe9d 	bl	800028c <__adddf3>
 800b552:	ec41 0b10 	vmov	d0, r0, r1
 800b556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b55a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b55e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b562:	4334      	orrs	r4, r6
 800b564:	d103      	bne.n	800b56e <__ieee754_atan2+0x5e>
 800b566:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b56a:	f001 b831 	b.w	800c5d0 <atan>
 800b56e:	17bc      	asrs	r4, r7, #30
 800b570:	f004 0402 	and.w	r4, r4, #2
 800b574:	ea53 0909 	orrs.w	r9, r3, r9
 800b578:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b57c:	d107      	bne.n	800b58e <__ieee754_atan2+0x7e>
 800b57e:	2c02      	cmp	r4, #2
 800b580:	d060      	beq.n	800b644 <__ieee754_atan2+0x134>
 800b582:	2c03      	cmp	r4, #3
 800b584:	d1e5      	bne.n	800b552 <__ieee754_atan2+0x42>
 800b586:	a142      	add	r1, pc, #264	; (adr r1, 800b690 <__ieee754_atan2+0x180>)
 800b588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b58c:	e7e1      	b.n	800b552 <__ieee754_atan2+0x42>
 800b58e:	ea52 0808 	orrs.w	r8, r2, r8
 800b592:	d106      	bne.n	800b5a2 <__ieee754_atan2+0x92>
 800b594:	f1bc 0f00 	cmp.w	ip, #0
 800b598:	da5f      	bge.n	800b65a <__ieee754_atan2+0x14a>
 800b59a:	a13f      	add	r1, pc, #252	; (adr r1, 800b698 <__ieee754_atan2+0x188>)
 800b59c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5a0:	e7d7      	b.n	800b552 <__ieee754_atan2+0x42>
 800b5a2:	4572      	cmp	r2, lr
 800b5a4:	d10f      	bne.n	800b5c6 <__ieee754_atan2+0xb6>
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	f104 34ff 	add.w	r4, r4, #4294967295
 800b5ac:	d107      	bne.n	800b5be <__ieee754_atan2+0xae>
 800b5ae:	2c02      	cmp	r4, #2
 800b5b0:	d84c      	bhi.n	800b64c <__ieee754_atan2+0x13c>
 800b5b2:	4b35      	ldr	r3, [pc, #212]	; (800b688 <__ieee754_atan2+0x178>)
 800b5b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b5b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b5bc:	e7c9      	b.n	800b552 <__ieee754_atan2+0x42>
 800b5be:	2c02      	cmp	r4, #2
 800b5c0:	d848      	bhi.n	800b654 <__ieee754_atan2+0x144>
 800b5c2:	4b32      	ldr	r3, [pc, #200]	; (800b68c <__ieee754_atan2+0x17c>)
 800b5c4:	e7f6      	b.n	800b5b4 <__ieee754_atan2+0xa4>
 800b5c6:	4573      	cmp	r3, lr
 800b5c8:	d0e4      	beq.n	800b594 <__ieee754_atan2+0x84>
 800b5ca:	1a9b      	subs	r3, r3, r2
 800b5cc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b5d0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b5d4:	da1e      	bge.n	800b614 <__ieee754_atan2+0x104>
 800b5d6:	2f00      	cmp	r7, #0
 800b5d8:	da01      	bge.n	800b5de <__ieee754_atan2+0xce>
 800b5da:	323c      	adds	r2, #60	; 0x3c
 800b5dc:	db1e      	blt.n	800b61c <__ieee754_atan2+0x10c>
 800b5de:	4632      	mov	r2, r6
 800b5e0:	463b      	mov	r3, r7
 800b5e2:	f7f5 f933 	bl	800084c <__aeabi_ddiv>
 800b5e6:	ec41 0b10 	vmov	d0, r0, r1
 800b5ea:	f001 f991 	bl	800c910 <fabs>
 800b5ee:	f000 ffef 	bl	800c5d0 <atan>
 800b5f2:	ec51 0b10 	vmov	r0, r1, d0
 800b5f6:	2c01      	cmp	r4, #1
 800b5f8:	d013      	beq.n	800b622 <__ieee754_atan2+0x112>
 800b5fa:	2c02      	cmp	r4, #2
 800b5fc:	d015      	beq.n	800b62a <__ieee754_atan2+0x11a>
 800b5fe:	2c00      	cmp	r4, #0
 800b600:	d0a7      	beq.n	800b552 <__ieee754_atan2+0x42>
 800b602:	a319      	add	r3, pc, #100	; (adr r3, 800b668 <__ieee754_atan2+0x158>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f7f4 fe3e 	bl	8000288 <__aeabi_dsub>
 800b60c:	a318      	add	r3, pc, #96	; (adr r3, 800b670 <__ieee754_atan2+0x160>)
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	e014      	b.n	800b63e <__ieee754_atan2+0x12e>
 800b614:	a118      	add	r1, pc, #96	; (adr r1, 800b678 <__ieee754_atan2+0x168>)
 800b616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b61a:	e7ec      	b.n	800b5f6 <__ieee754_atan2+0xe6>
 800b61c:	2000      	movs	r0, #0
 800b61e:	2100      	movs	r1, #0
 800b620:	e7e9      	b.n	800b5f6 <__ieee754_atan2+0xe6>
 800b622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b626:	4619      	mov	r1, r3
 800b628:	e793      	b.n	800b552 <__ieee754_atan2+0x42>
 800b62a:	a30f      	add	r3, pc, #60	; (adr r3, 800b668 <__ieee754_atan2+0x158>)
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	f7f4 fe2a 	bl	8000288 <__aeabi_dsub>
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	a10d      	add	r1, pc, #52	; (adr r1, 800b670 <__ieee754_atan2+0x160>)
 800b63a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b63e:	f7f4 fe23 	bl	8000288 <__aeabi_dsub>
 800b642:	e786      	b.n	800b552 <__ieee754_atan2+0x42>
 800b644:	a10a      	add	r1, pc, #40	; (adr r1, 800b670 <__ieee754_atan2+0x160>)
 800b646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b64a:	e782      	b.n	800b552 <__ieee754_atan2+0x42>
 800b64c:	a10c      	add	r1, pc, #48	; (adr r1, 800b680 <__ieee754_atan2+0x170>)
 800b64e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b652:	e77e      	b.n	800b552 <__ieee754_atan2+0x42>
 800b654:	2000      	movs	r0, #0
 800b656:	2100      	movs	r1, #0
 800b658:	e77b      	b.n	800b552 <__ieee754_atan2+0x42>
 800b65a:	a107      	add	r1, pc, #28	; (adr r1, 800b678 <__ieee754_atan2+0x168>)
 800b65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b660:	e777      	b.n	800b552 <__ieee754_atan2+0x42>
 800b662:	bf00      	nop
 800b664:	f3af 8000 	nop.w
 800b668:	33145c07 	.word	0x33145c07
 800b66c:	3ca1a626 	.word	0x3ca1a626
 800b670:	54442d18 	.word	0x54442d18
 800b674:	400921fb 	.word	0x400921fb
 800b678:	54442d18 	.word	0x54442d18
 800b67c:	3ff921fb 	.word	0x3ff921fb
 800b680:	54442d18 	.word	0x54442d18
 800b684:	3fe921fb 	.word	0x3fe921fb
 800b688:	0800d008 	.word	0x0800d008
 800b68c:	0800d020 	.word	0x0800d020
 800b690:	54442d18 	.word	0x54442d18
 800b694:	c00921fb 	.word	0xc00921fb
 800b698:	54442d18 	.word	0x54442d18
 800b69c:	bff921fb 	.word	0xbff921fb
 800b6a0:	7ff00000 	.word	0x7ff00000
 800b6a4:	00000000 	.word	0x00000000

0800b6a8 <__ieee754_exp>:
 800b6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ac:	ec55 4b10 	vmov	r4, r5, d0
 800b6b0:	49b5      	ldr	r1, [pc, #724]	; (800b988 <__ieee754_exp+0x2e0>)
 800b6b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b6b6:	428b      	cmp	r3, r1
 800b6b8:	ed2d 8b04 	vpush	{d8-d9}
 800b6bc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800b6c0:	d93d      	bls.n	800b73e <__ieee754_exp+0x96>
 800b6c2:	49b2      	ldr	r1, [pc, #712]	; (800b98c <__ieee754_exp+0x2e4>)
 800b6c4:	428b      	cmp	r3, r1
 800b6c6:	d918      	bls.n	800b6fa <__ieee754_exp+0x52>
 800b6c8:	ee10 3a10 	vmov	r3, s0
 800b6cc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	d009      	beq.n	800b6e8 <__ieee754_exp+0x40>
 800b6d4:	ee10 2a10 	vmov	r2, s0
 800b6d8:	462b      	mov	r3, r5
 800b6da:	4620      	mov	r0, r4
 800b6dc:	4629      	mov	r1, r5
 800b6de:	f7f4 fdd5 	bl	800028c <__adddf3>
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	460d      	mov	r5, r1
 800b6e6:	e002      	b.n	800b6ee <__ieee754_exp+0x46>
 800b6e8:	b10e      	cbz	r6, 800b6ee <__ieee754_exp+0x46>
 800b6ea:	2400      	movs	r4, #0
 800b6ec:	2500      	movs	r5, #0
 800b6ee:	ecbd 8b04 	vpop	{d8-d9}
 800b6f2:	ec45 4b10 	vmov	d0, r4, r5
 800b6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6fa:	a38d      	add	r3, pc, #564	; (adr r3, 800b930 <__ieee754_exp+0x288>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	ee10 0a10 	vmov	r0, s0
 800b704:	4629      	mov	r1, r5
 800b706:	f7f5 fa07 	bl	8000b18 <__aeabi_dcmpgt>
 800b70a:	4607      	mov	r7, r0
 800b70c:	b130      	cbz	r0, 800b71c <__ieee754_exp+0x74>
 800b70e:	ecbd 8b04 	vpop	{d8-d9}
 800b712:	2000      	movs	r0, #0
 800b714:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b718:	f000 bf51 	b.w	800c5be <__math_oflow>
 800b71c:	a386      	add	r3, pc, #536	; (adr r3, 800b938 <__ieee754_exp+0x290>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	4620      	mov	r0, r4
 800b724:	4629      	mov	r1, r5
 800b726:	f7f5 f9d9 	bl	8000adc <__aeabi_dcmplt>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	f000 808b 	beq.w	800b846 <__ieee754_exp+0x19e>
 800b730:	ecbd 8b04 	vpop	{d8-d9}
 800b734:	4638      	mov	r0, r7
 800b736:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b73a:	f000 bf37 	b.w	800c5ac <__math_uflow>
 800b73e:	4a94      	ldr	r2, [pc, #592]	; (800b990 <__ieee754_exp+0x2e8>)
 800b740:	4293      	cmp	r3, r2
 800b742:	f240 80ac 	bls.w	800b89e <__ieee754_exp+0x1f6>
 800b746:	4a93      	ldr	r2, [pc, #588]	; (800b994 <__ieee754_exp+0x2ec>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d87c      	bhi.n	800b846 <__ieee754_exp+0x19e>
 800b74c:	4b92      	ldr	r3, [pc, #584]	; (800b998 <__ieee754_exp+0x2f0>)
 800b74e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b756:	ee10 0a10 	vmov	r0, s0
 800b75a:	4629      	mov	r1, r5
 800b75c:	f7f4 fd94 	bl	8000288 <__aeabi_dsub>
 800b760:	4b8e      	ldr	r3, [pc, #568]	; (800b99c <__ieee754_exp+0x2f4>)
 800b762:	00f7      	lsls	r7, r6, #3
 800b764:	443b      	add	r3, r7
 800b766:	ed93 7b00 	vldr	d7, [r3]
 800b76a:	f1c6 0a01 	rsb	sl, r6, #1
 800b76e:	4680      	mov	r8, r0
 800b770:	4689      	mov	r9, r1
 800b772:	ebaa 0a06 	sub.w	sl, sl, r6
 800b776:	eeb0 8a47 	vmov.f32	s16, s14
 800b77a:	eef0 8a67 	vmov.f32	s17, s15
 800b77e:	ec53 2b18 	vmov	r2, r3, d8
 800b782:	4640      	mov	r0, r8
 800b784:	4649      	mov	r1, r9
 800b786:	f7f4 fd7f 	bl	8000288 <__aeabi_dsub>
 800b78a:	4604      	mov	r4, r0
 800b78c:	460d      	mov	r5, r1
 800b78e:	4622      	mov	r2, r4
 800b790:	462b      	mov	r3, r5
 800b792:	4620      	mov	r0, r4
 800b794:	4629      	mov	r1, r5
 800b796:	f7f4 ff2f 	bl	80005f8 <__aeabi_dmul>
 800b79a:	a369      	add	r3, pc, #420	; (adr r3, 800b940 <__ieee754_exp+0x298>)
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	460f      	mov	r7, r1
 800b7a4:	f7f4 ff28 	bl	80005f8 <__aeabi_dmul>
 800b7a8:	a367      	add	r3, pc, #412	; (adr r3, 800b948 <__ieee754_exp+0x2a0>)
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	f7f4 fd6b 	bl	8000288 <__aeabi_dsub>
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	f7f4 ff1f 	bl	80005f8 <__aeabi_dmul>
 800b7ba:	a365      	add	r3, pc, #404	; (adr r3, 800b950 <__ieee754_exp+0x2a8>)
 800b7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c0:	f7f4 fd64 	bl	800028c <__adddf3>
 800b7c4:	4632      	mov	r2, r6
 800b7c6:	463b      	mov	r3, r7
 800b7c8:	f7f4 ff16 	bl	80005f8 <__aeabi_dmul>
 800b7cc:	a362      	add	r3, pc, #392	; (adr r3, 800b958 <__ieee754_exp+0x2b0>)
 800b7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d2:	f7f4 fd59 	bl	8000288 <__aeabi_dsub>
 800b7d6:	4632      	mov	r2, r6
 800b7d8:	463b      	mov	r3, r7
 800b7da:	f7f4 ff0d 	bl	80005f8 <__aeabi_dmul>
 800b7de:	a360      	add	r3, pc, #384	; (adr r3, 800b960 <__ieee754_exp+0x2b8>)
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	f7f4 fd52 	bl	800028c <__adddf3>
 800b7e8:	4632      	mov	r2, r6
 800b7ea:	463b      	mov	r3, r7
 800b7ec:	f7f4 ff04 	bl	80005f8 <__aeabi_dmul>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	f7f4 fd46 	bl	8000288 <__aeabi_dsub>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4606      	mov	r6, r0
 800b802:	460f      	mov	r7, r1
 800b804:	4620      	mov	r0, r4
 800b806:	4629      	mov	r1, r5
 800b808:	f7f4 fef6 	bl	80005f8 <__aeabi_dmul>
 800b80c:	ec41 0b19 	vmov	d9, r0, r1
 800b810:	f1ba 0f00 	cmp.w	sl, #0
 800b814:	d15d      	bne.n	800b8d2 <__ieee754_exp+0x22a>
 800b816:	2200      	movs	r2, #0
 800b818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b81c:	4630      	mov	r0, r6
 800b81e:	4639      	mov	r1, r7
 800b820:	f7f4 fd32 	bl	8000288 <__aeabi_dsub>
 800b824:	4602      	mov	r2, r0
 800b826:	460b      	mov	r3, r1
 800b828:	ec51 0b19 	vmov	r0, r1, d9
 800b82c:	f7f5 f80e 	bl	800084c <__aeabi_ddiv>
 800b830:	4622      	mov	r2, r4
 800b832:	462b      	mov	r3, r5
 800b834:	f7f4 fd28 	bl	8000288 <__aeabi_dsub>
 800b838:	4602      	mov	r2, r0
 800b83a:	460b      	mov	r3, r1
 800b83c:	2000      	movs	r0, #0
 800b83e:	4958      	ldr	r1, [pc, #352]	; (800b9a0 <__ieee754_exp+0x2f8>)
 800b840:	f7f4 fd22 	bl	8000288 <__aeabi_dsub>
 800b844:	e74d      	b.n	800b6e2 <__ieee754_exp+0x3a>
 800b846:	4857      	ldr	r0, [pc, #348]	; (800b9a4 <__ieee754_exp+0x2fc>)
 800b848:	a347      	add	r3, pc, #284	; (adr r3, 800b968 <__ieee754_exp+0x2c0>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b852:	4629      	mov	r1, r5
 800b854:	4620      	mov	r0, r4
 800b856:	f7f4 fecf 	bl	80005f8 <__aeabi_dmul>
 800b85a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b85e:	f7f4 fd15 	bl	800028c <__adddf3>
 800b862:	f7f5 f979 	bl	8000b58 <__aeabi_d2iz>
 800b866:	4682      	mov	sl, r0
 800b868:	f7f4 fe5c 	bl	8000524 <__aeabi_i2d>
 800b86c:	a340      	add	r3, pc, #256	; (adr r3, 800b970 <__ieee754_exp+0x2c8>)
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	4606      	mov	r6, r0
 800b874:	460f      	mov	r7, r1
 800b876:	f7f4 febf 	bl	80005f8 <__aeabi_dmul>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	4620      	mov	r0, r4
 800b880:	4629      	mov	r1, r5
 800b882:	f7f4 fd01 	bl	8000288 <__aeabi_dsub>
 800b886:	a33c      	add	r3, pc, #240	; (adr r3, 800b978 <__ieee754_exp+0x2d0>)
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	4680      	mov	r8, r0
 800b88e:	4689      	mov	r9, r1
 800b890:	4630      	mov	r0, r6
 800b892:	4639      	mov	r1, r7
 800b894:	f7f4 feb0 	bl	80005f8 <__aeabi_dmul>
 800b898:	ec41 0b18 	vmov	d8, r0, r1
 800b89c:	e76f      	b.n	800b77e <__ieee754_exp+0xd6>
 800b89e:	4a42      	ldr	r2, [pc, #264]	; (800b9a8 <__ieee754_exp+0x300>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d811      	bhi.n	800b8c8 <__ieee754_exp+0x220>
 800b8a4:	a336      	add	r3, pc, #216	; (adr r3, 800b980 <__ieee754_exp+0x2d8>)
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	ee10 0a10 	vmov	r0, s0
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	f7f4 fcec 	bl	800028c <__adddf3>
 800b8b4:	4b3a      	ldr	r3, [pc, #232]	; (800b9a0 <__ieee754_exp+0x2f8>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f7f5 f92e 	bl	8000b18 <__aeabi_dcmpgt>
 800b8bc:	b138      	cbz	r0, 800b8ce <__ieee754_exp+0x226>
 800b8be:	4b38      	ldr	r3, [pc, #224]	; (800b9a0 <__ieee754_exp+0x2f8>)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	e70a      	b.n	800b6de <__ieee754_exp+0x36>
 800b8c8:	f04f 0a00 	mov.w	sl, #0
 800b8cc:	e75f      	b.n	800b78e <__ieee754_exp+0xe6>
 800b8ce:	4682      	mov	sl, r0
 800b8d0:	e75d      	b.n	800b78e <__ieee754_exp+0xe6>
 800b8d2:	4632      	mov	r2, r6
 800b8d4:	463b      	mov	r3, r7
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b8dc:	f7f4 fcd4 	bl	8000288 <__aeabi_dsub>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	ec51 0b19 	vmov	r0, r1, d9
 800b8e8:	f7f4 ffb0 	bl	800084c <__aeabi_ddiv>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	ec51 0b18 	vmov	r0, r1, d8
 800b8f4:	f7f4 fcc8 	bl	8000288 <__aeabi_dsub>
 800b8f8:	4642      	mov	r2, r8
 800b8fa:	464b      	mov	r3, r9
 800b8fc:	f7f4 fcc4 	bl	8000288 <__aeabi_dsub>
 800b900:	4602      	mov	r2, r0
 800b902:	460b      	mov	r3, r1
 800b904:	2000      	movs	r0, #0
 800b906:	4926      	ldr	r1, [pc, #152]	; (800b9a0 <__ieee754_exp+0x2f8>)
 800b908:	f7f4 fcbe 	bl	8000288 <__aeabi_dsub>
 800b90c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800b910:	4592      	cmp	sl, r2
 800b912:	db02      	blt.n	800b91a <__ieee754_exp+0x272>
 800b914:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b918:	e6e3      	b.n	800b6e2 <__ieee754_exp+0x3a>
 800b91a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800b91e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b922:	2200      	movs	r2, #0
 800b924:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800b928:	f7f4 fe66 	bl	80005f8 <__aeabi_dmul>
 800b92c:	e6d9      	b.n	800b6e2 <__ieee754_exp+0x3a>
 800b92e:	bf00      	nop
 800b930:	fefa39ef 	.word	0xfefa39ef
 800b934:	40862e42 	.word	0x40862e42
 800b938:	d52d3051 	.word	0xd52d3051
 800b93c:	c0874910 	.word	0xc0874910
 800b940:	72bea4d0 	.word	0x72bea4d0
 800b944:	3e663769 	.word	0x3e663769
 800b948:	c5d26bf1 	.word	0xc5d26bf1
 800b94c:	3ebbbd41 	.word	0x3ebbbd41
 800b950:	af25de2c 	.word	0xaf25de2c
 800b954:	3f11566a 	.word	0x3f11566a
 800b958:	16bebd93 	.word	0x16bebd93
 800b95c:	3f66c16c 	.word	0x3f66c16c
 800b960:	5555553e 	.word	0x5555553e
 800b964:	3fc55555 	.word	0x3fc55555
 800b968:	652b82fe 	.word	0x652b82fe
 800b96c:	3ff71547 	.word	0x3ff71547
 800b970:	fee00000 	.word	0xfee00000
 800b974:	3fe62e42 	.word	0x3fe62e42
 800b978:	35793c76 	.word	0x35793c76
 800b97c:	3dea39ef 	.word	0x3dea39ef
 800b980:	8800759c 	.word	0x8800759c
 800b984:	7e37e43c 	.word	0x7e37e43c
 800b988:	40862e41 	.word	0x40862e41
 800b98c:	7fefffff 	.word	0x7fefffff
 800b990:	3fd62e42 	.word	0x3fd62e42
 800b994:	3ff0a2b1 	.word	0x3ff0a2b1
 800b998:	0800d048 	.word	0x0800d048
 800b99c:	0800d058 	.word	0x0800d058
 800b9a0:	3ff00000 	.word	0x3ff00000
 800b9a4:	0800d038 	.word	0x0800d038
 800b9a8:	3defffff 	.word	0x3defffff
 800b9ac:	00000000 	.word	0x00000000

0800b9b0 <__ieee754_pow>:
 800b9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b4:	ed2d 8b06 	vpush	{d8-d10}
 800b9b8:	b089      	sub	sp, #36	; 0x24
 800b9ba:	ed8d 1b00 	vstr	d1, [sp]
 800b9be:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b9c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b9c6:	ea58 0102 	orrs.w	r1, r8, r2
 800b9ca:	ec57 6b10 	vmov	r6, r7, d0
 800b9ce:	d115      	bne.n	800b9fc <__ieee754_pow+0x4c>
 800b9d0:	19b3      	adds	r3, r6, r6
 800b9d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b9d6:	4152      	adcs	r2, r2
 800b9d8:	4299      	cmp	r1, r3
 800b9da:	4b89      	ldr	r3, [pc, #548]	; (800bc00 <__ieee754_pow+0x250>)
 800b9dc:	4193      	sbcs	r3, r2
 800b9de:	f080 84d2 	bcs.w	800c386 <__ieee754_pow+0x9d6>
 800b9e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	4639      	mov	r1, r7
 800b9ea:	f7f4 fc4f 	bl	800028c <__adddf3>
 800b9ee:	ec41 0b10 	vmov	d0, r0, r1
 800b9f2:	b009      	add	sp, #36	; 0x24
 800b9f4:	ecbd 8b06 	vpop	{d8-d10}
 800b9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9fc:	4b81      	ldr	r3, [pc, #516]	; (800bc04 <__ieee754_pow+0x254>)
 800b9fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ba02:	429c      	cmp	r4, r3
 800ba04:	ee10 aa10 	vmov	sl, s0
 800ba08:	463d      	mov	r5, r7
 800ba0a:	dc06      	bgt.n	800ba1a <__ieee754_pow+0x6a>
 800ba0c:	d101      	bne.n	800ba12 <__ieee754_pow+0x62>
 800ba0e:	2e00      	cmp	r6, #0
 800ba10:	d1e7      	bne.n	800b9e2 <__ieee754_pow+0x32>
 800ba12:	4598      	cmp	r8, r3
 800ba14:	dc01      	bgt.n	800ba1a <__ieee754_pow+0x6a>
 800ba16:	d10f      	bne.n	800ba38 <__ieee754_pow+0x88>
 800ba18:	b172      	cbz	r2, 800ba38 <__ieee754_pow+0x88>
 800ba1a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ba1e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ba22:	ea55 050a 	orrs.w	r5, r5, sl
 800ba26:	d1dc      	bne.n	800b9e2 <__ieee754_pow+0x32>
 800ba28:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba2c:	18db      	adds	r3, r3, r3
 800ba2e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ba32:	4152      	adcs	r2, r2
 800ba34:	429d      	cmp	r5, r3
 800ba36:	e7d0      	b.n	800b9da <__ieee754_pow+0x2a>
 800ba38:	2d00      	cmp	r5, #0
 800ba3a:	da3b      	bge.n	800bab4 <__ieee754_pow+0x104>
 800ba3c:	4b72      	ldr	r3, [pc, #456]	; (800bc08 <__ieee754_pow+0x258>)
 800ba3e:	4598      	cmp	r8, r3
 800ba40:	dc51      	bgt.n	800bae6 <__ieee754_pow+0x136>
 800ba42:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ba46:	4598      	cmp	r8, r3
 800ba48:	f340 84ac 	ble.w	800c3a4 <__ieee754_pow+0x9f4>
 800ba4c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ba50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ba54:	2b14      	cmp	r3, #20
 800ba56:	dd0f      	ble.n	800ba78 <__ieee754_pow+0xc8>
 800ba58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ba5c:	fa22 f103 	lsr.w	r1, r2, r3
 800ba60:	fa01 f303 	lsl.w	r3, r1, r3
 800ba64:	4293      	cmp	r3, r2
 800ba66:	f040 849d 	bne.w	800c3a4 <__ieee754_pow+0x9f4>
 800ba6a:	f001 0101 	and.w	r1, r1, #1
 800ba6e:	f1c1 0302 	rsb	r3, r1, #2
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	b182      	cbz	r2, 800ba98 <__ieee754_pow+0xe8>
 800ba76:	e05f      	b.n	800bb38 <__ieee754_pow+0x188>
 800ba78:	2a00      	cmp	r2, #0
 800ba7a:	d15b      	bne.n	800bb34 <__ieee754_pow+0x184>
 800ba7c:	f1c3 0314 	rsb	r3, r3, #20
 800ba80:	fa48 f103 	asr.w	r1, r8, r3
 800ba84:	fa01 f303 	lsl.w	r3, r1, r3
 800ba88:	4543      	cmp	r3, r8
 800ba8a:	f040 8488 	bne.w	800c39e <__ieee754_pow+0x9ee>
 800ba8e:	f001 0101 	and.w	r1, r1, #1
 800ba92:	f1c1 0302 	rsb	r3, r1, #2
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	4b5c      	ldr	r3, [pc, #368]	; (800bc0c <__ieee754_pow+0x25c>)
 800ba9a:	4598      	cmp	r8, r3
 800ba9c:	d132      	bne.n	800bb04 <__ieee754_pow+0x154>
 800ba9e:	f1b9 0f00 	cmp.w	r9, #0
 800baa2:	f280 8478 	bge.w	800c396 <__ieee754_pow+0x9e6>
 800baa6:	4959      	ldr	r1, [pc, #356]	; (800bc0c <__ieee754_pow+0x25c>)
 800baa8:	4632      	mov	r2, r6
 800baaa:	463b      	mov	r3, r7
 800baac:	2000      	movs	r0, #0
 800baae:	f7f4 fecd 	bl	800084c <__aeabi_ddiv>
 800bab2:	e79c      	b.n	800b9ee <__ieee754_pow+0x3e>
 800bab4:	2300      	movs	r3, #0
 800bab6:	9304      	str	r3, [sp, #16]
 800bab8:	2a00      	cmp	r2, #0
 800baba:	d13d      	bne.n	800bb38 <__ieee754_pow+0x188>
 800babc:	4b51      	ldr	r3, [pc, #324]	; (800bc04 <__ieee754_pow+0x254>)
 800babe:	4598      	cmp	r8, r3
 800bac0:	d1ea      	bne.n	800ba98 <__ieee754_pow+0xe8>
 800bac2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bac6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800baca:	ea53 030a 	orrs.w	r3, r3, sl
 800bace:	f000 845a 	beq.w	800c386 <__ieee754_pow+0x9d6>
 800bad2:	4b4f      	ldr	r3, [pc, #316]	; (800bc10 <__ieee754_pow+0x260>)
 800bad4:	429c      	cmp	r4, r3
 800bad6:	dd08      	ble.n	800baea <__ieee754_pow+0x13a>
 800bad8:	f1b9 0f00 	cmp.w	r9, #0
 800badc:	f2c0 8457 	blt.w	800c38e <__ieee754_pow+0x9de>
 800bae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bae4:	e783      	b.n	800b9ee <__ieee754_pow+0x3e>
 800bae6:	2302      	movs	r3, #2
 800bae8:	e7e5      	b.n	800bab6 <__ieee754_pow+0x106>
 800baea:	f1b9 0f00 	cmp.w	r9, #0
 800baee:	f04f 0000 	mov.w	r0, #0
 800baf2:	f04f 0100 	mov.w	r1, #0
 800baf6:	f6bf af7a 	bge.w	800b9ee <__ieee754_pow+0x3e>
 800bafa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bafe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bb02:	e774      	b.n	800b9ee <__ieee754_pow+0x3e>
 800bb04:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bb08:	d106      	bne.n	800bb18 <__ieee754_pow+0x168>
 800bb0a:	4632      	mov	r2, r6
 800bb0c:	463b      	mov	r3, r7
 800bb0e:	4630      	mov	r0, r6
 800bb10:	4639      	mov	r1, r7
 800bb12:	f7f4 fd71 	bl	80005f8 <__aeabi_dmul>
 800bb16:	e76a      	b.n	800b9ee <__ieee754_pow+0x3e>
 800bb18:	4b3e      	ldr	r3, [pc, #248]	; (800bc14 <__ieee754_pow+0x264>)
 800bb1a:	4599      	cmp	r9, r3
 800bb1c:	d10c      	bne.n	800bb38 <__ieee754_pow+0x188>
 800bb1e:	2d00      	cmp	r5, #0
 800bb20:	db0a      	blt.n	800bb38 <__ieee754_pow+0x188>
 800bb22:	ec47 6b10 	vmov	d0, r6, r7
 800bb26:	b009      	add	sp, #36	; 0x24
 800bb28:	ecbd 8b06 	vpop	{d8-d10}
 800bb2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb30:	f000 bc6c 	b.w	800c40c <__ieee754_sqrt>
 800bb34:	2300      	movs	r3, #0
 800bb36:	9304      	str	r3, [sp, #16]
 800bb38:	ec47 6b10 	vmov	d0, r6, r7
 800bb3c:	f000 fee8 	bl	800c910 <fabs>
 800bb40:	ec51 0b10 	vmov	r0, r1, d0
 800bb44:	f1ba 0f00 	cmp.w	sl, #0
 800bb48:	d129      	bne.n	800bb9e <__ieee754_pow+0x1ee>
 800bb4a:	b124      	cbz	r4, 800bb56 <__ieee754_pow+0x1a6>
 800bb4c:	4b2f      	ldr	r3, [pc, #188]	; (800bc0c <__ieee754_pow+0x25c>)
 800bb4e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d123      	bne.n	800bb9e <__ieee754_pow+0x1ee>
 800bb56:	f1b9 0f00 	cmp.w	r9, #0
 800bb5a:	da05      	bge.n	800bb68 <__ieee754_pow+0x1b8>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	2000      	movs	r0, #0
 800bb62:	492a      	ldr	r1, [pc, #168]	; (800bc0c <__ieee754_pow+0x25c>)
 800bb64:	f7f4 fe72 	bl	800084c <__aeabi_ddiv>
 800bb68:	2d00      	cmp	r5, #0
 800bb6a:	f6bf af40 	bge.w	800b9ee <__ieee754_pow+0x3e>
 800bb6e:	9b04      	ldr	r3, [sp, #16]
 800bb70:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bb74:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb78:	4323      	orrs	r3, r4
 800bb7a:	d108      	bne.n	800bb8e <__ieee754_pow+0x1de>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	4610      	mov	r0, r2
 800bb82:	4619      	mov	r1, r3
 800bb84:	f7f4 fb80 	bl	8000288 <__aeabi_dsub>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	e78f      	b.n	800baae <__ieee754_pow+0xfe>
 800bb8e:	9b04      	ldr	r3, [sp, #16]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	f47f af2c 	bne.w	800b9ee <__ieee754_pow+0x3e>
 800bb96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	e727      	b.n	800b9ee <__ieee754_pow+0x3e>
 800bb9e:	0feb      	lsrs	r3, r5, #31
 800bba0:	3b01      	subs	r3, #1
 800bba2:	9306      	str	r3, [sp, #24]
 800bba4:	9a06      	ldr	r2, [sp, #24]
 800bba6:	9b04      	ldr	r3, [sp, #16]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	d102      	bne.n	800bbb2 <__ieee754_pow+0x202>
 800bbac:	4632      	mov	r2, r6
 800bbae:	463b      	mov	r3, r7
 800bbb0:	e7e6      	b.n	800bb80 <__ieee754_pow+0x1d0>
 800bbb2:	4b19      	ldr	r3, [pc, #100]	; (800bc18 <__ieee754_pow+0x268>)
 800bbb4:	4598      	cmp	r8, r3
 800bbb6:	f340 80fb 	ble.w	800bdb0 <__ieee754_pow+0x400>
 800bbba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bbbe:	4598      	cmp	r8, r3
 800bbc0:	4b13      	ldr	r3, [pc, #76]	; (800bc10 <__ieee754_pow+0x260>)
 800bbc2:	dd0c      	ble.n	800bbde <__ieee754_pow+0x22e>
 800bbc4:	429c      	cmp	r4, r3
 800bbc6:	dc0f      	bgt.n	800bbe8 <__ieee754_pow+0x238>
 800bbc8:	f1b9 0f00 	cmp.w	r9, #0
 800bbcc:	da0f      	bge.n	800bbee <__ieee754_pow+0x23e>
 800bbce:	2000      	movs	r0, #0
 800bbd0:	b009      	add	sp, #36	; 0x24
 800bbd2:	ecbd 8b06 	vpop	{d8-d10}
 800bbd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbda:	f000 bcf0 	b.w	800c5be <__math_oflow>
 800bbde:	429c      	cmp	r4, r3
 800bbe0:	dbf2      	blt.n	800bbc8 <__ieee754_pow+0x218>
 800bbe2:	4b0a      	ldr	r3, [pc, #40]	; (800bc0c <__ieee754_pow+0x25c>)
 800bbe4:	429c      	cmp	r4, r3
 800bbe6:	dd19      	ble.n	800bc1c <__ieee754_pow+0x26c>
 800bbe8:	f1b9 0f00 	cmp.w	r9, #0
 800bbec:	dcef      	bgt.n	800bbce <__ieee754_pow+0x21e>
 800bbee:	2000      	movs	r0, #0
 800bbf0:	b009      	add	sp, #36	; 0x24
 800bbf2:	ecbd 8b06 	vpop	{d8-d10}
 800bbf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfa:	f000 bcd7 	b.w	800c5ac <__math_uflow>
 800bbfe:	bf00      	nop
 800bc00:	fff00000 	.word	0xfff00000
 800bc04:	7ff00000 	.word	0x7ff00000
 800bc08:	433fffff 	.word	0x433fffff
 800bc0c:	3ff00000 	.word	0x3ff00000
 800bc10:	3fefffff 	.word	0x3fefffff
 800bc14:	3fe00000 	.word	0x3fe00000
 800bc18:	41e00000 	.word	0x41e00000
 800bc1c:	4b60      	ldr	r3, [pc, #384]	; (800bda0 <__ieee754_pow+0x3f0>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f7f4 fb32 	bl	8000288 <__aeabi_dsub>
 800bc24:	a354      	add	r3, pc, #336	; (adr r3, 800bd78 <__ieee754_pow+0x3c8>)
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	460d      	mov	r5, r1
 800bc2e:	f7f4 fce3 	bl	80005f8 <__aeabi_dmul>
 800bc32:	a353      	add	r3, pc, #332	; (adr r3, 800bd80 <__ieee754_pow+0x3d0>)
 800bc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc38:	4606      	mov	r6, r0
 800bc3a:	460f      	mov	r7, r1
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f7f4 fcda 	bl	80005f8 <__aeabi_dmul>
 800bc44:	4b57      	ldr	r3, [pc, #348]	; (800bda4 <__ieee754_pow+0x3f4>)
 800bc46:	4682      	mov	sl, r0
 800bc48:	468b      	mov	fp, r1
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	4629      	mov	r1, r5
 800bc50:	f7f4 fcd2 	bl	80005f8 <__aeabi_dmul>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	a14b      	add	r1, pc, #300	; (adr r1, 800bd88 <__ieee754_pow+0x3d8>)
 800bc5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc5e:	f7f4 fb13 	bl	8000288 <__aeabi_dsub>
 800bc62:	4622      	mov	r2, r4
 800bc64:	462b      	mov	r3, r5
 800bc66:	f7f4 fcc7 	bl	80005f8 <__aeabi_dmul>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	2000      	movs	r0, #0
 800bc70:	494d      	ldr	r1, [pc, #308]	; (800bda8 <__ieee754_pow+0x3f8>)
 800bc72:	f7f4 fb09 	bl	8000288 <__aeabi_dsub>
 800bc76:	4622      	mov	r2, r4
 800bc78:	4680      	mov	r8, r0
 800bc7a:	4689      	mov	r9, r1
 800bc7c:	462b      	mov	r3, r5
 800bc7e:	4620      	mov	r0, r4
 800bc80:	4629      	mov	r1, r5
 800bc82:	f7f4 fcb9 	bl	80005f8 <__aeabi_dmul>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	4649      	mov	r1, r9
 800bc8e:	f7f4 fcb3 	bl	80005f8 <__aeabi_dmul>
 800bc92:	a33f      	add	r3, pc, #252	; (adr r3, 800bd90 <__ieee754_pow+0x3e0>)
 800bc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc98:	f7f4 fcae 	bl	80005f8 <__aeabi_dmul>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4650      	mov	r0, sl
 800bca2:	4659      	mov	r1, fp
 800bca4:	f7f4 faf0 	bl	8000288 <__aeabi_dsub>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4680      	mov	r8, r0
 800bcae:	4689      	mov	r9, r1
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	4639      	mov	r1, r7
 800bcb4:	f7f4 faea 	bl	800028c <__adddf3>
 800bcb8:	2000      	movs	r0, #0
 800bcba:	4632      	mov	r2, r6
 800bcbc:	463b      	mov	r3, r7
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	460d      	mov	r5, r1
 800bcc2:	f7f4 fae1 	bl	8000288 <__aeabi_dsub>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	460b      	mov	r3, r1
 800bcca:	4640      	mov	r0, r8
 800bccc:	4649      	mov	r1, r9
 800bcce:	f7f4 fadb 	bl	8000288 <__aeabi_dsub>
 800bcd2:	9b04      	ldr	r3, [sp, #16]
 800bcd4:	9a06      	ldr	r2, [sp, #24]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	4682      	mov	sl, r0
 800bcdc:	468b      	mov	fp, r1
 800bcde:	f040 81e7 	bne.w	800c0b0 <__ieee754_pow+0x700>
 800bce2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bd98 <__ieee754_pow+0x3e8>
 800bce6:	eeb0 8a47 	vmov.f32	s16, s14
 800bcea:	eef0 8a67 	vmov.f32	s17, s15
 800bcee:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bcf2:	2600      	movs	r6, #0
 800bcf4:	4632      	mov	r2, r6
 800bcf6:	463b      	mov	r3, r7
 800bcf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcfc:	f7f4 fac4 	bl	8000288 <__aeabi_dsub>
 800bd00:	4622      	mov	r2, r4
 800bd02:	462b      	mov	r3, r5
 800bd04:	f7f4 fc78 	bl	80005f8 <__aeabi_dmul>
 800bd08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd0c:	4680      	mov	r8, r0
 800bd0e:	4689      	mov	r9, r1
 800bd10:	4650      	mov	r0, sl
 800bd12:	4659      	mov	r1, fp
 800bd14:	f7f4 fc70 	bl	80005f8 <__aeabi_dmul>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	4640      	mov	r0, r8
 800bd1e:	4649      	mov	r1, r9
 800bd20:	f7f4 fab4 	bl	800028c <__adddf3>
 800bd24:	4632      	mov	r2, r6
 800bd26:	463b      	mov	r3, r7
 800bd28:	4680      	mov	r8, r0
 800bd2a:	4689      	mov	r9, r1
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	4629      	mov	r1, r5
 800bd30:	f7f4 fc62 	bl	80005f8 <__aeabi_dmul>
 800bd34:	460b      	mov	r3, r1
 800bd36:	4604      	mov	r4, r0
 800bd38:	460d      	mov	r5, r1
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	4649      	mov	r1, r9
 800bd3e:	4640      	mov	r0, r8
 800bd40:	f7f4 faa4 	bl	800028c <__adddf3>
 800bd44:	4b19      	ldr	r3, [pc, #100]	; (800bdac <__ieee754_pow+0x3fc>)
 800bd46:	4299      	cmp	r1, r3
 800bd48:	ec45 4b19 	vmov	d9, r4, r5
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	460f      	mov	r7, r1
 800bd50:	468b      	mov	fp, r1
 800bd52:	f340 82f1 	ble.w	800c338 <__ieee754_pow+0x988>
 800bd56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bd5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bd5e:	4303      	orrs	r3, r0
 800bd60:	f000 81e4 	beq.w	800c12c <__ieee754_pow+0x77c>
 800bd64:	ec51 0b18 	vmov	r0, r1, d8
 800bd68:	2200      	movs	r2, #0
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f7f4 feb6 	bl	8000adc <__aeabi_dcmplt>
 800bd70:	3800      	subs	r0, #0
 800bd72:	bf18      	it	ne
 800bd74:	2001      	movne	r0, #1
 800bd76:	e72b      	b.n	800bbd0 <__ieee754_pow+0x220>
 800bd78:	60000000 	.word	0x60000000
 800bd7c:	3ff71547 	.word	0x3ff71547
 800bd80:	f85ddf44 	.word	0xf85ddf44
 800bd84:	3e54ae0b 	.word	0x3e54ae0b
 800bd88:	55555555 	.word	0x55555555
 800bd8c:	3fd55555 	.word	0x3fd55555
 800bd90:	652b82fe 	.word	0x652b82fe
 800bd94:	3ff71547 	.word	0x3ff71547
 800bd98:	00000000 	.word	0x00000000
 800bd9c:	bff00000 	.word	0xbff00000
 800bda0:	3ff00000 	.word	0x3ff00000
 800bda4:	3fd00000 	.word	0x3fd00000
 800bda8:	3fe00000 	.word	0x3fe00000
 800bdac:	408fffff 	.word	0x408fffff
 800bdb0:	4bd5      	ldr	r3, [pc, #852]	; (800c108 <__ieee754_pow+0x758>)
 800bdb2:	402b      	ands	r3, r5
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	b92b      	cbnz	r3, 800bdc4 <__ieee754_pow+0x414>
 800bdb8:	4bd4      	ldr	r3, [pc, #848]	; (800c10c <__ieee754_pow+0x75c>)
 800bdba:	f7f4 fc1d 	bl	80005f8 <__aeabi_dmul>
 800bdbe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	1523      	asrs	r3, r4, #20
 800bdc6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bdca:	4413      	add	r3, r2
 800bdcc:	9305      	str	r3, [sp, #20]
 800bdce:	4bd0      	ldr	r3, [pc, #832]	; (800c110 <__ieee754_pow+0x760>)
 800bdd0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bdd4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bdd8:	429c      	cmp	r4, r3
 800bdda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bdde:	dd08      	ble.n	800bdf2 <__ieee754_pow+0x442>
 800bde0:	4bcc      	ldr	r3, [pc, #816]	; (800c114 <__ieee754_pow+0x764>)
 800bde2:	429c      	cmp	r4, r3
 800bde4:	f340 8162 	ble.w	800c0ac <__ieee754_pow+0x6fc>
 800bde8:	9b05      	ldr	r3, [sp, #20]
 800bdea:	3301      	adds	r3, #1
 800bdec:	9305      	str	r3, [sp, #20]
 800bdee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bdf2:	2400      	movs	r4, #0
 800bdf4:	00e3      	lsls	r3, r4, #3
 800bdf6:	9307      	str	r3, [sp, #28]
 800bdf8:	4bc7      	ldr	r3, [pc, #796]	; (800c118 <__ieee754_pow+0x768>)
 800bdfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdfe:	ed93 7b00 	vldr	d7, [r3]
 800be02:	4629      	mov	r1, r5
 800be04:	ec53 2b17 	vmov	r2, r3, d7
 800be08:	eeb0 9a47 	vmov.f32	s18, s14
 800be0c:	eef0 9a67 	vmov.f32	s19, s15
 800be10:	4682      	mov	sl, r0
 800be12:	f7f4 fa39 	bl	8000288 <__aeabi_dsub>
 800be16:	4652      	mov	r2, sl
 800be18:	4606      	mov	r6, r0
 800be1a:	460f      	mov	r7, r1
 800be1c:	462b      	mov	r3, r5
 800be1e:	ec51 0b19 	vmov	r0, r1, d9
 800be22:	f7f4 fa33 	bl	800028c <__adddf3>
 800be26:	4602      	mov	r2, r0
 800be28:	460b      	mov	r3, r1
 800be2a:	2000      	movs	r0, #0
 800be2c:	49bb      	ldr	r1, [pc, #748]	; (800c11c <__ieee754_pow+0x76c>)
 800be2e:	f7f4 fd0d 	bl	800084c <__aeabi_ddiv>
 800be32:	ec41 0b1a 	vmov	d10, r0, r1
 800be36:	4602      	mov	r2, r0
 800be38:	460b      	mov	r3, r1
 800be3a:	4630      	mov	r0, r6
 800be3c:	4639      	mov	r1, r7
 800be3e:	f7f4 fbdb 	bl	80005f8 <__aeabi_dmul>
 800be42:	2300      	movs	r3, #0
 800be44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be48:	9302      	str	r3, [sp, #8]
 800be4a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be4e:	46ab      	mov	fp, r5
 800be50:	106d      	asrs	r5, r5, #1
 800be52:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800be56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800be5a:	ec41 0b18 	vmov	d8, r0, r1
 800be5e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800be62:	2200      	movs	r2, #0
 800be64:	4640      	mov	r0, r8
 800be66:	4649      	mov	r1, r9
 800be68:	4614      	mov	r4, r2
 800be6a:	461d      	mov	r5, r3
 800be6c:	f7f4 fbc4 	bl	80005f8 <__aeabi_dmul>
 800be70:	4602      	mov	r2, r0
 800be72:	460b      	mov	r3, r1
 800be74:	4630      	mov	r0, r6
 800be76:	4639      	mov	r1, r7
 800be78:	f7f4 fa06 	bl	8000288 <__aeabi_dsub>
 800be7c:	ec53 2b19 	vmov	r2, r3, d9
 800be80:	4606      	mov	r6, r0
 800be82:	460f      	mov	r7, r1
 800be84:	4620      	mov	r0, r4
 800be86:	4629      	mov	r1, r5
 800be88:	f7f4 f9fe 	bl	8000288 <__aeabi_dsub>
 800be8c:	4602      	mov	r2, r0
 800be8e:	460b      	mov	r3, r1
 800be90:	4650      	mov	r0, sl
 800be92:	4659      	mov	r1, fp
 800be94:	f7f4 f9f8 	bl	8000288 <__aeabi_dsub>
 800be98:	4642      	mov	r2, r8
 800be9a:	464b      	mov	r3, r9
 800be9c:	f7f4 fbac 	bl	80005f8 <__aeabi_dmul>
 800bea0:	4602      	mov	r2, r0
 800bea2:	460b      	mov	r3, r1
 800bea4:	4630      	mov	r0, r6
 800bea6:	4639      	mov	r1, r7
 800bea8:	f7f4 f9ee 	bl	8000288 <__aeabi_dsub>
 800beac:	ec53 2b1a 	vmov	r2, r3, d10
 800beb0:	f7f4 fba2 	bl	80005f8 <__aeabi_dmul>
 800beb4:	ec53 2b18 	vmov	r2, r3, d8
 800beb8:	ec41 0b19 	vmov	d9, r0, r1
 800bebc:	ec51 0b18 	vmov	r0, r1, d8
 800bec0:	f7f4 fb9a 	bl	80005f8 <__aeabi_dmul>
 800bec4:	a37c      	add	r3, pc, #496	; (adr r3, 800c0b8 <__ieee754_pow+0x708>)
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	4604      	mov	r4, r0
 800becc:	460d      	mov	r5, r1
 800bece:	f7f4 fb93 	bl	80005f8 <__aeabi_dmul>
 800bed2:	a37b      	add	r3, pc, #492	; (adr r3, 800c0c0 <__ieee754_pow+0x710>)
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	f7f4 f9d8 	bl	800028c <__adddf3>
 800bedc:	4622      	mov	r2, r4
 800bede:	462b      	mov	r3, r5
 800bee0:	f7f4 fb8a 	bl	80005f8 <__aeabi_dmul>
 800bee4:	a378      	add	r3, pc, #480	; (adr r3, 800c0c8 <__ieee754_pow+0x718>)
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	f7f4 f9cf 	bl	800028c <__adddf3>
 800beee:	4622      	mov	r2, r4
 800bef0:	462b      	mov	r3, r5
 800bef2:	f7f4 fb81 	bl	80005f8 <__aeabi_dmul>
 800bef6:	a376      	add	r3, pc, #472	; (adr r3, 800c0d0 <__ieee754_pow+0x720>)
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	f7f4 f9c6 	bl	800028c <__adddf3>
 800bf00:	4622      	mov	r2, r4
 800bf02:	462b      	mov	r3, r5
 800bf04:	f7f4 fb78 	bl	80005f8 <__aeabi_dmul>
 800bf08:	a373      	add	r3, pc, #460	; (adr r3, 800c0d8 <__ieee754_pow+0x728>)
 800bf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0e:	f7f4 f9bd 	bl	800028c <__adddf3>
 800bf12:	4622      	mov	r2, r4
 800bf14:	462b      	mov	r3, r5
 800bf16:	f7f4 fb6f 	bl	80005f8 <__aeabi_dmul>
 800bf1a:	a371      	add	r3, pc, #452	; (adr r3, 800c0e0 <__ieee754_pow+0x730>)
 800bf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf20:	f7f4 f9b4 	bl	800028c <__adddf3>
 800bf24:	4622      	mov	r2, r4
 800bf26:	4606      	mov	r6, r0
 800bf28:	460f      	mov	r7, r1
 800bf2a:	462b      	mov	r3, r5
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	4629      	mov	r1, r5
 800bf30:	f7f4 fb62 	bl	80005f8 <__aeabi_dmul>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4630      	mov	r0, r6
 800bf3a:	4639      	mov	r1, r7
 800bf3c:	f7f4 fb5c 	bl	80005f8 <__aeabi_dmul>
 800bf40:	4642      	mov	r2, r8
 800bf42:	4604      	mov	r4, r0
 800bf44:	460d      	mov	r5, r1
 800bf46:	464b      	mov	r3, r9
 800bf48:	ec51 0b18 	vmov	r0, r1, d8
 800bf4c:	f7f4 f99e 	bl	800028c <__adddf3>
 800bf50:	ec53 2b19 	vmov	r2, r3, d9
 800bf54:	f7f4 fb50 	bl	80005f8 <__aeabi_dmul>
 800bf58:	4622      	mov	r2, r4
 800bf5a:	462b      	mov	r3, r5
 800bf5c:	f7f4 f996 	bl	800028c <__adddf3>
 800bf60:	4642      	mov	r2, r8
 800bf62:	4682      	mov	sl, r0
 800bf64:	468b      	mov	fp, r1
 800bf66:	464b      	mov	r3, r9
 800bf68:	4640      	mov	r0, r8
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	f7f4 fb44 	bl	80005f8 <__aeabi_dmul>
 800bf70:	4b6b      	ldr	r3, [pc, #428]	; (800c120 <__ieee754_pow+0x770>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	4606      	mov	r6, r0
 800bf76:	460f      	mov	r7, r1
 800bf78:	f7f4 f988 	bl	800028c <__adddf3>
 800bf7c:	4652      	mov	r2, sl
 800bf7e:	465b      	mov	r3, fp
 800bf80:	f7f4 f984 	bl	800028c <__adddf3>
 800bf84:	2000      	movs	r0, #0
 800bf86:	4604      	mov	r4, r0
 800bf88:	460d      	mov	r5, r1
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	4640      	mov	r0, r8
 800bf90:	4649      	mov	r1, r9
 800bf92:	f7f4 fb31 	bl	80005f8 <__aeabi_dmul>
 800bf96:	4b62      	ldr	r3, [pc, #392]	; (800c120 <__ieee754_pow+0x770>)
 800bf98:	4680      	mov	r8, r0
 800bf9a:	4689      	mov	r9, r1
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	f7f4 f971 	bl	8000288 <__aeabi_dsub>
 800bfa6:	4632      	mov	r2, r6
 800bfa8:	463b      	mov	r3, r7
 800bfaa:	f7f4 f96d 	bl	8000288 <__aeabi_dsub>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4650      	mov	r0, sl
 800bfb4:	4659      	mov	r1, fp
 800bfb6:	f7f4 f967 	bl	8000288 <__aeabi_dsub>
 800bfba:	ec53 2b18 	vmov	r2, r3, d8
 800bfbe:	f7f4 fb1b 	bl	80005f8 <__aeabi_dmul>
 800bfc2:	4622      	mov	r2, r4
 800bfc4:	4606      	mov	r6, r0
 800bfc6:	460f      	mov	r7, r1
 800bfc8:	462b      	mov	r3, r5
 800bfca:	ec51 0b19 	vmov	r0, r1, d9
 800bfce:	f7f4 fb13 	bl	80005f8 <__aeabi_dmul>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	4639      	mov	r1, r7
 800bfda:	f7f4 f957 	bl	800028c <__adddf3>
 800bfde:	4606      	mov	r6, r0
 800bfe0:	460f      	mov	r7, r1
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	4649      	mov	r1, r9
 800bfea:	f7f4 f94f 	bl	800028c <__adddf3>
 800bfee:	a33e      	add	r3, pc, #248	; (adr r3, 800c0e8 <__ieee754_pow+0x738>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	2000      	movs	r0, #0
 800bff6:	4604      	mov	r4, r0
 800bff8:	460d      	mov	r5, r1
 800bffa:	f7f4 fafd 	bl	80005f8 <__aeabi_dmul>
 800bffe:	4642      	mov	r2, r8
 800c000:	ec41 0b18 	vmov	d8, r0, r1
 800c004:	464b      	mov	r3, r9
 800c006:	4620      	mov	r0, r4
 800c008:	4629      	mov	r1, r5
 800c00a:	f7f4 f93d 	bl	8000288 <__aeabi_dsub>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	4630      	mov	r0, r6
 800c014:	4639      	mov	r1, r7
 800c016:	f7f4 f937 	bl	8000288 <__aeabi_dsub>
 800c01a:	a335      	add	r3, pc, #212	; (adr r3, 800c0f0 <__ieee754_pow+0x740>)
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f7f4 faea 	bl	80005f8 <__aeabi_dmul>
 800c024:	a334      	add	r3, pc, #208	; (adr r3, 800c0f8 <__ieee754_pow+0x748>)
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	4606      	mov	r6, r0
 800c02c:	460f      	mov	r7, r1
 800c02e:	4620      	mov	r0, r4
 800c030:	4629      	mov	r1, r5
 800c032:	f7f4 fae1 	bl	80005f8 <__aeabi_dmul>
 800c036:	4602      	mov	r2, r0
 800c038:	460b      	mov	r3, r1
 800c03a:	4630      	mov	r0, r6
 800c03c:	4639      	mov	r1, r7
 800c03e:	f7f4 f925 	bl	800028c <__adddf3>
 800c042:	9a07      	ldr	r2, [sp, #28]
 800c044:	4b37      	ldr	r3, [pc, #220]	; (800c124 <__ieee754_pow+0x774>)
 800c046:	4413      	add	r3, r2
 800c048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04c:	f7f4 f91e 	bl	800028c <__adddf3>
 800c050:	4682      	mov	sl, r0
 800c052:	9805      	ldr	r0, [sp, #20]
 800c054:	468b      	mov	fp, r1
 800c056:	f7f4 fa65 	bl	8000524 <__aeabi_i2d>
 800c05a:	9a07      	ldr	r2, [sp, #28]
 800c05c:	4b32      	ldr	r3, [pc, #200]	; (800c128 <__ieee754_pow+0x778>)
 800c05e:	4413      	add	r3, r2
 800c060:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c064:	4606      	mov	r6, r0
 800c066:	460f      	mov	r7, r1
 800c068:	4652      	mov	r2, sl
 800c06a:	465b      	mov	r3, fp
 800c06c:	ec51 0b18 	vmov	r0, r1, d8
 800c070:	f7f4 f90c 	bl	800028c <__adddf3>
 800c074:	4642      	mov	r2, r8
 800c076:	464b      	mov	r3, r9
 800c078:	f7f4 f908 	bl	800028c <__adddf3>
 800c07c:	4632      	mov	r2, r6
 800c07e:	463b      	mov	r3, r7
 800c080:	f7f4 f904 	bl	800028c <__adddf3>
 800c084:	2000      	movs	r0, #0
 800c086:	4632      	mov	r2, r6
 800c088:	463b      	mov	r3, r7
 800c08a:	4604      	mov	r4, r0
 800c08c:	460d      	mov	r5, r1
 800c08e:	f7f4 f8fb 	bl	8000288 <__aeabi_dsub>
 800c092:	4642      	mov	r2, r8
 800c094:	464b      	mov	r3, r9
 800c096:	f7f4 f8f7 	bl	8000288 <__aeabi_dsub>
 800c09a:	ec53 2b18 	vmov	r2, r3, d8
 800c09e:	f7f4 f8f3 	bl	8000288 <__aeabi_dsub>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4650      	mov	r0, sl
 800c0a8:	4659      	mov	r1, fp
 800c0aa:	e610      	b.n	800bcce <__ieee754_pow+0x31e>
 800c0ac:	2401      	movs	r4, #1
 800c0ae:	e6a1      	b.n	800bdf4 <__ieee754_pow+0x444>
 800c0b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c100 <__ieee754_pow+0x750>
 800c0b4:	e617      	b.n	800bce6 <__ieee754_pow+0x336>
 800c0b6:	bf00      	nop
 800c0b8:	4a454eef 	.word	0x4a454eef
 800c0bc:	3fca7e28 	.word	0x3fca7e28
 800c0c0:	93c9db65 	.word	0x93c9db65
 800c0c4:	3fcd864a 	.word	0x3fcd864a
 800c0c8:	a91d4101 	.word	0xa91d4101
 800c0cc:	3fd17460 	.word	0x3fd17460
 800c0d0:	518f264d 	.word	0x518f264d
 800c0d4:	3fd55555 	.word	0x3fd55555
 800c0d8:	db6fabff 	.word	0xdb6fabff
 800c0dc:	3fdb6db6 	.word	0x3fdb6db6
 800c0e0:	33333303 	.word	0x33333303
 800c0e4:	3fe33333 	.word	0x3fe33333
 800c0e8:	e0000000 	.word	0xe0000000
 800c0ec:	3feec709 	.word	0x3feec709
 800c0f0:	dc3a03fd 	.word	0xdc3a03fd
 800c0f4:	3feec709 	.word	0x3feec709
 800c0f8:	145b01f5 	.word	0x145b01f5
 800c0fc:	be3e2fe0 	.word	0xbe3e2fe0
 800c100:	00000000 	.word	0x00000000
 800c104:	3ff00000 	.word	0x3ff00000
 800c108:	7ff00000 	.word	0x7ff00000
 800c10c:	43400000 	.word	0x43400000
 800c110:	0003988e 	.word	0x0003988e
 800c114:	000bb679 	.word	0x000bb679
 800c118:	0800d068 	.word	0x0800d068
 800c11c:	3ff00000 	.word	0x3ff00000
 800c120:	40080000 	.word	0x40080000
 800c124:	0800d088 	.word	0x0800d088
 800c128:	0800d078 	.word	0x0800d078
 800c12c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c404 <__ieee754_pow+0xa54>)
 800c12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c132:	4640      	mov	r0, r8
 800c134:	4649      	mov	r1, r9
 800c136:	f7f4 f8a9 	bl	800028c <__adddf3>
 800c13a:	4622      	mov	r2, r4
 800c13c:	ec41 0b1a 	vmov	d10, r0, r1
 800c140:	462b      	mov	r3, r5
 800c142:	4630      	mov	r0, r6
 800c144:	4639      	mov	r1, r7
 800c146:	f7f4 f89f 	bl	8000288 <__aeabi_dsub>
 800c14a:	4602      	mov	r2, r0
 800c14c:	460b      	mov	r3, r1
 800c14e:	ec51 0b1a 	vmov	r0, r1, d10
 800c152:	f7f4 fce1 	bl	8000b18 <__aeabi_dcmpgt>
 800c156:	2800      	cmp	r0, #0
 800c158:	f47f ae04 	bne.w	800bd64 <__ieee754_pow+0x3b4>
 800c15c:	4aa4      	ldr	r2, [pc, #656]	; (800c3f0 <__ieee754_pow+0xa40>)
 800c15e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c162:	4293      	cmp	r3, r2
 800c164:	f340 8108 	ble.w	800c378 <__ieee754_pow+0x9c8>
 800c168:	151b      	asrs	r3, r3, #20
 800c16a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c16e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c172:	fa4a f303 	asr.w	r3, sl, r3
 800c176:	445b      	add	r3, fp
 800c178:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c17c:	4e9d      	ldr	r6, [pc, #628]	; (800c3f4 <__ieee754_pow+0xa44>)
 800c17e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c182:	4116      	asrs	r6, r2
 800c184:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c188:	2000      	movs	r0, #0
 800c18a:	ea23 0106 	bic.w	r1, r3, r6
 800c18e:	f1c2 0214 	rsb	r2, r2, #20
 800c192:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c196:	fa4a fa02 	asr.w	sl, sl, r2
 800c19a:	f1bb 0f00 	cmp.w	fp, #0
 800c19e:	4602      	mov	r2, r0
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	bfb8      	it	lt
 800c1a8:	f1ca 0a00 	rsblt	sl, sl, #0
 800c1ac:	f7f4 f86c 	bl	8000288 <__aeabi_dsub>
 800c1b0:	ec41 0b19 	vmov	d9, r0, r1
 800c1b4:	4642      	mov	r2, r8
 800c1b6:	464b      	mov	r3, r9
 800c1b8:	ec51 0b19 	vmov	r0, r1, d9
 800c1bc:	f7f4 f866 	bl	800028c <__adddf3>
 800c1c0:	a37b      	add	r3, pc, #492	; (adr r3, 800c3b0 <__ieee754_pow+0xa00>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	460d      	mov	r5, r1
 800c1cc:	f7f4 fa14 	bl	80005f8 <__aeabi_dmul>
 800c1d0:	ec53 2b19 	vmov	r2, r3, d9
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	460f      	mov	r7, r1
 800c1d8:	4620      	mov	r0, r4
 800c1da:	4629      	mov	r1, r5
 800c1dc:	f7f4 f854 	bl	8000288 <__aeabi_dsub>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	4640      	mov	r0, r8
 800c1e6:	4649      	mov	r1, r9
 800c1e8:	f7f4 f84e 	bl	8000288 <__aeabi_dsub>
 800c1ec:	a372      	add	r3, pc, #456	; (adr r3, 800c3b8 <__ieee754_pow+0xa08>)
 800c1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f2:	f7f4 fa01 	bl	80005f8 <__aeabi_dmul>
 800c1f6:	a372      	add	r3, pc, #456	; (adr r3, 800c3c0 <__ieee754_pow+0xa10>)
 800c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fc:	4680      	mov	r8, r0
 800c1fe:	4689      	mov	r9, r1
 800c200:	4620      	mov	r0, r4
 800c202:	4629      	mov	r1, r5
 800c204:	f7f4 f9f8 	bl	80005f8 <__aeabi_dmul>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	4640      	mov	r0, r8
 800c20e:	4649      	mov	r1, r9
 800c210:	f7f4 f83c 	bl	800028c <__adddf3>
 800c214:	4604      	mov	r4, r0
 800c216:	460d      	mov	r5, r1
 800c218:	4602      	mov	r2, r0
 800c21a:	460b      	mov	r3, r1
 800c21c:	4630      	mov	r0, r6
 800c21e:	4639      	mov	r1, r7
 800c220:	f7f4 f834 	bl	800028c <__adddf3>
 800c224:	4632      	mov	r2, r6
 800c226:	463b      	mov	r3, r7
 800c228:	4680      	mov	r8, r0
 800c22a:	4689      	mov	r9, r1
 800c22c:	f7f4 f82c 	bl	8000288 <__aeabi_dsub>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	4620      	mov	r0, r4
 800c236:	4629      	mov	r1, r5
 800c238:	f7f4 f826 	bl	8000288 <__aeabi_dsub>
 800c23c:	4642      	mov	r2, r8
 800c23e:	4606      	mov	r6, r0
 800c240:	460f      	mov	r7, r1
 800c242:	464b      	mov	r3, r9
 800c244:	4640      	mov	r0, r8
 800c246:	4649      	mov	r1, r9
 800c248:	f7f4 f9d6 	bl	80005f8 <__aeabi_dmul>
 800c24c:	a35e      	add	r3, pc, #376	; (adr r3, 800c3c8 <__ieee754_pow+0xa18>)
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	4604      	mov	r4, r0
 800c254:	460d      	mov	r5, r1
 800c256:	f7f4 f9cf 	bl	80005f8 <__aeabi_dmul>
 800c25a:	a35d      	add	r3, pc, #372	; (adr r3, 800c3d0 <__ieee754_pow+0xa20>)
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	f7f4 f812 	bl	8000288 <__aeabi_dsub>
 800c264:	4622      	mov	r2, r4
 800c266:	462b      	mov	r3, r5
 800c268:	f7f4 f9c6 	bl	80005f8 <__aeabi_dmul>
 800c26c:	a35a      	add	r3, pc, #360	; (adr r3, 800c3d8 <__ieee754_pow+0xa28>)
 800c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c272:	f7f4 f80b 	bl	800028c <__adddf3>
 800c276:	4622      	mov	r2, r4
 800c278:	462b      	mov	r3, r5
 800c27a:	f7f4 f9bd 	bl	80005f8 <__aeabi_dmul>
 800c27e:	a358      	add	r3, pc, #352	; (adr r3, 800c3e0 <__ieee754_pow+0xa30>)
 800c280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c284:	f7f4 f800 	bl	8000288 <__aeabi_dsub>
 800c288:	4622      	mov	r2, r4
 800c28a:	462b      	mov	r3, r5
 800c28c:	f7f4 f9b4 	bl	80005f8 <__aeabi_dmul>
 800c290:	a355      	add	r3, pc, #340	; (adr r3, 800c3e8 <__ieee754_pow+0xa38>)
 800c292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c296:	f7f3 fff9 	bl	800028c <__adddf3>
 800c29a:	4622      	mov	r2, r4
 800c29c:	462b      	mov	r3, r5
 800c29e:	f7f4 f9ab 	bl	80005f8 <__aeabi_dmul>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	4640      	mov	r0, r8
 800c2a8:	4649      	mov	r1, r9
 800c2aa:	f7f3 ffed 	bl	8000288 <__aeabi_dsub>
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	460d      	mov	r5, r1
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4640      	mov	r0, r8
 800c2b8:	4649      	mov	r1, r9
 800c2ba:	f7f4 f99d 	bl	80005f8 <__aeabi_dmul>
 800c2be:	2200      	movs	r2, #0
 800c2c0:	ec41 0b19 	vmov	d9, r0, r1
 800c2c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	f7f3 ffdc 	bl	8000288 <__aeabi_dsub>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	ec51 0b19 	vmov	r0, r1, d9
 800c2d8:	f7f4 fab8 	bl	800084c <__aeabi_ddiv>
 800c2dc:	4632      	mov	r2, r6
 800c2de:	4604      	mov	r4, r0
 800c2e0:	460d      	mov	r5, r1
 800c2e2:	463b      	mov	r3, r7
 800c2e4:	4640      	mov	r0, r8
 800c2e6:	4649      	mov	r1, r9
 800c2e8:	f7f4 f986 	bl	80005f8 <__aeabi_dmul>
 800c2ec:	4632      	mov	r2, r6
 800c2ee:	463b      	mov	r3, r7
 800c2f0:	f7f3 ffcc 	bl	800028c <__adddf3>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	f7f3 ffc4 	bl	8000288 <__aeabi_dsub>
 800c300:	4642      	mov	r2, r8
 800c302:	464b      	mov	r3, r9
 800c304:	f7f3 ffc0 	bl	8000288 <__aeabi_dsub>
 800c308:	460b      	mov	r3, r1
 800c30a:	4602      	mov	r2, r0
 800c30c:	493a      	ldr	r1, [pc, #232]	; (800c3f8 <__ieee754_pow+0xa48>)
 800c30e:	2000      	movs	r0, #0
 800c310:	f7f3 ffba 	bl	8000288 <__aeabi_dsub>
 800c314:	ec41 0b10 	vmov	d0, r0, r1
 800c318:	ee10 3a90 	vmov	r3, s1
 800c31c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c324:	da2b      	bge.n	800c37e <__ieee754_pow+0x9ce>
 800c326:	4650      	mov	r0, sl
 800c328:	f000 fb0e 	bl	800c948 <scalbn>
 800c32c:	ec51 0b10 	vmov	r0, r1, d0
 800c330:	ec53 2b18 	vmov	r2, r3, d8
 800c334:	f7ff bbed 	b.w	800bb12 <__ieee754_pow+0x162>
 800c338:	4b30      	ldr	r3, [pc, #192]	; (800c3fc <__ieee754_pow+0xa4c>)
 800c33a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c33e:	429e      	cmp	r6, r3
 800c340:	f77f af0c 	ble.w	800c15c <__ieee754_pow+0x7ac>
 800c344:	4b2e      	ldr	r3, [pc, #184]	; (800c400 <__ieee754_pow+0xa50>)
 800c346:	440b      	add	r3, r1
 800c348:	4303      	orrs	r3, r0
 800c34a:	d009      	beq.n	800c360 <__ieee754_pow+0x9b0>
 800c34c:	ec51 0b18 	vmov	r0, r1, d8
 800c350:	2200      	movs	r2, #0
 800c352:	2300      	movs	r3, #0
 800c354:	f7f4 fbc2 	bl	8000adc <__aeabi_dcmplt>
 800c358:	3800      	subs	r0, #0
 800c35a:	bf18      	it	ne
 800c35c:	2001      	movne	r0, #1
 800c35e:	e447      	b.n	800bbf0 <__ieee754_pow+0x240>
 800c360:	4622      	mov	r2, r4
 800c362:	462b      	mov	r3, r5
 800c364:	f7f3 ff90 	bl	8000288 <__aeabi_dsub>
 800c368:	4642      	mov	r2, r8
 800c36a:	464b      	mov	r3, r9
 800c36c:	f7f4 fbca 	bl	8000b04 <__aeabi_dcmpge>
 800c370:	2800      	cmp	r0, #0
 800c372:	f43f aef3 	beq.w	800c15c <__ieee754_pow+0x7ac>
 800c376:	e7e9      	b.n	800c34c <__ieee754_pow+0x99c>
 800c378:	f04f 0a00 	mov.w	sl, #0
 800c37c:	e71a      	b.n	800c1b4 <__ieee754_pow+0x804>
 800c37e:	ec51 0b10 	vmov	r0, r1, d0
 800c382:	4619      	mov	r1, r3
 800c384:	e7d4      	b.n	800c330 <__ieee754_pow+0x980>
 800c386:	491c      	ldr	r1, [pc, #112]	; (800c3f8 <__ieee754_pow+0xa48>)
 800c388:	2000      	movs	r0, #0
 800c38a:	f7ff bb30 	b.w	800b9ee <__ieee754_pow+0x3e>
 800c38e:	2000      	movs	r0, #0
 800c390:	2100      	movs	r1, #0
 800c392:	f7ff bb2c 	b.w	800b9ee <__ieee754_pow+0x3e>
 800c396:	4630      	mov	r0, r6
 800c398:	4639      	mov	r1, r7
 800c39a:	f7ff bb28 	b.w	800b9ee <__ieee754_pow+0x3e>
 800c39e:	9204      	str	r2, [sp, #16]
 800c3a0:	f7ff bb7a 	b.w	800ba98 <__ieee754_pow+0xe8>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	f7ff bb64 	b.w	800ba72 <__ieee754_pow+0xc2>
 800c3aa:	bf00      	nop
 800c3ac:	f3af 8000 	nop.w
 800c3b0:	00000000 	.word	0x00000000
 800c3b4:	3fe62e43 	.word	0x3fe62e43
 800c3b8:	fefa39ef 	.word	0xfefa39ef
 800c3bc:	3fe62e42 	.word	0x3fe62e42
 800c3c0:	0ca86c39 	.word	0x0ca86c39
 800c3c4:	be205c61 	.word	0xbe205c61
 800c3c8:	72bea4d0 	.word	0x72bea4d0
 800c3cc:	3e663769 	.word	0x3e663769
 800c3d0:	c5d26bf1 	.word	0xc5d26bf1
 800c3d4:	3ebbbd41 	.word	0x3ebbbd41
 800c3d8:	af25de2c 	.word	0xaf25de2c
 800c3dc:	3f11566a 	.word	0x3f11566a
 800c3e0:	16bebd93 	.word	0x16bebd93
 800c3e4:	3f66c16c 	.word	0x3f66c16c
 800c3e8:	5555553e 	.word	0x5555553e
 800c3ec:	3fc55555 	.word	0x3fc55555
 800c3f0:	3fe00000 	.word	0x3fe00000
 800c3f4:	000fffff 	.word	0x000fffff
 800c3f8:	3ff00000 	.word	0x3ff00000
 800c3fc:	4090cbff 	.word	0x4090cbff
 800c400:	3f6f3400 	.word	0x3f6f3400
 800c404:	652b82fe 	.word	0x652b82fe
 800c408:	3c971547 	.word	0x3c971547

0800c40c <__ieee754_sqrt>:
 800c40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c410:	ec55 4b10 	vmov	r4, r5, d0
 800c414:	4e55      	ldr	r6, [pc, #340]	; (800c56c <__ieee754_sqrt+0x160>)
 800c416:	43ae      	bics	r6, r5
 800c418:	ee10 0a10 	vmov	r0, s0
 800c41c:	ee10 3a10 	vmov	r3, s0
 800c420:	462a      	mov	r2, r5
 800c422:	4629      	mov	r1, r5
 800c424:	d110      	bne.n	800c448 <__ieee754_sqrt+0x3c>
 800c426:	ee10 2a10 	vmov	r2, s0
 800c42a:	462b      	mov	r3, r5
 800c42c:	f7f4 f8e4 	bl	80005f8 <__aeabi_dmul>
 800c430:	4602      	mov	r2, r0
 800c432:	460b      	mov	r3, r1
 800c434:	4620      	mov	r0, r4
 800c436:	4629      	mov	r1, r5
 800c438:	f7f3 ff28 	bl	800028c <__adddf3>
 800c43c:	4604      	mov	r4, r0
 800c43e:	460d      	mov	r5, r1
 800c440:	ec45 4b10 	vmov	d0, r4, r5
 800c444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c448:	2d00      	cmp	r5, #0
 800c44a:	dc10      	bgt.n	800c46e <__ieee754_sqrt+0x62>
 800c44c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c450:	4330      	orrs	r0, r6
 800c452:	d0f5      	beq.n	800c440 <__ieee754_sqrt+0x34>
 800c454:	b15d      	cbz	r5, 800c46e <__ieee754_sqrt+0x62>
 800c456:	ee10 2a10 	vmov	r2, s0
 800c45a:	462b      	mov	r3, r5
 800c45c:	ee10 0a10 	vmov	r0, s0
 800c460:	f7f3 ff12 	bl	8000288 <__aeabi_dsub>
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	f7f4 f9f0 	bl	800084c <__aeabi_ddiv>
 800c46c:	e7e6      	b.n	800c43c <__ieee754_sqrt+0x30>
 800c46e:	1512      	asrs	r2, r2, #20
 800c470:	d074      	beq.n	800c55c <__ieee754_sqrt+0x150>
 800c472:	07d4      	lsls	r4, r2, #31
 800c474:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c478:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c47c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c480:	bf5e      	ittt	pl
 800c482:	0fda      	lsrpl	r2, r3, #31
 800c484:	005b      	lslpl	r3, r3, #1
 800c486:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c48a:	2400      	movs	r4, #0
 800c48c:	0fda      	lsrs	r2, r3, #31
 800c48e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c492:	107f      	asrs	r7, r7, #1
 800c494:	005b      	lsls	r3, r3, #1
 800c496:	2516      	movs	r5, #22
 800c498:	4620      	mov	r0, r4
 800c49a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c49e:	1886      	adds	r6, r0, r2
 800c4a0:	428e      	cmp	r6, r1
 800c4a2:	bfde      	ittt	le
 800c4a4:	1b89      	suble	r1, r1, r6
 800c4a6:	18b0      	addle	r0, r6, r2
 800c4a8:	18a4      	addle	r4, r4, r2
 800c4aa:	0049      	lsls	r1, r1, #1
 800c4ac:	3d01      	subs	r5, #1
 800c4ae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c4b2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c4b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c4ba:	d1f0      	bne.n	800c49e <__ieee754_sqrt+0x92>
 800c4bc:	462a      	mov	r2, r5
 800c4be:	f04f 0e20 	mov.w	lr, #32
 800c4c2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c4c6:	4281      	cmp	r1, r0
 800c4c8:	eb06 0c05 	add.w	ip, r6, r5
 800c4cc:	dc02      	bgt.n	800c4d4 <__ieee754_sqrt+0xc8>
 800c4ce:	d113      	bne.n	800c4f8 <__ieee754_sqrt+0xec>
 800c4d0:	459c      	cmp	ip, r3
 800c4d2:	d811      	bhi.n	800c4f8 <__ieee754_sqrt+0xec>
 800c4d4:	f1bc 0f00 	cmp.w	ip, #0
 800c4d8:	eb0c 0506 	add.w	r5, ip, r6
 800c4dc:	da43      	bge.n	800c566 <__ieee754_sqrt+0x15a>
 800c4de:	2d00      	cmp	r5, #0
 800c4e0:	db41      	blt.n	800c566 <__ieee754_sqrt+0x15a>
 800c4e2:	f100 0801 	add.w	r8, r0, #1
 800c4e6:	1a09      	subs	r1, r1, r0
 800c4e8:	459c      	cmp	ip, r3
 800c4ea:	bf88      	it	hi
 800c4ec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c4f0:	eba3 030c 	sub.w	r3, r3, ip
 800c4f4:	4432      	add	r2, r6
 800c4f6:	4640      	mov	r0, r8
 800c4f8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c4fc:	f1be 0e01 	subs.w	lr, lr, #1
 800c500:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c504:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c508:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c50c:	d1db      	bne.n	800c4c6 <__ieee754_sqrt+0xba>
 800c50e:	430b      	orrs	r3, r1
 800c510:	d006      	beq.n	800c520 <__ieee754_sqrt+0x114>
 800c512:	1c50      	adds	r0, r2, #1
 800c514:	bf13      	iteet	ne
 800c516:	3201      	addne	r2, #1
 800c518:	3401      	addeq	r4, #1
 800c51a:	4672      	moveq	r2, lr
 800c51c:	f022 0201 	bicne.w	r2, r2, #1
 800c520:	1063      	asrs	r3, r4, #1
 800c522:	0852      	lsrs	r2, r2, #1
 800c524:	07e1      	lsls	r1, r4, #31
 800c526:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c52a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c52e:	bf48      	it	mi
 800c530:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c534:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c538:	4614      	mov	r4, r2
 800c53a:	e781      	b.n	800c440 <__ieee754_sqrt+0x34>
 800c53c:	0ad9      	lsrs	r1, r3, #11
 800c53e:	3815      	subs	r0, #21
 800c540:	055b      	lsls	r3, r3, #21
 800c542:	2900      	cmp	r1, #0
 800c544:	d0fa      	beq.n	800c53c <__ieee754_sqrt+0x130>
 800c546:	02cd      	lsls	r5, r1, #11
 800c548:	d50a      	bpl.n	800c560 <__ieee754_sqrt+0x154>
 800c54a:	f1c2 0420 	rsb	r4, r2, #32
 800c54e:	fa23 f404 	lsr.w	r4, r3, r4
 800c552:	1e55      	subs	r5, r2, #1
 800c554:	4093      	lsls	r3, r2
 800c556:	4321      	orrs	r1, r4
 800c558:	1b42      	subs	r2, r0, r5
 800c55a:	e78a      	b.n	800c472 <__ieee754_sqrt+0x66>
 800c55c:	4610      	mov	r0, r2
 800c55e:	e7f0      	b.n	800c542 <__ieee754_sqrt+0x136>
 800c560:	0049      	lsls	r1, r1, #1
 800c562:	3201      	adds	r2, #1
 800c564:	e7ef      	b.n	800c546 <__ieee754_sqrt+0x13a>
 800c566:	4680      	mov	r8, r0
 800c568:	e7bd      	b.n	800c4e6 <__ieee754_sqrt+0xda>
 800c56a:	bf00      	nop
 800c56c:	7ff00000 	.word	0x7ff00000

0800c570 <with_errno>:
 800c570:	b570      	push	{r4, r5, r6, lr}
 800c572:	4604      	mov	r4, r0
 800c574:	460d      	mov	r5, r1
 800c576:	4616      	mov	r6, r2
 800c578:	f7fd fffc 	bl	800a574 <__errno>
 800c57c:	4629      	mov	r1, r5
 800c57e:	6006      	str	r6, [r0, #0]
 800c580:	4620      	mov	r0, r4
 800c582:	bd70      	pop	{r4, r5, r6, pc}

0800c584 <xflow>:
 800c584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c586:	4614      	mov	r4, r2
 800c588:	461d      	mov	r5, r3
 800c58a:	b108      	cbz	r0, 800c590 <xflow+0xc>
 800c58c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c590:	e9cd 2300 	strd	r2, r3, [sp]
 800c594:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c598:	4620      	mov	r0, r4
 800c59a:	4629      	mov	r1, r5
 800c59c:	f7f4 f82c 	bl	80005f8 <__aeabi_dmul>
 800c5a0:	2222      	movs	r2, #34	; 0x22
 800c5a2:	b003      	add	sp, #12
 800c5a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5a8:	f7ff bfe2 	b.w	800c570 <with_errno>

0800c5ac <__math_uflow>:
 800c5ac:	b508      	push	{r3, lr}
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c5b4:	f7ff ffe6 	bl	800c584 <xflow>
 800c5b8:	ec41 0b10 	vmov	d0, r0, r1
 800c5bc:	bd08      	pop	{r3, pc}

0800c5be <__math_oflow>:
 800c5be:	b508      	push	{r3, lr}
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c5c6:	f7ff ffdd 	bl	800c584 <xflow>
 800c5ca:	ec41 0b10 	vmov	d0, r0, r1
 800c5ce:	bd08      	pop	{r3, pc}

0800c5d0 <atan>:
 800c5d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	ec55 4b10 	vmov	r4, r5, d0
 800c5d8:	4bc3      	ldr	r3, [pc, #780]	; (800c8e8 <atan+0x318>)
 800c5da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c5de:	429e      	cmp	r6, r3
 800c5e0:	46ab      	mov	fp, r5
 800c5e2:	dd18      	ble.n	800c616 <atan+0x46>
 800c5e4:	4bc1      	ldr	r3, [pc, #772]	; (800c8ec <atan+0x31c>)
 800c5e6:	429e      	cmp	r6, r3
 800c5e8:	dc01      	bgt.n	800c5ee <atan+0x1e>
 800c5ea:	d109      	bne.n	800c600 <atan+0x30>
 800c5ec:	b144      	cbz	r4, 800c600 <atan+0x30>
 800c5ee:	4622      	mov	r2, r4
 800c5f0:	462b      	mov	r3, r5
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	f7f3 fe49 	bl	800028c <__adddf3>
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	460d      	mov	r5, r1
 800c5fe:	e006      	b.n	800c60e <atan+0x3e>
 800c600:	f1bb 0f00 	cmp.w	fp, #0
 800c604:	f300 8131 	bgt.w	800c86a <atan+0x29a>
 800c608:	a59b      	add	r5, pc, #620	; (adr r5, 800c878 <atan+0x2a8>)
 800c60a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c60e:	ec45 4b10 	vmov	d0, r4, r5
 800c612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c616:	4bb6      	ldr	r3, [pc, #728]	; (800c8f0 <atan+0x320>)
 800c618:	429e      	cmp	r6, r3
 800c61a:	dc14      	bgt.n	800c646 <atan+0x76>
 800c61c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c620:	429e      	cmp	r6, r3
 800c622:	dc0d      	bgt.n	800c640 <atan+0x70>
 800c624:	a396      	add	r3, pc, #600	; (adr r3, 800c880 <atan+0x2b0>)
 800c626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62a:	ee10 0a10 	vmov	r0, s0
 800c62e:	4629      	mov	r1, r5
 800c630:	f7f3 fe2c 	bl	800028c <__adddf3>
 800c634:	4baf      	ldr	r3, [pc, #700]	; (800c8f4 <atan+0x324>)
 800c636:	2200      	movs	r2, #0
 800c638:	f7f4 fa6e 	bl	8000b18 <__aeabi_dcmpgt>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d1e6      	bne.n	800c60e <atan+0x3e>
 800c640:	f04f 3aff 	mov.w	sl, #4294967295
 800c644:	e02b      	b.n	800c69e <atan+0xce>
 800c646:	f000 f963 	bl	800c910 <fabs>
 800c64a:	4bab      	ldr	r3, [pc, #684]	; (800c8f8 <atan+0x328>)
 800c64c:	429e      	cmp	r6, r3
 800c64e:	ec55 4b10 	vmov	r4, r5, d0
 800c652:	f300 80bf 	bgt.w	800c7d4 <atan+0x204>
 800c656:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c65a:	429e      	cmp	r6, r3
 800c65c:	f300 80a0 	bgt.w	800c7a0 <atan+0x1d0>
 800c660:	ee10 2a10 	vmov	r2, s0
 800c664:	ee10 0a10 	vmov	r0, s0
 800c668:	462b      	mov	r3, r5
 800c66a:	4629      	mov	r1, r5
 800c66c:	f7f3 fe0e 	bl	800028c <__adddf3>
 800c670:	4ba0      	ldr	r3, [pc, #640]	; (800c8f4 <atan+0x324>)
 800c672:	2200      	movs	r2, #0
 800c674:	f7f3 fe08 	bl	8000288 <__aeabi_dsub>
 800c678:	2200      	movs	r2, #0
 800c67a:	4606      	mov	r6, r0
 800c67c:	460f      	mov	r7, r1
 800c67e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c682:	4620      	mov	r0, r4
 800c684:	4629      	mov	r1, r5
 800c686:	f7f3 fe01 	bl	800028c <__adddf3>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	4630      	mov	r0, r6
 800c690:	4639      	mov	r1, r7
 800c692:	f7f4 f8db 	bl	800084c <__aeabi_ddiv>
 800c696:	f04f 0a00 	mov.w	sl, #0
 800c69a:	4604      	mov	r4, r0
 800c69c:	460d      	mov	r5, r1
 800c69e:	4622      	mov	r2, r4
 800c6a0:	462b      	mov	r3, r5
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	f7f3 ffa7 	bl	80005f8 <__aeabi_dmul>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4680      	mov	r8, r0
 800c6b0:	4689      	mov	r9, r1
 800c6b2:	f7f3 ffa1 	bl	80005f8 <__aeabi_dmul>
 800c6b6:	a374      	add	r3, pc, #464	; (adr r3, 800c888 <atan+0x2b8>)
 800c6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6bc:	4606      	mov	r6, r0
 800c6be:	460f      	mov	r7, r1
 800c6c0:	f7f3 ff9a 	bl	80005f8 <__aeabi_dmul>
 800c6c4:	a372      	add	r3, pc, #456	; (adr r3, 800c890 <atan+0x2c0>)
 800c6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ca:	f7f3 fddf 	bl	800028c <__adddf3>
 800c6ce:	4632      	mov	r2, r6
 800c6d0:	463b      	mov	r3, r7
 800c6d2:	f7f3 ff91 	bl	80005f8 <__aeabi_dmul>
 800c6d6:	a370      	add	r3, pc, #448	; (adr r3, 800c898 <atan+0x2c8>)
 800c6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6dc:	f7f3 fdd6 	bl	800028c <__adddf3>
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	463b      	mov	r3, r7
 800c6e4:	f7f3 ff88 	bl	80005f8 <__aeabi_dmul>
 800c6e8:	a36d      	add	r3, pc, #436	; (adr r3, 800c8a0 <atan+0x2d0>)
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	f7f3 fdcd 	bl	800028c <__adddf3>
 800c6f2:	4632      	mov	r2, r6
 800c6f4:	463b      	mov	r3, r7
 800c6f6:	f7f3 ff7f 	bl	80005f8 <__aeabi_dmul>
 800c6fa:	a36b      	add	r3, pc, #428	; (adr r3, 800c8a8 <atan+0x2d8>)
 800c6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c700:	f7f3 fdc4 	bl	800028c <__adddf3>
 800c704:	4632      	mov	r2, r6
 800c706:	463b      	mov	r3, r7
 800c708:	f7f3 ff76 	bl	80005f8 <__aeabi_dmul>
 800c70c:	a368      	add	r3, pc, #416	; (adr r3, 800c8b0 <atan+0x2e0>)
 800c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c712:	f7f3 fdbb 	bl	800028c <__adddf3>
 800c716:	4642      	mov	r2, r8
 800c718:	464b      	mov	r3, r9
 800c71a:	f7f3 ff6d 	bl	80005f8 <__aeabi_dmul>
 800c71e:	a366      	add	r3, pc, #408	; (adr r3, 800c8b8 <atan+0x2e8>)
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	4680      	mov	r8, r0
 800c726:	4689      	mov	r9, r1
 800c728:	4630      	mov	r0, r6
 800c72a:	4639      	mov	r1, r7
 800c72c:	f7f3 ff64 	bl	80005f8 <__aeabi_dmul>
 800c730:	a363      	add	r3, pc, #396	; (adr r3, 800c8c0 <atan+0x2f0>)
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	f7f3 fda7 	bl	8000288 <__aeabi_dsub>
 800c73a:	4632      	mov	r2, r6
 800c73c:	463b      	mov	r3, r7
 800c73e:	f7f3 ff5b 	bl	80005f8 <__aeabi_dmul>
 800c742:	a361      	add	r3, pc, #388	; (adr r3, 800c8c8 <atan+0x2f8>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fd9e 	bl	8000288 <__aeabi_dsub>
 800c74c:	4632      	mov	r2, r6
 800c74e:	463b      	mov	r3, r7
 800c750:	f7f3 ff52 	bl	80005f8 <__aeabi_dmul>
 800c754:	a35e      	add	r3, pc, #376	; (adr r3, 800c8d0 <atan+0x300>)
 800c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75a:	f7f3 fd95 	bl	8000288 <__aeabi_dsub>
 800c75e:	4632      	mov	r2, r6
 800c760:	463b      	mov	r3, r7
 800c762:	f7f3 ff49 	bl	80005f8 <__aeabi_dmul>
 800c766:	a35c      	add	r3, pc, #368	; (adr r3, 800c8d8 <atan+0x308>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f3 fd8c 	bl	8000288 <__aeabi_dsub>
 800c770:	4632      	mov	r2, r6
 800c772:	463b      	mov	r3, r7
 800c774:	f7f3 ff40 	bl	80005f8 <__aeabi_dmul>
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	4640      	mov	r0, r8
 800c77e:	4649      	mov	r1, r9
 800c780:	f7f3 fd84 	bl	800028c <__adddf3>
 800c784:	4622      	mov	r2, r4
 800c786:	462b      	mov	r3, r5
 800c788:	f7f3 ff36 	bl	80005f8 <__aeabi_dmul>
 800c78c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c790:	4602      	mov	r2, r0
 800c792:	460b      	mov	r3, r1
 800c794:	d14b      	bne.n	800c82e <atan+0x25e>
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f3 fd75 	bl	8000288 <__aeabi_dsub>
 800c79e:	e72c      	b.n	800c5fa <atan+0x2a>
 800c7a0:	ee10 0a10 	vmov	r0, s0
 800c7a4:	4b53      	ldr	r3, [pc, #332]	; (800c8f4 <atan+0x324>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	f7f3 fd6d 	bl	8000288 <__aeabi_dsub>
 800c7ae:	4b51      	ldr	r3, [pc, #324]	; (800c8f4 <atan+0x324>)
 800c7b0:	4606      	mov	r6, r0
 800c7b2:	460f      	mov	r7, r1
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	4629      	mov	r1, r5
 800c7ba:	f7f3 fd67 	bl	800028c <__adddf3>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	f7f4 f841 	bl	800084c <__aeabi_ddiv>
 800c7ca:	f04f 0a01 	mov.w	sl, #1
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	460d      	mov	r5, r1
 800c7d2:	e764      	b.n	800c69e <atan+0xce>
 800c7d4:	4b49      	ldr	r3, [pc, #292]	; (800c8fc <atan+0x32c>)
 800c7d6:	429e      	cmp	r6, r3
 800c7d8:	da1d      	bge.n	800c816 <atan+0x246>
 800c7da:	ee10 0a10 	vmov	r0, s0
 800c7de:	4b48      	ldr	r3, [pc, #288]	; (800c900 <atan+0x330>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	f7f3 fd50 	bl	8000288 <__aeabi_dsub>
 800c7e8:	4b45      	ldr	r3, [pc, #276]	; (800c900 <atan+0x330>)
 800c7ea:	4606      	mov	r6, r0
 800c7ec:	460f      	mov	r7, r1
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	f7f3 ff00 	bl	80005f8 <__aeabi_dmul>
 800c7f8:	4b3e      	ldr	r3, [pc, #248]	; (800c8f4 <atan+0x324>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f7f3 fd46 	bl	800028c <__adddf3>
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	4630      	mov	r0, r6
 800c806:	4639      	mov	r1, r7
 800c808:	f7f4 f820 	bl	800084c <__aeabi_ddiv>
 800c80c:	f04f 0a02 	mov.w	sl, #2
 800c810:	4604      	mov	r4, r0
 800c812:	460d      	mov	r5, r1
 800c814:	e743      	b.n	800c69e <atan+0xce>
 800c816:	462b      	mov	r3, r5
 800c818:	ee10 2a10 	vmov	r2, s0
 800c81c:	4939      	ldr	r1, [pc, #228]	; (800c904 <atan+0x334>)
 800c81e:	2000      	movs	r0, #0
 800c820:	f7f4 f814 	bl	800084c <__aeabi_ddiv>
 800c824:	f04f 0a03 	mov.w	sl, #3
 800c828:	4604      	mov	r4, r0
 800c82a:	460d      	mov	r5, r1
 800c82c:	e737      	b.n	800c69e <atan+0xce>
 800c82e:	4b36      	ldr	r3, [pc, #216]	; (800c908 <atan+0x338>)
 800c830:	4e36      	ldr	r6, [pc, #216]	; (800c90c <atan+0x33c>)
 800c832:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c836:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c83a:	e9da 2300 	ldrd	r2, r3, [sl]
 800c83e:	f7f3 fd23 	bl	8000288 <__aeabi_dsub>
 800c842:	4622      	mov	r2, r4
 800c844:	462b      	mov	r3, r5
 800c846:	f7f3 fd1f 	bl	8000288 <__aeabi_dsub>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c852:	f7f3 fd19 	bl	8000288 <__aeabi_dsub>
 800c856:	f1bb 0f00 	cmp.w	fp, #0
 800c85a:	4604      	mov	r4, r0
 800c85c:	460d      	mov	r5, r1
 800c85e:	f6bf aed6 	bge.w	800c60e <atan+0x3e>
 800c862:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c866:	461d      	mov	r5, r3
 800c868:	e6d1      	b.n	800c60e <atan+0x3e>
 800c86a:	a51d      	add	r5, pc, #116	; (adr r5, 800c8e0 <atan+0x310>)
 800c86c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c870:	e6cd      	b.n	800c60e <atan+0x3e>
 800c872:	bf00      	nop
 800c874:	f3af 8000 	nop.w
 800c878:	54442d18 	.word	0x54442d18
 800c87c:	bff921fb 	.word	0xbff921fb
 800c880:	8800759c 	.word	0x8800759c
 800c884:	7e37e43c 	.word	0x7e37e43c
 800c888:	e322da11 	.word	0xe322da11
 800c88c:	3f90ad3a 	.word	0x3f90ad3a
 800c890:	24760deb 	.word	0x24760deb
 800c894:	3fa97b4b 	.word	0x3fa97b4b
 800c898:	a0d03d51 	.word	0xa0d03d51
 800c89c:	3fb10d66 	.word	0x3fb10d66
 800c8a0:	c54c206e 	.word	0xc54c206e
 800c8a4:	3fb745cd 	.word	0x3fb745cd
 800c8a8:	920083ff 	.word	0x920083ff
 800c8ac:	3fc24924 	.word	0x3fc24924
 800c8b0:	5555550d 	.word	0x5555550d
 800c8b4:	3fd55555 	.word	0x3fd55555
 800c8b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c8bc:	bfa2b444 	.word	0xbfa2b444
 800c8c0:	52defd9a 	.word	0x52defd9a
 800c8c4:	3fadde2d 	.word	0x3fadde2d
 800c8c8:	af749a6d 	.word	0xaf749a6d
 800c8cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800c8d0:	fe231671 	.word	0xfe231671
 800c8d4:	3fbc71c6 	.word	0x3fbc71c6
 800c8d8:	9998ebc4 	.word	0x9998ebc4
 800c8dc:	3fc99999 	.word	0x3fc99999
 800c8e0:	54442d18 	.word	0x54442d18
 800c8e4:	3ff921fb 	.word	0x3ff921fb
 800c8e8:	440fffff 	.word	0x440fffff
 800c8ec:	7ff00000 	.word	0x7ff00000
 800c8f0:	3fdbffff 	.word	0x3fdbffff
 800c8f4:	3ff00000 	.word	0x3ff00000
 800c8f8:	3ff2ffff 	.word	0x3ff2ffff
 800c8fc:	40038000 	.word	0x40038000
 800c900:	3ff80000 	.word	0x3ff80000
 800c904:	bff00000 	.word	0xbff00000
 800c908:	0800d0b8 	.word	0x0800d0b8
 800c90c:	0800d098 	.word	0x0800d098

0800c910 <fabs>:
 800c910:	ec51 0b10 	vmov	r0, r1, d0
 800c914:	ee10 2a10 	vmov	r2, s0
 800c918:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c91c:	ec43 2b10 	vmov	d0, r2, r3
 800c920:	4770      	bx	lr

0800c922 <finite>:
 800c922:	b082      	sub	sp, #8
 800c924:	ed8d 0b00 	vstr	d0, [sp]
 800c928:	9801      	ldr	r0, [sp, #4]
 800c92a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c92e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c932:	0fc0      	lsrs	r0, r0, #31
 800c934:	b002      	add	sp, #8
 800c936:	4770      	bx	lr

0800c938 <nan>:
 800c938:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c940 <nan+0x8>
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	00000000 	.word	0x00000000
 800c944:	7ff80000 	.word	0x7ff80000

0800c948 <scalbn>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	ec55 4b10 	vmov	r4, r5, d0
 800c94e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c952:	4606      	mov	r6, r0
 800c954:	462b      	mov	r3, r5
 800c956:	b99a      	cbnz	r2, 800c980 <scalbn+0x38>
 800c958:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c95c:	4323      	orrs	r3, r4
 800c95e:	d036      	beq.n	800c9ce <scalbn+0x86>
 800c960:	4b39      	ldr	r3, [pc, #228]	; (800ca48 <scalbn+0x100>)
 800c962:	4629      	mov	r1, r5
 800c964:	ee10 0a10 	vmov	r0, s0
 800c968:	2200      	movs	r2, #0
 800c96a:	f7f3 fe45 	bl	80005f8 <__aeabi_dmul>
 800c96e:	4b37      	ldr	r3, [pc, #220]	; (800ca4c <scalbn+0x104>)
 800c970:	429e      	cmp	r6, r3
 800c972:	4604      	mov	r4, r0
 800c974:	460d      	mov	r5, r1
 800c976:	da10      	bge.n	800c99a <scalbn+0x52>
 800c978:	a32b      	add	r3, pc, #172	; (adr r3, 800ca28 <scalbn+0xe0>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	e03a      	b.n	800c9f6 <scalbn+0xae>
 800c980:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c984:	428a      	cmp	r2, r1
 800c986:	d10c      	bne.n	800c9a2 <scalbn+0x5a>
 800c988:	ee10 2a10 	vmov	r2, s0
 800c98c:	4620      	mov	r0, r4
 800c98e:	4629      	mov	r1, r5
 800c990:	f7f3 fc7c 	bl	800028c <__adddf3>
 800c994:	4604      	mov	r4, r0
 800c996:	460d      	mov	r5, r1
 800c998:	e019      	b.n	800c9ce <scalbn+0x86>
 800c99a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c99e:	460b      	mov	r3, r1
 800c9a0:	3a36      	subs	r2, #54	; 0x36
 800c9a2:	4432      	add	r2, r6
 800c9a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c9a8:	428a      	cmp	r2, r1
 800c9aa:	dd08      	ble.n	800c9be <scalbn+0x76>
 800c9ac:	2d00      	cmp	r5, #0
 800c9ae:	a120      	add	r1, pc, #128	; (adr r1, 800ca30 <scalbn+0xe8>)
 800c9b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9b4:	da1c      	bge.n	800c9f0 <scalbn+0xa8>
 800c9b6:	a120      	add	r1, pc, #128	; (adr r1, 800ca38 <scalbn+0xf0>)
 800c9b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9bc:	e018      	b.n	800c9f0 <scalbn+0xa8>
 800c9be:	2a00      	cmp	r2, #0
 800c9c0:	dd08      	ble.n	800c9d4 <scalbn+0x8c>
 800c9c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c9c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c9ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c9ce:	ec45 4b10 	vmov	d0, r4, r5
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
 800c9d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c9d8:	da19      	bge.n	800ca0e <scalbn+0xc6>
 800c9da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c9de:	429e      	cmp	r6, r3
 800c9e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c9e4:	dd0a      	ble.n	800c9fc <scalbn+0xb4>
 800c9e6:	a112      	add	r1, pc, #72	; (adr r1, 800ca30 <scalbn+0xe8>)
 800c9e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1e2      	bne.n	800c9b6 <scalbn+0x6e>
 800c9f0:	a30f      	add	r3, pc, #60	; (adr r3, 800ca30 <scalbn+0xe8>)
 800c9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f6:	f7f3 fdff 	bl	80005f8 <__aeabi_dmul>
 800c9fa:	e7cb      	b.n	800c994 <scalbn+0x4c>
 800c9fc:	a10a      	add	r1, pc, #40	; (adr r1, 800ca28 <scalbn+0xe0>)
 800c9fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d0b8      	beq.n	800c978 <scalbn+0x30>
 800ca06:	a10e      	add	r1, pc, #56	; (adr r1, 800ca40 <scalbn+0xf8>)
 800ca08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca0c:	e7b4      	b.n	800c978 <scalbn+0x30>
 800ca0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca12:	3236      	adds	r2, #54	; 0x36
 800ca14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	4b0c      	ldr	r3, [pc, #48]	; (800ca50 <scalbn+0x108>)
 800ca20:	2200      	movs	r2, #0
 800ca22:	e7e8      	b.n	800c9f6 <scalbn+0xae>
 800ca24:	f3af 8000 	nop.w
 800ca28:	c2f8f359 	.word	0xc2f8f359
 800ca2c:	01a56e1f 	.word	0x01a56e1f
 800ca30:	8800759c 	.word	0x8800759c
 800ca34:	7e37e43c 	.word	0x7e37e43c
 800ca38:	8800759c 	.word	0x8800759c
 800ca3c:	fe37e43c 	.word	0xfe37e43c
 800ca40:	c2f8f359 	.word	0xc2f8f359
 800ca44:	81a56e1f 	.word	0x81a56e1f
 800ca48:	43500000 	.word	0x43500000
 800ca4c:	ffff3cb0 	.word	0xffff3cb0
 800ca50:	3c900000 	.word	0x3c900000

0800ca54 <_init>:
 800ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca56:	bf00      	nop
 800ca58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca5a:	bc08      	pop	{r3}
 800ca5c:	469e      	mov	lr, r3
 800ca5e:	4770      	bx	lr

0800ca60 <_fini>:
 800ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca62:	bf00      	nop
 800ca64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca66:	bc08      	pop	{r3}
 800ca68:	469e      	mov	lr, r3
 800ca6a:	4770      	bx	lr
