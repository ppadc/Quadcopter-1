
CODE_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005298  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a3c  08005a3c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08005a3c  08005a3c  00015a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a44  08005a44  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a44  08005a44  00015a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a48  08005a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08005a4c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          000001a8  200000a8  200000a8  000200a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000250  20000250  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c09f  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c69  00000000  00000000  0002c177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002dde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e0  00000000  00000000  0002e868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e5c  00000000  00000000  0002f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd21  00000000  00000000  000500a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c55e7  00000000  00000000  0005bdc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001213ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003004  00000000  00000000  001213fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005410 	.word	0x08005410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08005410 	.word	0x08005410

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	b097      	sub	sp, #92	; 0x5c
 8000588:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fb1d 	bl	8000bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f871 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f937 	bl	8000804 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000596:	f000 f8d5 	bl	8000744 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 800059a:	f000 f909 	bl	80007b0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi1);
 800059e:	4c2b      	ldr	r4, [pc, #172]	; (800064c <main+0xc8>)
 80005a0:	4668      	mov	r0, sp
 80005a2:	1d23      	adds	r3, r4, #4
 80005a4:	2254      	movs	r2, #84	; 0x54
 80005a6:	4619      	mov	r1, r3
 80005a8:	f004 fabc 	bl	8004b24 <memcpy>
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	2202      	movs	r2, #2
 80005b0:	2101      	movs	r1, #1
 80005b2:	4827      	ldr	r0, [pc, #156]	; (8000650 <main+0xcc>)
 80005b4:	f003 fab4 	bl	8003b20 <NRF24_begin>
	nrf24_DebugUART_Init(huart6);
 80005b8:	4e26      	ldr	r6, [pc, #152]	; (8000654 <main+0xd0>)
 80005ba:	466d      	mov	r5, sp
 80005bc:	f106 0410 	add.w	r4, r6, #16
 80005c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005cc:	6823      	ldr	r3, [r4, #0]
 80005ce:	602b      	str	r3, [r5, #0]
 80005d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005d4:	f004 fa64 	bl	8004aa0 <nrf24_DebugUART_Init>

	NRF24_setAutoAck(true);
 80005d8:	2001      	movs	r0, #1
 80005da:	f003 fcf1 	bl	8003fc0 <NRF24_setAutoAck>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <main+0xd4>)
 80005e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005e4:	2001      	movs	r0, #1
 80005e6:	f003 fbc9 	bl	8003d7c <NRF24_openReadingPipe>

	NRF24_enableDynamicPayloads();
 80005ea:	f003 fc9f 	bl	8003f2c <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 80005ee:	f003 fc6f 	bl	8003ed0 <NRF24_enableAckPayload>

	NRF24_startListening();
 80005f2:	f003 fb75 	bl	8003ce0 <NRF24_startListening>
	HAL_UART_Receive_IT(&huart6,(uint8_t *)&data,sizeof(data));
 80005f6:	2210      	movs	r2, #16
 80005f8:	4918      	ldr	r1, [pc, #96]	; (800065c <main+0xd8>)
 80005fa:	4816      	ldr	r0, [pc, #88]	; (8000654 <main+0xd0>)
 80005fc:	f002 f9b3 	bl	8002966 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart6, (uint8_t*) "Receive: ", strlen("Receive: "), 10);
 8000600:	230a      	movs	r3, #10
 8000602:	2209      	movs	r2, #9
 8000604:	4916      	ldr	r1, [pc, #88]	; (8000660 <main+0xdc>)
 8000606:	4813      	ldr	r0, [pc, #76]	; (8000654 <main+0xd0>)
 8000608:	f002 f91b 	bl	8002842 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//Receive
		if (NRF24_available()) {
 800060c:	f003 fb8e 	bl	8003d2c <NRF24_available>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0fa      	beq.n	800060c <main+0x88>
			NRF24_read(RxData, 32);
 8000616:	2120      	movs	r1, #32
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <main+0xe0>)
 800061a:	f003 fb8f 	bl	8003d3c <NRF24_read>
			//Send
			sprintf(TxData, "%d", enable);
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <main+0xe4>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	4911      	ldr	r1, [pc, #68]	; (800066c <main+0xe8>)
 8000626:	4812      	ldr	r0, [pc, #72]	; (8000670 <main+0xec>)
 8000628:	f004 fa92 	bl	8004b50 <siprintf>
			NRF24_writeAckPayload(1, TxData, 32);
 800062c:	2220      	movs	r2, #32
 800062e:	4910      	ldr	r1, [pc, #64]	; (8000670 <main+0xec>)
 8000630:	2001      	movs	r0, #1
 8000632:	f003 fdc0 	bl	80041b6 <NRF24_writeAckPayload>

//			HAL_UART_Transmit(&huart6, (uint8_t*) "Receive: ", strlen("Receive: "), 10);
			HAL_UART_Transmit(&huart6, (uint8_t*) RxData, strlen(RxData), 10);
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <main+0xe0>)
 8000638:	f7ff fdca 	bl	80001d0 <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	b29a      	uxth	r2, r3
 8000640:	230a      	movs	r3, #10
 8000642:	4908      	ldr	r1, [pc, #32]	; (8000664 <main+0xe0>)
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <main+0xd0>)
 8000646:	f002 f8fc 	bl	8002842 <HAL_UART_Transmit>
		if (NRF24_available()) {
 800064a:	e7df      	b.n	800060c <main+0x88>
 800064c:	200000c4 	.word	0x200000c4
 8000650:	40020400 	.word	0x40020400
 8000654:	2000011c 	.word	0x2000011c
 8000658:	20000000 	.word	0x20000000
 800065c:	20000028 	.word	0x20000028
 8000660:	08005428 	.word	0x08005428
 8000664:	20000160 	.word	0x20000160
 8000668:	20000180 	.word	0x20000180
 800066c:	08005434 	.word	0x08005434
 8000670:	20000008 	.word	0x20000008

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fa5c 	bl	8004b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <SystemClock_Config+0xc8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <SystemClock_Config+0xc8>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <SystemClock_Config+0xc8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <SystemClock_Config+0xcc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a20      	ldr	r2, [pc, #128]	; (8000740 <SystemClock_Config+0xcc>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <SystemClock_Config+0xcc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e4:	2308      	movs	r3, #8
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006e8:	2348      	movs	r3, #72	; 0x48
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fe55 	bl	80013a8 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000704:	f000 f8f4 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2102      	movs	r1, #2
 8000724:	4618      	mov	r0, r3
 8000726:	f001 f8b7 	bl	8001898 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000730:	f000 f8de 	bl	80008f0 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	; 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2210      	movs	r2, #16
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f001 fa5f 	bl	8001c58 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f8a6 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000c4 	.word	0x200000c4
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART6_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART6_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART6_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART6_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART6_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART6_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART6_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART6_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART6_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART6_UART_Init+0x4c>)
 80007e8:	f001 ffde 	bl	80027a8 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f87d 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000011c 	.word	0x2000011c
 8000800:	40011400 	.word	0x40011400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_GPIO_Init+0xb4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_GPIO_Init+0xb4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <MX_GPIO_Init+0xb4>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2103      	movs	r1, #3
 800088e:	480b      	ldr	r0, [pc, #44]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000890:	f000 fd70 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000894:	2303      	movs	r3, #3
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xb8>)
 80008ac:	f000 fbc6 	bl	800103c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400

080008c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 if(huart->Instance == huart6.Instance)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_UART_RxCpltCallback+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d104      	bne.n	80008de <HAL_UART_RxCpltCallback+0x1e>
 {
    HAL_UART_Receive_IT(&huart6,(uint8_t *)&data,sizeof(data));
 80008d4:	2210      	movs	r2, #16
 80008d6:	4905      	ldr	r1, [pc, #20]	; (80008ec <HAL_UART_RxCpltCallback+0x2c>)
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <HAL_UART_RxCpltCallback+0x28>)
 80008da:	f002 f844 	bl	8002966 <HAL_UART_Receive_IT>
 }
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000011c 	.word	0x2000011c
 80008ec:	20000028 	.word	0x20000028

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <HAL_SPI_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12b      	bne.n	80009c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_SPI_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009a6:	23e0      	movs	r3, #224	; 0xe0
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009b6:	2305      	movs	r3, #5
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <HAL_SPI_MspInit+0x8c>)
 80009c2:	f000 fb3b 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40013000 	.word	0x40013000
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <HAL_UART_MspInit+0x94>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d133      	bne.n	8000a66 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_UART_MspInit+0x98>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <HAL_UART_MspInit+0x98>)
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_UART_MspInit+0x98>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f003 0320 	and.w	r3, r3, #32
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_UART_MspInit+0x98>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <HAL_UART_MspInit+0x98>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_UART_MspInit+0x98>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a36:	23c0      	movs	r3, #192	; 0xc0
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a46:	2308      	movs	r3, #8
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <HAL_UART_MspInit+0x9c>)
 8000a52:	f000 faf3 	bl	800103c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2047      	movs	r0, #71	; 0x47
 8000a5c:	f000 fa25 	bl	8000eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000a60:	2047      	movs	r0, #71	; 0x47
 8000a62:	f000 fa3e 	bl	8000ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40011400 	.word	0x40011400
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020800 	.word	0x40020800

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f8d0 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <USART6_IRQHandler+0x10>)
 8000ad6:	f001 ff77 	bl	80029c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000011c 	.word	0x2000011c

08000ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aec:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <_sbrk+0x5c>)
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <_sbrk+0x60>)
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <_sbrk+0x64>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <_sbrk+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d207      	bcs.n	8000b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b14:	f003 ffdc 	bl	8004ad0 <__errno>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e009      	b.n	8000b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <_sbrk+0x64>)
 8000b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20020000 	.word	0x20020000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	20000184 	.word	0x20000184
 8000b4c:	20000250 	.word	0x20000250

08000b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <Reset_Handler>:
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bac <LoopFillZerobss+0x12>
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x16>)
 8000b7a:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1a>)
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <LoopFillZerobss+0x1e>)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:
 8000b82:	58d4      	ldr	r4, [r2, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:
 8000b88:	18c4      	adds	r4, r0, r3
 8000b8a:	428c      	cmp	r4, r1
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <LoopFillZerobss+0x22>)
 8000b90:	4c0b      	ldr	r4, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x26>)
 8000b92:	2300      	movs	r3, #0
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:
 8000b9a:	42a2      	cmp	r2, r4
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>
 8000b9e:	f7ff ffd7 	bl	8000b50 <SystemInit>
 8000ba2:	f003 ff9b 	bl	8004adc <__libc_init_array>
 8000ba6:	f7ff fced 	bl	8000584 <main>
 8000baa:	4770      	bx	lr
 8000bac:	20020000 	.word	0x20020000
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	200000a8 	.word	0x200000a8
 8000bb8:	08005a4c 	.word	0x08005a4c
 8000bbc:	200000a8 	.word	0x200000a8
 8000bc0:	20000250 	.word	0x20000250

08000bc4 <ADC_IRQHandler>:
 8000bc4:	e7fe      	b.n	8000bc4 <ADC_IRQHandler>
	...

08000bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <HAL_Init+0x40>)
 8000bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_Init+0x40>)
 8000bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x40>)
 8000bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f94f 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fe7e 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023c00 	.word	0x40023c00

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f967 	bl	8000efe <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 f92f 	bl	8000eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000038 	.word	0x20000038
 8000c64:	20000040 	.word	0x20000040
 8000c68:	2000003c 	.word	0x2000003c

08000c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000040 	.word	0x20000040
 8000c90:	20000188 	.word	0x20000188

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000188 	.word	0x20000188

08000cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff ffee 	bl	8000c94 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc4:	d005      	beq.n	8000cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_Delay+0x44>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ffde 	bl	8000c94 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8f7      	bhi.n	8000cd4 <HAL_Delay+0x28>
  {
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000040 	.word	0x20000040

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4907      	ldr	r1, [pc, #28]	; (8000d90 <__NVIC_EnableIRQ+0x38>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	; (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f1c3 0307 	rsb	r3, r3, #7
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf28      	it	cs
 8000e06:	2304      	movcs	r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2b06      	cmp	r3, #6
 8000e10:	d902      	bls.n	8000e18 <NVIC_EncodePriority+0x30>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3b03      	subs	r3, #3
 8000e16:	e000      	b.n	8000e1a <NVIC_EncodePriority+0x32>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4313      	orrs	r3, r2
         );
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e60:	d301      	bcc.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00f      	b.n	8000e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <SysTick_Config+0x40>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff ff8e 	bl	8000d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SysTick_Config+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SysTick_Config+0x40>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000e010 	.word	0xe000e010

08000e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff29 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff3e 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff8e 	bl	8000de8 <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5d 	bl	8000d94 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff31 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffa2 	bl	8000e50 <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff feb6 	bl	8000c94 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d008      	beq.n	8000f48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e052      	b.n	8000fee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0216 	bic.w	r2, r2, #22
 8000f56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	695a      	ldr	r2, [r3, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d103      	bne.n	8000f78 <HAL_DMA_Abort+0x62>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d007      	beq.n	8000f88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0208 	bic.w	r2, r2, #8
 8000f86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0201 	bic.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f98:	e013      	b.n	8000fc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f9a:	f7ff fe7b 	bl	8000c94 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	d90c      	bls.n	8000fc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2220      	movs	r2, #32
 8000fac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e015      	b.n	8000fee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1e4      	bne.n	8000f9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd4:	223f      	movs	r2, #63	; 0x3f
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d004      	beq.n	8001014 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e00c      	b.n	800102e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2205      	movs	r2, #5
 8001018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e16b      	b.n	8001330 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 815a 	bne.w	800132a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	2b02      	cmp	r3, #2
 800108c:	d130      	bne.n	80010f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80b4 	beq.w	800132a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b60      	ldr	r3, [pc, #384]	; (8001348 <HAL_GPIO_Init+0x30c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a5f      	ldr	r2, [pc, #380]	; (8001348 <HAL_GPIO_Init+0x30c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <HAL_GPIO_Init+0x30c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011de:	4a5b      	ldr	r2, [pc, #364]	; (800134c <HAL_GPIO_Init+0x310>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a52      	ldr	r2, [pc, #328]	; (8001350 <HAL_GPIO_Init+0x314>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d02b      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a51      	ldr	r2, [pc, #324]	; (8001354 <HAL_GPIO_Init+0x318>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x222>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a50      	ldr	r2, [pc, #320]	; (8001358 <HAL_GPIO_Init+0x31c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x320>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x21a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4e      	ldr	r2, [pc, #312]	; (8001360 <HAL_GPIO_Init+0x324>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x216>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <HAL_GPIO_Init+0x328>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x212>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <HAL_GPIO_Init+0x32c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x20e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4b      	ldr	r2, [pc, #300]	; (800136c <HAL_GPIO_Init+0x330>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x20a>
 8001242:	2307      	movs	r3, #7
 8001244:	e00e      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001246:	2308      	movs	r3, #8
 8001248:	e00c      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800124a:	2306      	movs	r3, #6
 800124c:	e00a      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800124e:	2305      	movs	r3, #5
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001252:	2304      	movs	r3, #4
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4935      	ldr	r1, [pc, #212]	; (800134c <HAL_GPIO_Init+0x310>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a6:	4a32      	ldr	r2, [pc, #200]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ac:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d0:	4a27      	ldr	r2, [pc, #156]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fa:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f ae90 	bls.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001390:	e003      	b.n	800139a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e267      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d075      	beq.n	80014b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013c6:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d00c      	beq.n	80013ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	4b85      	ldr	r3, [pc, #532]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d112      	bne.n	8001404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013de:	4b82      	ldr	r3, [pc, #520]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ea:	d10b      	bne.n	8001404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	4b7e      	ldr	r3, [pc, #504]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d05b      	beq.n	80014b0 <HAL_RCC_OscConfig+0x108>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d157      	bne.n	80014b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e242      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x74>
 800140e:	4b76      	ldr	r3, [pc, #472]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a75      	ldr	r2, [pc, #468]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e01d      	b.n	8001458 <HAL_RCC_OscConfig+0xb0>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x98>
 8001426:	4b70      	ldr	r3, [pc, #448]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6f      	ldr	r2, [pc, #444]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b6d      	ldr	r3, [pc, #436]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6c      	ldr	r2, [pc, #432]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0xb0>
 8001440:	4b69      	ldr	r3, [pc, #420]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a68      	ldr	r2, [pc, #416]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a65      	ldr	r2, [pc, #404]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fc18 	bl	8000c94 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fc14 	bl	8000c94 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e207      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0xc0>
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fc04 	bl	8000c94 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fc00 	bl	8000c94 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1f3      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	4b51      	ldr	r3, [pc, #324]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0xe8>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d063      	beq.n	8001586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014be:	4b4a      	ldr	r3, [pc, #296]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d11c      	bne.n	8001510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d6:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d116      	bne.n	8001510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_RCC_OscConfig+0x152>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e1c7      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fa:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4937      	ldr	r1, [pc, #220]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150e:	e03a      	b.n	8001586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001518:	4b34      	ldr	r3, [pc, #208]	; (80015ec <HAL_RCC_OscConfig+0x244>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151e:	f7ff fbb9 	bl	8000c94 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff fbb5 	bl	8000c94 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e1a8      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4925      	ldr	r1, [pc, #148]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
 8001558:	e015      	b.n	8001586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_RCC_OscConfig+0x244>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff fb98 	bl	8000c94 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001568:	f7ff fb94 	bl	8000c94 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e187      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d036      	beq.n	8001600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d016      	beq.n	80015c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_RCC_OscConfig+0x248>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fb78 	bl	8000c94 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fb74 	bl	8000c94 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e167      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80015bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x200>
 80015c6:	e01b      	b.n	8001600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_RCC_OscConfig+0x248>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fb61 	bl	8000c94 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	e00e      	b.n	80015f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fb5d 	bl	8000c94 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d907      	bls.n	80015f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e150      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
 80015e8:	40023800 	.word	0x40023800
 80015ec:	42470000 	.word	0x42470000
 80015f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f4:	4b88      	ldr	r3, [pc, #544]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1ea      	bne.n	80015d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 8097 	beq.w	800173c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001612:	4b81      	ldr	r3, [pc, #516]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10f      	bne.n	800163e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b7d      	ldr	r3, [pc, #500]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a7c      	ldr	r2, [pc, #496]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b7a      	ldr	r3, [pc, #488]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163e:	4b77      	ldr	r3, [pc, #476]	; (800181c <HAL_RCC_OscConfig+0x474>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d118      	bne.n	800167c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164a:	4b74      	ldr	r3, [pc, #464]	; (800181c <HAL_RCC_OscConfig+0x474>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a73      	ldr	r2, [pc, #460]	; (800181c <HAL_RCC_OscConfig+0x474>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001656:	f7ff fb1d 	bl	8000c94 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165e:	f7ff fb19 	bl	8000c94 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e10c      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	4b6a      	ldr	r3, [pc, #424]	; (800181c <HAL_RCC_OscConfig+0x474>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x2ea>
 8001684:	4b64      	ldr	r3, [pc, #400]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	4a63      	ldr	r2, [pc, #396]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6713      	str	r3, [r2, #112]	; 0x70
 8001690:	e01c      	b.n	80016cc <HAL_RCC_OscConfig+0x324>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b05      	cmp	r3, #5
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x30c>
 800169a:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a5e      	ldr	r2, [pc, #376]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	4b5c      	ldr	r3, [pc, #368]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	4a5b      	ldr	r2, [pc, #364]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6713      	str	r3, [r2, #112]	; 0x70
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0x324>
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a57      	ldr	r2, [pc, #348]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
 80016c0:	4b55      	ldr	r3, [pc, #340]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c4:	4a54      	ldr	r2, [pc, #336]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016c6:	f023 0304 	bic.w	r3, r3, #4
 80016ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d015      	beq.n	8001700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fade 	bl	8000c94 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016dc:	f7ff fada 	bl	8000c94 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e0cb      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f2:	4b49      	ldr	r3, [pc, #292]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0ee      	beq.n	80016dc <HAL_RCC_OscConfig+0x334>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fac8 	bl	8000c94 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001706:	e00a      	b.n	800171e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff fac4 	bl	8000c94 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e0b5      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171e:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ee      	bne.n	8001708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001730:	4b39      	ldr	r3, [pc, #228]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	4a38      	ldr	r2, [pc, #224]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80a1 	beq.w	8001888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b08      	cmp	r3, #8
 8001750:	d05c      	beq.n	800180c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d141      	bne.n	80017de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_RCC_OscConfig+0x478>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fa98 	bl	8000c94 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff fa94 	bl	8000c94 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e087      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	019b      	lsls	r3, r3, #6
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	3b01      	subs	r3, #1
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	061b      	lsls	r3, r3, #24
 80017aa:	491b      	ldr	r1, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x478>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff fa6d 	bl	8000c94 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017be:	f7ff fa69 	bl	8000c94 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e05c      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x416>
 80017dc:	e054      	b.n	8001888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_RCC_OscConfig+0x478>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fa56 	bl	8000c94 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fa52 	bl	8000c94 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e045      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x444>
 800180a:	e03d      	b.n	8001888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d107      	bne.n	8001824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e038      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
 8001818:	40023800 	.word	0x40023800
 800181c:	40007000 	.word	0x40007000
 8001820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x4ec>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d028      	beq.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d121      	bne.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d11a      	bne.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800185a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800185c:	4293      	cmp	r3, r2
 800185e:	d111      	bne.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	3b01      	subs	r3, #1
 800186e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d107      	bne.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0cc      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ac:	4b68      	ldr	r3, [pc, #416]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d90c      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0b8      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ec:	4b59      	ldr	r3, [pc, #356]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a58      	ldr	r2, [pc, #352]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a52      	ldr	r2, [pc, #328]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800190e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001910:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	494d      	ldr	r1, [pc, #308]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d044      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d119      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e07f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d003      	beq.n	8001956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001952:	2b03      	cmp	r3, #3
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001956:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e06f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001966:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e067      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f023 0203 	bic.w	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4934      	ldr	r1, [pc, #208]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001988:	f7ff f984 	bl	8000c94 <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7ff f980 	bl	8000c94 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e04f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 020c 	and.w	r2, r3, #12
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1eb      	bne.n	8001990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d20c      	bcs.n	80019e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e032      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4916      	ldr	r1, [pc, #88]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	490e      	ldr	r1, [pc, #56]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a1e:	f000 f821 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	490a      	ldr	r1, [pc, #40]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	5ccb      	ldrb	r3, [r1, r3]
 8001a32:	fa22 f303 	lsr.w	r3, r2, r3
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f8e4 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00
 8001a54:	40023800 	.word	0x40023800
 8001a58:	08005980 	.word	0x08005980
 8001a5c:	20000038 	.word	0x20000038
 8001a60:	2000003c 	.word	0x2000003c

08001a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a68:	b090      	sub	sp, #64	; 0x40
 8001a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a70:	2300      	movs	r3, #0
 8001a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a74:	2300      	movs	r3, #0
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d00d      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	f200 80a1 	bhi.w	8001bd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x34>
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d003      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a96:	e09b      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a9c:	e09b      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a9e:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_GetSysClockFreq+0x188>)
 8001aa0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aa2:	e098      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa4:	4b4f      	ldr	r3, [pc, #316]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aae:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d028      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aba:	4b4a      	ldr	r3, [pc, #296]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	099b      	lsrs	r3, r3, #6
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	627a      	str	r2, [r7, #36]	; 0x24
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001acc:	2100      	movs	r1, #0
 8001ace:	4b47      	ldr	r3, [pc, #284]	; (8001bec <HAL_RCC_GetSysClockFreq+0x188>)
 8001ad0:	fb03 f201 	mul.w	r2, r3, r1
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	fb00 f303 	mul.w	r3, r0, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	4a43      	ldr	r2, [pc, #268]	; (8001bec <HAL_RCC_GetSysClockFreq+0x188>)
 8001ade:	fba0 1202 	umull	r1, r2, r0, r2
 8001ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aea:	4413      	add	r3, r2
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af0:	2200      	movs	r2, #0
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	61fa      	str	r2, [r7, #28]
 8001af6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001afa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001afe:	f7fe fbbf 	bl	8000280 <__aeabi_uldivmod>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4613      	mov	r3, r2
 8001b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b0a:	e053      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0c:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	2200      	movs	r2, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	617a      	str	r2, [r7, #20]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b1e:	f04f 0b00 	mov.w	fp, #0
 8001b22:	4652      	mov	r2, sl
 8001b24:	465b      	mov	r3, fp
 8001b26:	f04f 0000 	mov.w	r0, #0
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	0159      	lsls	r1, r3, #5
 8001b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b34:	0150      	lsls	r0, r2, #5
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	ebb2 080a 	subs.w	r8, r2, sl
 8001b3e:	eb63 090b 	sbc.w	r9, r3, fp
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b56:	ebb2 0408 	subs.w	r4, r2, r8
 8001b5a:	eb63 0509 	sbc.w	r5, r3, r9
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	00eb      	lsls	r3, r5, #3
 8001b68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b6c:	00e2      	lsls	r2, r4, #3
 8001b6e:	4614      	mov	r4, r2
 8001b70:	461d      	mov	r5, r3
 8001b72:	eb14 030a 	adds.w	r3, r4, sl
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	eb45 030b 	adc.w	r3, r5, fp
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	028b      	lsls	r3, r1, #10
 8001b8e:	4621      	mov	r1, r4
 8001b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b94:	4621      	mov	r1, r4
 8001b96:	028a      	lsls	r2, r1, #10
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	60fa      	str	r2, [r7, #12]
 8001ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ba8:	f7fe fb6a 	bl	8000280 <__aeabi_uldivmod>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001bc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bce:	e002      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3740      	adds	r7, #64	; 0x40
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	00f42400 	.word	0x00f42400
 8001bec:	017d7840 	.word	0x017d7840

08001bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000038 	.word	0x20000038

08001c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c0c:	f7ff fff0 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	0a9b      	lsrs	r3, r3, #10
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	4903      	ldr	r1, [pc, #12]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c1e:	5ccb      	ldrb	r3, [r1, r3]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	08005990 	.word	0x08005990

08001c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c34:	f7ff ffdc 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	0b5b      	lsrs	r3, r3, #13
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4903      	ldr	r1, [pc, #12]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08005990 	.word	0x08005990

08001c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e07b      	b.n	8001d62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d108      	bne.n	8001c84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c7a:	d009      	beq.n	8001c90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
 8001c82:	e005      	b.n	8001c90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fe4e 	bl	800094c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d14:	ea42 0103 	orr.w	r1, r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	f003 0104 	and.w	r1, r3, #4
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	f003 0210 	and.w	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69da      	ldr	r2, [r3, #28]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b088      	sub	sp, #32
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_SPI_Transmit+0x22>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e126      	b.n	8001fda <HAL_SPI_Transmit+0x270>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d94:	f7fe ff7e 	bl	8000c94 <HAL_GetTick>
 8001d98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d002      	beq.n	8001db0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
 8001dac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dae:	e10b      	b.n	8001fc8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <HAL_SPI_Transmit+0x52>
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dc0:	e102      	b.n	8001fc8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	88fa      	ldrh	r2, [r7, #6]
 8001dda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	88fa      	ldrh	r2, [r7, #6]
 8001de0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e08:	d10f      	bne.n	8001e2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e34:	2b40      	cmp	r3, #64	; 0x40
 8001e36:	d007      	beq.n	8001e48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e50:	d14b      	bne.n	8001eea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <HAL_SPI_Transmit+0xf6>
 8001e5a:	8afb      	ldrh	r3, [r7, #22]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d13e      	bne.n	8001ede <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	1c9a      	adds	r2, r3, #2
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e84:	e02b      	b.n	8001ede <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d112      	bne.n	8001eba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	1c9a      	adds	r2, r3, #2
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001eb8:	e011      	b.n	8001ede <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eba:	f7fe feeb 	bl	8000c94 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d803      	bhi.n	8001ed2 <HAL_SPI_Transmit+0x168>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d102      	bne.n	8001ed8 <HAL_SPI_Transmit+0x16e>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001edc:	e074      	b.n	8001fc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1ce      	bne.n	8001e86 <HAL_SPI_Transmit+0x11c>
 8001ee8:	e04c      	b.n	8001f84 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_SPI_Transmit+0x18e>
 8001ef2:	8afb      	ldrh	r3, [r7, #22]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d140      	bne.n	8001f7a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	330c      	adds	r3, #12
 8001f02:	7812      	ldrb	r2, [r2, #0]
 8001f04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f1e:	e02c      	b.n	8001f7a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d113      	bne.n	8001f56 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	330c      	adds	r3, #12
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f54:	e011      	b.n	8001f7a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f56:	f7fe fe9d 	bl	8000c94 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d803      	bhi.n	8001f6e <HAL_SPI_Transmit+0x204>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d102      	bne.n	8001f74 <HAL_SPI_Transmit+0x20a>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f78:	e026      	b.n	8001fc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1cd      	bne.n	8001f20 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	6839      	ldr	r1, [r7, #0]
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fbcb 	bl	8002724 <SPI_EndRxTxTransaction>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	77fb      	strb	r3, [r7, #31]
 8001fc4:	e000      	b.n	8001fc8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001fc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b088      	sub	sp, #32
 8001fe6:	af02      	add	r7, sp, #8
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ffe:	d112      	bne.n	8002026 <HAL_SPI_Receive+0x44>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10e      	bne.n	8002026 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2204      	movs	r2, #4
 800200c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002010:	88fa      	ldrh	r2, [r7, #6]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	4613      	mov	r3, r2
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	68b9      	ldr	r1, [r7, #8]
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f8f1 	bl	8002204 <HAL_SPI_TransmitReceive>
 8002022:	4603      	mov	r3, r0
 8002024:	e0ea      	b.n	80021fc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_SPI_Receive+0x52>
 8002030:	2302      	movs	r3, #2
 8002032:	e0e3      	b.n	80021fc <HAL_SPI_Receive+0x21a>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800203c:	f7fe fe2a 	bl	8000c94 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d002      	beq.n	8002054 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800204e:	2302      	movs	r3, #2
 8002050:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002052:	e0ca      	b.n	80021ea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_SPI_Receive+0x7e>
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d102      	bne.n	8002066 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002064:	e0c1      	b.n	80021ea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2204      	movs	r2, #4
 800206a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	88fa      	ldrh	r2, [r7, #6]
 8002084:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ac:	d10f      	bne.n	80020ce <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d8:	2b40      	cmp	r3, #64	; 0x40
 80020da:	d007      	beq.n	80020ec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d162      	bne.n	80021ba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020f4:	e02e      	b.n	8002154 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d115      	bne.n	8002130 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f103 020c 	add.w	r2, r3, #12
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800212e:	e011      	b.n	8002154 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002130:	f7fe fdb0 	bl	8000c94 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d803      	bhi.n	8002148 <HAL_SPI_Receive+0x166>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002146:	d102      	bne.n	800214e <HAL_SPI_Receive+0x16c>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002152:	e04a      	b.n	80021ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1cb      	bne.n	80020f6 <HAL_SPI_Receive+0x114>
 800215e:	e031      	b.n	80021c4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d113      	bne.n	8002196 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	b292      	uxth	r2, r2
 800217a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	1c9a      	adds	r2, r3, #2
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800218a:	b29b      	uxth	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002194:	e011      	b.n	80021ba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002196:	f7fe fd7d 	bl	8000c94 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d803      	bhi.n	80021ae <HAL_SPI_Receive+0x1cc>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d102      	bne.n	80021b4 <HAL_SPI_Receive+0x1d2>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021b8:	e017      	b.n	80021ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1cd      	bne.n	8002160 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	6839      	ldr	r1, [r7, #0]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fa45 	bl	8002658 <SPI_EndRxTransaction>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
 80021e6:	e000      	b.n	80021ea <HAL_SPI_Receive+0x208>
  }

error :
 80021e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	; 0x30
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002212:	2301      	movs	r3, #1
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_SPI_TransmitReceive+0x26>
 8002226:	2302      	movs	r3, #2
 8002228:	e18a      	b.n	8002540 <HAL_SPI_TransmitReceive+0x33c>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002232:	f7fe fd2f 	bl	8000c94 <HAL_GetTick>
 8002236:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800223e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800224c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002250:	2b01      	cmp	r3, #1
 8002252:	d00f      	beq.n	8002274 <HAL_SPI_TransmitReceive+0x70>
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800225a:	d107      	bne.n	800226c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d103      	bne.n	800226c <HAL_SPI_TransmitReceive+0x68>
 8002264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002268:	2b04      	cmp	r3, #4
 800226a:	d003      	beq.n	8002274 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800226c:	2302      	movs	r3, #2
 800226e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002272:	e15b      	b.n	800252c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_SPI_TransmitReceive+0x82>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HAL_SPI_TransmitReceive+0x82>
 8002280:	887b      	ldrh	r3, [r7, #2]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800228c:	e14e      	b.n	800252c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b04      	cmp	r3, #4
 8002298:	d003      	beq.n	80022a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2205      	movs	r2, #5
 800229e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	887a      	ldrh	r2, [r7, #2]
 80022b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e2:	2b40      	cmp	r3, #64	; 0x40
 80022e4:	d007      	beq.n	80022f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022fe:	d178      	bne.n	80023f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_SPI_TransmitReceive+0x10a>
 8002308:	8b7b      	ldrh	r3, [r7, #26]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d166      	bne.n	80023dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	881a      	ldrh	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	1c9a      	adds	r2, r3, #2
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002332:	e053      	b.n	80023dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b02      	cmp	r3, #2
 8002340:	d11b      	bne.n	800237a <HAL_SPI_TransmitReceive+0x176>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d016      	beq.n	800237a <HAL_SPI_TransmitReceive+0x176>
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234e:	2b01      	cmp	r3, #1
 8002350:	d113      	bne.n	800237a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	1c9a      	adds	r2, r3, #2
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d119      	bne.n	80023bc <HAL_SPI_TransmitReceive+0x1b8>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d014      	beq.n	80023bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	b292      	uxth	r2, r2
 800239e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	1c9a      	adds	r2, r3, #2
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023b8:	2301      	movs	r3, #1
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023bc:	f7fe fc6a 	bl	8000c94 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d807      	bhi.n	80023dc <HAL_SPI_TransmitReceive+0x1d8>
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d2:	d003      	beq.n	80023dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023da:	e0a7      	b.n	800252c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1a6      	bne.n	8002334 <HAL_SPI_TransmitReceive+0x130>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1a1      	bne.n	8002334 <HAL_SPI_TransmitReceive+0x130>
 80023f0:	e07c      	b.n	80024ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_SPI_TransmitReceive+0x1fc>
 80023fa:	8b7b      	ldrh	r3, [r7, #26]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d16b      	bne.n	80024d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	330c      	adds	r3, #12
 800240a:	7812      	ldrb	r2, [r2, #0]
 800240c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002426:	e057      	b.n	80024d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b02      	cmp	r3, #2
 8002434:	d11c      	bne.n	8002470 <HAL_SPI_TransmitReceive+0x26c>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d017      	beq.n	8002470 <HAL_SPI_TransmitReceive+0x26c>
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	2b01      	cmp	r3, #1
 8002444:	d114      	bne.n	8002470 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	330c      	adds	r3, #12
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	d119      	bne.n	80024b2 <HAL_SPI_TransmitReceive+0x2ae>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d014      	beq.n	80024b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024ae:	2301      	movs	r3, #1
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024b2:	f7fe fbef 	bl	8000c94 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024be:	429a      	cmp	r2, r3
 80024c0:	d803      	bhi.n	80024ca <HAL_SPI_TransmitReceive+0x2c6>
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d102      	bne.n	80024d0 <HAL_SPI_TransmitReceive+0x2cc>
 80024ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d103      	bne.n	80024d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024d6:	e029      	b.n	800252c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1a2      	bne.n	8002428 <HAL_SPI_TransmitReceive+0x224>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d19d      	bne.n	8002428 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f917 	bl	8002724 <SPI_EndRxTxTransaction>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002508:	e010      	b.n	800252c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10b      	bne.n	800252a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	e000      	b.n	800252c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800252a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800253c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002540:	4618      	mov	r0, r3
 8002542:	3730      	adds	r7, #48	; 0x30
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002558:	f7fe fb9c 	bl	8000c94 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	4413      	add	r3, r2
 8002566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002568:	f7fe fb94 	bl	8000c94 <HAL_GetTick>
 800256c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800256e:	4b39      	ldr	r3, [pc, #228]	; (8002654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	015b      	lsls	r3, r3, #5
 8002574:	0d1b      	lsrs	r3, r3, #20
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800257e:	e054      	b.n	800262a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002586:	d050      	beq.n	800262a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002588:	f7fe fb84 	bl	8000c94 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	429a      	cmp	r2, r3
 8002596:	d902      	bls.n	800259e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d13d      	bne.n	800261a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025b6:	d111      	bne.n	80025dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025c0:	d004      	beq.n	80025cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	d107      	bne.n	80025dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e4:	d10f      	bne.n	8002606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e017      	b.n	800264a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3b01      	subs	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4013      	ands	r3, r2
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	429a      	cmp	r2, r3
 8002638:	bf0c      	ite	eq
 800263a:	2301      	moveq	r3, #1
 800263c:	2300      	movne	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	429a      	cmp	r2, r3
 8002646:	d19b      	bne.n	8002580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000038 	.word	0x20000038

08002658 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800266c:	d111      	bne.n	8002692 <SPI_EndRxTransaction+0x3a>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002676:	d004      	beq.n	8002682 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002680:	d107      	bne.n	8002692 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800269a:	d12a      	bne.n	80026f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a4:	d012      	beq.n	80026cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2180      	movs	r1, #128	; 0x80
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff ff49 	bl	8002548 <SPI_WaitFlagStateUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d02d      	beq.n	8002718 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e026      	b.n	800271a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2200      	movs	r2, #0
 80026d4:	2101      	movs	r1, #1
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f7ff ff36 	bl	8002548 <SPI_WaitFlagStateUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01a      	beq.n	8002718 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f043 0220 	orr.w	r2, r3, #32
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e013      	b.n	800271a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2101      	movs	r1, #1
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f7ff ff23 	bl	8002548 <SPI_WaitFlagStateUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e000      	b.n	800271a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <SPI_EndRxTxTransaction+0x7c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <SPI_EndRxTxTransaction+0x80>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	0d5b      	lsrs	r3, r3, #21
 800273c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800274e:	d112      	bne.n	8002776 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2200      	movs	r2, #0
 8002758:	2180      	movs	r1, #128	; 0x80
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff fef4 	bl	8002548 <SPI_WaitFlagStateUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d016      	beq.n	8002794 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e00f      	b.n	8002796 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	3b01      	subs	r3, #1
 8002780:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278c:	2b80      	cmp	r3, #128	; 0x80
 800278e:	d0f2      	beq.n	8002776 <SPI_EndRxTxTransaction+0x52>
 8002790:	e000      	b.n	8002794 <SPI_EndRxTxTransaction+0x70>
        break;
 8002792:	bf00      	nop
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000038 	.word	0x20000038
 80027a4:	165e9f81 	.word	0x165e9f81

080027a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e03f      	b.n	800283a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe f904 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fddf 	bl	80033b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b08a      	sub	sp, #40	; 0x28
 8002846:	af02      	add	r7, sp, #8
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4613      	mov	r3, r2
 8002850:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	d17c      	bne.n	800295c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_UART_Transmit+0x2c>
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e075      	b.n	800295e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_UART_Transmit+0x3e>
 800287c:	2302      	movs	r3, #2
 800287e:	e06e      	b.n	800295e <HAL_UART_Transmit+0x11c>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2221      	movs	r2, #33	; 0x21
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002896:	f7fe f9fd 	bl	8000c94 <HAL_GetTick>
 800289a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	88fa      	ldrh	r2, [r7, #6]
 80028a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	88fa      	ldrh	r2, [r7, #6]
 80028a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b0:	d108      	bne.n	80028c4 <HAL_UART_Transmit+0x82>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d104      	bne.n	80028c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	e003      	b.n	80028cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028d4:	e02a      	b.n	800292c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	2180      	movs	r1, #128	; 0x80
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fb1f 	bl	8002f24 <UART_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e036      	b.n	800295e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10b      	bne.n	800290e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002904:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	3302      	adds	r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	e007      	b.n	800291e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	3301      	adds	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1cf      	bne.n	80028d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2200      	movs	r2, #0
 800293e:	2140      	movs	r1, #64	; 0x40
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 faef 	bl	8002f24 <UART_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e006      	b.n	800295e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e000      	b.n	800295e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800295c:	2302      	movs	r3, #2
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	3720      	adds	r7, #32
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	4613      	mov	r3, r2
 8002972:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b20      	cmp	r3, #32
 800297e:	d11d      	bne.n	80029bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_UART_Receive_IT+0x26>
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e016      	b.n	80029be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_UART_Receive_IT+0x38>
 800299a:	2302      	movs	r3, #2
 800299c:	e00f      	b.n	80029be <HAL_UART_Receive_IT+0x58>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fb24 	bl	8003000 <UART_Start_Receive_IT>
 80029b8:	4603      	mov	r3, r0
 80029ba:	e000      	b.n	80029be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
  }
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b0ba      	sub	sp, #232	; 0xe8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_UART_IRQHandler+0x66>
 8002a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fc07 	bl	800323a <UART_Receive_IT>
      return;
 8002a2c:	e256      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80de 	beq.w	8002bf4 <HAL_UART_IRQHandler+0x22c>
 8002a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d106      	bne.n	8002a52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80d1 	beq.w	8002bf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <HAL_UART_IRQHandler+0xae>
 8002a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_UART_IRQHandler+0xd2>
 8002a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f043 0202 	orr.w	r2, r3, #2
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_UART_IRQHandler+0xf6>
 8002aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d011      	beq.n	8002aee <HAL_UART_IRQHandler+0x126>
 8002aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f043 0208 	orr.w	r2, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 81ed 	beq.w	8002ed2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_UART_IRQHandler+0x14e>
 8002b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fb92 	bl	800323a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <HAL_UART_IRQHandler+0x17a>
 8002b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d04f      	beq.n	8002be2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa9a 	bl	800307c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d141      	bne.n	8002bda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b64:	e853 3f00 	ldrex	r3, [r3]
 8002b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3314      	adds	r3, #20
 8002b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1d9      	bne.n	8002b56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d013      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	4a7d      	ldr	r2, [pc, #500]	; (8002da4 <HAL_UART_IRQHandler+0x3dc>)
 8002bb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fa1d 	bl	8000ff6 <HAL_DMA_Abort_IT>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	e00e      	b.n	8002bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f990 	bl	8002ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	e00a      	b.n	8002bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f98c 	bl	8002ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be0:	e006      	b.n	8002bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f988 	bl	8002ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bee:	e170      	b.n	8002ed2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf0:	bf00      	nop
    return;
 8002bf2:	e16e      	b.n	8002ed2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f040 814a 	bne.w	8002e92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8143 	beq.w	8002e92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 813c 	beq.w	8002e92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	f040 80b4 	bne.w	8002da8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8140 	beq.w	8002ed6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	f080 8139 	bcs.w	8002ed6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c76:	f000 8088 	beq.w	8002d8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	330c      	adds	r3, #12
 8002c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ca6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cb6:	e841 2300 	strex	r3, r2, [r1]
 8002cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1d9      	bne.n	8002c7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3314      	adds	r3, #20
 8002ccc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd0:	e853 3f00 	ldrex	r3, [r3]
 8002cd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3314      	adds	r3, #20
 8002ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e1      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3314      	adds	r3, #20
 8002d08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3314      	adds	r3, #20
 8002d22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d2e:	e841 2300 	strex	r3, r2, [r1]
 8002d32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e3      	bne.n	8002d02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d52:	e853 3f00 	ldrex	r3, [r3]
 8002d56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5a:	f023 0310 	bic.w	r3, r3, #16
 8002d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e3      	bne.n	8002d48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe f8c6 	bl	8000f16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f8b6 	bl	8002f0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002da0:	e099      	b.n	8002ed6 <HAL_UART_IRQHandler+0x50e>
 8002da2:	bf00      	nop
 8002da4:	08003143 	.word	0x08003143
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 808b 	beq.w	8002eda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8086 	beq.w	8002eda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	330c      	adds	r3, #12
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002df2:	647a      	str	r2, [r7, #68]	; 0x44
 8002df4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002df8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e3      	bne.n	8002dce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3314      	adds	r3, #20
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	623b      	str	r3, [r7, #32]
   return(result);
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3314      	adds	r3, #20
 8002e26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e3      	bne.n	8002e06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0310 	bic.w	r3, r3, #16
 8002e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e70:	61fa      	str	r2, [r7, #28]
 8002e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	69b9      	ldr	r1, [r7, #24]
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	e841 2300 	strex	r3, r2, [r1]
 8002e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e3      	bne.n	8002e4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f83e 	bl	8002f0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e90:	e023      	b.n	8002eda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x4ea>
 8002e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f95d 	bl	800316a <UART_Transmit_IT>
    return;
 8002eb0:	e014      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00e      	beq.n	8002edc <HAL_UART_IRQHandler+0x514>
 8002ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f99d 	bl	800320a <UART_EndTransmit_IT>
    return;
 8002ed0:	e004      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
    return;
 8002ed2:	bf00      	nop
 8002ed4:	e002      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
      return;
 8002ed6:	bf00      	nop
 8002ed8:	e000      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
      return;
 8002eda:	bf00      	nop
  }
}
 8002edc:	37e8      	adds	r7, #232	; 0xe8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop

08002ee4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b090      	sub	sp, #64	; 0x40
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f34:	e050      	b.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d04c      	beq.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f44:	f7fd fea6 	bl	8000c94 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d241      	bcs.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	e853 3f00 	ldrex	r3, [r3]
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	330c      	adds	r3, #12
 8002f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f74:	637a      	str	r2, [r7, #52]	; 0x34
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f7c:	e841 2300 	strex	r3, r2, [r1]
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e5      	bne.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	613b      	str	r3, [r7, #16]
   return(result);
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3314      	adds	r3, #20
 8002fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa8:	623a      	str	r2, [r7, #32]
 8002faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fac:	69f9      	ldr	r1, [r7, #28]
 8002fae:	6a3a      	ldr	r2, [r7, #32]
 8002fb0:	e841 2300 	strex	r3, r2, [r1]
 8002fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e5      	bne.n	8002f88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e00f      	b.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d09f      	beq.n	8002f36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3740      	adds	r7, #64	; 0x40
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	88fa      	ldrh	r2, [r7, #6]
 8003018:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2222      	movs	r2, #34	; 0x22
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0220 	orr.w	r2, r2, #32
 800306c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b095      	sub	sp, #84	; 0x54
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	330c      	adds	r3, #12
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800309a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a4:	643a      	str	r2, [r7, #64]	; 0x40
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e5      	bne.n	8003084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3314      	adds	r3, #20
 80030be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3314      	adds	r3, #20
 80030d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e0:	e841 2300 	strex	r3, r2, [r1]
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d119      	bne.n	8003128 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	e853 3f00 	ldrex	r3, [r3]
 8003102:	60bb      	str	r3, [r7, #8]
   return(result);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f023 0310 	bic.w	r3, r3, #16
 800310a:	647b      	str	r3, [r7, #68]	; 0x44
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003114:	61ba      	str	r2, [r7, #24]
 8003116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6979      	ldr	r1, [r7, #20]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	613b      	str	r3, [r7, #16]
   return(result);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e5      	bne.n	80030f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003136:	bf00      	nop
 8003138:	3754      	adds	r7, #84	; 0x54
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff fecb 	bl	8002ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800316a:	b480      	push	{r7}
 800316c:	b085      	sub	sp, #20
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b21      	cmp	r3, #33	; 0x21
 800317c:	d13e      	bne.n	80031fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003186:	d114      	bne.n	80031b2 <UART_Transmit_IT+0x48>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d110      	bne.n	80031b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	1c9a      	adds	r2, r3, #2
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	621a      	str	r2, [r3, #32]
 80031b0:	e008      	b.n	80031c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	1c59      	adds	r1, r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6211      	str	r1, [r2, #32]
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4619      	mov	r1, r3
 80031d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003220:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fe5a 	bl	8002ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b08c      	sub	sp, #48	; 0x30
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b22      	cmp	r3, #34	; 0x22
 800324c:	f040 80ab 	bne.w	80033a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003258:	d117      	bne.n	800328a <UART_Receive_IT+0x50>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d113      	bne.n	800328a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003262:	2300      	movs	r3, #0
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003278:	b29a      	uxth	r2, r3
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	1c9a      	adds	r2, r3, #2
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
 8003288:	e026      	b.n	80032d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003290:	2300      	movs	r3, #0
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329c:	d007      	beq.n	80032ae <UART_Receive_IT+0x74>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <UART_Receive_IT+0x82>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e008      	b.n	80032ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4619      	mov	r1, r3
 80032e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d15a      	bne.n	80033a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0220 	bic.w	r2, r2, #32
 80032fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800330a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	2b01      	cmp	r3, #1
 800332a:	d135      	bne.n	8003398 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	613b      	str	r3, [r7, #16]
   return(result);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f023 0310 	bic.w	r3, r3, #16
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003352:	623a      	str	r2, [r7, #32]
 8003354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003356:	69f9      	ldr	r1, [r7, #28]
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e5      	bne.n	8003332 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b10      	cmp	r3, #16
 8003372:	d10a      	bne.n	800338a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff fdbb 	bl	8002f0c <HAL_UARTEx_RxEventCallback>
 8003396:	e002      	b.n	800339e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fd fa91 	bl	80008c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e002      	b.n	80033a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
  }
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3730      	adds	r7, #48	; 0x30
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b4:	b0c0      	sub	sp, #256	; 0x100
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	68d9      	ldr	r1, [r3, #12]
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	ea40 0301 	orr.w	r3, r0, r1
 80033d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003408:	f021 010c 	bic.w	r1, r1, #12
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003416:	430b      	orrs	r3, r1
 8003418:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342a:	6999      	ldr	r1, [r3, #24]
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	ea40 0301 	orr.w	r3, r0, r1
 8003436:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b8f      	ldr	r3, [pc, #572]	; (800367c <UART_SetConfig+0x2cc>)
 8003440:	429a      	cmp	r2, r3
 8003442:	d005      	beq.n	8003450 <UART_SetConfig+0xa0>
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b8d      	ldr	r3, [pc, #564]	; (8003680 <UART_SetConfig+0x2d0>)
 800344c:	429a      	cmp	r2, r3
 800344e:	d104      	bne.n	800345a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003450:	f7fe fbee 	bl	8001c30 <HAL_RCC_GetPCLK2Freq>
 8003454:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003458:	e003      	b.n	8003462 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800345a:	f7fe fbd5 	bl	8001c08 <HAL_RCC_GetPCLK1Freq>
 800345e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346c:	f040 810c 	bne.w	8003688 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800347a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800347e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003482:	4622      	mov	r2, r4
 8003484:	462b      	mov	r3, r5
 8003486:	1891      	adds	r1, r2, r2
 8003488:	65b9      	str	r1, [r7, #88]	; 0x58
 800348a:	415b      	adcs	r3, r3
 800348c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800348e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003492:	4621      	mov	r1, r4
 8003494:	eb12 0801 	adds.w	r8, r2, r1
 8003498:	4629      	mov	r1, r5
 800349a:	eb43 0901 	adc.w	r9, r3, r1
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034b2:	4690      	mov	r8, r2
 80034b4:	4699      	mov	r9, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	eb18 0303 	adds.w	r3, r8, r3
 80034bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034c0:	462b      	mov	r3, r5
 80034c2:	eb49 0303 	adc.w	r3, r9, r3
 80034c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034de:	460b      	mov	r3, r1
 80034e0:	18db      	adds	r3, r3, r3
 80034e2:	653b      	str	r3, [r7, #80]	; 0x50
 80034e4:	4613      	mov	r3, r2
 80034e6:	eb42 0303 	adc.w	r3, r2, r3
 80034ea:	657b      	str	r3, [r7, #84]	; 0x54
 80034ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034f4:	f7fc fec4 	bl	8000280 <__aeabi_uldivmod>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4b61      	ldr	r3, [pc, #388]	; (8003684 <UART_SetConfig+0x2d4>)
 80034fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	011c      	lsls	r4, r3, #4
 8003506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800350a:	2200      	movs	r2, #0
 800350c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003510:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003514:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003518:	4642      	mov	r2, r8
 800351a:	464b      	mov	r3, r9
 800351c:	1891      	adds	r1, r2, r2
 800351e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003520:	415b      	adcs	r3, r3
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003524:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003528:	4641      	mov	r1, r8
 800352a:	eb12 0a01 	adds.w	sl, r2, r1
 800352e:	4649      	mov	r1, r9
 8003530:	eb43 0b01 	adc.w	fp, r3, r1
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003540:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003548:	4692      	mov	sl, r2
 800354a:	469b      	mov	fp, r3
 800354c:	4643      	mov	r3, r8
 800354e:	eb1a 0303 	adds.w	r3, sl, r3
 8003552:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003556:	464b      	mov	r3, r9
 8003558:	eb4b 0303 	adc.w	r3, fp, r3
 800355c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800356c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003570:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003574:	460b      	mov	r3, r1
 8003576:	18db      	adds	r3, r3, r3
 8003578:	643b      	str	r3, [r7, #64]	; 0x40
 800357a:	4613      	mov	r3, r2
 800357c:	eb42 0303 	adc.w	r3, r2, r3
 8003580:	647b      	str	r3, [r7, #68]	; 0x44
 8003582:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003586:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800358a:	f7fc fe79 	bl	8000280 <__aeabi_uldivmod>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4611      	mov	r1, r2
 8003594:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <UART_SetConfig+0x2d4>)
 8003596:	fba3 2301 	umull	r2, r3, r3, r1
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2264      	movs	r2, #100	; 0x64
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	1acb      	subs	r3, r1, r3
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <UART_SetConfig+0x2d4>)
 80035ac:	fba3 2302 	umull	r2, r3, r3, r2
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035b8:	441c      	add	r4, r3
 80035ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035cc:	4642      	mov	r2, r8
 80035ce:	464b      	mov	r3, r9
 80035d0:	1891      	adds	r1, r2, r2
 80035d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80035d4:	415b      	adcs	r3, r3
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035dc:	4641      	mov	r1, r8
 80035de:	1851      	adds	r1, r2, r1
 80035e0:	6339      	str	r1, [r7, #48]	; 0x30
 80035e2:	4649      	mov	r1, r9
 80035e4:	414b      	adcs	r3, r1
 80035e6:	637b      	str	r3, [r7, #52]	; 0x34
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035f4:	4659      	mov	r1, fp
 80035f6:	00cb      	lsls	r3, r1, #3
 80035f8:	4651      	mov	r1, sl
 80035fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fe:	4651      	mov	r1, sl
 8003600:	00ca      	lsls	r2, r1, #3
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	4603      	mov	r3, r0
 8003608:	4642      	mov	r2, r8
 800360a:	189b      	adds	r3, r3, r2
 800360c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003610:	464b      	mov	r3, r9
 8003612:	460a      	mov	r2, r1
 8003614:	eb42 0303 	adc.w	r3, r2, r3
 8003618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003628:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800362c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003630:	460b      	mov	r3, r1
 8003632:	18db      	adds	r3, r3, r3
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
 8003636:	4613      	mov	r3, r2
 8003638:	eb42 0303 	adc.w	r3, r2, r3
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800363e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003642:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003646:	f7fc fe1b 	bl	8000280 <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <UART_SetConfig+0x2d4>)
 8003650:	fba3 1302 	umull	r1, r3, r3, r2
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	2164      	movs	r1, #100	; 0x64
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	3332      	adds	r3, #50	; 0x32
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <UART_SetConfig+0x2d4>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	f003 0207 	and.w	r2, r3, #7
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4422      	add	r2, r4
 8003676:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003678:	e105      	b.n	8003886 <UART_SetConfig+0x4d6>
 800367a:	bf00      	nop
 800367c:	40011000 	.word	0x40011000
 8003680:	40011400 	.word	0x40011400
 8003684:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800368c:	2200      	movs	r2, #0
 800368e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003692:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003696:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800369a:	4642      	mov	r2, r8
 800369c:	464b      	mov	r3, r9
 800369e:	1891      	adds	r1, r2, r2
 80036a0:	6239      	str	r1, [r7, #32]
 80036a2:	415b      	adcs	r3, r3
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
 80036a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036aa:	4641      	mov	r1, r8
 80036ac:	1854      	adds	r4, r2, r1
 80036ae:	4649      	mov	r1, r9
 80036b0:	eb43 0501 	adc.w	r5, r3, r1
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	00eb      	lsls	r3, r5, #3
 80036be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036c2:	00e2      	lsls	r2, r4, #3
 80036c4:	4614      	mov	r4, r2
 80036c6:	461d      	mov	r5, r3
 80036c8:	4643      	mov	r3, r8
 80036ca:	18e3      	adds	r3, r4, r3
 80036cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036d0:	464b      	mov	r3, r9
 80036d2:	eb45 0303 	adc.w	r3, r5, r3
 80036d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036f6:	4629      	mov	r1, r5
 80036f8:	008b      	lsls	r3, r1, #2
 80036fa:	4621      	mov	r1, r4
 80036fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003700:	4621      	mov	r1, r4
 8003702:	008a      	lsls	r2, r1, #2
 8003704:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003708:	f7fc fdba 	bl	8000280 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4b60      	ldr	r3, [pc, #384]	; (8003894 <UART_SetConfig+0x4e4>)
 8003712:	fba3 2302 	umull	r2, r3, r3, r2
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	011c      	lsls	r4, r3, #4
 800371a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800371e:	2200      	movs	r2, #0
 8003720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003724:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003728:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800372c:	4642      	mov	r2, r8
 800372e:	464b      	mov	r3, r9
 8003730:	1891      	adds	r1, r2, r2
 8003732:	61b9      	str	r1, [r7, #24]
 8003734:	415b      	adcs	r3, r3
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800373c:	4641      	mov	r1, r8
 800373e:	1851      	adds	r1, r2, r1
 8003740:	6139      	str	r1, [r7, #16]
 8003742:	4649      	mov	r1, r9
 8003744:	414b      	adcs	r3, r1
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003754:	4659      	mov	r1, fp
 8003756:	00cb      	lsls	r3, r1, #3
 8003758:	4651      	mov	r1, sl
 800375a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800375e:	4651      	mov	r1, sl
 8003760:	00ca      	lsls	r2, r1, #3
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	4603      	mov	r3, r0
 8003768:	4642      	mov	r2, r8
 800376a:	189b      	adds	r3, r3, r2
 800376c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003770:	464b      	mov	r3, r9
 8003772:	460a      	mov	r2, r1
 8003774:	eb42 0303 	adc.w	r3, r2, r3
 8003778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	67bb      	str	r3, [r7, #120]	; 0x78
 8003786:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003794:	4649      	mov	r1, r9
 8003796:	008b      	lsls	r3, r1, #2
 8003798:	4641      	mov	r1, r8
 800379a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800379e:	4641      	mov	r1, r8
 80037a0:	008a      	lsls	r2, r1, #2
 80037a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037a6:	f7fc fd6b 	bl	8000280 <__aeabi_uldivmod>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4b39      	ldr	r3, [pc, #228]	; (8003894 <UART_SetConfig+0x4e4>)
 80037b0:	fba3 1302 	umull	r1, r3, r3, r2
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	2164      	movs	r1, #100	; 0x64
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	3332      	adds	r3, #50	; 0x32
 80037c2:	4a34      	ldr	r2, [pc, #208]	; (8003894 <UART_SetConfig+0x4e4>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ce:	441c      	add	r4, r3
 80037d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d4:	2200      	movs	r2, #0
 80037d6:	673b      	str	r3, [r7, #112]	; 0x70
 80037d8:	677a      	str	r2, [r7, #116]	; 0x74
 80037da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037de:	4642      	mov	r2, r8
 80037e0:	464b      	mov	r3, r9
 80037e2:	1891      	adds	r1, r2, r2
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	415b      	adcs	r3, r3
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ee:	4641      	mov	r1, r8
 80037f0:	1851      	adds	r1, r2, r1
 80037f2:	6039      	str	r1, [r7, #0]
 80037f4:	4649      	mov	r1, r9
 80037f6:	414b      	adcs	r3, r1
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003806:	4659      	mov	r1, fp
 8003808:	00cb      	lsls	r3, r1, #3
 800380a:	4651      	mov	r1, sl
 800380c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003810:	4651      	mov	r1, sl
 8003812:	00ca      	lsls	r2, r1, #3
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	4603      	mov	r3, r0
 800381a:	4642      	mov	r2, r8
 800381c:	189b      	adds	r3, r3, r2
 800381e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003820:	464b      	mov	r3, r9
 8003822:	460a      	mov	r2, r1
 8003824:	eb42 0303 	adc.w	r3, r2, r3
 8003828:	66fb      	str	r3, [r7, #108]	; 0x6c
 800382a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	663b      	str	r3, [r7, #96]	; 0x60
 8003834:	667a      	str	r2, [r7, #100]	; 0x64
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003842:	4649      	mov	r1, r9
 8003844:	008b      	lsls	r3, r1, #2
 8003846:	4641      	mov	r1, r8
 8003848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800384c:	4641      	mov	r1, r8
 800384e:	008a      	lsls	r2, r1, #2
 8003850:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003854:	f7fc fd14 	bl	8000280 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <UART_SetConfig+0x4e4>)
 800385e:	fba3 1302 	umull	r1, r3, r3, r2
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2164      	movs	r1, #100	; 0x64
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	3332      	adds	r3, #50	; 0x32
 8003870:	4a08      	ldr	r2, [pc, #32]	; (8003894 <UART_SetConfig+0x4e4>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4422      	add	r2, r4
 8003884:	609a      	str	r2, [r3, #8]
}
 8003886:	bf00      	nop
 8003888:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800388c:	46bd      	mov	sp, r7
 800388e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003892:	bf00      	nop
 8003894:	51eb851f 	.word	0x51eb851f

08003898 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <NRF24_DelayMicroSeconds+0x3c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <NRF24_DelayMicroSeconds+0x40>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0c9a      	lsrs	r2, r3, #18
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80038b8:	bf00      	nop
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1e5a      	subs	r2, r3, #1
 80038be:	60fa      	str	r2, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1fa      	bne.n	80038ba <NRF24_DelayMicroSeconds+0x22>
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000038 	.word	0x20000038
 80038d8:	165e9f81 	.word	0x165e9f81

080038dc <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <NRF24_csn+0x20>
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <NRF24_csn+0x38>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <NRF24_csn+0x3c>)
 80038f0:	8811      	ldrh	r1, [r2, #0]
 80038f2:	2201      	movs	r2, #1
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd fd3d 	bl	8001374 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80038fa:	e007      	b.n	800390c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <NRF24_csn+0x38>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a05      	ldr	r2, [pc, #20]	; (8003918 <NRF24_csn+0x3c>)
 8003902:	8811      	ldrh	r1, [r2, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f7fd fd34 	bl	8001374 <HAL_GPIO_WritePin>
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	2000019c 	.word	0x2000019c
 8003918:	200001a0 	.word	0x200001a0

0800391c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <NRF24_ce+0x20>
 800392a:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <NRF24_ce+0x38>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <NRF24_ce+0x3c>)
 8003930:	8811      	ldrh	r1, [r2, #0]
 8003932:	2201      	movs	r2, #1
 8003934:	4618      	mov	r0, r3
 8003936:	f7fd fd1d 	bl	8001374 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800393a:	e007      	b.n	800394c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <NRF24_ce+0x38>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a05      	ldr	r2, [pc, #20]	; (8003958 <NRF24_ce+0x3c>)
 8003942:	8811      	ldrh	r1, [r2, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd fd14 	bl	8001374 <HAL_GPIO_WritePin>
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	2000019c 	.word	0x2000019c
 8003958:	200001a2 	.word	0x200001a2

0800395c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8003966:	2000      	movs	r0, #0
 8003968:	f7ff ffb8 	bl	80038dc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003970:	f107 010c 	add.w	r1, r7, #12
 8003974:	2364      	movs	r3, #100	; 0x64
 8003976:	2201      	movs	r2, #1
 8003978:	480a      	ldr	r0, [pc, #40]	; (80039a4 <NRF24_read_register+0x48>)
 800397a:	f7fe f9f6 	bl	8001d6a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800397e:	f107 030c 	add.w	r3, r7, #12
 8003982:	1c59      	adds	r1, r3, #1
 8003984:	2364      	movs	r3, #100	; 0x64
 8003986:	2201      	movs	r2, #1
 8003988:	4806      	ldr	r0, [pc, #24]	; (80039a4 <NRF24_read_register+0x48>)
 800398a:	f7fe fb2a 	bl	8001fe2 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800398e:	7b7b      	ldrb	r3, [r7, #13]
 8003990:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8003992:	2001      	movs	r0, #1
 8003994:	f7ff ffa2 	bl	80038dc <NRF24_csn>
	return retData;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200001a4 	.word	0x200001a4

080039a8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
 80039b4:	4613      	mov	r3, r2
 80039b6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80039b8:	2000      	movs	r0, #0
 80039ba:	f7ff ff8f 	bl	80038dc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80039c2:	f107 010c 	add.w	r1, r7, #12
 80039c6:	2364      	movs	r3, #100	; 0x64
 80039c8:	2201      	movs	r2, #1
 80039ca:	4808      	ldr	r0, [pc, #32]	; (80039ec <NRF24_read_registerN+0x44>)
 80039cc:	f7fe f9cd 	bl	8001d6a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80039d0:	79bb      	ldrb	r3, [r7, #6]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	2364      	movs	r3, #100	; 0x64
 80039d6:	6839      	ldr	r1, [r7, #0]
 80039d8:	4804      	ldr	r0, [pc, #16]	; (80039ec <NRF24_read_registerN+0x44>)
 80039da:	f7fe fb02 	bl	8001fe2 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80039de:	2001      	movs	r0, #1
 80039e0:	f7ff ff7c 	bl	80038dc <NRF24_csn>
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	200001a4 	.word	0x200001a4

080039f0 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	460a      	mov	r2, r1
 80039fa:	71fb      	strb	r3, [r7, #7]
 80039fc:	4613      	mov	r3, r2
 80039fe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003a00:	2000      	movs	r0, #0
 8003a02:	f7ff ff6b 	bl	80038dc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	f043 0320 	orr.w	r3, r3, #32
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8003a10:	79bb      	ldrb	r3, [r7, #6]
 8003a12:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8003a14:	f107 010c 	add.w	r1, r7, #12
 8003a18:	2364      	movs	r3, #100	; 0x64
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	4804      	ldr	r0, [pc, #16]	; (8003a30 <NRF24_write_register+0x40>)
 8003a1e:	f7fe f9a4 	bl	8001d6a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003a22:	2001      	movs	r0, #1
 8003a24:	f7ff ff5a 	bl	80038dc <NRF24_csn>
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	200001a4 	.word	0x200001a4

08003a34 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	71fb      	strb	r3, [r7, #7]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7ff ff49 	bl	80038dc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	f043 0320 	orr.w	r3, r3, #32
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003a54:	f107 010c 	add.w	r1, r7, #12
 8003a58:	2364      	movs	r3, #100	; 0x64
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4808      	ldr	r0, [pc, #32]	; (8003a80 <NRF24_write_registerN+0x4c>)
 8003a5e:	f7fe f984 	bl	8001d6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8003a62:	79bb      	ldrb	r3, [r7, #6]
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	2364      	movs	r3, #100	; 0x64
 8003a68:	6839      	ldr	r1, [r7, #0]
 8003a6a:	4805      	ldr	r0, [pc, #20]	; (8003a80 <NRF24_write_registerN+0x4c>)
 8003a6c:	f7fe f97d 	bl	8001d6a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003a70:	2001      	movs	r0, #1
 8003a72:	f7ff ff33 	bl	80038dc <NRF24_csn>
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	200001a4 	.word	0x200001a4

08003a84 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8003a90:	f000 fa0a 	bl	8003ea8 <NRF24_getPayloadSize>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461a      	mov	r2, r3
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d303      	bcc.n	8003aa6 <NRF24_read_payload+0x22>
 8003a9e:	f000 fa03 	bl	8003ea8 <NRF24_getPayloadSize>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	e000      	b.n	8003aa8 <NRF24_read_payload+0x24>
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8003aaa:	2000      	movs	r0, #0
 8003aac:	f7ff ff16 	bl	80038dc <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8003ab0:	2361      	movs	r3, #97	; 0x61
 8003ab2:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8003ab4:	f107 010e 	add.w	r1, r7, #14
 8003ab8:	2364      	movs	r3, #100	; 0x64
 8003aba:	2201      	movs	r2, #1
 8003abc:	4808      	ldr	r0, [pc, #32]	; (8003ae0 <NRF24_read_payload+0x5c>)
 8003abe:	f7fe f954 	bl	8001d6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	2364      	movs	r3, #100	; 0x64
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4805      	ldr	r0, [pc, #20]	; (8003ae0 <NRF24_read_payload+0x5c>)
 8003acc:	f7fe fa89 	bl	8001fe2 <HAL_SPI_Receive>
	NRF24_csn(1);
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f7ff ff03 	bl	80038dc <NRF24_csn>
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200001a4 	.word	0x200001a4

08003ae4 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8003ae8:	21ff      	movs	r1, #255	; 0xff
 8003aea:	20e1      	movs	r0, #225	; 0xe1
 8003aec:	f7ff ff80 	bl	80039f0 <NRF24_write_register>
}
 8003af0:	bf00      	nop
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8003af8:	21ff      	movs	r1, #255	; 0xff
 8003afa:	20e2      	movs	r0, #226	; 0xe2
 8003afc:	f7ff ff78 	bl	80039f0 <NRF24_write_register>
}
 8003b00:	bf00      	nop
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8003b0a:	2007      	movs	r0, #7
 8003b0c:	f7ff ff26 	bl	800395c <NRF24_read_register>
 8003b10:	4603      	mov	r3, r0
 8003b12:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8003b14:	79fb      	ldrb	r3, [r7, #7]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8003b20:	b082      	sub	sp, #8
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	807b      	strh	r3, [r7, #2]
 8003b30:	4613      	mov	r3, r2
 8003b32:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8003b34:	4b66      	ldr	r3, [pc, #408]	; (8003cd0 <NRF24_begin+0x1b0>)
 8003b36:	4618      	mov	r0, r3
 8003b38:	f107 031c 	add.w	r3, r7, #28
 8003b3c:	2258      	movs	r2, #88	; 0x58
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f000 fff0 	bl	8004b24 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8003b44:	4a63      	ldr	r2, [pc, #396]	; (8003cd4 <NRF24_begin+0x1b4>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8003b4a:	4a63      	ldr	r2, [pc, #396]	; (8003cd8 <NRF24_begin+0x1b8>)
 8003b4c:	887b      	ldrh	r3, [r7, #2]
 8003b4e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;  
 8003b50:	4a62      	ldr	r2, [pc, #392]	; (8003cdc <NRF24_begin+0x1bc>)
 8003b52:	883b      	ldrh	r3, [r7, #0]
 8003b54:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8003b56:	2001      	movs	r0, #1
 8003b58:	f7ff fec0 	bl	80038dc <NRF24_csn>
	NRF24_ce(0);
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f7ff fedd 	bl	800391c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8003b62:	2005      	movs	r0, #5
 8003b64:	f7fd f8a2 	bl	8000cac <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08); //0x08
 8003b68:	2108      	movs	r1, #8
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7ff ff40 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f); //0x3f
 8003b70:	213f      	movs	r1, #63	; 0x3f
 8003b72:	2001      	movs	r0, #1
 8003b74:	f7ff ff3c 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03); //0x03
 8003b78:	2103      	movs	r1, #3
 8003b7a:	2002      	movs	r0, #2
 8003b7c:	f7ff ff38 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03); //0x03
 8003b80:	2103      	movs	r1, #3
 8003b82:	2003      	movs	r0, #3
 8003b84:	f7ff ff34 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03); //0x03
 8003b88:	2103      	movs	r1, #3
 8003b8a:	2004      	movs	r0, #4
 8003b8c:	f7ff ff30 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02); //0x02
 8003b90:	2102      	movs	r1, #2
 8003b92:	2005      	movs	r0, #5
 8003b94:	f7ff ff2c 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f); //0x0f
 8003b98:	210f      	movs	r1, #15
 8003b9a:	2006      	movs	r0, #6
 8003b9c:	f7ff ff28 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e); //0x0e
 8003ba0:	210e      	movs	r1, #14
 8003ba2:	2007      	movs	r0, #7
 8003ba4:	f7ff ff24 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00); //0x00
 8003ba8:	2100      	movs	r1, #0
 8003baa:	2008      	movs	r0, #8
 8003bac:	f7ff ff20 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00); //0x00
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	2009      	movs	r0, #9
 8003bb4:	f7ff ff1c 	bl	80039f0 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8003bb8:	23e7      	movs	r3, #231	; 0xe7
 8003bba:	733b      	strb	r3, [r7, #12]
 8003bbc:	23e7      	movs	r3, #231	; 0xe7
 8003bbe:	72fb      	strb	r3, [r7, #11]
 8003bc0:	23e7      	movs	r3, #231	; 0xe7
 8003bc2:	72bb      	strb	r3, [r7, #10]
 8003bc4:	23e7      	movs	r3, #231	; 0xe7
 8003bc6:	727b      	strb	r3, [r7, #9]
 8003bc8:	23e7      	movs	r3, #231	; 0xe7
 8003bca:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8003bcc:	f107 0308 	add.w	r3, r7, #8
 8003bd0:	2205      	movs	r2, #5
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	200a      	movs	r0, #10
 8003bd6:	f7ff ff2d 	bl	8003a34 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8003bda:	23c2      	movs	r3, #194	; 0xc2
 8003bdc:	733b      	strb	r3, [r7, #12]
 8003bde:	23c2      	movs	r3, #194	; 0xc2
 8003be0:	72fb      	strb	r3, [r7, #11]
 8003be2:	23c2      	movs	r3, #194	; 0xc2
 8003be4:	72bb      	strb	r3, [r7, #10]
 8003be6:	23c2      	movs	r3, #194	; 0xc2
 8003be8:	727b      	strb	r3, [r7, #9]
 8003bea:	23c2      	movs	r3, #194	; 0xc2
 8003bec:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8003bee:	f107 0308 	add.w	r3, r7, #8
 8003bf2:	2205      	movs	r2, #5
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	200b      	movs	r0, #11
 8003bf8:	f7ff ff1c 	bl	8003a34 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8003bfc:	21c3      	movs	r1, #195	; 0xc3
 8003bfe:	200c      	movs	r0, #12
 8003c00:	f7ff fef6 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8003c04:	21c4      	movs	r1, #196	; 0xc4
 8003c06:	200d      	movs	r0, #13
 8003c08:	f7ff fef2 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8003c0c:	21c5      	movs	r1, #197	; 0xc5
 8003c0e:	200e      	movs	r0, #14
 8003c10:	f7ff feee 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8003c14:	21c6      	movs	r1, #198	; 0xc6
 8003c16:	200f      	movs	r0, #15
 8003c18:	f7ff feea 	bl	80039f0 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8003c1c:	23e7      	movs	r3, #231	; 0xe7
 8003c1e:	733b      	strb	r3, [r7, #12]
 8003c20:	23e7      	movs	r3, #231	; 0xe7
 8003c22:	72fb      	strb	r3, [r7, #11]
 8003c24:	23e7      	movs	r3, #231	; 0xe7
 8003c26:	72bb      	strb	r3, [r7, #10]
 8003c28:	23e7      	movs	r3, #231	; 0xe7
 8003c2a:	727b      	strb	r3, [r7, #9]
 8003c2c:	23e7      	movs	r3, #231	; 0xe7
 8003c2e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8003c30:	f107 0308 	add.w	r3, r7, #8
 8003c34:	2205      	movs	r2, #5
 8003c36:	4619      	mov	r1, r3
 8003c38:	2010      	movs	r0, #16
 8003c3a:	f7ff fefb 	bl	8003a34 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8003c3e:	2100      	movs	r1, #0
 8003c40:	2011      	movs	r0, #17
 8003c42:	f7ff fed5 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8003c46:	2100      	movs	r1, #0
 8003c48:	2012      	movs	r0, #18
 8003c4a:	f7ff fed1 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8003c4e:	2100      	movs	r1, #0
 8003c50:	2013      	movs	r0, #19
 8003c52:	f7ff fecd 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8003c56:	2100      	movs	r1, #0
 8003c58:	2014      	movs	r0, #20
 8003c5a:	f7ff fec9 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8003c5e:	2100      	movs	r1, #0
 8003c60:	2015      	movs	r0, #21
 8003c62:	f7ff fec5 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8003c66:	2100      	movs	r1, #0
 8003c68:	2016      	movs	r0, #22
 8003c6a:	f7ff fec1 	bl	80039f0 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8003c6e:	f000 fad5 	bl	800421c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8003c72:	2100      	movs	r1, #0
 8003c74:	201c      	movs	r0, #28
 8003c76:	f7ff febb 	bl	80039f0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	201d      	movs	r0, #29
 8003c7e:	f7ff feb7 	bl	80039f0 <NRF24_write_register>
	printRadioSettings();
 8003c82:	f000 fae5 	bl	8004250 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8003c86:	210f      	movs	r1, #15
 8003c88:	200f      	movs	r0, #15
 8003c8a:	f000 f8c5 	bl	8003e18 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m18dB);
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f000 f9ab 	bl	8003fea <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8003c94:	2001      	movs	r0, #1
 8003c96:	f000 f9e1 	bl	800405c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f000 fa24 	bl	80040e8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8003ca0:	f000 f976 	bl	8003f90 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8003ca4:	2020      	movs	r0, #32
 8003ca6:	f000 f8e7 	bl	8003e78 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8003caa:	f000 faae 	bl	800420a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(52);
 8003cae:	2034      	movs	r0, #52	; 0x34
 8003cb0:	f000 f8cd 	bl	8003e4e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8003cb4:	f7ff ff16 	bl	8003ae4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8003cb8:	f7ff ff1c 	bl	8003af4 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8003cbc:	f000 fa3c 	bl	8004138 <NRF24_powerDown>
	
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cca:	b002      	add	sp, #8
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	200001a4 	.word	0x200001a4
 8003cd4:	2000019c 	.word	0x2000019c
 8003cd8:	200001a0 	.word	0x200001a0
 8003cdc:	200001a2 	.word	0x200001a2

08003ce0 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f7ff fe39 	bl	800395c <NRF24_read_register>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f043 0303 	orr.w	r3, r3, #3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f7ff fe7b 	bl	80039f0 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <NRF24_startListening+0x48>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	d004      	beq.n	8003d0e <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8003d04:	2205      	movs	r2, #5
 8003d06:	4908      	ldr	r1, [pc, #32]	; (8003d28 <NRF24_startListening+0x48>)
 8003d08:	200a      	movs	r0, #10
 8003d0a:	f7ff fe93 	bl	8003a34 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8003d0e:	f7ff fee9 	bl	8003ae4 <NRF24_flush_tx>
	NRF24_flush_rx();
 8003d12:	f7ff feef 	bl	8003af4 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8003d16:	2001      	movs	r0, #1
 8003d18:	f7ff fe00 	bl	800391c <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8003d1c:	2096      	movs	r0, #150	; 0x96
 8003d1e:	f7ff fdbb 	bl	8003898 <NRF24_DelayMicroSeconds>
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000190 	.word	0x20000190

08003d2c <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8003d30:	2000      	movs	r0, #0
 8003d32:	f000 fa10 	bl	8004156 <NRF24_availablePipe>
 8003d36:	4603      	mov	r3, r0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fe99 	bl	8003a84 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8003d52:	2017      	movs	r0, #23
 8003d54:	f7ff fe02 	bl	800395c <NRF24_read_register>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8003d60:	f7ff fec8 	bl	8003af4 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8003d64:	f000 f8ac 	bl	8003ec0 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bf14      	ite	ne
 8003d6e:	2301      	movne	r3, #1
 8003d70:	2300      	moveq	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4601      	mov	r1, r0
 8003d84:	e9c7 2300 	strd	r2, r3, [r7]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d104      	bne.n	8003d9c <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8003d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d96:	491c      	ldr	r1, [pc, #112]	; (8003e08 <NRF24_openReadingPipe+0x8c>)
 8003d98:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b06      	cmp	r3, #6
 8003da0:	d82d      	bhi.n	8003dfe <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d808      	bhi.n	8003dba <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <NRF24_openReadingPipe+0x90>)
 8003dac:	5cd3      	ldrb	r3, [r2, r3]
 8003dae:	4639      	mov	r1, r7
 8003db0:	2205      	movs	r2, #5
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fe3e 	bl	8003a34 <NRF24_write_registerN>
 8003db8:	e007      	b.n	8003dca <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	4a13      	ldr	r2, [pc, #76]	; (8003e0c <NRF24_openReadingPipe+0x90>)
 8003dbe:	5cd3      	ldrb	r3, [r2, r3]
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fe35 	bl	8003a34 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	4a10      	ldr	r2, [pc, #64]	; (8003e10 <NRF24_openReadingPipe+0x94>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	4a10      	ldr	r2, [pc, #64]	; (8003e14 <NRF24_openReadingPipe+0x98>)
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fe0a 	bl	80039f0 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8003ddc:	2002      	movs	r0, #2
 8003dde:	f7ff fdbd 	bl	800395c <NRF24_read_register>
 8003de2:	4603      	mov	r3, r0
 8003de4:	b25a      	sxtb	r2, r3
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	2101      	movs	r1, #1
 8003dea:	fa01 f303 	lsl.w	r3, r1, r3
 8003dee:	b25b      	sxtb	r3, r3
 8003df0:	4313      	orrs	r3, r2
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	4619      	mov	r1, r3
 8003df8:	2002      	movs	r0, #2
 8003dfa:	f7ff fdf9 	bl	80039f0 <NRF24_write_register>
	}
	
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000190 	.word	0x20000190
 8003e0c:	08005998 	.word	0x08005998
 8003e10:	080059a0 	.word	0x080059a0
 8003e14:	20000198 	.word	0x20000198

08003e18 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	460a      	mov	r2, r1
 8003e22:	71fb      	strb	r3, [r7, #7]
 8003e24:	4613      	mov	r3, r2
 8003e26:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	b25a      	sxtb	r2, r3
 8003e2e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	b25b      	sxtb	r3, r3
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	b25b      	sxtb	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	4619      	mov	r1, r3
 8003e40:	2004      	movs	r0, #4
 8003e42:	f7ff fdd5 	bl	80039f0 <NRF24_write_register>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4603      	mov	r3, r0
 8003e56:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8003e58:	237f      	movs	r3, #127	; 0x7f
 8003e5a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	4293      	cmp	r3, r2
 8003e62:	bf28      	it	cs
 8003e64:	4613      	movcs	r3, r2
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	4619      	mov	r1, r3
 8003e6a:	2005      	movs	r0, #5
 8003e6c:	f7ff fdc0 	bl	80039f0 <NRF24_write_register>
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8003e82:	2320      	movs	r3, #32
 8003e84:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8003e86:	7bfa      	ldrb	r2, [r7, #15]
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	bf28      	it	cs
 8003e8e:	4613      	movcs	r3, r2
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <NRF24_setPayloadSize+0x2c>)
 8003e94:	701a      	strb	r2, [r3, #0]
}
 8003e96:	bf00      	nop
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000198 	.word	0x20000198

08003ea8 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
	return payload_size;
 8003eac:	4b03      	ldr	r3, [pc, #12]	; (8003ebc <NRF24_getPayloadSize+0x14>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000198 	.word	0x20000198

08003ec0 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8003ec4:	2060      	movs	r0, #96	; 0x60
 8003ec6:	f7ff fd49 	bl	800395c <NRF24_read_register>
 8003eca:	4603      	mov	r3, r0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8003ed4:	201d      	movs	r0, #29
 8003ed6:	f7ff fd41 	bl	800395c <NRF24_read_register>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f043 0306 	orr.w	r3, r3, #6
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	201d      	movs	r0, #29
 8003ee6:	f7ff fd83 	bl	80039f0 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8003eea:	201d      	movs	r0, #29
 8003eec:	f7ff fd36 	bl	800395c <NRF24_read_register>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10c      	bne.n	8003f10 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8003ef6:	f000 f991 	bl	800421c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8003efa:	201d      	movs	r0, #29
 8003efc:	f7ff fd2e 	bl	800395c <NRF24_read_register>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f043 0306 	orr.w	r3, r3, #6
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	4619      	mov	r1, r3
 8003f0a:	201d      	movs	r0, #29
 8003f0c:	f7ff fd70 	bl	80039f0 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8003f10:	201c      	movs	r0, #28
 8003f12:	f7ff fd23 	bl	800395c <NRF24_read_register>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f043 0303 	orr.w	r3, r3, #3
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	4619      	mov	r1, r3
 8003f20:	201c      	movs	r0, #28
 8003f22:	f7ff fd65 	bl	80039f0 <NRF24_write_register>
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8003f30:	201d      	movs	r0, #29
 8003f32:	f7ff fd13 	bl	800395c <NRF24_read_register>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f043 0304 	orr.w	r3, r3, #4
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	4619      	mov	r1, r3
 8003f40:	201d      	movs	r0, #29
 8003f42:	f7ff fd55 	bl	80039f0 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8003f46:	201d      	movs	r0, #29
 8003f48:	f7ff fd08 	bl	800395c <NRF24_read_register>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10c      	bne.n	8003f6c <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8003f52:	f000 f963 	bl	800421c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8003f56:	201d      	movs	r0, #29
 8003f58:	f7ff fd00 	bl	800395c <NRF24_read_register>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f043 0304 	orr.w	r3, r3, #4
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	4619      	mov	r1, r3
 8003f66:	201d      	movs	r0, #29
 8003f68:	f7ff fd42 	bl	80039f0 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8003f6c:	201c      	movs	r0, #28
 8003f6e:	f7ff fcf5 	bl	800395c <NRF24_read_register>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	201c      	movs	r0, #28
 8003f7e:	f7ff fd37 	bl	80039f0 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8003f82:	4b02      	ldr	r3, [pc, #8]	; (8003f8c <NRF24_enableDynamicPayloads+0x60>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
	
}
 8003f88:	bf00      	nop
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000199 	.word	0x20000199

08003f90 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8003f94:	201d      	movs	r0, #29
 8003f96:	f7ff fce1 	bl	800395c <NRF24_read_register>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f023 0304 	bic.w	r3, r3, #4
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	201d      	movs	r0, #29
 8003fa6:	f7ff fd23 	bl	80039f0 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8003faa:	2100      	movs	r1, #0
 8003fac:	201c      	movs	r0, #28
 8003fae:	f7ff fd1f 	bl	80039f0 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8003fb2:	4b02      	ldr	r3, [pc, #8]	; (8003fbc <NRF24_disableDynamicPayloads+0x2c>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000199 	.word	0x20000199

08003fc0 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8003fd0:	213f      	movs	r1, #63	; 0x3f
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f7ff fd0c 	bl	80039f0 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8003fd8:	e003      	b.n	8003fe2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8003fda:	2100      	movs	r1, #0
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f7ff fd07 	bl	80039f0 <NRF24_write_register>
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8003ff4:	2006      	movs	r0, #6
 8003ff6:	f7ff fcb1 	bl	800395c <NRF24_read_register>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	f023 0306 	bic.w	r3, r3, #6
 8004004:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	2b03      	cmp	r3, #3
 800400a:	d104      	bne.n	8004016 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	f043 0306 	orr.w	r3, r3, #6
 8004012:	73fb      	strb	r3, [r7, #15]
 8004014:	e019      	b.n	800404a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d104      	bne.n	8004026 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e011      	b.n	800404a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d104      	bne.n	8004036 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	f043 0302 	orr.w	r3, r3, #2
 8004032:	73fb      	strb	r3, [r7, #15]
 8004034:	e009      	b.n	800404a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d006      	beq.n	800404a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	2b04      	cmp	r3, #4
 8004040:	d103      	bne.n	800404a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	f043 0306 	orr.w	r3, r3, #6
 8004048:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	4619      	mov	r1, r3
 800404e:	2006      	movs	r0, #6
 8004050:	f7ff fcce 	bl	80039f0 <NRF24_write_register>
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800406a:	2006      	movs	r0, #6
 800406c:	f7ff fc76 	bl	800395c <NRF24_read_register>
 8004070:	4603      	mov	r3, r0
 8004072:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8004074:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <NRF24_setDataRate+0x88>)
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800407a:	7bbb      	ldrb	r3, [r7, #14]
 800407c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004080:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d107      	bne.n	8004098 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8004088:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <NRF24_setDataRate+0x88>)
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800408e:	7bbb      	ldrb	r3, [r7, #14]
 8004090:	f043 0320 	orr.w	r3, r3, #32
 8004094:	73bb      	strb	r3, [r7, #14]
 8004096:	e00d      	b.n	80040b4 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d107      	bne.n	80040ae <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800409e:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <NRF24_setDataRate+0x88>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80040a4:	7bbb      	ldrb	r3, [r7, #14]
 80040a6:	f043 0308 	orr.w	r3, r3, #8
 80040aa:	73bb      	strb	r3, [r7, #14]
 80040ac:	e002      	b.n	80040b4 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80040ae:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <NRF24_setDataRate+0x88>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80040b4:	7bbb      	ldrb	r3, [r7, #14]
 80040b6:	4619      	mov	r1, r3
 80040b8:	2006      	movs	r0, #6
 80040ba:	f7ff fc99 	bl	80039f0 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80040be:	2006      	movs	r0, #6
 80040c0:	f7ff fc4c 	bl	800395c <NRF24_read_register>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
 80040c8:	7bbb      	ldrb	r3, [r7, #14]
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d102      	bne.n	80040d4 <NRF24_setDataRate+0x78>
  {
    result = true;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
 80040d2:	e002      	b.n	80040da <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <NRF24_setDataRate+0x88>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	2000019a 	.word	0x2000019a

080040e8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80040f2:	2000      	movs	r0, #0
 80040f4:	f7ff fc32 	bl	800395c <NRF24_read_register>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f023 030c 	bic.w	r3, r3, #12
 80040fe:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d00f      	beq.n	8004126 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	f043 0308 	orr.w	r3, r3, #8
 8004112:	73fb      	strb	r3, [r7, #15]
 8004114:	e007      	b.n	8004126 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	f043 0308 	orr.w	r3, r3, #8
 800411c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	4619      	mov	r1, r3
 800412a:	2000      	movs	r0, #0
 800412c:	f7ff fc60 	bl	80039f0 <NRF24_write_register>
}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800413c:	2000      	movs	r0, #0
 800413e:	f7ff fc0d 	bl	800395c <NRF24_read_register>
 8004142:	4603      	mov	r3, r0
 8004144:	f023 0302 	bic.w	r3, r3, #2
 8004148:	b2db      	uxtb	r3, r3
 800414a:	4619      	mov	r1, r3
 800414c:	2000      	movs	r0, #0
 800414e:	f7ff fc4f 	bl	80039f0 <NRF24_write_register>
}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}

08004156 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800415e:	f7ff fcd1 	bl	8003b04 <NRF24_get_status>
 8004162:	4603      	mov	r3, r0
 8004164:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	73bb      	strb	r3, [r7, #14]

  if (result)
 8004176:	7bbb      	ldrb	r3, [r7, #14]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d017      	beq.n	80041ac <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	b2da      	uxtb	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8004192:	2140      	movs	r1, #64	; 0x40
 8004194:	2007      	movs	r0, #7
 8004196:	f7ff fc2b 	bl	80039f0 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80041a4:	2120      	movs	r1, #32
 80041a6:	2007      	movs	r0, #7
 80041a8:	f7ff fc22 	bl	80039f0 <NRF24_write_register>
    }
  }
  return result;
 80041ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	4603      	mov	r3, r0
 80041be:	6039      	str	r1, [r7, #0]
 80041c0:	71fb      	strb	r3, [r7, #7]
 80041c2:	4613      	mov	r3, r2
 80041c4:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 80041ca:	2320      	movs	r3, #32
 80041cc:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 80041ce:	7afa      	ldrb	r2, [r7, #11]
 80041d0:	79bb      	ldrb	r3, [r7, #6]
 80041d2:	4293      	cmp	r3, r2
 80041d4:	bf28      	it	cs
 80041d6:	4613      	movcs	r3, r2
 80041d8:	72bb      	strb	r3, [r7, #10]
	
  NRF24_csn(0);
 80041da:	2000      	movs	r0, #0
 80041dc:	f7ff fb7e 	bl	80038dc <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80041e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	b25b      	sxtb	r3, r3
 80041ea:	f063 0357 	orn	r3, r3, #87	; 0x57
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	7aba      	ldrb	r2, [r7, #10]
 80041f4:	68f9      	ldr	r1, [r7, #12]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fc1c 	bl	8003a34 <NRF24_write_registerN>
  NRF24_csn(1);
 80041fc:	2001      	movs	r0, #1
 80041fe:	f7ff fb6d 	bl	80038dc <NRF24_csn>
}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800420e:	2170      	movs	r1, #112	; 0x70
 8004210:	2007      	movs	r0, #7
 8004212:	f7ff fbed 	bl	80039f0 <NRF24_write_register>
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8004222:	2000      	movs	r0, #0
 8004224:	f7ff fb5a 	bl	80038dc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8004228:	2350      	movs	r3, #80	; 0x50
 800422a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800422c:	2373      	movs	r3, #115	; 0x73
 800422e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8004230:	1d39      	adds	r1, r7, #4
 8004232:	2364      	movs	r3, #100	; 0x64
 8004234:	2202      	movs	r2, #2
 8004236:	4805      	ldr	r0, [pc, #20]	; (800424c <NRF24_ACTIVATE_cmd+0x30>)
 8004238:	f7fd fd97 	bl	8001d6a <HAL_SPI_Transmit>
	NRF24_csn(1);
 800423c:	2001      	movs	r0, #1
 800423e:	f7ff fb4d 	bl	80038dc <NRF24_csn>
}
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	200001a4 	.word	0x200001a4

08004250 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8004250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004252:	b0a1      	sub	sp, #132	; 0x84
 8004254:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004256:	f107 0308 	add.w	r3, r7, #8
 800425a:	49c3      	ldr	r1, [pc, #780]	; (8004568 <printRadioSettings+0x318>)
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fc77 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004262:	f107 0308 	add.w	r3, r7, #8
 8004266:	4618      	mov	r0, r3
 8004268:	f7fb ffb2 	bl	80001d0 <strlen>
 800426c:	4603      	mov	r3, r0
 800426e:	b29a      	uxth	r2, r3
 8004270:	f107 0108 	add.w	r1, r7, #8
 8004274:	230a      	movs	r3, #10
 8004276:	48bd      	ldr	r0, [pc, #756]	; (800456c <printRadioSettings+0x31c>)
 8004278:	f7fe fae3 	bl	8002842 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800427c:	2000      	movs	r0, #0
 800427e:	f7ff fb6d 	bl	800395c <NRF24_read_register>
 8004282:	4603      	mov	r3, r0
 8004284:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8004288:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d013      	beq.n	80042bc <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8004294:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d006      	beq.n	80042ae <printRadioSettings+0x5e>
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	49b2      	ldr	r1, [pc, #712]	; (8004570 <printRadioSettings+0x320>)
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fc52 	bl	8004b50 <siprintf>
 80042ac:	e00c      	b.n	80042c8 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80042ae:	f107 0308 	add.w	r3, r7, #8
 80042b2:	49b0      	ldr	r1, [pc, #704]	; (8004574 <printRadioSettings+0x324>)
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fc4b 	bl	8004b50 <siprintf>
 80042ba:	e005      	b.n	80042c8 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80042bc:	f107 0308 	add.w	r3, r7, #8
 80042c0:	49ad      	ldr	r1, [pc, #692]	; (8004578 <printRadioSettings+0x328>)
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fc44 	bl	8004b50 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80042c8:	f107 0308 	add.w	r3, r7, #8
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fb ff7f 	bl	80001d0 <strlen>
 80042d2:	4603      	mov	r3, r0
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	f107 0108 	add.w	r1, r7, #8
 80042da:	230a      	movs	r3, #10
 80042dc:	48a3      	ldr	r0, [pc, #652]	; (800456c <printRadioSettings+0x31c>)
 80042de:	f7fe fab0 	bl	8002842 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80042e2:	2001      	movs	r0, #1
 80042e4:	f7ff fb3a 	bl	800395c <NRF24_read_register>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80042ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042f2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bfcc      	ite	gt
 80042fa:	2301      	movgt	r3, #1
 80042fc:	2300      	movle	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004302:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004306:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800430a:	2b00      	cmp	r3, #0
 800430c:	bfcc      	ite	gt
 800430e:	2301      	movgt	r3, #1
 8004310:	2300      	movle	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004316:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800431a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800431e:	2b00      	cmp	r3, #0
 8004320:	bfcc      	ite	gt
 8004322:	2301      	movgt	r3, #1
 8004324:	2300      	movle	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800432a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800432e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004332:	2b00      	cmp	r3, #0
 8004334:	bfcc      	ite	gt
 8004336:	2301      	movgt	r3, #1
 8004338:	2300      	movle	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800433e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004342:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004346:	2b00      	cmp	r3, #0
 8004348:	bfcc      	ite	gt
 800434a:	2301      	movgt	r3, #1
 800434c:	2300      	movle	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004352:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004356:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800435a:	2b00      	cmp	r3, #0
 800435c:	bfcc      	ite	gt
 800435e:	2301      	movgt	r3, #1
 8004360:	2300      	movle	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f107 0008 	add.w	r0, r7, #8
 8004368:	9303      	str	r3, [sp, #12]
 800436a:	9402      	str	r4, [sp, #8]
 800436c:	9101      	str	r1, [sp, #4]
 800436e:	9200      	str	r2, [sp, #0]
 8004370:	4633      	mov	r3, r6
 8004372:	462a      	mov	r2, r5
 8004374:	4981      	ldr	r1, [pc, #516]	; (800457c <printRadioSettings+0x32c>)
 8004376:	f000 fbeb 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800437a:	f107 0308 	add.w	r3, r7, #8
 800437e:	4618      	mov	r0, r3
 8004380:	f7fb ff26 	bl	80001d0 <strlen>
 8004384:	4603      	mov	r3, r0
 8004386:	b29a      	uxth	r2, r3
 8004388:	f107 0108 	add.w	r1, r7, #8
 800438c:	230a      	movs	r3, #10
 800438e:	4877      	ldr	r0, [pc, #476]	; (800456c <printRadioSettings+0x31c>)
 8004390:	f7fe fa57 	bl	8002842 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8004394:	2002      	movs	r0, #2
 8004396:	f7ff fae1 	bl	800395c <NRF24_read_register>
 800439a:	4603      	mov	r3, r0
 800439c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80043a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80043a4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bfcc      	ite	gt
 80043ac:	2301      	movgt	r3, #1
 80043ae:	2300      	movle	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80043b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80043b8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bfcc      	ite	gt
 80043c0:	2301      	movgt	r3, #1
 80043c2:	2300      	movle	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80043c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80043cc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bfcc      	ite	gt
 80043d4:	2301      	movgt	r3, #1
 80043d6:	2300      	movle	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80043dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80043e0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bfcc      	ite	gt
 80043e8:	2301      	movgt	r3, #1
 80043ea:	2300      	movle	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80043f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80043f4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bfcc      	ite	gt
 80043fc:	2301      	movgt	r3, #1
 80043fe:	2300      	movle	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004404:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004408:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800440c:	2b00      	cmp	r3, #0
 800440e:	bfcc      	ite	gt
 8004410:	2301      	movgt	r3, #1
 8004412:	2300      	movle	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f107 0008 	add.w	r0, r7, #8
 800441a:	9303      	str	r3, [sp, #12]
 800441c:	9402      	str	r4, [sp, #8]
 800441e:	9101      	str	r1, [sp, #4]
 8004420:	9200      	str	r2, [sp, #0]
 8004422:	4633      	mov	r3, r6
 8004424:	462a      	mov	r2, r5
 8004426:	4956      	ldr	r1, [pc, #344]	; (8004580 <printRadioSettings+0x330>)
 8004428:	f000 fb92 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800442c:	f107 0308 	add.w	r3, r7, #8
 8004430:	4618      	mov	r0, r3
 8004432:	f7fb fecd 	bl	80001d0 <strlen>
 8004436:	4603      	mov	r3, r0
 8004438:	b29a      	uxth	r2, r3
 800443a:	f107 0108 	add.w	r1, r7, #8
 800443e:	230a      	movs	r3, #10
 8004440:	484a      	ldr	r0, [pc, #296]	; (800456c <printRadioSettings+0x31c>)
 8004442:	f7fe f9fe 	bl	8002842 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8004446:	2003      	movs	r0, #3
 8004448:	f7ff fa88 	bl	800395c <NRF24_read_register>
 800444c:	4603      	mov	r3, r0
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8004456:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800445a:	3302      	adds	r3, #2
 800445c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8004460:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004464:	f107 0308 	add.w	r3, r7, #8
 8004468:	4946      	ldr	r1, [pc, #280]	; (8004584 <printRadioSettings+0x334>)
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fb70 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004470:	f107 0308 	add.w	r3, r7, #8
 8004474:	4618      	mov	r0, r3
 8004476:	f7fb feab 	bl	80001d0 <strlen>
 800447a:	4603      	mov	r3, r0
 800447c:	b29a      	uxth	r2, r3
 800447e:	f107 0108 	add.w	r1, r7, #8
 8004482:	230a      	movs	r3, #10
 8004484:	4839      	ldr	r0, [pc, #228]	; (800456c <printRadioSettings+0x31c>)
 8004486:	f7fe f9dc 	bl	8002842 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800448a:	2005      	movs	r0, #5
 800448c:	f7ff fa66 	bl	800395c <NRF24_read_register>
 8004490:	4603      	mov	r3, r0
 8004492:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8004496:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800449a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800449e:	f107 0308 	add.w	r3, r7, #8
 80044a2:	4939      	ldr	r1, [pc, #228]	; (8004588 <printRadioSettings+0x338>)
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fb53 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80044aa:	f107 0308 	add.w	r3, r7, #8
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fb fe8e 	bl	80001d0 <strlen>
 80044b4:	4603      	mov	r3, r0
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	f107 0108 	add.w	r1, r7, #8
 80044bc:	230a      	movs	r3, #10
 80044be:	482b      	ldr	r0, [pc, #172]	; (800456c <printRadioSettings+0x31c>)
 80044c0:	f7fe f9bf 	bl	8002842 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80044c4:	2006      	movs	r0, #6
 80044c6:	f7ff fa49 	bl	800395c <NRF24_read_register>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80044d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d006      	beq.n	80044ea <printRadioSettings+0x29a>
 80044dc:	f107 0308 	add.w	r3, r7, #8
 80044e0:	492a      	ldr	r1, [pc, #168]	; (800458c <printRadioSettings+0x33c>)
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fb34 	bl	8004b50 <siprintf>
 80044e8:	e005      	b.n	80044f6 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80044ea:	f107 0308 	add.w	r3, r7, #8
 80044ee:	4928      	ldr	r1, [pc, #160]	; (8004590 <printRadioSettings+0x340>)
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fb2d 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80044f6:	f107 0308 	add.w	r3, r7, #8
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fb fe68 	bl	80001d0 <strlen>
 8004500:	4603      	mov	r3, r0
 8004502:	b29a      	uxth	r2, r3
 8004504:	f107 0108 	add.w	r1, r7, #8
 8004508:	230a      	movs	r3, #10
 800450a:	4818      	ldr	r0, [pc, #96]	; (800456c <printRadioSettings+0x31c>)
 800450c:	f7fe f999 	bl	8002842 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8004510:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004514:	f003 0306 	and.w	r3, r3, #6
 8004518:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 800451c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8004526:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <printRadioSettings+0x2ec>
 800452e:	f107 0308 	add.w	r3, r7, #8
 8004532:	4918      	ldr	r1, [pc, #96]	; (8004594 <printRadioSettings+0x344>)
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fb0b 	bl	8004b50 <siprintf>
 800453a:	e03b      	b.n	80045b4 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800453c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004540:	2b01      	cmp	r3, #1
 8004542:	d106      	bne.n	8004552 <printRadioSettings+0x302>
 8004544:	f107 0308 	add.w	r3, r7, #8
 8004548:	4913      	ldr	r1, [pc, #76]	; (8004598 <printRadioSettings+0x348>)
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fb00 	bl	8004b50 <siprintf>
 8004550:	e030      	b.n	80045b4 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8004552:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004556:	2b02      	cmp	r3, #2
 8004558:	d122      	bne.n	80045a0 <printRadioSettings+0x350>
 800455a:	f107 0308 	add.w	r3, r7, #8
 800455e:	490f      	ldr	r1, [pc, #60]	; (800459c <printRadioSettings+0x34c>)
 8004560:	4618      	mov	r0, r3
 8004562:	f000 faf5 	bl	8004b50 <siprintf>
 8004566:	e025      	b.n	80045b4 <printRadioSettings+0x364>
 8004568:	0800543c 	.word	0x0800543c
 800456c:	200001fc 	.word	0x200001fc
 8004570:	08005470 	.word	0x08005470
 8004574:	0800548c 	.word	0x0800548c
 8004578:	080054a8 	.word	0x080054a8
 800457c:	080054bc 	.word	0x080054bc
 8004580:	08005500 	.word	0x08005500
 8004584:	0800554c 	.word	0x0800554c
 8004588:	08005568 	.word	0x08005568
 800458c:	0800557c 	.word	0x0800557c
 8004590:	08005594 	.word	0x08005594
 8004594:	080055ac 	.word	0x080055ac
 8004598:	080055c0 	.word	0x080055c0
 800459c:	080055d4 	.word	0x080055d4
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80045a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d105      	bne.n	80045b4 <printRadioSettings+0x364>
 80045a8:	f107 0308 	add.w	r3, r7, #8
 80045ac:	49d7      	ldr	r1, [pc, #860]	; (800490c <printRadioSettings+0x6bc>)
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 face 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80045b4:	f107 0308 	add.w	r3, r7, #8
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fb fe09 	bl	80001d0 <strlen>
 80045be:	4603      	mov	r3, r0
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	f107 0108 	add.w	r1, r7, #8
 80045c6:	230a      	movs	r3, #10
 80045c8:	48d1      	ldr	r0, [pc, #836]	; (8004910 <printRadioSettings+0x6c0>)
 80045ca:	f7fe f93a 	bl	8002842 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80045ce:	463b      	mov	r3, r7
 80045d0:	2205      	movs	r2, #5
 80045d2:	4619      	mov	r1, r3
 80045d4:	200a      	movs	r0, #10
 80045d6:	f7ff f9e7 	bl	80039a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80045da:	793b      	ldrb	r3, [r7, #4]
 80045dc:	461c      	mov	r4, r3
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	461d      	mov	r5, r3
 80045e2:	78bb      	ldrb	r3, [r7, #2]
 80045e4:	787a      	ldrb	r2, [r7, #1]
 80045e6:	7839      	ldrb	r1, [r7, #0]
 80045e8:	f107 0008 	add.w	r0, r7, #8
 80045ec:	9102      	str	r1, [sp, #8]
 80045ee:	9201      	str	r2, [sp, #4]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	462b      	mov	r3, r5
 80045f4:	4622      	mov	r2, r4
 80045f6:	49c7      	ldr	r1, [pc, #796]	; (8004914 <printRadioSettings+0x6c4>)
 80045f8:	f000 faaa 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80045fc:	f107 0308 	add.w	r3, r7, #8
 8004600:	4618      	mov	r0, r3
 8004602:	f7fb fde5 	bl	80001d0 <strlen>
 8004606:	4603      	mov	r3, r0
 8004608:	b29a      	uxth	r2, r3
 800460a:	f107 0108 	add.w	r1, r7, #8
 800460e:	230a      	movs	r3, #10
 8004610:	48bf      	ldr	r0, [pc, #764]	; (8004910 <printRadioSettings+0x6c0>)
 8004612:	f7fe f916 	bl	8002842 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8004616:	463b      	mov	r3, r7
 8004618:	2205      	movs	r2, #5
 800461a:	4619      	mov	r1, r3
 800461c:	200b      	movs	r0, #11
 800461e:	f7ff f9c3 	bl	80039a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004622:	793b      	ldrb	r3, [r7, #4]
 8004624:	461c      	mov	r4, r3
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	461d      	mov	r5, r3
 800462a:	78bb      	ldrb	r3, [r7, #2]
 800462c:	787a      	ldrb	r2, [r7, #1]
 800462e:	7839      	ldrb	r1, [r7, #0]
 8004630:	f107 0008 	add.w	r0, r7, #8
 8004634:	9102      	str	r1, [sp, #8]
 8004636:	9201      	str	r2, [sp, #4]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	462b      	mov	r3, r5
 800463c:	4622      	mov	r2, r4
 800463e:	49b6      	ldr	r1, [pc, #728]	; (8004918 <printRadioSettings+0x6c8>)
 8004640:	f000 fa86 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004644:	f107 0308 	add.w	r3, r7, #8
 8004648:	4618      	mov	r0, r3
 800464a:	f7fb fdc1 	bl	80001d0 <strlen>
 800464e:	4603      	mov	r3, r0
 8004650:	b29a      	uxth	r2, r3
 8004652:	f107 0108 	add.w	r1, r7, #8
 8004656:	230a      	movs	r3, #10
 8004658:	48ad      	ldr	r0, [pc, #692]	; (8004910 <printRadioSettings+0x6c0>)
 800465a:	f7fe f8f2 	bl	8002842 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800465e:	463b      	mov	r3, r7
 8004660:	2201      	movs	r2, #1
 8004662:	4619      	mov	r1, r3
 8004664:	200c      	movs	r0, #12
 8004666:	f7ff f99f 	bl	80039a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800466a:	783b      	ldrb	r3, [r7, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	f107 0308 	add.w	r3, r7, #8
 8004672:	49aa      	ldr	r1, [pc, #680]	; (800491c <printRadioSettings+0x6cc>)
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fa6b 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800467a:	f107 0308 	add.w	r3, r7, #8
 800467e:	4618      	mov	r0, r3
 8004680:	f7fb fda6 	bl	80001d0 <strlen>
 8004684:	4603      	mov	r3, r0
 8004686:	b29a      	uxth	r2, r3
 8004688:	f107 0108 	add.w	r1, r7, #8
 800468c:	230a      	movs	r3, #10
 800468e:	48a0      	ldr	r0, [pc, #640]	; (8004910 <printRadioSettings+0x6c0>)
 8004690:	f7fe f8d7 	bl	8002842 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8004694:	463b      	mov	r3, r7
 8004696:	2201      	movs	r2, #1
 8004698:	4619      	mov	r1, r3
 800469a:	200d      	movs	r0, #13
 800469c:	f7ff f984 	bl	80039a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80046a0:	783b      	ldrb	r3, [r7, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	499d      	ldr	r1, [pc, #628]	; (8004920 <printRadioSettings+0x6d0>)
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fa50 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80046b0:	f107 0308 	add.w	r3, r7, #8
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fb fd8b 	bl	80001d0 <strlen>
 80046ba:	4603      	mov	r3, r0
 80046bc:	b29a      	uxth	r2, r3
 80046be:	f107 0108 	add.w	r1, r7, #8
 80046c2:	230a      	movs	r3, #10
 80046c4:	4892      	ldr	r0, [pc, #584]	; (8004910 <printRadioSettings+0x6c0>)
 80046c6:	f7fe f8bc 	bl	8002842 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80046ca:	463b      	mov	r3, r7
 80046cc:	2201      	movs	r2, #1
 80046ce:	4619      	mov	r1, r3
 80046d0:	200e      	movs	r0, #14
 80046d2:	f7ff f969 	bl	80039a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80046d6:	783b      	ldrb	r3, [r7, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	f107 0308 	add.w	r3, r7, #8
 80046de:	4991      	ldr	r1, [pc, #580]	; (8004924 <printRadioSettings+0x6d4>)
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fa35 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80046e6:	f107 0308 	add.w	r3, r7, #8
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fb fd70 	bl	80001d0 <strlen>
 80046f0:	4603      	mov	r3, r0
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	f107 0108 	add.w	r1, r7, #8
 80046f8:	230a      	movs	r3, #10
 80046fa:	4885      	ldr	r0, [pc, #532]	; (8004910 <printRadioSettings+0x6c0>)
 80046fc:	f7fe f8a1 	bl	8002842 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8004700:	463b      	mov	r3, r7
 8004702:	2201      	movs	r2, #1
 8004704:	4619      	mov	r1, r3
 8004706:	200f      	movs	r0, #15
 8004708:	f7ff f94e 	bl	80039a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800470c:	783b      	ldrb	r3, [r7, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	f107 0308 	add.w	r3, r7, #8
 8004714:	4984      	ldr	r1, [pc, #528]	; (8004928 <printRadioSettings+0x6d8>)
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fa1a 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800471c:	f107 0308 	add.w	r3, r7, #8
 8004720:	4618      	mov	r0, r3
 8004722:	f7fb fd55 	bl	80001d0 <strlen>
 8004726:	4603      	mov	r3, r0
 8004728:	b29a      	uxth	r2, r3
 800472a:	f107 0108 	add.w	r1, r7, #8
 800472e:	230a      	movs	r3, #10
 8004730:	4877      	ldr	r0, [pc, #476]	; (8004910 <printRadioSettings+0x6c0>)
 8004732:	f7fe f886 	bl	8002842 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8004736:	463b      	mov	r3, r7
 8004738:	2205      	movs	r2, #5
 800473a:	4619      	mov	r1, r3
 800473c:	2010      	movs	r0, #16
 800473e:	f7ff f933 	bl	80039a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004742:	793b      	ldrb	r3, [r7, #4]
 8004744:	461c      	mov	r4, r3
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	461d      	mov	r5, r3
 800474a:	78bb      	ldrb	r3, [r7, #2]
 800474c:	787a      	ldrb	r2, [r7, #1]
 800474e:	7839      	ldrb	r1, [r7, #0]
 8004750:	f107 0008 	add.w	r0, r7, #8
 8004754:	9102      	str	r1, [sp, #8]
 8004756:	9201      	str	r2, [sp, #4]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	462b      	mov	r3, r5
 800475c:	4622      	mov	r2, r4
 800475e:	4973      	ldr	r1, [pc, #460]	; (800492c <printRadioSettings+0x6dc>)
 8004760:	f000 f9f6 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004764:	f107 0308 	add.w	r3, r7, #8
 8004768:	4618      	mov	r0, r3
 800476a:	f7fb fd31 	bl	80001d0 <strlen>
 800476e:	4603      	mov	r3, r0
 8004770:	b29a      	uxth	r2, r3
 8004772:	f107 0108 	add.w	r1, r7, #8
 8004776:	230a      	movs	r3, #10
 8004778:	4865      	ldr	r0, [pc, #404]	; (8004910 <printRadioSettings+0x6c0>)
 800477a:	f7fe f862 	bl	8002842 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800477e:	2011      	movs	r0, #17
 8004780:	f7ff f8ec 	bl	800395c <NRF24_read_register>
 8004784:	4603      	mov	r3, r0
 8004786:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800478a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800478e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004792:	f107 0308 	add.w	r3, r7, #8
 8004796:	4966      	ldr	r1, [pc, #408]	; (8004930 <printRadioSettings+0x6e0>)
 8004798:	4618      	mov	r0, r3
 800479a:	f000 f9d9 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fb fd14 	bl	80001d0 <strlen>
 80047a8:	4603      	mov	r3, r0
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	f107 0108 	add.w	r1, r7, #8
 80047b0:	230a      	movs	r3, #10
 80047b2:	4857      	ldr	r0, [pc, #348]	; (8004910 <printRadioSettings+0x6c0>)
 80047b4:	f7fe f845 	bl	8002842 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80047b8:	2012      	movs	r0, #18
 80047ba:	f7ff f8cf 	bl	800395c <NRF24_read_register>
 80047be:	4603      	mov	r3, r0
 80047c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80047c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80047c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047cc:	f107 0308 	add.w	r3, r7, #8
 80047d0:	4958      	ldr	r1, [pc, #352]	; (8004934 <printRadioSettings+0x6e4>)
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f9bc 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80047d8:	f107 0308 	add.w	r3, r7, #8
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fb fcf7 	bl	80001d0 <strlen>
 80047e2:	4603      	mov	r3, r0
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	f107 0108 	add.w	r1, r7, #8
 80047ea:	230a      	movs	r3, #10
 80047ec:	4848      	ldr	r0, [pc, #288]	; (8004910 <printRadioSettings+0x6c0>)
 80047ee:	f7fe f828 	bl	8002842 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80047f2:	2013      	movs	r0, #19
 80047f4:	f7ff f8b2 	bl	800395c <NRF24_read_register>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80047fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004806:	f107 0308 	add.w	r3, r7, #8
 800480a:	494b      	ldr	r1, [pc, #300]	; (8004938 <printRadioSettings+0x6e8>)
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f99f 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004812:	f107 0308 	add.w	r3, r7, #8
 8004816:	4618      	mov	r0, r3
 8004818:	f7fb fcda 	bl	80001d0 <strlen>
 800481c:	4603      	mov	r3, r0
 800481e:	b29a      	uxth	r2, r3
 8004820:	f107 0108 	add.w	r1, r7, #8
 8004824:	230a      	movs	r3, #10
 8004826:	483a      	ldr	r0, [pc, #232]	; (8004910 <printRadioSettings+0x6c0>)
 8004828:	f7fe f80b 	bl	8002842 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 800482c:	2014      	movs	r0, #20
 800482e:	f7ff f895 	bl	800395c <NRF24_read_register>
 8004832:	4603      	mov	r3, r0
 8004834:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004838:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800483c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004840:	f107 0308 	add.w	r3, r7, #8
 8004844:	493d      	ldr	r1, [pc, #244]	; (800493c <printRadioSettings+0x6ec>)
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f982 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800484c:	f107 0308 	add.w	r3, r7, #8
 8004850:	4618      	mov	r0, r3
 8004852:	f7fb fcbd 	bl	80001d0 <strlen>
 8004856:	4603      	mov	r3, r0
 8004858:	b29a      	uxth	r2, r3
 800485a:	f107 0108 	add.w	r1, r7, #8
 800485e:	230a      	movs	r3, #10
 8004860:	482b      	ldr	r0, [pc, #172]	; (8004910 <printRadioSettings+0x6c0>)
 8004862:	f7fd ffee 	bl	8002842 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8004866:	2015      	movs	r0, #21
 8004868:	f7ff f878 	bl	800395c <NRF24_read_register>
 800486c:	4603      	mov	r3, r0
 800486e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004872:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	4930      	ldr	r1, [pc, #192]	; (8004940 <printRadioSettings+0x6f0>)
 8004880:	4618      	mov	r0, r3
 8004882:	f000 f965 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	4618      	mov	r0, r3
 800488c:	f7fb fca0 	bl	80001d0 <strlen>
 8004890:	4603      	mov	r3, r0
 8004892:	b29a      	uxth	r2, r3
 8004894:	f107 0108 	add.w	r1, r7, #8
 8004898:	230a      	movs	r3, #10
 800489a:	481d      	ldr	r0, [pc, #116]	; (8004910 <printRadioSettings+0x6c0>)
 800489c:	f7fd ffd1 	bl	8002842 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80048a0:	2016      	movs	r0, #22
 80048a2:	f7ff f85b 	bl	800395c <NRF24_read_register>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80048ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80048b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048b4:	f107 0308 	add.w	r3, r7, #8
 80048b8:	4922      	ldr	r1, [pc, #136]	; (8004944 <printRadioSettings+0x6f4>)
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f948 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80048c0:	f107 0308 	add.w	r3, r7, #8
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fb fc83 	bl	80001d0 <strlen>
 80048ca:	4603      	mov	r3, r0
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	f107 0108 	add.w	r1, r7, #8
 80048d2:	230a      	movs	r3, #10
 80048d4:	480e      	ldr	r0, [pc, #56]	; (8004910 <printRadioSettings+0x6c0>)
 80048d6:	f7fd ffb4 	bl	8002842 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80048da:	201c      	movs	r0, #28
 80048dc:	f7ff f83e 	bl	800395c <NRF24_read_register>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80048e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80048ea:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bfcc      	ite	gt
 80048f2:	2301      	movgt	r3, #1
 80048f4:	2300      	movle	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80048fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80048fe:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004902:	2b00      	cmp	r3, #0
 8004904:	bfcc      	ite	gt
 8004906:	2301      	movgt	r3, #1
 8004908:	2300      	movle	r3, #0
 800490a:	e01d      	b.n	8004948 <printRadioSettings+0x6f8>
 800490c:	080055e8 	.word	0x080055e8
 8004910:	200001fc 	.word	0x200001fc
 8004914:	080055fc 	.word	0x080055fc
 8004918:	0800562c 	.word	0x0800562c
 800491c:	0800565c 	.word	0x0800565c
 8004920:	08005684 	.word	0x08005684
 8004924:	080056ac 	.word	0x080056ac
 8004928:	080056d4 	.word	0x080056d4
 800492c:	080056fc 	.word	0x080056fc
 8004930:	08005728 	.word	0x08005728
 8004934:	08005744 	.word	0x08005744
 8004938:	08005760 	.word	0x08005760
 800493c:	0800577c 	.word	0x0800577c
 8004940:	08005798 	.word	0x08005798
 8004944:	080057b4 	.word	0x080057b4
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800494c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004950:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004954:	2b00      	cmp	r3, #0
 8004956:	bfcc      	ite	gt
 8004958:	2301      	movgt	r3, #1
 800495a:	2300      	movle	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004960:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004964:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004968:	2b00      	cmp	r3, #0
 800496a:	bfcc      	ite	gt
 800496c:	2301      	movgt	r3, #1
 800496e:	2300      	movle	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004974:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004978:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800497c:	2b00      	cmp	r3, #0
 800497e:	bfcc      	ite	gt
 8004980:	2301      	movgt	r3, #1
 8004982:	2300      	movle	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004988:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800498c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004990:	2b00      	cmp	r3, #0
 8004992:	bfcc      	ite	gt
 8004994:	2301      	movgt	r3, #1
 8004996:	2300      	movle	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	f107 0008 	add.w	r0, r7, #8
 800499e:	9303      	str	r3, [sp, #12]
 80049a0:	9402      	str	r4, [sp, #8]
 80049a2:	9101      	str	r1, [sp, #4]
 80049a4:	9200      	str	r2, [sp, #0]
 80049a6:	4633      	mov	r3, r6
 80049a8:	462a      	mov	r2, r5
 80049aa:	4936      	ldr	r1, [pc, #216]	; (8004a84 <printRadioSettings+0x834>)
 80049ac:	f000 f8d0 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049b0:	f107 0308 	add.w	r3, r7, #8
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fb fc0b 	bl	80001d0 <strlen>
 80049ba:	4603      	mov	r3, r0
 80049bc:	b29a      	uxth	r2, r3
 80049be:	f107 0108 	add.w	r1, r7, #8
 80049c2:	230a      	movs	r3, #10
 80049c4:	4830      	ldr	r0, [pc, #192]	; (8004a88 <printRadioSettings+0x838>)
 80049c6:	f7fd ff3c 	bl	8002842 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80049ca:	201d      	movs	r0, #29
 80049cc:	f7fe ffc6 	bl	800395c <NRF24_read_register>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80049d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d006      	beq.n	80049f0 <printRadioSettings+0x7a0>
 80049e2:	f107 0308 	add.w	r3, r7, #8
 80049e6:	4929      	ldr	r1, [pc, #164]	; (8004a8c <printRadioSettings+0x83c>)
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f8b1 	bl	8004b50 <siprintf>
 80049ee:	e005      	b.n	80049fc <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80049f0:	f107 0308 	add.w	r3, r7, #8
 80049f4:	4926      	ldr	r1, [pc, #152]	; (8004a90 <printRadioSettings+0x840>)
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f8aa 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fb fbe5 	bl	80001d0 <strlen>
 8004a06:	4603      	mov	r3, r0
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	f107 0108 	add.w	r1, r7, #8
 8004a0e:	230a      	movs	r3, #10
 8004a10:	481d      	ldr	r0, [pc, #116]	; (8004a88 <printRadioSettings+0x838>)
 8004a12:	f7fd ff16 	bl	8002842 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8004a16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d006      	beq.n	8004a30 <printRadioSettings+0x7e0>
 8004a22:	f107 0308 	add.w	r3, r7, #8
 8004a26:	491b      	ldr	r1, [pc, #108]	; (8004a94 <printRadioSettings+0x844>)
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 f891 	bl	8004b50 <siprintf>
 8004a2e:	e005      	b.n	8004a3c <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8004a30:	f107 0308 	add.w	r3, r7, #8
 8004a34:	4918      	ldr	r1, [pc, #96]	; (8004a98 <printRadioSettings+0x848>)
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f88a 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a3c:	f107 0308 	add.w	r3, r7, #8
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fb fbc5 	bl	80001d0 <strlen>
 8004a46:	4603      	mov	r3, r0
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	f107 0108 	add.w	r1, r7, #8
 8004a4e:	230a      	movs	r3, #10
 8004a50:	480d      	ldr	r0, [pc, #52]	; (8004a88 <printRadioSettings+0x838>)
 8004a52:	f7fd fef6 	bl	8002842 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004a56:	f107 0308 	add.w	r3, r7, #8
 8004a5a:	4910      	ldr	r1, [pc, #64]	; (8004a9c <printRadioSettings+0x84c>)
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 f877 	bl	8004b50 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a62:	f107 0308 	add.w	r3, r7, #8
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fb fbb2 	bl	80001d0 <strlen>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	f107 0108 	add.w	r1, r7, #8
 8004a74:	230a      	movs	r3, #10
 8004a76:	4804      	ldr	r0, [pc, #16]	; (8004a88 <printRadioSettings+0x838>)
 8004a78:	f7fd fee3 	bl	8002842 <HAL_UART_Transmit>
}
 8004a7c:	bf00      	nop
 8004a7e:	3774      	adds	r7, #116	; 0x74
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a84:	080057d0 	.word	0x080057d0
 8004a88:	200001fc 	.word	0x200001fc
 8004a8c:	0800581c 	.word	0x0800581c
 8004a90:	08005834 	.word	0x08005834
 8004a94:	0800584c 	.word	0x0800584c
 8004a98:	08005868 	.word	0x08005868
 8004a9c:	0800543c 	.word	0x0800543c

08004aa0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	f107 0c08 	add.w	ip, r7, #8
 8004aaa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <nrf24_DebugUART_Init+0x2c>)
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f107 0308 	add.w	r3, r7, #8
 8004ab6:	2244      	movs	r2, #68	; 0x44
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f000 f833 	bl	8004b24 <memcpy>
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ac6:	b004      	add	sp, #16
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	200001fc 	.word	0x200001fc

08004ad0 <__errno>:
 8004ad0:	4b01      	ldr	r3, [pc, #4]	; (8004ad8 <__errno+0x8>)
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000044 	.word	0x20000044

08004adc <__libc_init_array>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	4d0d      	ldr	r5, [pc, #52]	; (8004b14 <__libc_init_array+0x38>)
 8004ae0:	4c0d      	ldr	r4, [pc, #52]	; (8004b18 <__libc_init_array+0x3c>)
 8004ae2:	1b64      	subs	r4, r4, r5
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	2600      	movs	r6, #0
 8004ae8:	42a6      	cmp	r6, r4
 8004aea:	d109      	bne.n	8004b00 <__libc_init_array+0x24>
 8004aec:	4d0b      	ldr	r5, [pc, #44]	; (8004b1c <__libc_init_array+0x40>)
 8004aee:	4c0c      	ldr	r4, [pc, #48]	; (8004b20 <__libc_init_array+0x44>)
 8004af0:	f000 fc8e 	bl	8005410 <_init>
 8004af4:	1b64      	subs	r4, r4, r5
 8004af6:	10a4      	asrs	r4, r4, #2
 8004af8:	2600      	movs	r6, #0
 8004afa:	42a6      	cmp	r6, r4
 8004afc:	d105      	bne.n	8004b0a <__libc_init_array+0x2e>
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b04:	4798      	blx	r3
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7ee      	b.n	8004ae8 <__libc_init_array+0xc>
 8004b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0e:	4798      	blx	r3
 8004b10:	3601      	adds	r6, #1
 8004b12:	e7f2      	b.n	8004afa <__libc_init_array+0x1e>
 8004b14:	08005a44 	.word	0x08005a44
 8004b18:	08005a44 	.word	0x08005a44
 8004b1c:	08005a44 	.word	0x08005a44
 8004b20:	08005a48 	.word	0x08005a48

08004b24 <memcpy>:
 8004b24:	440a      	add	r2, r1
 8004b26:	4291      	cmp	r1, r2
 8004b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b2c:	d100      	bne.n	8004b30 <memcpy+0xc>
 8004b2e:	4770      	bx	lr
 8004b30:	b510      	push	{r4, lr}
 8004b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b3a:	4291      	cmp	r1, r2
 8004b3c:	d1f9      	bne.n	8004b32 <memcpy+0xe>
 8004b3e:	bd10      	pop	{r4, pc}

08004b40 <memset>:
 8004b40:	4402      	add	r2, r0
 8004b42:	4603      	mov	r3, r0
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d100      	bne.n	8004b4a <memset+0xa>
 8004b48:	4770      	bx	lr
 8004b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b4e:	e7f9      	b.n	8004b44 <memset+0x4>

08004b50 <siprintf>:
 8004b50:	b40e      	push	{r1, r2, r3}
 8004b52:	b500      	push	{lr}
 8004b54:	b09c      	sub	sp, #112	; 0x70
 8004b56:	ab1d      	add	r3, sp, #116	; 0x74
 8004b58:	9002      	str	r0, [sp, #8]
 8004b5a:	9006      	str	r0, [sp, #24]
 8004b5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b60:	4809      	ldr	r0, [pc, #36]	; (8004b88 <siprintf+0x38>)
 8004b62:	9107      	str	r1, [sp, #28]
 8004b64:	9104      	str	r1, [sp, #16]
 8004b66:	4909      	ldr	r1, [pc, #36]	; (8004b8c <siprintf+0x3c>)
 8004b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b6c:	9105      	str	r1, [sp, #20]
 8004b6e:	6800      	ldr	r0, [r0, #0]
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	a902      	add	r1, sp, #8
 8004b74:	f000 f948 	bl	8004e08 <_svfiprintf_r>
 8004b78:	9b02      	ldr	r3, [sp, #8]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	b01c      	add	sp, #112	; 0x70
 8004b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b84:	b003      	add	sp, #12
 8004b86:	4770      	bx	lr
 8004b88:	20000044 	.word	0x20000044
 8004b8c:	ffff0208 	.word	0xffff0208

08004b90 <_free_r>:
 8004b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b92:	2900      	cmp	r1, #0
 8004b94:	d044      	beq.n	8004c20 <_free_r+0x90>
 8004b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b9a:	9001      	str	r0, [sp, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8004ba2:	bfb8      	it	lt
 8004ba4:	18e4      	addlt	r4, r4, r3
 8004ba6:	f000 fbef 	bl	8005388 <__malloc_lock>
 8004baa:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <_free_r+0x94>)
 8004bac:	9801      	ldr	r0, [sp, #4]
 8004bae:	6813      	ldr	r3, [r2, #0]
 8004bb0:	b933      	cbnz	r3, 8004bc0 <_free_r+0x30>
 8004bb2:	6063      	str	r3, [r4, #4]
 8004bb4:	6014      	str	r4, [r2, #0]
 8004bb6:	b003      	add	sp, #12
 8004bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bbc:	f000 bbea 	b.w	8005394 <__malloc_unlock>
 8004bc0:	42a3      	cmp	r3, r4
 8004bc2:	d908      	bls.n	8004bd6 <_free_r+0x46>
 8004bc4:	6825      	ldr	r5, [r4, #0]
 8004bc6:	1961      	adds	r1, r4, r5
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	bf01      	itttt	eq
 8004bcc:	6819      	ldreq	r1, [r3, #0]
 8004bce:	685b      	ldreq	r3, [r3, #4]
 8004bd0:	1949      	addeq	r1, r1, r5
 8004bd2:	6021      	streq	r1, [r4, #0]
 8004bd4:	e7ed      	b.n	8004bb2 <_free_r+0x22>
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	b10b      	cbz	r3, 8004be0 <_free_r+0x50>
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	d9fa      	bls.n	8004bd6 <_free_r+0x46>
 8004be0:	6811      	ldr	r1, [r2, #0]
 8004be2:	1855      	adds	r5, r2, r1
 8004be4:	42a5      	cmp	r5, r4
 8004be6:	d10b      	bne.n	8004c00 <_free_r+0x70>
 8004be8:	6824      	ldr	r4, [r4, #0]
 8004bea:	4421      	add	r1, r4
 8004bec:	1854      	adds	r4, r2, r1
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	6011      	str	r1, [r2, #0]
 8004bf2:	d1e0      	bne.n	8004bb6 <_free_r+0x26>
 8004bf4:	681c      	ldr	r4, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	6053      	str	r3, [r2, #4]
 8004bfa:	4421      	add	r1, r4
 8004bfc:	6011      	str	r1, [r2, #0]
 8004bfe:	e7da      	b.n	8004bb6 <_free_r+0x26>
 8004c00:	d902      	bls.n	8004c08 <_free_r+0x78>
 8004c02:	230c      	movs	r3, #12
 8004c04:	6003      	str	r3, [r0, #0]
 8004c06:	e7d6      	b.n	8004bb6 <_free_r+0x26>
 8004c08:	6825      	ldr	r5, [r4, #0]
 8004c0a:	1961      	adds	r1, r4, r5
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	bf04      	itt	eq
 8004c10:	6819      	ldreq	r1, [r3, #0]
 8004c12:	685b      	ldreq	r3, [r3, #4]
 8004c14:	6063      	str	r3, [r4, #4]
 8004c16:	bf04      	itt	eq
 8004c18:	1949      	addeq	r1, r1, r5
 8004c1a:	6021      	streq	r1, [r4, #0]
 8004c1c:	6054      	str	r4, [r2, #4]
 8004c1e:	e7ca      	b.n	8004bb6 <_free_r+0x26>
 8004c20:	b003      	add	sp, #12
 8004c22:	bd30      	pop	{r4, r5, pc}
 8004c24:	20000240 	.word	0x20000240

08004c28 <sbrk_aligned>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	4e0e      	ldr	r6, [pc, #56]	; (8004c64 <sbrk_aligned+0x3c>)
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	6831      	ldr	r1, [r6, #0]
 8004c30:	4605      	mov	r5, r0
 8004c32:	b911      	cbnz	r1, 8004c3a <sbrk_aligned+0x12>
 8004c34:	f000 fb7c 	bl	8005330 <_sbrk_r>
 8004c38:	6030      	str	r0, [r6, #0]
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f000 fb77 	bl	8005330 <_sbrk_r>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	d00a      	beq.n	8004c5c <sbrk_aligned+0x34>
 8004c46:	1cc4      	adds	r4, r0, #3
 8004c48:	f024 0403 	bic.w	r4, r4, #3
 8004c4c:	42a0      	cmp	r0, r4
 8004c4e:	d007      	beq.n	8004c60 <sbrk_aligned+0x38>
 8004c50:	1a21      	subs	r1, r4, r0
 8004c52:	4628      	mov	r0, r5
 8004c54:	f000 fb6c 	bl	8005330 <_sbrk_r>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d101      	bne.n	8004c60 <sbrk_aligned+0x38>
 8004c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8004c60:	4620      	mov	r0, r4
 8004c62:	bd70      	pop	{r4, r5, r6, pc}
 8004c64:	20000244 	.word	0x20000244

08004c68 <_malloc_r>:
 8004c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c6c:	1ccd      	adds	r5, r1, #3
 8004c6e:	f025 0503 	bic.w	r5, r5, #3
 8004c72:	3508      	adds	r5, #8
 8004c74:	2d0c      	cmp	r5, #12
 8004c76:	bf38      	it	cc
 8004c78:	250c      	movcc	r5, #12
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	db01      	blt.n	8004c84 <_malloc_r+0x1c>
 8004c80:	42a9      	cmp	r1, r5
 8004c82:	d905      	bls.n	8004c90 <_malloc_r+0x28>
 8004c84:	230c      	movs	r3, #12
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	2600      	movs	r6, #0
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c90:	4e2e      	ldr	r6, [pc, #184]	; (8004d4c <_malloc_r+0xe4>)
 8004c92:	f000 fb79 	bl	8005388 <__malloc_lock>
 8004c96:	6833      	ldr	r3, [r6, #0]
 8004c98:	461c      	mov	r4, r3
 8004c9a:	bb34      	cbnz	r4, 8004cea <_malloc_r+0x82>
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	f7ff ffc2 	bl	8004c28 <sbrk_aligned>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	d14d      	bne.n	8004d46 <_malloc_r+0xde>
 8004caa:	6834      	ldr	r4, [r6, #0]
 8004cac:	4626      	mov	r6, r4
 8004cae:	2e00      	cmp	r6, #0
 8004cb0:	d140      	bne.n	8004d34 <_malloc_r+0xcc>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	eb04 0803 	add.w	r8, r4, r3
 8004cbc:	f000 fb38 	bl	8005330 <_sbrk_r>
 8004cc0:	4580      	cmp	r8, r0
 8004cc2:	d13a      	bne.n	8004d3a <_malloc_r+0xd2>
 8004cc4:	6821      	ldr	r1, [r4, #0]
 8004cc6:	3503      	adds	r5, #3
 8004cc8:	1a6d      	subs	r5, r5, r1
 8004cca:	f025 0503 	bic.w	r5, r5, #3
 8004cce:	3508      	adds	r5, #8
 8004cd0:	2d0c      	cmp	r5, #12
 8004cd2:	bf38      	it	cc
 8004cd4:	250c      	movcc	r5, #12
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f7ff ffa5 	bl	8004c28 <sbrk_aligned>
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d02b      	beq.n	8004d3a <_malloc_r+0xd2>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	442b      	add	r3, r5
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	e00e      	b.n	8004d08 <_malloc_r+0xa0>
 8004cea:	6822      	ldr	r2, [r4, #0]
 8004cec:	1b52      	subs	r2, r2, r5
 8004cee:	d41e      	bmi.n	8004d2e <_malloc_r+0xc6>
 8004cf0:	2a0b      	cmp	r2, #11
 8004cf2:	d916      	bls.n	8004d22 <_malloc_r+0xba>
 8004cf4:	1961      	adds	r1, r4, r5
 8004cf6:	42a3      	cmp	r3, r4
 8004cf8:	6025      	str	r5, [r4, #0]
 8004cfa:	bf18      	it	ne
 8004cfc:	6059      	strne	r1, [r3, #4]
 8004cfe:	6863      	ldr	r3, [r4, #4]
 8004d00:	bf08      	it	eq
 8004d02:	6031      	streq	r1, [r6, #0]
 8004d04:	5162      	str	r2, [r4, r5]
 8004d06:	604b      	str	r3, [r1, #4]
 8004d08:	4638      	mov	r0, r7
 8004d0a:	f104 060b 	add.w	r6, r4, #11
 8004d0e:	f000 fb41 	bl	8005394 <__malloc_unlock>
 8004d12:	f026 0607 	bic.w	r6, r6, #7
 8004d16:	1d23      	adds	r3, r4, #4
 8004d18:	1af2      	subs	r2, r6, r3
 8004d1a:	d0b6      	beq.n	8004c8a <_malloc_r+0x22>
 8004d1c:	1b9b      	subs	r3, r3, r6
 8004d1e:	50a3      	str	r3, [r4, r2]
 8004d20:	e7b3      	b.n	8004c8a <_malloc_r+0x22>
 8004d22:	6862      	ldr	r2, [r4, #4]
 8004d24:	42a3      	cmp	r3, r4
 8004d26:	bf0c      	ite	eq
 8004d28:	6032      	streq	r2, [r6, #0]
 8004d2a:	605a      	strne	r2, [r3, #4]
 8004d2c:	e7ec      	b.n	8004d08 <_malloc_r+0xa0>
 8004d2e:	4623      	mov	r3, r4
 8004d30:	6864      	ldr	r4, [r4, #4]
 8004d32:	e7b2      	b.n	8004c9a <_malloc_r+0x32>
 8004d34:	4634      	mov	r4, r6
 8004d36:	6876      	ldr	r6, [r6, #4]
 8004d38:	e7b9      	b.n	8004cae <_malloc_r+0x46>
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	4638      	mov	r0, r7
 8004d40:	f000 fb28 	bl	8005394 <__malloc_unlock>
 8004d44:	e7a1      	b.n	8004c8a <_malloc_r+0x22>
 8004d46:	6025      	str	r5, [r4, #0]
 8004d48:	e7de      	b.n	8004d08 <_malloc_r+0xa0>
 8004d4a:	bf00      	nop
 8004d4c:	20000240 	.word	0x20000240

08004d50 <__ssputs_r>:
 8004d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	688e      	ldr	r6, [r1, #8]
 8004d56:	429e      	cmp	r6, r3
 8004d58:	4682      	mov	sl, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	4690      	mov	r8, r2
 8004d5e:	461f      	mov	r7, r3
 8004d60:	d838      	bhi.n	8004dd4 <__ssputs_r+0x84>
 8004d62:	898a      	ldrh	r2, [r1, #12]
 8004d64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d68:	d032      	beq.n	8004dd0 <__ssputs_r+0x80>
 8004d6a:	6825      	ldr	r5, [r4, #0]
 8004d6c:	6909      	ldr	r1, [r1, #16]
 8004d6e:	eba5 0901 	sub.w	r9, r5, r1
 8004d72:	6965      	ldr	r5, [r4, #20]
 8004d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	444b      	add	r3, r9
 8004d80:	106d      	asrs	r5, r5, #1
 8004d82:	429d      	cmp	r5, r3
 8004d84:	bf38      	it	cc
 8004d86:	461d      	movcc	r5, r3
 8004d88:	0553      	lsls	r3, r2, #21
 8004d8a:	d531      	bpl.n	8004df0 <__ssputs_r+0xa0>
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f7ff ff6b 	bl	8004c68 <_malloc_r>
 8004d92:	4606      	mov	r6, r0
 8004d94:	b950      	cbnz	r0, 8004dac <__ssputs_r+0x5c>
 8004d96:	230c      	movs	r3, #12
 8004d98:	f8ca 3000 	str.w	r3, [sl]
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dac:	6921      	ldr	r1, [r4, #16]
 8004dae:	464a      	mov	r2, r9
 8004db0:	f7ff feb8 	bl	8004b24 <memcpy>
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbe:	81a3      	strh	r3, [r4, #12]
 8004dc0:	6126      	str	r6, [r4, #16]
 8004dc2:	6165      	str	r5, [r4, #20]
 8004dc4:	444e      	add	r6, r9
 8004dc6:	eba5 0509 	sub.w	r5, r5, r9
 8004dca:	6026      	str	r6, [r4, #0]
 8004dcc:	60a5      	str	r5, [r4, #8]
 8004dce:	463e      	mov	r6, r7
 8004dd0:	42be      	cmp	r6, r7
 8004dd2:	d900      	bls.n	8004dd6 <__ssputs_r+0x86>
 8004dd4:	463e      	mov	r6, r7
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	4632      	mov	r2, r6
 8004dda:	4641      	mov	r1, r8
 8004ddc:	f000 faba 	bl	8005354 <memmove>
 8004de0:	68a3      	ldr	r3, [r4, #8]
 8004de2:	1b9b      	subs	r3, r3, r6
 8004de4:	60a3      	str	r3, [r4, #8]
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	4433      	add	r3, r6
 8004dea:	6023      	str	r3, [r4, #0]
 8004dec:	2000      	movs	r0, #0
 8004dee:	e7db      	b.n	8004da8 <__ssputs_r+0x58>
 8004df0:	462a      	mov	r2, r5
 8004df2:	f000 fad5 	bl	80053a0 <_realloc_r>
 8004df6:	4606      	mov	r6, r0
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d1e1      	bne.n	8004dc0 <__ssputs_r+0x70>
 8004dfc:	6921      	ldr	r1, [r4, #16]
 8004dfe:	4650      	mov	r0, sl
 8004e00:	f7ff fec6 	bl	8004b90 <_free_r>
 8004e04:	e7c7      	b.n	8004d96 <__ssputs_r+0x46>
	...

08004e08 <_svfiprintf_r>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	4698      	mov	r8, r3
 8004e0e:	898b      	ldrh	r3, [r1, #12]
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	b09d      	sub	sp, #116	; 0x74
 8004e14:	4607      	mov	r7, r0
 8004e16:	460d      	mov	r5, r1
 8004e18:	4614      	mov	r4, r2
 8004e1a:	d50e      	bpl.n	8004e3a <_svfiprintf_r+0x32>
 8004e1c:	690b      	ldr	r3, [r1, #16]
 8004e1e:	b963      	cbnz	r3, 8004e3a <_svfiprintf_r+0x32>
 8004e20:	2140      	movs	r1, #64	; 0x40
 8004e22:	f7ff ff21 	bl	8004c68 <_malloc_r>
 8004e26:	6028      	str	r0, [r5, #0]
 8004e28:	6128      	str	r0, [r5, #16]
 8004e2a:	b920      	cbnz	r0, 8004e36 <_svfiprintf_r+0x2e>
 8004e2c:	230c      	movs	r3, #12
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295
 8004e34:	e0d1      	b.n	8004fda <_svfiprintf_r+0x1d2>
 8004e36:	2340      	movs	r3, #64	; 0x40
 8004e38:	616b      	str	r3, [r5, #20]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3e:	2320      	movs	r3, #32
 8004e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e48:	2330      	movs	r3, #48	; 0x30
 8004e4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ff4 <_svfiprintf_r+0x1ec>
 8004e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e52:	f04f 0901 	mov.w	r9, #1
 8004e56:	4623      	mov	r3, r4
 8004e58:	469a      	mov	sl, r3
 8004e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e5e:	b10a      	cbz	r2, 8004e64 <_svfiprintf_r+0x5c>
 8004e60:	2a25      	cmp	r2, #37	; 0x25
 8004e62:	d1f9      	bne.n	8004e58 <_svfiprintf_r+0x50>
 8004e64:	ebba 0b04 	subs.w	fp, sl, r4
 8004e68:	d00b      	beq.n	8004e82 <_svfiprintf_r+0x7a>
 8004e6a:	465b      	mov	r3, fp
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4638      	mov	r0, r7
 8004e72:	f7ff ff6d 	bl	8004d50 <__ssputs_r>
 8004e76:	3001      	adds	r0, #1
 8004e78:	f000 80aa 	beq.w	8004fd0 <_svfiprintf_r+0x1c8>
 8004e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e7e:	445a      	add	r2, fp
 8004e80:	9209      	str	r2, [sp, #36]	; 0x24
 8004e82:	f89a 3000 	ldrb.w	r3, [sl]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80a2 	beq.w	8004fd0 <_svfiprintf_r+0x1c8>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e96:	f10a 0a01 	add.w	sl, sl, #1
 8004e9a:	9304      	str	r3, [sp, #16]
 8004e9c:	9307      	str	r3, [sp, #28]
 8004e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ea2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea4:	4654      	mov	r4, sl
 8004ea6:	2205      	movs	r2, #5
 8004ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eac:	4851      	ldr	r0, [pc, #324]	; (8004ff4 <_svfiprintf_r+0x1ec>)
 8004eae:	f7fb f997 	bl	80001e0 <memchr>
 8004eb2:	9a04      	ldr	r2, [sp, #16]
 8004eb4:	b9d8      	cbnz	r0, 8004eee <_svfiprintf_r+0xe6>
 8004eb6:	06d0      	lsls	r0, r2, #27
 8004eb8:	bf44      	itt	mi
 8004eba:	2320      	movmi	r3, #32
 8004ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ec0:	0711      	lsls	r1, r2, #28
 8004ec2:	bf44      	itt	mi
 8004ec4:	232b      	movmi	r3, #43	; 0x2b
 8004ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eca:	f89a 3000 	ldrb.w	r3, [sl]
 8004ece:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed0:	d015      	beq.n	8004efe <_svfiprintf_r+0xf6>
 8004ed2:	9a07      	ldr	r2, [sp, #28]
 8004ed4:	4654      	mov	r4, sl
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f04f 0c0a 	mov.w	ip, #10
 8004edc:	4621      	mov	r1, r4
 8004ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ee2:	3b30      	subs	r3, #48	; 0x30
 8004ee4:	2b09      	cmp	r3, #9
 8004ee6:	d94e      	bls.n	8004f86 <_svfiprintf_r+0x17e>
 8004ee8:	b1b0      	cbz	r0, 8004f18 <_svfiprintf_r+0x110>
 8004eea:	9207      	str	r2, [sp, #28]
 8004eec:	e014      	b.n	8004f18 <_svfiprintf_r+0x110>
 8004eee:	eba0 0308 	sub.w	r3, r0, r8
 8004ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	9304      	str	r3, [sp, #16]
 8004efa:	46a2      	mov	sl, r4
 8004efc:	e7d2      	b.n	8004ea4 <_svfiprintf_r+0x9c>
 8004efe:	9b03      	ldr	r3, [sp, #12]
 8004f00:	1d19      	adds	r1, r3, #4
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	9103      	str	r1, [sp, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bfbb      	ittet	lt
 8004f0a:	425b      	neglt	r3, r3
 8004f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f10:	9307      	strge	r3, [sp, #28]
 8004f12:	9307      	strlt	r3, [sp, #28]
 8004f14:	bfb8      	it	lt
 8004f16:	9204      	strlt	r2, [sp, #16]
 8004f18:	7823      	ldrb	r3, [r4, #0]
 8004f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f1c:	d10c      	bne.n	8004f38 <_svfiprintf_r+0x130>
 8004f1e:	7863      	ldrb	r3, [r4, #1]
 8004f20:	2b2a      	cmp	r3, #42	; 0x2a
 8004f22:	d135      	bne.n	8004f90 <_svfiprintf_r+0x188>
 8004f24:	9b03      	ldr	r3, [sp, #12]
 8004f26:	1d1a      	adds	r2, r3, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	9203      	str	r2, [sp, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfb8      	it	lt
 8004f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f34:	3402      	adds	r4, #2
 8004f36:	9305      	str	r3, [sp, #20]
 8004f38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005004 <_svfiprintf_r+0x1fc>
 8004f3c:	7821      	ldrb	r1, [r4, #0]
 8004f3e:	2203      	movs	r2, #3
 8004f40:	4650      	mov	r0, sl
 8004f42:	f7fb f94d 	bl	80001e0 <memchr>
 8004f46:	b140      	cbz	r0, 8004f5a <_svfiprintf_r+0x152>
 8004f48:	2340      	movs	r3, #64	; 0x40
 8004f4a:	eba0 000a 	sub.w	r0, r0, sl
 8004f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f52:	9b04      	ldr	r3, [sp, #16]
 8004f54:	4303      	orrs	r3, r0
 8004f56:	3401      	adds	r4, #1
 8004f58:	9304      	str	r3, [sp, #16]
 8004f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f5e:	4826      	ldr	r0, [pc, #152]	; (8004ff8 <_svfiprintf_r+0x1f0>)
 8004f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f64:	2206      	movs	r2, #6
 8004f66:	f7fb f93b 	bl	80001e0 <memchr>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d038      	beq.n	8004fe0 <_svfiprintf_r+0x1d8>
 8004f6e:	4b23      	ldr	r3, [pc, #140]	; (8004ffc <_svfiprintf_r+0x1f4>)
 8004f70:	bb1b      	cbnz	r3, 8004fba <_svfiprintf_r+0x1b2>
 8004f72:	9b03      	ldr	r3, [sp, #12]
 8004f74:	3307      	adds	r3, #7
 8004f76:	f023 0307 	bic.w	r3, r3, #7
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	9303      	str	r3, [sp, #12]
 8004f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f80:	4433      	add	r3, r6
 8004f82:	9309      	str	r3, [sp, #36]	; 0x24
 8004f84:	e767      	b.n	8004e56 <_svfiprintf_r+0x4e>
 8004f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	e7a5      	b.n	8004edc <_svfiprintf_r+0xd4>
 8004f90:	2300      	movs	r3, #0
 8004f92:	3401      	adds	r4, #1
 8004f94:	9305      	str	r3, [sp, #20]
 8004f96:	4619      	mov	r1, r3
 8004f98:	f04f 0c0a 	mov.w	ip, #10
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fa2:	3a30      	subs	r2, #48	; 0x30
 8004fa4:	2a09      	cmp	r2, #9
 8004fa6:	d903      	bls.n	8004fb0 <_svfiprintf_r+0x1a8>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0c5      	beq.n	8004f38 <_svfiprintf_r+0x130>
 8004fac:	9105      	str	r1, [sp, #20]
 8004fae:	e7c3      	b.n	8004f38 <_svfiprintf_r+0x130>
 8004fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e7f0      	b.n	8004f9c <_svfiprintf_r+0x194>
 8004fba:	ab03      	add	r3, sp, #12
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	462a      	mov	r2, r5
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <_svfiprintf_r+0x1f8>)
 8004fc2:	a904      	add	r1, sp, #16
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	f3af 8000 	nop.w
 8004fca:	1c42      	adds	r2, r0, #1
 8004fcc:	4606      	mov	r6, r0
 8004fce:	d1d6      	bne.n	8004f7e <_svfiprintf_r+0x176>
 8004fd0:	89ab      	ldrh	r3, [r5, #12]
 8004fd2:	065b      	lsls	r3, r3, #25
 8004fd4:	f53f af2c 	bmi.w	8004e30 <_svfiprintf_r+0x28>
 8004fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fda:	b01d      	add	sp, #116	; 0x74
 8004fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe0:	ab03      	add	r3, sp, #12
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	462a      	mov	r2, r5
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <_svfiprintf_r+0x1f8>)
 8004fe8:	a904      	add	r1, sp, #16
 8004fea:	4638      	mov	r0, r7
 8004fec:	f000 f87a 	bl	80050e4 <_printf_i>
 8004ff0:	e7eb      	b.n	8004fca <_svfiprintf_r+0x1c2>
 8004ff2:	bf00      	nop
 8004ff4:	080059a6 	.word	0x080059a6
 8004ff8:	080059b0 	.word	0x080059b0
 8004ffc:	00000000 	.word	0x00000000
 8005000:	08004d51 	.word	0x08004d51
 8005004:	080059ac 	.word	0x080059ac

08005008 <_printf_common>:
 8005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	4616      	mov	r6, r2
 800500e:	4699      	mov	r9, r3
 8005010:	688a      	ldr	r2, [r1, #8]
 8005012:	690b      	ldr	r3, [r1, #16]
 8005014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005018:	4293      	cmp	r3, r2
 800501a:	bfb8      	it	lt
 800501c:	4613      	movlt	r3, r2
 800501e:	6033      	str	r3, [r6, #0]
 8005020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005024:	4607      	mov	r7, r0
 8005026:	460c      	mov	r4, r1
 8005028:	b10a      	cbz	r2, 800502e <_printf_common+0x26>
 800502a:	3301      	adds	r3, #1
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	0699      	lsls	r1, r3, #26
 8005032:	bf42      	ittt	mi
 8005034:	6833      	ldrmi	r3, [r6, #0]
 8005036:	3302      	addmi	r3, #2
 8005038:	6033      	strmi	r3, [r6, #0]
 800503a:	6825      	ldr	r5, [r4, #0]
 800503c:	f015 0506 	ands.w	r5, r5, #6
 8005040:	d106      	bne.n	8005050 <_printf_common+0x48>
 8005042:	f104 0a19 	add.w	sl, r4, #25
 8005046:	68e3      	ldr	r3, [r4, #12]
 8005048:	6832      	ldr	r2, [r6, #0]
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	42ab      	cmp	r3, r5
 800504e:	dc26      	bgt.n	800509e <_printf_common+0x96>
 8005050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005054:	1e13      	subs	r3, r2, #0
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	bf18      	it	ne
 800505a:	2301      	movne	r3, #1
 800505c:	0692      	lsls	r2, r2, #26
 800505e:	d42b      	bmi.n	80050b8 <_printf_common+0xb0>
 8005060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005064:	4649      	mov	r1, r9
 8005066:	4638      	mov	r0, r7
 8005068:	47c0      	blx	r8
 800506a:	3001      	adds	r0, #1
 800506c:	d01e      	beq.n	80050ac <_printf_common+0xa4>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	68e5      	ldr	r5, [r4, #12]
 8005072:	6832      	ldr	r2, [r6, #0]
 8005074:	f003 0306 	and.w	r3, r3, #6
 8005078:	2b04      	cmp	r3, #4
 800507a:	bf08      	it	eq
 800507c:	1aad      	subeq	r5, r5, r2
 800507e:	68a3      	ldr	r3, [r4, #8]
 8005080:	6922      	ldr	r2, [r4, #16]
 8005082:	bf0c      	ite	eq
 8005084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005088:	2500      	movne	r5, #0
 800508a:	4293      	cmp	r3, r2
 800508c:	bfc4      	itt	gt
 800508e:	1a9b      	subgt	r3, r3, r2
 8005090:	18ed      	addgt	r5, r5, r3
 8005092:	2600      	movs	r6, #0
 8005094:	341a      	adds	r4, #26
 8005096:	42b5      	cmp	r5, r6
 8005098:	d11a      	bne.n	80050d0 <_printf_common+0xc8>
 800509a:	2000      	movs	r0, #0
 800509c:	e008      	b.n	80050b0 <_printf_common+0xa8>
 800509e:	2301      	movs	r3, #1
 80050a0:	4652      	mov	r2, sl
 80050a2:	4649      	mov	r1, r9
 80050a4:	4638      	mov	r0, r7
 80050a6:	47c0      	blx	r8
 80050a8:	3001      	adds	r0, #1
 80050aa:	d103      	bne.n	80050b4 <_printf_common+0xac>
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b4:	3501      	adds	r5, #1
 80050b6:	e7c6      	b.n	8005046 <_printf_common+0x3e>
 80050b8:	18e1      	adds	r1, r4, r3
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	2030      	movs	r0, #48	; 0x30
 80050be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c2:	4422      	add	r2, r4
 80050c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050cc:	3302      	adds	r3, #2
 80050ce:	e7c7      	b.n	8005060 <_printf_common+0x58>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4622      	mov	r2, r4
 80050d4:	4649      	mov	r1, r9
 80050d6:	4638      	mov	r0, r7
 80050d8:	47c0      	blx	r8
 80050da:	3001      	adds	r0, #1
 80050dc:	d0e6      	beq.n	80050ac <_printf_common+0xa4>
 80050de:	3601      	adds	r6, #1
 80050e0:	e7d9      	b.n	8005096 <_printf_common+0x8e>
	...

080050e4 <_printf_i>:
 80050e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	7e0f      	ldrb	r7, [r1, #24]
 80050ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050ec:	2f78      	cmp	r7, #120	; 0x78
 80050ee:	4691      	mov	r9, r2
 80050f0:	4680      	mov	r8, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	469a      	mov	sl, r3
 80050f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050fa:	d807      	bhi.n	800510c <_printf_i+0x28>
 80050fc:	2f62      	cmp	r7, #98	; 0x62
 80050fe:	d80a      	bhi.n	8005116 <_printf_i+0x32>
 8005100:	2f00      	cmp	r7, #0
 8005102:	f000 80d8 	beq.w	80052b6 <_printf_i+0x1d2>
 8005106:	2f58      	cmp	r7, #88	; 0x58
 8005108:	f000 80a3 	beq.w	8005252 <_printf_i+0x16e>
 800510c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005114:	e03a      	b.n	800518c <_printf_i+0xa8>
 8005116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800511a:	2b15      	cmp	r3, #21
 800511c:	d8f6      	bhi.n	800510c <_printf_i+0x28>
 800511e:	a101      	add	r1, pc, #4	; (adr r1, 8005124 <_printf_i+0x40>)
 8005120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005124:	0800517d 	.word	0x0800517d
 8005128:	08005191 	.word	0x08005191
 800512c:	0800510d 	.word	0x0800510d
 8005130:	0800510d 	.word	0x0800510d
 8005134:	0800510d 	.word	0x0800510d
 8005138:	0800510d 	.word	0x0800510d
 800513c:	08005191 	.word	0x08005191
 8005140:	0800510d 	.word	0x0800510d
 8005144:	0800510d 	.word	0x0800510d
 8005148:	0800510d 	.word	0x0800510d
 800514c:	0800510d 	.word	0x0800510d
 8005150:	0800529d 	.word	0x0800529d
 8005154:	080051c1 	.word	0x080051c1
 8005158:	0800527f 	.word	0x0800527f
 800515c:	0800510d 	.word	0x0800510d
 8005160:	0800510d 	.word	0x0800510d
 8005164:	080052bf 	.word	0x080052bf
 8005168:	0800510d 	.word	0x0800510d
 800516c:	080051c1 	.word	0x080051c1
 8005170:	0800510d 	.word	0x0800510d
 8005174:	0800510d 	.word	0x0800510d
 8005178:	08005287 	.word	0x08005287
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	1d1a      	adds	r2, r3, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	602a      	str	r2, [r5, #0]
 8005184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800518c:	2301      	movs	r3, #1
 800518e:	e0a3      	b.n	80052d8 <_printf_i+0x1f4>
 8005190:	6820      	ldr	r0, [r4, #0]
 8005192:	6829      	ldr	r1, [r5, #0]
 8005194:	0606      	lsls	r6, r0, #24
 8005196:	f101 0304 	add.w	r3, r1, #4
 800519a:	d50a      	bpl.n	80051b2 <_printf_i+0xce>
 800519c:	680e      	ldr	r6, [r1, #0]
 800519e:	602b      	str	r3, [r5, #0]
 80051a0:	2e00      	cmp	r6, #0
 80051a2:	da03      	bge.n	80051ac <_printf_i+0xc8>
 80051a4:	232d      	movs	r3, #45	; 0x2d
 80051a6:	4276      	negs	r6, r6
 80051a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ac:	485e      	ldr	r0, [pc, #376]	; (8005328 <_printf_i+0x244>)
 80051ae:	230a      	movs	r3, #10
 80051b0:	e019      	b.n	80051e6 <_printf_i+0x102>
 80051b2:	680e      	ldr	r6, [r1, #0]
 80051b4:	602b      	str	r3, [r5, #0]
 80051b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051ba:	bf18      	it	ne
 80051bc:	b236      	sxthne	r6, r6
 80051be:	e7ef      	b.n	80051a0 <_printf_i+0xbc>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	6820      	ldr	r0, [r4, #0]
 80051c4:	1d19      	adds	r1, r3, #4
 80051c6:	6029      	str	r1, [r5, #0]
 80051c8:	0601      	lsls	r1, r0, #24
 80051ca:	d501      	bpl.n	80051d0 <_printf_i+0xec>
 80051cc:	681e      	ldr	r6, [r3, #0]
 80051ce:	e002      	b.n	80051d6 <_printf_i+0xf2>
 80051d0:	0646      	lsls	r6, r0, #25
 80051d2:	d5fb      	bpl.n	80051cc <_printf_i+0xe8>
 80051d4:	881e      	ldrh	r6, [r3, #0]
 80051d6:	4854      	ldr	r0, [pc, #336]	; (8005328 <_printf_i+0x244>)
 80051d8:	2f6f      	cmp	r7, #111	; 0x6f
 80051da:	bf0c      	ite	eq
 80051dc:	2308      	moveq	r3, #8
 80051de:	230a      	movne	r3, #10
 80051e0:	2100      	movs	r1, #0
 80051e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051e6:	6865      	ldr	r5, [r4, #4]
 80051e8:	60a5      	str	r5, [r4, #8]
 80051ea:	2d00      	cmp	r5, #0
 80051ec:	bfa2      	ittt	ge
 80051ee:	6821      	ldrge	r1, [r4, #0]
 80051f0:	f021 0104 	bicge.w	r1, r1, #4
 80051f4:	6021      	strge	r1, [r4, #0]
 80051f6:	b90e      	cbnz	r6, 80051fc <_printf_i+0x118>
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	d04d      	beq.n	8005298 <_printf_i+0x1b4>
 80051fc:	4615      	mov	r5, r2
 80051fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005202:	fb03 6711 	mls	r7, r3, r1, r6
 8005206:	5dc7      	ldrb	r7, [r0, r7]
 8005208:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800520c:	4637      	mov	r7, r6
 800520e:	42bb      	cmp	r3, r7
 8005210:	460e      	mov	r6, r1
 8005212:	d9f4      	bls.n	80051fe <_printf_i+0x11a>
 8005214:	2b08      	cmp	r3, #8
 8005216:	d10b      	bne.n	8005230 <_printf_i+0x14c>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	07de      	lsls	r6, r3, #31
 800521c:	d508      	bpl.n	8005230 <_printf_i+0x14c>
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	6861      	ldr	r1, [r4, #4]
 8005222:	4299      	cmp	r1, r3
 8005224:	bfde      	ittt	le
 8005226:	2330      	movle	r3, #48	; 0x30
 8005228:	f805 3c01 	strble.w	r3, [r5, #-1]
 800522c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005230:	1b52      	subs	r2, r2, r5
 8005232:	6122      	str	r2, [r4, #16]
 8005234:	f8cd a000 	str.w	sl, [sp]
 8005238:	464b      	mov	r3, r9
 800523a:	aa03      	add	r2, sp, #12
 800523c:	4621      	mov	r1, r4
 800523e:	4640      	mov	r0, r8
 8005240:	f7ff fee2 	bl	8005008 <_printf_common>
 8005244:	3001      	adds	r0, #1
 8005246:	d14c      	bne.n	80052e2 <_printf_i+0x1fe>
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	b004      	add	sp, #16
 800524e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005252:	4835      	ldr	r0, [pc, #212]	; (8005328 <_printf_i+0x244>)
 8005254:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005258:	6829      	ldr	r1, [r5, #0]
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005260:	6029      	str	r1, [r5, #0]
 8005262:	061d      	lsls	r5, r3, #24
 8005264:	d514      	bpl.n	8005290 <_printf_i+0x1ac>
 8005266:	07df      	lsls	r7, r3, #31
 8005268:	bf44      	itt	mi
 800526a:	f043 0320 	orrmi.w	r3, r3, #32
 800526e:	6023      	strmi	r3, [r4, #0]
 8005270:	b91e      	cbnz	r6, 800527a <_printf_i+0x196>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	f023 0320 	bic.w	r3, r3, #32
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	2310      	movs	r3, #16
 800527c:	e7b0      	b.n	80051e0 <_printf_i+0xfc>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	f043 0320 	orr.w	r3, r3, #32
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	2378      	movs	r3, #120	; 0x78
 8005288:	4828      	ldr	r0, [pc, #160]	; (800532c <_printf_i+0x248>)
 800528a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800528e:	e7e3      	b.n	8005258 <_printf_i+0x174>
 8005290:	0659      	lsls	r1, r3, #25
 8005292:	bf48      	it	mi
 8005294:	b2b6      	uxthmi	r6, r6
 8005296:	e7e6      	b.n	8005266 <_printf_i+0x182>
 8005298:	4615      	mov	r5, r2
 800529a:	e7bb      	b.n	8005214 <_printf_i+0x130>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	6826      	ldr	r6, [r4, #0]
 80052a0:	6961      	ldr	r1, [r4, #20]
 80052a2:	1d18      	adds	r0, r3, #4
 80052a4:	6028      	str	r0, [r5, #0]
 80052a6:	0635      	lsls	r5, r6, #24
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	d501      	bpl.n	80052b0 <_printf_i+0x1cc>
 80052ac:	6019      	str	r1, [r3, #0]
 80052ae:	e002      	b.n	80052b6 <_printf_i+0x1d2>
 80052b0:	0670      	lsls	r0, r6, #25
 80052b2:	d5fb      	bpl.n	80052ac <_printf_i+0x1c8>
 80052b4:	8019      	strh	r1, [r3, #0]
 80052b6:	2300      	movs	r3, #0
 80052b8:	6123      	str	r3, [r4, #16]
 80052ba:	4615      	mov	r5, r2
 80052bc:	e7ba      	b.n	8005234 <_printf_i+0x150>
 80052be:	682b      	ldr	r3, [r5, #0]
 80052c0:	1d1a      	adds	r2, r3, #4
 80052c2:	602a      	str	r2, [r5, #0]
 80052c4:	681d      	ldr	r5, [r3, #0]
 80052c6:	6862      	ldr	r2, [r4, #4]
 80052c8:	2100      	movs	r1, #0
 80052ca:	4628      	mov	r0, r5
 80052cc:	f7fa ff88 	bl	80001e0 <memchr>
 80052d0:	b108      	cbz	r0, 80052d6 <_printf_i+0x1f2>
 80052d2:	1b40      	subs	r0, r0, r5
 80052d4:	6060      	str	r0, [r4, #4]
 80052d6:	6863      	ldr	r3, [r4, #4]
 80052d8:	6123      	str	r3, [r4, #16]
 80052da:	2300      	movs	r3, #0
 80052dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e0:	e7a8      	b.n	8005234 <_printf_i+0x150>
 80052e2:	6923      	ldr	r3, [r4, #16]
 80052e4:	462a      	mov	r2, r5
 80052e6:	4649      	mov	r1, r9
 80052e8:	4640      	mov	r0, r8
 80052ea:	47d0      	blx	sl
 80052ec:	3001      	adds	r0, #1
 80052ee:	d0ab      	beq.n	8005248 <_printf_i+0x164>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	079b      	lsls	r3, r3, #30
 80052f4:	d413      	bmi.n	800531e <_printf_i+0x23a>
 80052f6:	68e0      	ldr	r0, [r4, #12]
 80052f8:	9b03      	ldr	r3, [sp, #12]
 80052fa:	4298      	cmp	r0, r3
 80052fc:	bfb8      	it	lt
 80052fe:	4618      	movlt	r0, r3
 8005300:	e7a4      	b.n	800524c <_printf_i+0x168>
 8005302:	2301      	movs	r3, #1
 8005304:	4632      	mov	r2, r6
 8005306:	4649      	mov	r1, r9
 8005308:	4640      	mov	r0, r8
 800530a:	47d0      	blx	sl
 800530c:	3001      	adds	r0, #1
 800530e:	d09b      	beq.n	8005248 <_printf_i+0x164>
 8005310:	3501      	adds	r5, #1
 8005312:	68e3      	ldr	r3, [r4, #12]
 8005314:	9903      	ldr	r1, [sp, #12]
 8005316:	1a5b      	subs	r3, r3, r1
 8005318:	42ab      	cmp	r3, r5
 800531a:	dcf2      	bgt.n	8005302 <_printf_i+0x21e>
 800531c:	e7eb      	b.n	80052f6 <_printf_i+0x212>
 800531e:	2500      	movs	r5, #0
 8005320:	f104 0619 	add.w	r6, r4, #25
 8005324:	e7f5      	b.n	8005312 <_printf_i+0x22e>
 8005326:	bf00      	nop
 8005328:	080059b7 	.word	0x080059b7
 800532c:	080059c8 	.word	0x080059c8

08005330 <_sbrk_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d06      	ldr	r5, [pc, #24]	; (800534c <_sbrk_r+0x1c>)
 8005334:	2300      	movs	r3, #0
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	602b      	str	r3, [r5, #0]
 800533c:	f7fb fbd2 	bl	8000ae4 <_sbrk>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_sbrk_r+0x1a>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_sbrk_r+0x1a>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	2000024c 	.word	0x2000024c

08005350 <__retarget_lock_acquire_recursive>:
 8005350:	4770      	bx	lr

08005352 <__retarget_lock_release_recursive>:
 8005352:	4770      	bx	lr

08005354 <memmove>:
 8005354:	4288      	cmp	r0, r1
 8005356:	b510      	push	{r4, lr}
 8005358:	eb01 0402 	add.w	r4, r1, r2
 800535c:	d902      	bls.n	8005364 <memmove+0x10>
 800535e:	4284      	cmp	r4, r0
 8005360:	4623      	mov	r3, r4
 8005362:	d807      	bhi.n	8005374 <memmove+0x20>
 8005364:	1e43      	subs	r3, r0, #1
 8005366:	42a1      	cmp	r1, r4
 8005368:	d008      	beq.n	800537c <memmove+0x28>
 800536a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800536e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005372:	e7f8      	b.n	8005366 <memmove+0x12>
 8005374:	4402      	add	r2, r0
 8005376:	4601      	mov	r1, r0
 8005378:	428a      	cmp	r2, r1
 800537a:	d100      	bne.n	800537e <memmove+0x2a>
 800537c:	bd10      	pop	{r4, pc}
 800537e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005386:	e7f7      	b.n	8005378 <memmove+0x24>

08005388 <__malloc_lock>:
 8005388:	4801      	ldr	r0, [pc, #4]	; (8005390 <__malloc_lock+0x8>)
 800538a:	f7ff bfe1 	b.w	8005350 <__retarget_lock_acquire_recursive>
 800538e:	bf00      	nop
 8005390:	20000248 	.word	0x20000248

08005394 <__malloc_unlock>:
 8005394:	4801      	ldr	r0, [pc, #4]	; (800539c <__malloc_unlock+0x8>)
 8005396:	f7ff bfdc 	b.w	8005352 <__retarget_lock_release_recursive>
 800539a:	bf00      	nop
 800539c:	20000248 	.word	0x20000248

080053a0 <_realloc_r>:
 80053a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a4:	4680      	mov	r8, r0
 80053a6:	4614      	mov	r4, r2
 80053a8:	460e      	mov	r6, r1
 80053aa:	b921      	cbnz	r1, 80053b6 <_realloc_r+0x16>
 80053ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053b0:	4611      	mov	r1, r2
 80053b2:	f7ff bc59 	b.w	8004c68 <_malloc_r>
 80053b6:	b92a      	cbnz	r2, 80053c4 <_realloc_r+0x24>
 80053b8:	f7ff fbea 	bl	8004b90 <_free_r>
 80053bc:	4625      	mov	r5, r4
 80053be:	4628      	mov	r0, r5
 80053c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c4:	f000 f81b 	bl	80053fe <_malloc_usable_size_r>
 80053c8:	4284      	cmp	r4, r0
 80053ca:	4607      	mov	r7, r0
 80053cc:	d802      	bhi.n	80053d4 <_realloc_r+0x34>
 80053ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053d2:	d812      	bhi.n	80053fa <_realloc_r+0x5a>
 80053d4:	4621      	mov	r1, r4
 80053d6:	4640      	mov	r0, r8
 80053d8:	f7ff fc46 	bl	8004c68 <_malloc_r>
 80053dc:	4605      	mov	r5, r0
 80053de:	2800      	cmp	r0, #0
 80053e0:	d0ed      	beq.n	80053be <_realloc_r+0x1e>
 80053e2:	42bc      	cmp	r4, r7
 80053e4:	4622      	mov	r2, r4
 80053e6:	4631      	mov	r1, r6
 80053e8:	bf28      	it	cs
 80053ea:	463a      	movcs	r2, r7
 80053ec:	f7ff fb9a 	bl	8004b24 <memcpy>
 80053f0:	4631      	mov	r1, r6
 80053f2:	4640      	mov	r0, r8
 80053f4:	f7ff fbcc 	bl	8004b90 <_free_r>
 80053f8:	e7e1      	b.n	80053be <_realloc_r+0x1e>
 80053fa:	4635      	mov	r5, r6
 80053fc:	e7df      	b.n	80053be <_realloc_r+0x1e>

080053fe <_malloc_usable_size_r>:
 80053fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005402:	1f18      	subs	r0, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	bfbc      	itt	lt
 8005408:	580b      	ldrlt	r3, [r1, r0]
 800540a:	18c0      	addlt	r0, r0, r3
 800540c:	4770      	bx	lr
	...

08005410 <_init>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr

0800541c <_fini>:
 800541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541e:	bf00      	nop
 8005420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005422:	bc08      	pop	{r3}
 8005424:	469e      	mov	lr, r3
 8005426:	4770      	bx	lr
