
Quadcopter_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800b670  0800b670  0001b670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be48  0800be48  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800be48  0800be48  0001be48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be50  0800be50  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be50  0800be50  0001be50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be54  0800be54  0001be54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  0800be58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201b0  2**0
                  CONTENTS
 10 .bss          00000440  200001b0  200001b0  000201b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200005f0  200005f0  000201b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173f3  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000319f  00000000  00000000  000375d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  0003a778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d8  00000000  00000000  0003bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024435  00000000  00000000  0003ce78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab11  00000000  00000000  000612ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1e1a  00000000  00000000  0007bdbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014dbd8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e48  00000000  00000000  0014dc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b0 	.word	0x200001b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b654 	.word	0x0800b654

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b4 	.word	0x200001b4
 80001cc:	0800b654 	.word	0x0800b654

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	4b45      	ldr	r3, [pc, #276]	; (800107c <MX_GPIO_Init+0x130>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a44      	ldr	r2, [pc, #272]	; (800107c <MX_GPIO_Init+0x130>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b42      	ldr	r3, [pc, #264]	; (800107c <MX_GPIO_Init+0x130>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	4b3e      	ldr	r3, [pc, #248]	; (800107c <MX_GPIO_Init+0x130>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a3d      	ldr	r2, [pc, #244]	; (800107c <MX_GPIO_Init+0x130>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <MX_GPIO_Init+0x130>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <MX_GPIO_Init+0x130>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a36      	ldr	r2, [pc, #216]	; (800107c <MX_GPIO_Init+0x130>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b34      	ldr	r3, [pc, #208]	; (800107c <MX_GPIO_Init+0x130>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <MX_GPIO_Init+0x130>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	; (800107c <MX_GPIO_Init+0x130>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <MX_GPIO_Init+0x130>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <MX_GPIO_Init+0x130>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a28      	ldr	r2, [pc, #160]	; (800107c <MX_GPIO_Init+0x130>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_GPIO_Init+0x130>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <MX_GPIO_Init+0x130>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <MX_GPIO_Init+0x130>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_GPIO_Init+0x130>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2103      	movs	r1, #3
 800100e:	481c      	ldr	r0, [pc, #112]	; (8001080 <MX_GPIO_Init+0x134>)
 8001010:	f001 ff5a 	bl	8002ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800101a:	481a      	ldr	r0, [pc, #104]	; (8001084 <MX_GPIO_Init+0x138>)
 800101c:	f001 ff54 	bl	8002ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4815      	ldr	r0, [pc, #84]	; (8001088 <MX_GPIO_Init+0x13c>)
 8001034:	f001 fdac 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001038:	2303      	movs	r3, #3
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <MX_GPIO_Init+0x134>)
 8001050:	f001 fd9e 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001054:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_GPIO_Init+0x138>)
 800106e:	f001 fd8f 	bl	8002b90 <HAL_GPIO_Init>

}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	; 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40020400 	.word	0x40020400
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40020000 	.word	0x40020000

0800108c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_I2C1_Init+0x50>)
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_I2C1_Init+0x54>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_I2C1_Init+0x50>)
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x58>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_I2C1_Init+0x50>)
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_I2C1_Init+0x50>)
 80010ca:	f001 ff31 	bl	8002f30 <HAL_I2C_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d4:	f001 f866 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200001cc 	.word	0x200001cc
 80010e0:	40005400 	.word	0x40005400
 80010e4:	00061a80 	.word	0x00061a80

080010e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_I2C_MspInit+0x84>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d12c      	bne.n	8001164 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001138:	2304      	movs	r3, #4
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <HAL_I2C_MspInit+0x8c>)
 8001144:	f001 fd24 	bl	8002b90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001152:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40005400 	.word	0x40005400
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400

08001178 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800117c:	b0a1      	sub	sp, #132	; 0x84
 800117e:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001180:	f001 fb5e 	bl	8002840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001184:	f000 f972 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001188:	f7ff fee0 	bl	8000f4c <MX_GPIO_Init>
  MX_I2C1_Init();
 800118c:	f7ff ff7e 	bl	800108c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001190:	f001 f80e 	bl	80021b0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001194:	f001 f92e 	bl	80023f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001198:	f001 f9f2 	bl	8002580 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 800119c:	f001 fab4 	bl	8002708 <MX_USART6_UART_Init>
   * @param nrf_CE_PIN The chip enable pin for the NRF24L01.
   * @param hspi1 The SPI handle.
   * @param TxpipeAddrs The address of the transmitting pipe.
   */
  // Begin setup Rf24
  NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi1);
 80011a0:	4ca1      	ldr	r4, [pc, #644]	; (8001428 <main+0x2b0>)
 80011a2:	4668      	mov	r0, sp
 80011a4:	1d21      	adds	r1, r4, #4
 80011a6:	2354      	movs	r3, #84	; 0x54
 80011a8:	461a      	mov	r2, r3
 80011aa:	f007 ff7b 	bl	80090a4 <memcpy>
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	2202      	movs	r2, #2
 80011b2:	2101      	movs	r1, #1
 80011b4:	489d      	ldr	r0, [pc, #628]	; (800142c <main+0x2b4>)
 80011b6:	f006 ff4b 	bl	8008050 <NRF24_begin>
  NRF24_stopListening();
 80011ba:	f007 f829 	bl	8008210 <NRF24_stopListening>
  NRF24_openWritingPipe(TxpipeAddrs);
 80011be:	4b9c      	ldr	r3, [pc, #624]	; (8001430 <main+0x2b8>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f007 f8a2 	bl	8008310 <NRF24_openWritingPipe>
  NRF24_setAutoAck(true);
 80011cc:	2001      	movs	r0, #1
 80011ce:	f007 f997 	bl	8008500 <NRF24_setAutoAck>
  NRF24_enableDynamicPayloads();
 80011d2:	f007 f94b 	bl	800846c <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 80011d6:	f007 f91b 	bl	8008410 <NRF24_enableAckPayload>
   * Initializes the MPU6050 and HMC5883L sensors, and the MS5611 barometer.
   *
   * @param hi2c1 The I2C handle for communication with the sensors.
   */
  // Begin setup GY86
  while (MPU6050_Init(&hi2c1) == 1);
 80011da:	bf00      	nop
 80011dc:	4895      	ldr	r0, [pc, #596]	; (8001434 <main+0x2bc>)
 80011de:	f005 fd0d 	bl	8006bfc <MPU6050_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d0f9      	beq.n	80011dc <main+0x64>
  MPU6050_Bypass(&hi2c1);
 80011e8:	4892      	ldr	r0, [pc, #584]	; (8001434 <main+0x2bc>)
 80011ea:	f005 fd7c 	bl	8006ce6 <MPU6050_Bypass>
  HMC5883L_Init(&hi2c1);
 80011ee:	4891      	ldr	r0, [pc, #580]	; (8001434 <main+0x2bc>)
 80011f0:	f005 ff28 	bl	8007044 <HMC5883L_Init>
  MPU6050_Master(&hi2c1);
 80011f4:	488f      	ldr	r0, [pc, #572]	; (8001434 <main+0x2bc>)
 80011f6:	f005 fd9c 	bl	8006d32 <MPU6050_Master>
  MPU6050_Addslave(&hi2c1);
 80011fa:	488e      	ldr	r0, [pc, #568]	; (8001434 <main+0x2bc>)
 80011fc:	f005 fdbf 	bl	8006d7e <MPU6050_Addslave>
   * Sets up the ESC (Electronic Speed Controller) for a motor using the specified timer.
   *
   * @param htim1 The timer used for the ESC.
   */
  // Begin setup ESC
  setupESC(&htim1);
 8001200:	488d      	ldr	r0, [pc, #564]	; (8001438 <main+0x2c0>)
 8001202:	f005 fca5 	bl	8006b50 <setupESC>
   *
   * @param htim2 A pointer to the TIM2 handle.
   * Simple time is 2ms
   */
  // RUN
  HAL_TIM_Base_Start_IT(&htim2);
 8001206:	488d      	ldr	r0, [pc, #564]	; (800143c <main+0x2c4>)
 8001208:	f004 f8a2 	bl	8005350 <HAL_TIM_Base_Start_IT>
    /**
     * Sends sensor data over NRF24L01 radio module.
     * The data is sent every 20ms.
     * If there is no response from the receiver for 1 second, the enable flag is set to 0.
     */
    if (HAL_GetTick() - time_pre >= 20)
 800120c:	f001 fb7e 	bl	800290c <HAL_GetTick>
 8001210:	4603      	mov	r3, r0
 8001212:	2200      	movs	r2, #0
 8001214:	623b      	str	r3, [r7, #32]
 8001216:	627a      	str	r2, [r7, #36]	; 0x24
 8001218:	4b89      	ldr	r3, [pc, #548]	; (8001440 <main+0x2c8>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	6a39      	ldr	r1, [r7, #32]
 8001220:	ebb1 0802 	subs.w	r8, r1, r2
 8001224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001226:	eb61 0903 	sbc.w	r9, r1, r3
 800122a:	f1b8 0f14 	cmp.w	r8, #20
 800122e:	f179 0300 	sbcs.w	r3, r9, #0
 8001232:	d36a      	bcc.n	800130a <main+0x192>
    {
      // Pack Data_Tx
      data_Tx.a = Madgwick.roll;
 8001234:	4b83      	ldr	r3, [pc, #524]	; (8001444 <main+0x2cc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f985 	bl	8000548 <__aeabi_f2d>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4981      	ldr	r1, [pc, #516]	; (8001448 <main+0x2d0>)
 8001244:	e9c1 2300 	strd	r2, r3, [r1]
      data_Tx.b = Madgwick.pitch;
 8001248:	4b7e      	ldr	r3, [pc, #504]	; (8001444 <main+0x2cc>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f97b 	bl	8000548 <__aeabi_f2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	497c      	ldr	r1, [pc, #496]	; (8001448 <main+0x2d0>)
 8001258:	e9c1 2302 	strd	r2, r3, [r1, #8]
      data_Tx.c = Madgwick.yaw;
 800125c:	4b79      	ldr	r3, [pc, #484]	; (8001444 <main+0x2cc>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f971 	bl	8000548 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4977      	ldr	r1, [pc, #476]	; (8001448 <main+0x2d0>)
 800126c:	e9c1 2304 	strd	r2, r3, [r1, #16]
      data_Tx.d = enable;
 8001270:	4b76      	ldr	r3, [pc, #472]	; (800144c <main+0x2d4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f955 	bl	8000524 <__aeabi_i2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4972      	ldr	r1, [pc, #456]	; (8001448 <main+0x2d0>)
 8001280:	e9c1 2306 	strd	r2, r3, [r1, #24]
      // Send
      if (NRF24_write(&data_Tx, 32))
 8001284:	2120      	movs	r1, #32
 8001286:	4870      	ldr	r0, [pc, #448]	; (8001448 <main+0x2d0>)
 8001288:	f006 ffce 	bl	8008228 <NRF24_write>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d03b      	beq.n	800130a <main+0x192>
      {
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); // LED signal receiving RF24
 8001292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001296:	486e      	ldr	r0, [pc, #440]	; (8001450 <main+0x2d8>)
 8001298:	f001 fe2f 	bl	8002efa <HAL_GPIO_TogglePin>
        // Receive
        NRF24_read(&data_Rx, 32);
 800129c:	2120      	movs	r1, #32
 800129e:	486d      	ldr	r0, [pc, #436]	; (8001454 <main+0x2dc>)
 80012a0:	f007 f816 	bl	80082d0 <NRF24_read>
        // Unpack Data_Rx
        Setpoint.roll = data_Rx.a;
 80012a4:	4b6b      	ldr	r3, [pc, #428]	; (8001454 <main+0x2dc>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fc7b 	bl	8000ba8 <__aeabi_d2f>
 80012b2:	4602      	mov	r2, r0
 80012b4:	4b68      	ldr	r3, [pc, #416]	; (8001458 <main+0x2e0>)
 80012b6:	601a      	str	r2, [r3, #0]
        Setpoint.pitch = data_Rx.b;
 80012b8:	4b66      	ldr	r3, [pc, #408]	; (8001454 <main+0x2dc>)
 80012ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fc71 	bl	8000ba8 <__aeabi_d2f>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b63      	ldr	r3, [pc, #396]	; (8001458 <main+0x2e0>)
 80012ca:	605a      	str	r2, [r3, #4]
        Setpoint.yaw = data_Rx.c;
 80012cc:	4b61      	ldr	r3, [pc, #388]	; (8001454 <main+0x2dc>)
 80012ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fc67 	bl	8000ba8 <__aeabi_d2f>
 80012da:	4602      	mov	r2, r0
 80012dc:	4b5e      	ldr	r3, [pc, #376]	; (8001458 <main+0x2e0>)
 80012de:	609a      	str	r2, [r3, #8]
        enable = data_Rx.d;
 80012e0:	4b5c      	ldr	r3, [pc, #368]	; (8001454 <main+0x2dc>)
 80012e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc35 	bl	8000b58 <__aeabi_d2iz>
 80012ee:	4602      	mov	r2, r0
 80012f0:	4b56      	ldr	r3, [pc, #344]	; (800144c <main+0x2d4>)
 80012f2:	601a      	str	r2, [r3, #0]
        time_pre = HAL_GetTick();
 80012f4:	f001 fb0a 	bl	800290c <HAL_GetTick>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2200      	movs	r2, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	60fa      	str	r2, [r7, #12]
 8001300:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <main+0x2c8>)
 8001302:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001306:	e9c3 1200 	strd	r1, r2, [r3]
      }
    }
    if (HAL_GetTick() - time_pre > 1000) // If the control signal is lost after 1s, turn off the power
 800130a:	f001 faff 	bl	800290c <HAL_GetTick>
 800130e:	4603      	mov	r3, r0
 8001310:	2200      	movs	r2, #0
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	61fa      	str	r2, [r7, #28]
 8001316:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <main+0x2c8>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	69b9      	ldr	r1, [r7, #24]
 800131e:	ebb1 0a02 	subs.w	sl, r1, r2
 8001322:	69f9      	ldr	r1, [r7, #28]
 8001324:	eb61 0b03 	sbc.w	fp, r1, r3
 8001328:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800132c:	459a      	cmp	sl, r3
 800132e:	f17b 0300 	sbcs.w	r3, fp, #0
 8001332:	d302      	bcc.n	800133a <main+0x1c2>
      enable = 0;
 8001334:	4a45      	ldr	r2, [pc, #276]	; (800144c <main+0x2d4>)
 8001336:	2300      	movs	r3, #0
 8001338:	6013      	str	r3, [r2, #0]
    // chạy tăng tốc 1s trước khi chạy điều khiển
    if (enable == 1 && state == 0)
 800133a:	4b44      	ldr	r3, [pc, #272]	; (800144c <main+0x2d4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d111      	bne.n	8001366 <main+0x1ee>
 8001342:	4b46      	ldr	r3, [pc, #280]	; (800145c <main+0x2e4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10d      	bne.n	8001366 <main+0x1ee>
    {
      run = 2;
 800134a:	4a45      	ldr	r2, [pc, #276]	; (8001460 <main+0x2e8>)
 800134c:	2302      	movs	r3, #2
 800134e:	6013      	str	r3, [r2, #0]
      time = HAL_GetTick();
 8001350:	f001 fadc 	bl	800290c <HAL_GetTick>
 8001354:	4603      	mov	r3, r0
 8001356:	2200      	movs	r2, #0
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	4b41      	ldr	r3, [pc, #260]	; (8001464 <main+0x2ec>)
 800135e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001362:	e9c3 1200 	strd	r1, r2, [r3]
    }
    if (enable == 0)
 8001366:	4b39      	ldr	r3, [pc, #228]	; (800144c <main+0x2d4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <main+0x1fc>
      run = 0;
 800136e:	4a3c      	ldr	r2, [pc, #240]	; (8001460 <main+0x2e8>)
 8001370:	2300      	movs	r3, #0
 8001372:	6013      	str	r3, [r2, #0]
    if (run == 2)
 8001374:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <main+0x2e8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d116      	bne.n	80013aa <main+0x232>
    {
      if (HAL_GetTick() - time > 1000)
 800137c:	f001 fac6 	bl	800290c <HAL_GetTick>
 8001380:	4603      	mov	r3, r0
 8001382:	2200      	movs	r2, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	617a      	str	r2, [r7, #20]
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <main+0x2ec>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	6939      	ldr	r1, [r7, #16]
 8001390:	1a8d      	subs	r5, r1, r2
 8001392:	6979      	ldr	r1, [r7, #20]
 8001394:	eb61 0603 	sbc.w	r6, r1, r3
 8001398:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800139c:	429d      	cmp	r5, r3
 800139e:	f176 0300 	sbcs.w	r3, r6, #0
 80013a2:	d302      	bcc.n	80013aa <main+0x232>
        run = 1;
 80013a4:	4a2e      	ldr	r2, [pc, #184]	; (8001460 <main+0x2e8>)
 80013a6:	2301      	movs	r3, #1
 80013a8:	6013      	str	r3, [r2, #0]
    }
    gama = (Madgwick.roll/1.57 + 0.7853)*0.52+1.35;
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <main+0x2cc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8ca 	bl	8000548 <__aeabi_f2d>
 80013b4:	a314      	add	r3, pc, #80	; (adr r3, 8001408 <main+0x290>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff fa47 	bl	800084c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	a312      	add	r3, pc, #72	; (adr r3, 8001410 <main+0x298>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7fe ff5e 	bl	800028c <__adddf3>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	a30f      	add	r3, pc, #60	; (adr r3, 8001418 <main+0x2a0>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f90b 	bl	80005f8 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	a30d      	add	r3, pc, #52	; (adr r3, 8001420 <main+0x2a8>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7fe ff4c 	bl	800028c <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <main+0x2f0>)
 80013fe:	e9c3 0100 	strd	r0, r1, [r3]
    if (HAL_GetTick() - time_pre >= 20)
 8001402:	e703      	b.n	800120c <main+0x94>
 8001404:	f3af 8000 	nop.w
 8001408:	51eb851f 	.word	0x51eb851f
 800140c:	3ff91eb8 	.word	0x3ff91eb8
 8001410:	77318fc5 	.word	0x77318fc5
 8001414:	3fe9212d 	.word	0x3fe9212d
 8001418:	0a3d70a4 	.word	0x0a3d70a4
 800141c:	3fe0a3d7 	.word	0x3fe0a3d7
 8001420:	9999999a 	.word	0x9999999a
 8001424:	3ff59999 	.word	0x3ff59999
 8001428:	20000400 	.word	0x20000400
 800142c:	40020400 	.word	0x40020400
 8001430:	20000060 	.word	0x20000060
 8001434:	200001cc 	.word	0x200001cc
 8001438:	2000045c 	.word	0x2000045c
 800143c:	200004a4 	.word	0x200004a4
 8001440:	200003b8 	.word	0x200003b8
 8001444:	200002b4 	.word	0x200002b4
 8001448:	200002f0 	.word	0x200002f0
 800144c:	200003a0 	.word	0x200003a0
 8001450:	40020c00 	.word	0x40020c00
 8001454:	20000310 	.word	0x20000310
 8001458:	200002cc 	.word	0x200002cc
 800145c:	200003a4 	.word	0x200003a4
 8001460:	200003a8 	.word	0x200003a8
 8001464:	200003b0 	.word	0x200003b0
 8001468:	20000138 	.word	0x20000138

0800146c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b094      	sub	sp, #80	; 0x50
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	2230      	movs	r2, #48	; 0x30
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f007 fe20 	bl	80090c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <SystemClock_Config+0xc8>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <SystemClock_Config+0xc8>)
 800149a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <SystemClock_Config+0xc8>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <SystemClock_Config+0xcc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a20      	ldr	r2, [pc, #128]	; (8001538 <SystemClock_Config+0xcc>)
 80014b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <SystemClock_Config+0xcc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c8:	2302      	movs	r3, #2
 80014ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014cc:	2301      	movs	r3, #1
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d0:	2310      	movs	r3, #16
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d4:	2302      	movs	r3, #2
 80014d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d8:	2300      	movs	r3, #0
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014dc:	2308      	movs	r3, #8
 80014de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014e0:	2348      	movs	r3, #72	; 0x48
 80014e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014e8:	2304      	movs	r3, #4
 80014ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fcdd 	bl	8003eb0 <HAL_RCC_OscConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014fc:	f000 fe52 	bl	80021a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001500:	230f      	movs	r3, #15
 8001502:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001504:	2302      	movs	r3, #2
 8001506:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001510:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	2102      	movs	r1, #2
 800151c:	4618      	mov	r0, r3
 800151e:	f002 ff3f 	bl	80043a0 <HAL_RCC_ClockConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001528:	f000 fe3c 	bl	80021a4 <Error_Handler>
  }
}
 800152c:	bf00      	nop
 800152e:	3750      	adds	r7, #80	; 0x50
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023800 	.word	0x40023800
 8001538:	40007000 	.word	0x40007000
 800153c:	00000000 	.word	0x00000000

08001540 <quaternion_to_euler>:

/* USER CODE BEGIN 4 */
void quaternion_to_euler(Quaternion_t q, Euler_t *angles)
{
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b090      	sub	sp, #64	; 0x40
 8001544:	af00      	add	r7, sp, #0
 8001546:	eeb0 6a40 	vmov.f32	s12, s0
 800154a:	eef0 6a60 	vmov.f32	s13, s1
 800154e:	eeb0 7a41 	vmov.f32	s14, s2
 8001552:	eef0 7a61 	vmov.f32	s15, s3
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	ed87 6a02 	vstr	s12, [r7, #8]
 800155c:	edc7 6a03 	vstr	s13, [r7, #12]
 8001560:	ed87 7a04 	vstr	s14, [r7, #16]
 8001564:	edc7 7a05 	vstr	s15, [r7, #20]
	// Calculate Euler angles
	double sinr_cosp = 2.0 * (q.q4 * q.q1 + q.q2 * q.q3);
 8001568:	ed97 7a05 	vldr	s14, [r7, #20]
 800156c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001574:	edd7 6a03 	vldr	s13, [r7, #12]
 8001578:	edd7 7a04 	vldr	s15, [r7, #16]
 800157c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001584:	ee17 0a90 	vmov	r0, s15
 8001588:	f7fe ffde 	bl	8000548 <__aeabi_f2d>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	f7fe fe7c 	bl	800028c <__adddf3>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double cosr_cosp = 1.0 - 2.0 * (q.q1 * q.q1 + q.q2 * q.q2);
 800159c:	ed97 7a02 	vldr	s14, [r7, #8]
 80015a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80015ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b8:	ee17 0a90 	vmov	r0, s15
 80015bc:	f7fe ffc4 	bl	8000548 <__aeabi_f2d>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	f7fe fe62 	bl	800028c <__adddf3>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	f04f 0000 	mov.w	r0, #0
 80015d0:	4957      	ldr	r1, [pc, #348]	; (8001730 <quaternion_to_euler+0x1f0>)
 80015d2:	f7fe fe59 	bl	8000288 <__aeabi_dsub>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	angles->roll = atan2(sinr_cosp, cosr_cosp);
 80015de:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80015e2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80015e6:	f008 fa4f 	bl	8009a88 <atan2>
 80015ea:	ec53 2b10 	vmov	r2, r3, d0
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fad9 	bl	8000ba8 <__aeabi_d2f>
 80015f6:	4602      	mov	r2, r0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	601a      	str	r2, [r3, #0]

	double sinp = 2.0 * (q.q4 * q.q2 - q.q3 * q.q1);
 80015fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001600:	edd7 7a03 	vldr	s15, [r7, #12]
 8001604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001608:	edd7 6a04 	vldr	s13, [r7, #16]
 800160c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001618:	ee17 0a90 	vmov	r0, s15
 800161c:	f7fe ff94 	bl	8000548 <__aeabi_f2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	f7fe fe32 	bl	800028c <__adddf3>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (fabs(sinp) >= 1.0) {
 8001630:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001634:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4b3c      	ldr	r3, [pc, #240]	; (8001730 <quaternion_to_euler+0x1f0>)
 800163e:	4620      	mov	r0, r4
 8001640:	4629      	mov	r1, r5
 8001642:	f7ff fa5f 	bl	8000b04 <__aeabi_dcmpge>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00f      	beq.n	800166c <quaternion_to_euler+0x12c>
	    angles->pitch = copysign(M_PI / 2.0, sinp);
 800164c:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8001650:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8001728 <quaternion_to_euler+0x1e8>
 8001654:	f007 fd3c 	bl	80090d0 <copysign>
 8001658:	ec53 2b10 	vmov	r2, r3, d0
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff faa2 	bl	8000ba8 <__aeabi_d2f>
 8001664:	4602      	mov	r2, r0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	e00c      	b.n	8001686 <quaternion_to_euler+0x146>
	} else {
	    angles->pitch = asin(sinp);
 800166c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001670:	f008 f9d6 	bl	8009a20 <asin>
 8001674:	ec53 2b10 	vmov	r2, r3, d0
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fa94 	bl	8000ba8 <__aeabi_d2f>
 8001680:	4602      	mov	r2, r0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	605a      	str	r2, [r3, #4]
	}

	double siny_cosp = 2.0 * (q.q4 * q.q3 + q.q1 * q.q2);
 8001686:	ed97 7a05 	vldr	s14, [r7, #20]
 800168a:	edd7 7a04 	vldr	s15, [r7, #16]
 800168e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001692:	edd7 6a02 	vldr	s13, [r7, #8]
 8001696:	edd7 7a03 	vldr	s15, [r7, #12]
 800169a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	ee17 0a90 	vmov	r0, s15
 80016a6:	f7fe ff4f 	bl	8000548 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	f7fe fded 	bl	800028c <__adddf3>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double cosy_cosp = 1.0 - 2.0 * (q.q2 * q.q2 + q.q3 * q.q3);
 80016ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80016be:	edd7 7a03 	vldr	s15, [r7, #12]
 80016c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c6:	edd7 6a04 	vldr	s13, [r7, #16]
 80016ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d6:	ee17 0a90 	vmov	r0, s15
 80016da:	f7fe ff35 	bl	8000548 <__aeabi_f2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	f7fe fdd3 	bl	800028c <__adddf3>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	f04f 0000 	mov.w	r0, #0
 80016ee:	4910      	ldr	r1, [pc, #64]	; (8001730 <quaternion_to_euler+0x1f0>)
 80016f0:	f7fe fdca 	bl	8000288 <__aeabi_dsub>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	angles->yaw = atan2(siny_cosp, cosy_cosp);
 80016fc:	ed97 1b06 	vldr	d1, [r7, #24]
 8001700:	ed97 0b08 	vldr	d0, [r7, #32]
 8001704:	f008 f9c0 	bl	8009a88 <atan2>
 8001708:	ec53 2b10 	vmov	r2, r3, d0
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff fa4a 	bl	8000ba8 <__aeabi_d2f>
 8001714:	4602      	mov	r2, r0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]
}
 800171a:	bf00      	nop
 800171c:	3740      	adds	r7, #64	; 0x40
 800171e:	46bd      	mov	sp, r7
 8001720:	bdb0      	pop	{r4, r5, r7, pc}
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	54442d18 	.word	0x54442d18
 800172c:	3ff921fb 	.word	0x3ff921fb
 8001730:	3ff00000 	.word	0x3ff00000
 8001734:	00000000 	.word	0x00000000

08001738 <LQR_Control>:
// 2. Bo dieu khien LQR
void LQR_Control()
{
 8001738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
  /**
   * Computes the control signals for a quadcopter based on the difference between the setpoint and the current orientation.
   * The control signals are then used to adjust the duty cycle of the motors to achieve the desired orientation.
   */
  // r()
  x[0] = Setpoint.roll - Madgwick.roll;
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <LQR_Control+0xec>)
 8001742:	ed93 7a00 	vldr	s14, [r3]
 8001746:	4b38      	ldr	r3, [pc, #224]	; (8001828 <LQR_Control+0xf0>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001750:	ee17 0a90 	vmov	r0, s15
 8001754:	f7fe fef8 	bl	8000548 <__aeabi_f2d>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4933      	ldr	r1, [pc, #204]	; (800182c <LQR_Control+0xf4>)
 800175e:	e9c1 2300 	strd	r2, r3, [r1]
  x[1] = Setpoint.pitch - Madgwick.pitch;
 8001762:	4b30      	ldr	r3, [pc, #192]	; (8001824 <LQR_Control+0xec>)
 8001764:	ed93 7a01 	vldr	s14, [r3, #4]
 8001768:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <LQR_Control+0xf0>)
 800176a:	edd3 7a01 	vldr	s15, [r3, #4]
 800176e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001772:	ee17 0a90 	vmov	r0, s15
 8001776:	f7fe fee7 	bl	8000548 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	492b      	ldr	r1, [pc, #172]	; (800182c <LQR_Control+0xf4>)
 8001780:	e9c1 2302 	strd	r2, r3, [r1, #8]
  x[2] = 0;
 8001784:	4929      	ldr	r1, [pc, #164]	; (800182c <LQR_Control+0xf4>)
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  x[3] = Setpoint_dot.roll - MPU6050.Gx;
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <LQR_Control+0xf8>)
 8001794:	ed93 7a00 	vldr	s14, [r3]
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <LQR_Control+0xfc>)
 800179a:	edd3 7a07 	vldr	s15, [r3, #28]
 800179e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a2:	ee17 0a90 	vmov	r0, s15
 80017a6:	f7fe fecf 	bl	8000548 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	491f      	ldr	r1, [pc, #124]	; (800182c <LQR_Control+0xf4>)
 80017b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
  x[4] = Setpoint_dot.pitch - MPU6050.Gy;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <LQR_Control+0xf8>)
 80017b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <LQR_Control+0xfc>)
 80017bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80017c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c4:	ee17 0a90 	vmov	r0, s15
 80017c8:	f7fe febe 	bl	8000548 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4916      	ldr	r1, [pc, #88]	; (800182c <LQR_Control+0xf4>)
 80017d2:	e9c1 2308 	strd	r2, r3, [r1, #32]
  x[5] = 0;
 80017d6:	4915      	ldr	r1, [pc, #84]	; (800182c <LQR_Control+0xf4>)
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  // Tích phân khâu I để bù trừ phần chưa kiểm soát
  if (run == 1)
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <LQR_Control+0x100>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d12b      	bne.n	8001844 <LQR_Control+0x10c>
  {
    i_e_roll += x[0];
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <LQR_Control+0xf4>)
 80017ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <LQR_Control+0x104>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe fd48 	bl	800028c <__adddf3>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	490e      	ldr	r1, [pc, #56]	; (800183c <LQR_Control+0x104>)
 8001802:	e9c1 2300 	strd	r2, r3, [r1]
    i_e_pitch += x[1];
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <LQR_Control+0xf4>)
 8001808:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <LQR_Control+0x108>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe fd3b 	bl	800028c <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4909      	ldr	r1, [pc, #36]	; (8001840 <LQR_Control+0x108>)
 800181c:	e9c1 2300 	strd	r2, r3, [r1]
 8001820:	e01e      	b.n	8001860 <LQR_Control+0x128>
 8001822:	bf00      	nop
 8001824:	200002cc 	.word	0x200002cc
 8001828:	200002b4 	.word	0x200002b4
 800182c:	20000330 	.word	0x20000330
 8001830:	200002e4 	.word	0x200002e4
 8001834:	20000220 	.word	0x20000220
 8001838:	200003a8 	.word	0x200003a8
 800183c:	200003c0 	.word	0x200003c0
 8001840:	200003c8 	.word	0x200003c8
  }
  else
  {
    i_e_roll = 0;
 8001844:	49a6      	ldr	r1, [pc, #664]	; (8001ae0 <LQR_Control+0x3a8>)
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9c1 2300 	strd	r2, r3, [r1]
    i_e_pitch = 0;
 8001852:	49a4      	ldr	r1, [pc, #656]	; (8001ae4 <LQR_Control+0x3ac>)
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9c1 2300 	strd	r2, r3, [r1]
  }
  if (Setpoint.roll != Setpoint_pre.roll)
 8001860:	4ba1      	ldr	r3, [pc, #644]	; (8001ae8 <LQR_Control+0x3b0>)
 8001862:	ed93 7a00 	vldr	s14, [r3]
 8001866:	4ba1      	ldr	r3, [pc, #644]	; (8001aec <LQR_Control+0x3b4>)
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001874:	d012      	beq.n	800189c <LQR_Control+0x164>
  {
    i_e_roll = 0;
 8001876:	499a      	ldr	r1, [pc, #616]	; (8001ae0 <LQR_Control+0x3a8>)
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	e9c1 2300 	strd	r2, r3, [r1]
    i_e_pitch = 0;
 8001884:	4997      	ldr	r1, [pc, #604]	; (8001ae4 <LQR_Control+0x3ac>)
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9c1 2300 	strd	r2, r3, [r1]
    Setpoint_pre = Setpoint;
 8001892:	4b96      	ldr	r3, [pc, #600]	; (8001aec <LQR_Control+0x3b4>)
 8001894:	4a94      	ldr	r2, [pc, #592]	; (8001ae8 <LQR_Control+0x3b0>)
 8001896:	ca07      	ldmia	r2, {r0, r1, r2}
 8001898:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  }
  //
  aa = LimitI / (Ki * DELTA_T);
 800189c:	4b94      	ldr	r3, [pc, #592]	; (8001af0 <LQR_Control+0x3b8>)
 800189e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80018a2:	4b94      	ldr	r3, [pc, #592]	; (8001af4 <LQR_Control+0x3bc>)
 80018a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a8:	a389      	add	r3, pc, #548	; (adr r3, 8001ad0 <LQR_Control+0x398>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe fea3 	bl	80005f8 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f7fe ffc7 	bl	800084c <__aeabi_ddiv>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	498d      	ldr	r1, [pc, #564]	; (8001af8 <LQR_Control+0x3c0>)
 80018c4:	e9c1 2300 	strd	r2, r3, [r1]
  if (i_e_roll > aa)
 80018c8:	4b85      	ldr	r3, [pc, #532]	; (8001ae0 <LQR_Control+0x3a8>)
 80018ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ce:	4b8a      	ldr	r3, [pc, #552]	; (8001af8 <LQR_Control+0x3c0>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7ff f920 	bl	8000b18 <__aeabi_dcmpgt>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <LQR_Control+0x1b2>
    i_e_roll = aa;
 80018de:	4b86      	ldr	r3, [pc, #536]	; (8001af8 <LQR_Control+0x3c0>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	497e      	ldr	r1, [pc, #504]	; (8001ae0 <LQR_Control+0x3a8>)
 80018e6:	e9c1 2300 	strd	r2, r3, [r1]
  if (i_e_roll < -aa)
 80018ea:	4b83      	ldr	r3, [pc, #524]	; (8001af8 <LQR_Control+0x3c0>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	4b79      	ldr	r3, [pc, #484]	; (8001ae0 <LQR_Control+0x3a8>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001902:	f7ff f909 	bl	8000b18 <__aeabi_dcmpgt>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <LQR_Control+0x1e6>
    i_e_roll = -aa;
 800190c:	4b7a      	ldr	r3, [pc, #488]	; (8001af8 <LQR_Control+0x3c0>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	4692      	mov	sl, r2
 8001914:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001918:	4b71      	ldr	r3, [pc, #452]	; (8001ae0 <LQR_Control+0x3a8>)
 800191a:	e9c3 ab00 	strd	sl, fp, [r3]
  if (i_e_pitch > aa)
 800191e:	4b71      	ldr	r3, [pc, #452]	; (8001ae4 <LQR_Control+0x3ac>)
 8001920:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001924:	4b74      	ldr	r3, [pc, #464]	; (8001af8 <LQR_Control+0x3c0>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7ff f8f5 	bl	8000b18 <__aeabi_dcmpgt>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <LQR_Control+0x208>
    i_e_pitch = aa;
 8001934:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <LQR_Control+0x3c0>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	496a      	ldr	r1, [pc, #424]	; (8001ae4 <LQR_Control+0x3ac>)
 800193c:	e9c1 2300 	strd	r2, r3, [r1]
  if (i_e_pitch < -aa)
 8001940:	4b6d      	ldr	r3, [pc, #436]	; (8001af8 <LQR_Control+0x3c0>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	603a      	str	r2, [r7, #0]
 8001948:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	4b65      	ldr	r3, [pc, #404]	; (8001ae4 <LQR_Control+0x3ac>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001958:	f7ff f8de 	bl	8000b18 <__aeabi_dcmpgt>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <LQR_Control+0x23c>
    i_e_pitch = -aa;
 8001962:	4b65      	ldr	r3, [pc, #404]	; (8001af8 <LQR_Control+0x3c0>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	4690      	mov	r8, r2
 800196a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800196e:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <LQR_Control+0x3ac>)
 8001970:	e9c3 8900 	strd	r8, r9, [r3]
  //
  outI_roll = Ki * i_e_roll * DELTA_T;
 8001974:	4b5f      	ldr	r3, [pc, #380]	; (8001af4 <LQR_Control+0x3bc>)
 8001976:	e9d3 0100 	ldrd	r0, r1, [r3]
 800197a:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <LQR_Control+0x3a8>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fe3a 	bl	80005f8 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	a350      	add	r3, pc, #320	; (adr r3, 8001ad0 <LQR_Control+0x398>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f7fe fe31 	bl	80005f8 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4958      	ldr	r1, [pc, #352]	; (8001afc <LQR_Control+0x3c4>)
 800199c:	e9c1 2300 	strd	r2, r3, [r1]
  outF_roll = tan(Setpoint.roll) * 9.81 * m;
 80019a0:	4b51      	ldr	r3, [pc, #324]	; (8001ae8 <LQR_Control+0x3b0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdcf 	bl	8000548 <__aeabi_f2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	ec43 2b10 	vmov	d0, r2, r3
 80019b2:	f008 f801 	bl	80099b8 <tan>
 80019b6:	ec51 0b10 	vmov	r0, r1, d0
 80019ba:	a347      	add	r3, pc, #284	; (adr r3, 8001ad8 <LQR_Control+0x3a0>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fe1a 	bl	80005f8 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <LQR_Control+0x3c8>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7fe fe11 	bl	80005f8 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	494a      	ldr	r1, [pc, #296]	; (8001b04 <LQR_Control+0x3cc>)
 80019dc:	e9c1 2300 	strd	r2, r3, [r1]
  outI_pitch = Ki * i_e_pitch * DELTA_T;
 80019e0:	4b44      	ldr	r3, [pc, #272]	; (8001af4 <LQR_Control+0x3bc>)
 80019e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e6:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <LQR_Control+0x3ac>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe04 	bl	80005f8 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	a335      	add	r3, pc, #212	; (adr r3, 8001ad0 <LQR_Control+0x398>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fdfb 	bl	80005f8 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4940      	ldr	r1, [pc, #256]	; (8001b08 <LQR_Control+0x3d0>)
 8001a08:	e9c1 2300 	strd	r2, r3, [r1]
  outF_pitch = tan(Setpoint.pitch) * 9.81 * m;
 8001a0c:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <LQR_Control+0x3b0>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd99 	bl	8000548 <__aeabi_f2d>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	ec43 2b10 	vmov	d0, r2, r3
 8001a1e:	f007 ffcb 	bl	80099b8 <tan>
 8001a22:	ec51 0b10 	vmov	r0, r1, d0
 8001a26:	a32c      	add	r3, pc, #176	; (adr r3, 8001ad8 <LQR_Control+0x3a0>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe fde4 	bl	80005f8 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <LQR_Control+0x3c8>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fddb 	bl	80005f8 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4931      	ldr	r1, [pc, #196]	; (8001b0c <LQR_Control+0x3d4>)
 8001a48:	e9c1 2300 	strd	r2, r3, [r1]
  // LQR
  compute_control(x, K, u);
 8001a4c:	4a30      	ldr	r2, [pc, #192]	; (8001b10 <LQR_Control+0x3d8>)
 8001a4e:	4931      	ldr	r1, [pc, #196]	; (8001b14 <LQR_Control+0x3dc>)
 8001a50:	4831      	ldr	r0, [pc, #196]	; (8001b18 <LQR_Control+0x3e0>)
 8001a52:	f005 fbc4 	bl	80071de <compute_control>
  u[1] += outI_roll;
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <LQR_Control+0x3d8>)
 8001a58:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a5c:	4b27      	ldr	r3, [pc, #156]	; (8001afc <LQR_Control+0x3c4>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fc13 	bl	800028c <__adddf3>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4929      	ldr	r1, [pc, #164]	; (8001b10 <LQR_Control+0x3d8>)
 8001a6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  u[2] += outI_pitch;
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <LQR_Control+0x3d8>)
 8001a72:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <LQR_Control+0x3d0>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fc06 	bl	800028c <__adddf3>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4922      	ldr	r1, [pc, #136]	; (8001b10 <LQR_Control+0x3d8>)
 8001a86:	e9c1 2304 	strd	r2, r3, [r1, #16]

  // Limit
  if (u[0] > 25)
 8001a8a:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <LQR_Control+0x3d8>)
 8001a8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <LQR_Control+0x3e4>)
 8001a96:	f7ff f83f 	bl	8000b18 <__aeabi_dcmpgt>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <LQR_Control+0x374>
    u[0] = 25;
 8001aa0:	491b      	ldr	r1, [pc, #108]	; (8001b10 <LQR_Control+0x3d8>)
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <LQR_Control+0x3e4>)
 8001aa8:	e9c1 2300 	strd	r2, r3, [r1]
  if (u[1] > 11.5)
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <LQR_Control+0x3d8>)
 8001aae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <LQR_Control+0x3e8>)
 8001ab8:	f7ff f82e 	bl	8000b18 <__aeabi_dcmpgt>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d032      	beq.n	8001b28 <LQR_Control+0x3f0>
    u[1] = 11.5;
 8001ac2:	4913      	ldr	r1, [pc, #76]	; (8001b10 <LQR_Control+0x3d8>)
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <LQR_Control+0x3e8>)
 8001aca:	e02b      	b.n	8001b24 <LQR_Control+0x3ec>
 8001acc:	f3af 8000 	nop.w
 8001ad0:	47ae147b 	.word	0x47ae147b
 8001ad4:	3f847ae1 	.word	0x3f847ae1
 8001ad8:	51eb851f 	.word	0x51eb851f
 8001adc:	40239eb8 	.word	0x40239eb8
 8001ae0:	200003c0 	.word	0x200003c0
 8001ae4:	200003c8 	.word	0x200003c8
 8001ae8:	200002cc 	.word	0x200002cc
 8001aec:	200002d8 	.word	0x200002d8
 8001af0:	20000130 	.word	0x20000130
 8001af4:	20000128 	.word	0x20000128
 8001af8:	200003d0 	.word	0x200003d0
 8001afc:	200003d8 	.word	0x200003d8
 8001b00:	200003f8 	.word	0x200003f8
 8001b04:	200003e0 	.word	0x200003e0
 8001b08:	200003e8 	.word	0x200003e8
 8001b0c:	200003f0 	.word	0x200003f0
 8001b10:	20000360 	.word	0x20000360
 8001b14:	20000068 	.word	0x20000068
 8001b18:	20000330 	.word	0x20000330
 8001b1c:	40390000 	.word	0x40390000
 8001b20:	40270000 	.word	0x40270000
 8001b24:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (u[1] < -11.5)
 8001b28:	4bb5      	ldr	r3, [pc, #724]	; (8001e00 <LQR_Control+0x6c8>)
 8001b2a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4bb4      	ldr	r3, [pc, #720]	; (8001e04 <LQR_Control+0x6cc>)
 8001b34:	f7fe ffd2 	bl	8000adc <__aeabi_dcmplt>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <LQR_Control+0x412>
    u[1] = -11.5;
 8001b3e:	49b0      	ldr	r1, [pc, #704]	; (8001e00 <LQR_Control+0x6c8>)
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4baf      	ldr	r3, [pc, #700]	; (8001e04 <LQR_Control+0x6cc>)
 8001b46:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (u[2] > 11.5)
 8001b4a:	4bad      	ldr	r3, [pc, #692]	; (8001e00 <LQR_Control+0x6c8>)
 8001b4c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4bac      	ldr	r3, [pc, #688]	; (8001e08 <LQR_Control+0x6d0>)
 8001b56:	f7fe ffdf 	bl	8000b18 <__aeabi_dcmpgt>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <LQR_Control+0x434>
    u[2] = 11.5;
 8001b60:	49a7      	ldr	r1, [pc, #668]	; (8001e00 <LQR_Control+0x6c8>)
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	4ba8      	ldr	r3, [pc, #672]	; (8001e08 <LQR_Control+0x6d0>)
 8001b68:	e9c1 2304 	strd	r2, r3, [r1, #16]
  if (u[2] < -11.5)
 8001b6c:	4ba4      	ldr	r3, [pc, #656]	; (8001e00 <LQR_Control+0x6c8>)
 8001b6e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4ba3      	ldr	r3, [pc, #652]	; (8001e04 <LQR_Control+0x6cc>)
 8001b78:	f7fe ffb0 	bl	8000adc <__aeabi_dcmplt>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <LQR_Control+0x456>
    u[2] = -11.5;
 8001b82:	499f      	ldr	r1, [pc, #636]	; (8001e00 <LQR_Control+0x6c8>)
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b9e      	ldr	r3, [pc, #632]	; (8001e04 <LQR_Control+0x6cc>)
 8001b8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  if (u[3] > 11.5)
 8001b8e:	4b9c      	ldr	r3, [pc, #624]	; (8001e00 <LQR_Control+0x6c8>)
 8001b90:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4b9b      	ldr	r3, [pc, #620]	; (8001e08 <LQR_Control+0x6d0>)
 8001b9a:	f7fe ffbd 	bl	8000b18 <__aeabi_dcmpgt>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <LQR_Control+0x478>
    u[3] = 11.5;
 8001ba4:	4996      	ldr	r1, [pc, #600]	; (8001e00 <LQR_Control+0x6c8>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b97      	ldr	r3, [pc, #604]	; (8001e08 <LQR_Control+0x6d0>)
 8001bac:	e9c1 2306 	strd	r2, r3, [r1, #24]
  if (u[3] < -11.5)
 8001bb0:	4b93      	ldr	r3, [pc, #588]	; (8001e00 <LQR_Control+0x6c8>)
 8001bb2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b92      	ldr	r3, [pc, #584]	; (8001e04 <LQR_Control+0x6cc>)
 8001bbc:	f7fe ff8e 	bl	8000adc <__aeabi_dcmplt>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <LQR_Control+0x49a>
    u[3] = -11.5;
 8001bc6:	498e      	ldr	r1, [pc, #568]	; (8001e00 <LQR_Control+0x6c8>)
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b8d      	ldr	r3, [pc, #564]	; (8001e04 <LQR_Control+0x6cc>)
 8001bce:	e9c1 2306 	strd	r2, r3, [r1, #24]
  u[1] = u[1] * 0.5;
 8001bd2:	4b8b      	ldr	r3, [pc, #556]	; (8001e00 <LQR_Control+0x6c8>)
 8001bd4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b8b      	ldr	r3, [pc, #556]	; (8001e0c <LQR_Control+0x6d4>)
 8001bde:	f7fe fd0b 	bl	80005f8 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4986      	ldr	r1, [pc, #536]	; (8001e00 <LQR_Control+0x6c8>)
 8001be8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  u[2] = u[2] * 0.5;
 8001bec:	4b84      	ldr	r3, [pc, #528]	; (8001e00 <LQR_Control+0x6c8>)
 8001bee:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	4b85      	ldr	r3, [pc, #532]	; (8001e0c <LQR_Control+0x6d4>)
 8001bf8:	f7fe fcfe 	bl	80005f8 <__aeabi_dmul>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	497f      	ldr	r1, [pc, #508]	; (8001e00 <LQR_Control+0x6c8>)
 8001c02:	e9c1 2304 	strd	r2, r3, [r1, #16]
  u[3] = u[3] * 0.1;
 8001c06:	4b7e      	ldr	r3, [pc, #504]	; (8001e00 <LQR_Control+0x6c8>)
 8001c08:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c0c:	a37a      	add	r3, pc, #488	; (adr r3, 8001df8 <LQR_Control+0x6c0>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fcf1 	bl	80005f8 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4979      	ldr	r1, [pc, #484]	; (8001e00 <LQR_Control+0x6c8>)
 8001c1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  // U -> T
  T1 = u[0] * 0.25 + u[3] * 0.25 - u[2] * 0.5; // T = Khối lượng/4 + độ cao + yaw - pitch;
 8001c20:	4b77      	ldr	r3, [pc, #476]	; (8001e00 <LQR_Control+0x6c8>)
 8001c22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	4b79      	ldr	r3, [pc, #484]	; (8001e10 <LQR_Control+0x6d8>)
 8001c2c:	f7fe fce4 	bl	80005f8 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4614      	mov	r4, r2
 8001c36:	461d      	mov	r5, r3
 8001c38:	4b71      	ldr	r3, [pc, #452]	; (8001e00 <LQR_Control+0x6c8>)
 8001c3a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b73      	ldr	r3, [pc, #460]	; (8001e10 <LQR_Control+0x6d8>)
 8001c44:	f7fe fcd8 	bl	80005f8 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fb1c 	bl	800028c <__adddf3>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <LQR_Control+0x6c8>)
 8001c5e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b69      	ldr	r3, [pc, #420]	; (8001e0c <LQR_Control+0x6d4>)
 8001c68:	f7fe fcc6 	bl	80005f8 <__aeabi_dmul>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4620      	mov	r0, r4
 8001c72:	4629      	mov	r1, r5
 8001c74:	f7fe fb08 	bl	8000288 <__aeabi_dsub>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4965      	ldr	r1, [pc, #404]	; (8001e14 <LQR_Control+0x6dc>)
 8001c7e:	e9c1 2300 	strd	r2, r3, [r1]
  T2 = u[0] * 0.25 - u[3] * 0.25 + u[1] * 0.5; // T = Khối lượng/4 + độ cao - yaw + roll;
 8001c82:	4b5f      	ldr	r3, [pc, #380]	; (8001e00 <LQR_Control+0x6c8>)
 8001c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	4b60      	ldr	r3, [pc, #384]	; (8001e10 <LQR_Control+0x6d8>)
 8001c8e:	f7fe fcb3 	bl	80005f8 <__aeabi_dmul>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4614      	mov	r4, r2
 8001c98:	461d      	mov	r5, r3
 8001c9a:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <LQR_Control+0x6c8>)
 8001c9c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	4b5a      	ldr	r3, [pc, #360]	; (8001e10 <LQR_Control+0x6d8>)
 8001ca6:	f7fe fca7 	bl	80005f8 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4620      	mov	r0, r4
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	f7fe fae9 	bl	8000288 <__aeabi_dsub>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4614      	mov	r4, r2
 8001cbc:	461d      	mov	r5, r3
 8001cbe:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <LQR_Control+0x6c8>)
 8001cc0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <LQR_Control+0x6d4>)
 8001cca:	f7fe fc95 	bl	80005f8 <__aeabi_dmul>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f7fe fad9 	bl	800028c <__adddf3>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	494e      	ldr	r1, [pc, #312]	; (8001e18 <LQR_Control+0x6e0>)
 8001ce0:	e9c1 2300 	strd	r2, r3, [r1]
  T3 = u[0] * 0.25 + u[3] * 0.25 + u[2] * 0.5; // T = Khối lượng/4 + độ cao + yaw + pitch;
 8001ce4:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <LQR_Control+0x6c8>)
 8001ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <LQR_Control+0x6d8>)
 8001cf0:	f7fe fc82 	bl	80005f8 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <LQR_Control+0x6c8>)
 8001cfe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b42      	ldr	r3, [pc, #264]	; (8001e10 <LQR_Control+0x6d8>)
 8001d08:	f7fe fc76 	bl	80005f8 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4620      	mov	r0, r4
 8001d12:	4629      	mov	r1, r5
 8001d14:	f7fe faba 	bl	800028c <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4614      	mov	r4, r2
 8001d1e:	461d      	mov	r5, r3
 8001d20:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <LQR_Control+0x6c8>)
 8001d22:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <LQR_Control+0x6d4>)
 8001d2c:	f7fe fc64 	bl	80005f8 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4620      	mov	r0, r4
 8001d36:	4629      	mov	r1, r5
 8001d38:	f7fe faa8 	bl	800028c <__adddf3>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4936      	ldr	r1, [pc, #216]	; (8001e1c <LQR_Control+0x6e4>)
 8001d42:	e9c1 2300 	strd	r2, r3, [r1]
  T4 = u[0] * 0.25 - u[3] * 0.25 - u[1] * 0.5; // T = Khối lượng/4 + độ cao - yaw - roll;
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <LQR_Control+0x6c8>)
 8001d48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <LQR_Control+0x6d8>)
 8001d52:	f7fe fc51 	bl	80005f8 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4614      	mov	r4, r2
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <LQR_Control+0x6c8>)
 8001d60:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <LQR_Control+0x6d8>)
 8001d6a:	f7fe fc45 	bl	80005f8 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4620      	mov	r0, r4
 8001d74:	4629      	mov	r1, r5
 8001d76:	f7fe fa87 	bl	8000288 <__aeabi_dsub>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4614      	mov	r4, r2
 8001d80:	461d      	mov	r5, r3
 8001d82:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <LQR_Control+0x6c8>)
 8001d84:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <LQR_Control+0x6d4>)
 8001d8e:	f7fe fc33 	bl	80005f8 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4620      	mov	r0, r4
 8001d98:	4629      	mov	r1, r5
 8001d9a:	f7fe fa75 	bl	8000288 <__aeabi_dsub>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	491f      	ldr	r1, [pc, #124]	; (8001e20 <LQR_Control+0x6e8>)
 8001da4:	e9c1 2300 	strd	r2, r3, [r1]
  // T -> Duty
  M1.Duty = T1 / 11.5 * 1000;
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <LQR_Control+0x6dc>)
 8001daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <LQR_Control+0x6d0>)
 8001db4:	f7fe fd4a 	bl	800084c <__aeabi_ddiv>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <LQR_Control+0x6ec>)
 8001dc6:	f7fe fc17 	bl	80005f8 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe fee9 	bl	8000ba8 <__aeabi_d2f>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <LQR_Control+0x6f0>)
 8001dda:	6013      	str	r3, [r2, #0]
  M2.Duty = T2 / 11.5 * 1000;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <LQR_Control+0x6e0>)
 8001dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <LQR_Control+0x6d0>)
 8001de8:	f7fe fd30 	bl	800084c <__aeabi_ddiv>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	e01a      	b.n	8001e2c <LQR_Control+0x6f4>
 8001df6:	bf00      	nop
 8001df8:	9999999a 	.word	0x9999999a
 8001dfc:	3fb99999 	.word	0x3fb99999
 8001e00:	20000360 	.word	0x20000360
 8001e04:	c0270000 	.word	0xc0270000
 8001e08:	40270000 	.word	0x40270000
 8001e0c:	3fe00000 	.word	0x3fe00000
 8001e10:	3fd00000 	.word	0x3fd00000
 8001e14:	20000380 	.word	0x20000380
 8001e18:	20000388 	.word	0x20000388
 8001e1c:	20000390 	.word	0x20000390
 8001e20:	20000398 	.word	0x20000398
 8001e24:	408f4000 	.word	0x408f4000
 8001e28:	2000001c 	.word	0x2000001c
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <LQR_Control+0x784>)
 8001e32:	f7fe fbe1 	bl	80005f8 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe feb3 	bl	8000ba8 <__aeabi_d2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <LQR_Control+0x788>)
 8001e46:	6013      	str	r3, [r2, #0]
  M3.Duty = T3 / 11.5 * 1000;
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <LQR_Control+0x78c>)
 8001e4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <LQR_Control+0x790>)
 8001e54:	f7fe fcfa 	bl	800084c <__aeabi_ddiv>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <LQR_Control+0x784>)
 8001e66:	f7fe fbc7 	bl	80005f8 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	f7fe fe99 	bl	8000ba8 <__aeabi_d2f>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <LQR_Control+0x794>)
 8001e7a:	6013      	str	r3, [r2, #0]
  M4.Duty = T4 / 11.5 * 1000;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <LQR_Control+0x798>)
 8001e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <LQR_Control+0x790>)
 8001e88:	f7fe fce0 	bl	800084c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <LQR_Control+0x784>)
 8001e9a:	f7fe fbad 	bl	80005f8 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f7fe fe7f 	bl	8000ba8 <__aeabi_d2f>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <LQR_Control+0x79c>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eba:	bf00      	nop
 8001ebc:	408f4000 	.word	0x408f4000
 8001ec0:	2000002c 	.word	0x2000002c
 8001ec4:	20000390 	.word	0x20000390
 8001ec8:	40270000 	.word	0x40270000
 8001ecc:	2000003c 	.word	0x2000003c
 8001ed0:	20000398 	.word	0x20000398
 8001ed4:	2000004c 	.word	0x2000004c

08001ed8 <read_Sensor>:
// 3. Read sensor and calculate value
void read_Sensor()
{
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	b08f      	sub	sp, #60	; 0x3c
 8001edc:	af0e      	add	r7, sp, #56	; 0x38
  /**
   * Reads data from the MPU6050 and MS5611 sensors, applies low-pass filtering and calculates the orientation and altitude.
   */
  // Read Data
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); // LED indicates the sensor is read
 8001ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee2:	483f      	ldr	r0, [pc, #252]	; (8001fe0 <read_Sensor+0x108>)
 8001ee4:	f001 f809 	bl	8002efa <HAL_GPIO_TogglePin>
  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001ee8:	493e      	ldr	r1, [pc, #248]	; (8001fe4 <read_Sensor+0x10c>)
 8001eea:	483f      	ldr	r0, [pc, #252]	; (8001fe8 <read_Sensor+0x110>)
 8001eec:	f004 ff8c 	bl	8006e08 <MPU6050_Read_All>
  // Filter
  Lowpass4MPU(MPU6050, &MPU6050_LP);
 8001ef0:	4e3c      	ldr	r6, [pc, #240]	; (8001fe4 <read_Sensor+0x10c>)
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <read_Sensor+0x114>)
 8001ef4:	930d      	str	r3, [sp, #52]	; 0x34
 8001ef6:	466d      	mov	r5, sp
 8001ef8:	f106 0410 	add.w	r4, r6, #16
 8001efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	602b      	str	r3, [r5, #0]
 8001f0c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001f10:	f005 f9b6 	bl	8007280 <Lowpass4MPU>
  Madgwick_imu(&MPU6050_LP, &Q_est);
 8001f14:	4936      	ldr	r1, [pc, #216]	; (8001ff0 <read_Sensor+0x118>)
 8001f16:	4835      	ldr	r0, [pc, #212]	; (8001fec <read_Sensor+0x114>)
 8001f18:	f005 fc34 	bl	8007784 <Madgwick_imu>
  // Caculator
  MPU2Angle(MPU6050_LP, &angle);
 8001f1c:	4e33      	ldr	r6, [pc, #204]	; (8001fec <read_Sensor+0x114>)
 8001f1e:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <read_Sensor+0x11c>)
 8001f20:	930d      	str	r3, [sp, #52]	; 0x34
 8001f22:	466d      	mov	r5, sp
 8001f24:	f106 0410 	add.w	r4, r6, #16
 8001f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	602b      	str	r3, [r5, #0]
 8001f38:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001f3c:	f005 f8b7 	bl	80070ae <MPU2Angle>
  Quat2Angle(Q_est, &Madgwick);
 8001f40:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <read_Sensor+0x118>)
 8001f42:	ed93 6a00 	vldr	s12, [r3]
 8001f46:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f4a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f52:	4829      	ldr	r0, [pc, #164]	; (8001ff8 <read_Sensor+0x120>)
 8001f54:	eeb0 0a46 	vmov.f32	s0, s12
 8001f58:	eef0 0a66 	vmov.f32	s1, s13
 8001f5c:	eeb0 1a47 	vmov.f32	s2, s14
 8001f60:	eef0 1a67 	vmov.f32	s3, s15
 8001f64:	f005 fe40 	bl	8007be8 <Quat2Angle>
  quaternion_to_euler(Q_est, &Madgwick_new);
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <read_Sensor+0x118>)
 8001f6a:	ed93 6a00 	vldr	s12, [r3]
 8001f6e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f72:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f76:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f7a:	4820      	ldr	r0, [pc, #128]	; (8001ffc <read_Sensor+0x124>)
 8001f7c:	eeb0 0a46 	vmov.f32	s0, s12
 8001f80:	eef0 0a66 	vmov.f32	s1, s13
 8001f84:	eeb0 1a47 	vmov.f32	s2, s14
 8001f88:	eef0 1a67 	vmov.f32	s3, s15
 8001f8c:	f7ff fad8 	bl	8001540 <quaternion_to_euler>
  OffsetAngle(&Madgwick, Offset);
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <read_Sensor+0x128>)
 8001f92:	edd3 6a00 	vldr	s13, [r3]
 8001f96:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f9e:	eeb0 0a66 	vmov.f32	s0, s13
 8001fa2:	eef0 0a47 	vmov.f32	s1, s14
 8001fa6:	eeb0 1a67 	vmov.f32	s2, s15
 8001faa:	4813      	ldr	r0, [pc, #76]	; (8001ff8 <read_Sensor+0x120>)
 8001fac:	f005 f8e3 	bl	8007176 <OffsetAngle>
  Madgwick.pitch = Madgwick.pitch*gama;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <read_Sensor+0x120>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fac7 	bl	8000548 <__aeabi_f2d>
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <read_Sensor+0x12c>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe fb1a 	bl	80005f8 <__aeabi_dmul>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fdec 	bl	8000ba8 <__aeabi_d2f>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <read_Sensor+0x120>)
 8001fd4:	6053      	str	r3, [r2, #4]
}
 8001fd6:	bf00      	nop
 8001fd8:	3704      	adds	r7, #4
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	20000220 	.word	0x20000220
 8001fe8:	200001cc 	.word	0x200001cc
 8001fec:	20000264 	.word	0x20000264
 8001ff0:	2000000c 	.word	0x2000000c
 8001ff4:	200002a8 	.word	0x200002a8
 8001ff8:	200002b4 	.word	0x200002b4
 8001ffc:	200002c0 	.word	0x200002c0
 8002000:	20000000 	.word	0x20000000
 8002004:	20000138 	.word	0x20000138

08002008 <HAL_TIM_PeriodElapsedCallback>:
// 4. Duration of 2ms cycle will be executed
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af02      	add	r7, sp, #8
 800200e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim2.Instance)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b5a      	ldr	r3, [pc, #360]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	f040 80ac 	bne.w	8002176 <HAL_TIM_PeriodElapsedCallback+0x16e>
  {
    read_Sensor();
 800201e:	f7ff ff5b 	bl	8001ed8 <read_Sensor>
    LQR_Control();
 8002022:	f7ff fb89 	bl	8001738 <LQR_Control>
    // Enable output
    if (run == 1)
 8002026:	4b57      	ldr	r3, [pc, #348]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d142      	bne.n	80020b4 <HAL_TIM_PeriodElapsedCallback+0xac>
    {
      ESC_Control(&htim1, M1.Duty + M1.Duty_base,
 800202e:	4b56      	ldr	r3, [pc, #344]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002030:	ed93 7a00 	vldr	s14, [r3]
 8002034:	4b54      	ldr	r3, [pc, #336]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002036:	edd3 7a01 	vldr	s15, [r3, #4]
 800203a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002042:	ee17 3a90 	vmov	r3, s15
 8002046:	b299      	uxth	r1, r3
                  M2.Duty + M2.Duty_base,
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x184>)
 800204a:	ed93 7a00 	vldr	s14, [r3]
 800204e:	4b4f      	ldr	r3, [pc, #316]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002050:	edd3 7a01 	vldr	s15, [r3, #4]
 8002054:	ee77 7a27 	vadd.f32	s15, s14, s15
      ESC_Control(&htim1, M1.Duty + M1.Duty_base,
 8002058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800205c:	ee17 3a90 	vmov	r3, s15
 8002060:	b29a      	uxth	r2, r3
                  M3.Duty + M3.Duty_base,
 8002062:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002064:	ed93 7a00 	vldr	s14, [r3]
 8002068:	4b49      	ldr	r3, [pc, #292]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800206a:	edd3 7a01 	vldr	s15, [r3, #4]
 800206e:	ee77 7a27 	vadd.f32	s15, s14, s15
      ESC_Control(&htim1, M1.Duty + M1.Duty_base,
 8002072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002076:	ee17 3a90 	vmov	r3, s15
 800207a:	b298      	uxth	r0, r3
                  M4.Duty + M4.Duty_base);
 800207c:	4b45      	ldr	r3, [pc, #276]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800207e:	ed93 7a00 	vldr	s14, [r3]
 8002082:	4b44      	ldr	r3, [pc, #272]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002084:	edd3 7a01 	vldr	s15, [r3, #4]
 8002088:	ee77 7a27 	vadd.f32	s15, s14, s15
      ESC_Control(&htim1, M1.Duty + M1.Duty_base,
 800208c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002090:	ee17 3a90 	vmov	r3, s15
 8002094:	b29b      	uxth	r3, r3
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	4603      	mov	r3, r0
 800209a:	483f      	ldr	r0, [pc, #252]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800209c:	f004 fd8b 	bl	8006bb6 <ESC_Control>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80020a0:	2201      	movs	r2, #1
 80020a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a6:	483d      	ldr	r0, [pc, #244]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80020a8:	f000 ff0e 	bl	8002ec8 <HAL_GPIO_WritePin>
      state = 1;
 80020ac:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
                  M4.Duty_min);
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
      state = 0;
    }
  }
}
 80020b2:	e060      	b.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x16e>
    else if (run == 2)
 80020b4:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d12e      	bne.n	800211a <HAL_TIM_PeriodElapsedCallback+0x112>
      ESC_Control(&htim1, M1.Duty_base,
 80020bc:	4b32      	ldr	r3, [pc, #200]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80020be:	edd3 7a01 	vldr	s15, [r3, #4]
 80020c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c6:	ee17 3a90 	vmov	r3, s15
 80020ca:	b299      	uxth	r1, r3
                  M2.Duty_base,
 80020cc:	4b2f      	ldr	r3, [pc, #188]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80020ce:	edd3 7a01 	vldr	s15, [r3, #4]
      ESC_Control(&htim1, M1.Duty_base,
 80020d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d6:	ee17 3a90 	vmov	r3, s15
 80020da:	b29a      	uxth	r2, r3
                  M3.Duty_base,
 80020dc:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80020de:	edd3 7a01 	vldr	s15, [r3, #4]
      ESC_Control(&htim1, M1.Duty_base,
 80020e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e6:	ee17 3a90 	vmov	r3, s15
 80020ea:	b298      	uxth	r0, r3
                  M4.Duty_base);
 80020ec:	4b29      	ldr	r3, [pc, #164]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80020ee:	edd3 7a01 	vldr	s15, [r3, #4]
      ESC_Control(&htim1, M1.Duty_base,
 80020f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f6:	ee17 3a90 	vmov	r3, s15
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	4603      	mov	r3, r0
 8002100:	4825      	ldr	r0, [pc, #148]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002102:	f004 fd58 	bl	8006bb6 <ESC_Control>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8002106:	2201      	movs	r2, #1
 8002108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800210c:	4823      	ldr	r0, [pc, #140]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800210e:	f000 fedb 	bl	8002ec8 <HAL_GPIO_WritePin>
      state = 1;
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002114:	2201      	movs	r2, #1
 8002116:	601a      	str	r2, [r3, #0]
}
 8002118:	e02d      	b.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x16e>
      ESC_Control(&htim1, M1.Duty_min,
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800211c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002124:	ee17 3a90 	vmov	r3, s15
 8002128:	b299      	uxth	r1, r3
                  M2.Duty_min,
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x184>)
 800212c:	edd3 7a03 	vldr	s15, [r3, #12]
      ESC_Control(&htim1, M1.Duty_min,
 8002130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002134:	ee17 3a90 	vmov	r3, s15
 8002138:	b29a      	uxth	r2, r3
                  M3.Duty_min,
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800213c:	edd3 7a03 	vldr	s15, [r3, #12]
      ESC_Control(&htim1, M1.Duty_min,
 8002140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002144:	ee17 3a90 	vmov	r3, s15
 8002148:	b298      	uxth	r0, r3
                  M4.Duty_min);
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800214c:	edd3 7a03 	vldr	s15, [r3, #12]
      ESC_Control(&htim1, M1.Duty_min,
 8002150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002154:	ee17 3a90 	vmov	r3, s15
 8002158:	b29b      	uxth	r3, r3
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4603      	mov	r3, r0
 800215e:	480e      	ldr	r0, [pc, #56]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002160:	f004 fd29 	bl	8006bb6 <ESC_Control>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800216a:	480c      	ldr	r0, [pc, #48]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800216c:	f000 feac 	bl	8002ec8 <HAL_GPIO_WritePin>
      state = 0;
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200004a4 	.word	0x200004a4
 8002184:	200003a8 	.word	0x200003a8
 8002188:	2000001c 	.word	0x2000001c
 800218c:	2000002c 	.word	0x2000002c
 8002190:	2000003c 	.word	0x2000003c
 8002194:	2000004c 	.word	0x2000004c
 8002198:	2000045c 	.word	0x2000045c
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	200003a4 	.word	0x200003a4

080021a4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a8:	b672      	cpsid	i
}
 80021aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ac:	e7fe      	b.n	80021ac <Error_Handler+0x8>
	...

080021b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <MX_SPI1_Init+0x64>)
 80021b6:	4a18      	ldr	r2, [pc, #96]	; (8002218 <MX_SPI1_Init+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <MX_SPI1_Init+0x64>)
 80021bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <MX_SPI1_Init+0x64>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <MX_SPI1_Init+0x64>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_SPI1_Init+0x64>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <MX_SPI1_Init+0x64>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_SPI1_Init+0x64>)
 80021dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_SPI1_Init+0x64>)
 80021e4:	2210      	movs	r2, #16
 80021e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <MX_SPI1_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_SPI1_Init+0x64>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <MX_SPI1_Init+0x64>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_SPI1_Init+0x64>)
 80021fc:	220a      	movs	r2, #10
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <MX_SPI1_Init+0x64>)
 8002202:	f002 faad 	bl	8004760 <HAL_SPI_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800220c:	f7ff ffca 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000400 	.word	0x20000400
 8002218:	40013000 	.word	0x40013000

0800221c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <HAL_SPI_MspInit+0x84>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d12b      	bne.n	8002296 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_SPI_MspInit+0x88>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <HAL_SPI_MspInit+0x88>)
 8002248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800224c:	6453      	str	r3, [r2, #68]	; 0x44
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <HAL_SPI_MspInit+0x88>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_SPI_MspInit+0x88>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a10      	ldr	r2, [pc, #64]	; (80022a4 <HAL_SPI_MspInit+0x88>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <HAL_SPI_MspInit+0x88>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002276:	23e0      	movs	r3, #224	; 0xe0
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002282:	2303      	movs	r3, #3
 8002284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002286:	2305      	movs	r3, #5
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <HAL_SPI_MspInit+0x8c>)
 8002292:	f000 fc7d 	bl	8002b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	; 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40013000 	.word	0x40013000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020000 	.word	0x40020000

080022ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_MspInit+0x4c>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <HAL_MspInit+0x4c>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_MspInit+0x4c>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_MspInit+0x4c>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <HAL_MspInit+0x4c>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_MspInit+0x4c>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <NMI_Handler+0x4>

08002302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <HardFault_Handler+0x4>

08002308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <MemManage_Handler+0x4>

0800230e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <BusFault_Handler+0x4>

08002314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <UsageFault_Handler+0x4>

0800231a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002348:	f000 facc 	bl	80028e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}

08002350 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <TIM2_IRQHandler+0x10>)
 8002356:	f003 f98d 	bl	8005674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200004a4 	.word	0x200004a4

08002364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <_sbrk+0x5c>)
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <_sbrk+0x60>)
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <_sbrk+0x64>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <_sbrk+0x68>)
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	d207      	bcs.n	80023a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002394:	f006 fe5c 	bl	8009050 <__errno>
 8002398:	4603      	mov	r3, r0
 800239a:	220c      	movs	r2, #12
 800239c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	e009      	b.n	80023b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <_sbrk+0x64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <_sbrk+0x64>)
 80023b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20020000 	.word	0x20020000
 80023c4:	00000400 	.word	0x00000400
 80023c8:	20000458 	.word	0x20000458
 80023cc:	200005f0 	.word	0x200005f0

080023d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <SystemInit+0x20>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <SystemInit+0x20>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b096      	sub	sp, #88	; 0x58
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002408:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	615a      	str	r2, [r3, #20]
 8002424:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	2220      	movs	r2, #32
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f006 fe47 	bl	80090c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002432:	4b51      	ldr	r3, [pc, #324]	; (8002578 <MX_TIM1_Init+0x184>)
 8002434:	4a51      	ldr	r2, [pc, #324]	; (800257c <MX_TIM1_Init+0x188>)
 8002436:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8002438:	4b4f      	ldr	r3, [pc, #316]	; (8002578 <MX_TIM1_Init+0x184>)
 800243a:	2248      	movs	r2, #72	; 0x48
 800243c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243e:	4b4e      	ldr	r3, [pc, #312]	; (8002578 <MX_TIM1_Init+0x184>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8002444:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <MX_TIM1_Init+0x184>)
 8002446:	f644 6220 	movw	r2, #20000	; 0x4e20
 800244a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244c:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <MX_TIM1_Init+0x184>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002452:	4b49      	ldr	r3, [pc, #292]	; (8002578 <MX_TIM1_Init+0x184>)
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002458:	4b47      	ldr	r3, [pc, #284]	; (8002578 <MX_TIM1_Init+0x184>)
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800245e:	4846      	ldr	r0, [pc, #280]	; (8002578 <MX_TIM1_Init+0x184>)
 8002460:	f002 ff26 	bl	80052b0 <HAL_TIM_Base_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800246a:	f7ff fe9b 	bl	80021a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002472:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002474:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002478:	4619      	mov	r1, r3
 800247a:	483f      	ldr	r0, [pc, #252]	; (8002578 <MX_TIM1_Init+0x184>)
 800247c:	f003 fac4 	bl	8005a08 <HAL_TIM_ConfigClockSource>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002486:	f7ff fe8d 	bl	80021a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800248a:	483b      	ldr	r0, [pc, #236]	; (8002578 <MX_TIM1_Init+0x184>)
 800248c:	f002 ffd0 	bl	8005430 <HAL_TIM_PWM_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002496:	f7ff fe85 	bl	80021a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024a6:	4619      	mov	r1, r3
 80024a8:	4833      	ldr	r0, [pc, #204]	; (8002578 <MX_TIM1_Init+0x184>)
 80024aa:	f003 fead 	bl	8006208 <HAL_TIMEx_MasterConfigSynchronization>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80024b4:	f7ff fe76 	bl	80021a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b8:	2360      	movs	r3, #96	; 0x60
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 800;
 80024bc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024c6:	2300      	movs	r3, #0
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024da:	2200      	movs	r2, #0
 80024dc:	4619      	mov	r1, r3
 80024de:	4826      	ldr	r0, [pc, #152]	; (8002578 <MX_TIM1_Init+0x184>)
 80024e0:	f003 f9d0 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80024ea:	f7ff fe5b 	bl	80021a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f2:	2204      	movs	r2, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4820      	ldr	r0, [pc, #128]	; (8002578 <MX_TIM1_Init+0x184>)
 80024f8:	f003 f9c4 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8002502:	f7ff fe4f 	bl	80021a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250a:	2208      	movs	r2, #8
 800250c:	4619      	mov	r1, r3
 800250e:	481a      	ldr	r0, [pc, #104]	; (8002578 <MX_TIM1_Init+0x184>)
 8002510:	f003 f9b8 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800251a:	f7ff fe43 	bl	80021a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800251e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002522:	220c      	movs	r2, #12
 8002524:	4619      	mov	r1, r3
 8002526:	4814      	ldr	r0, [pc, #80]	; (8002578 <MX_TIM1_Init+0x184>)
 8002528:	f003 f9ac 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002532:	f7ff fe37 	bl	80021a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800254a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800254e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	4619      	mov	r1, r3
 8002558:	4807      	ldr	r0, [pc, #28]	; (8002578 <MX_TIM1_Init+0x184>)
 800255a:	f003 fed1 	bl	8006300 <HAL_TIMEx_ConfigBreakDeadTime>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8002564:	f7ff fe1e 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002568:	4803      	ldr	r0, [pc, #12]	; (8002578 <MX_TIM1_Init+0x184>)
 800256a:	f000 f893 	bl	8002694 <HAL_TIM_MspPostInit>

}
 800256e:	bf00      	nop
 8002570:	3758      	adds	r7, #88	; 0x58
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000045c 	.word	0x2000045c
 800257c:	40010000 	.word	0x40010000

08002580 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002586:	f107 0308 	add.w	r3, r7, #8
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002594:	463b      	mov	r3, r7
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <MX_TIM2_Init+0x94>)
 800259e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <MX_TIM2_Init+0x94>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <MX_TIM2_Init+0x94>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72000000*SIMPLE_TIME;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <MX_TIM2_Init+0x94>)
 80025b2:	4a19      	ldr	r2, [pc, #100]	; (8002618 <MX_TIM2_Init+0x98>)
 80025b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <MX_TIM2_Init+0x94>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <MX_TIM2_Init+0x94>)
 80025be:	2200      	movs	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025c2:	4814      	ldr	r0, [pc, #80]	; (8002614 <MX_TIM2_Init+0x94>)
 80025c4:	f002 fe74 	bl	80052b0 <HAL_TIM_Base_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80025ce:	f7ff fde9 	bl	80021a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	4619      	mov	r1, r3
 80025de:	480d      	ldr	r0, [pc, #52]	; (8002614 <MX_TIM2_Init+0x94>)
 80025e0:	f003 fa12 	bl	8005a08 <HAL_TIM_ConfigClockSource>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80025ea:	f7ff fddb 	bl	80021a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f6:	463b      	mov	r3, r7
 80025f8:	4619      	mov	r1, r3
 80025fa:	4806      	ldr	r0, [pc, #24]	; (8002614 <MX_TIM2_Init+0x94>)
 80025fc:	f003 fe04 	bl	8006208 <HAL_TIMEx_MasterConfigSynchronization>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002606:	f7ff fdcd 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200004a4 	.word	0x200004a4
 8002618:	000afc80 	.word	0x000afc80

0800261c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a18      	ldr	r2, [pc, #96]	; (800268c <HAL_TIM_Base_MspInit+0x70>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10e      	bne.n	800264c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <HAL_TIM_Base_MspInit+0x74>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	4a16      	ldr	r2, [pc, #88]	; (8002690 <HAL_TIM_Base_MspInit+0x74>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6453      	str	r3, [r2, #68]	; 0x44
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <HAL_TIM_Base_MspInit+0x74>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800264a:	e01a      	b.n	8002682 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002654:	d115      	bne.n	8002682 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_TIM_Base_MspInit+0x74>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <HAL_TIM_Base_MspInit+0x74>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_TIM_Base_MspInit+0x74>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	201c      	movs	r0, #28
 8002678:	f000 fa53 	bl	8002b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800267c:	201c      	movs	r0, #28
 800267e:	f000 fa6c 	bl	8002b5a <HAL_NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40010000 	.word	0x40010000
 8002690:	40023800 	.word	0x40023800

08002694 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a12      	ldr	r2, [pc, #72]	; (80026fc <HAL_TIM_MspPostInit+0x68>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d11e      	bne.n	80026f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_TIM_MspPostInit+0x6c>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a10      	ldr	r2, [pc, #64]	; (8002700 <HAL_TIM_MspPostInit+0x6c>)
 80026c0:	f043 0310 	orr.w	r3, r3, #16
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <HAL_TIM_MspPostInit+0x6c>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80026d2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80026d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026e4:	2301      	movs	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	4619      	mov	r1, r3
 80026ee:	4805      	ldr	r0, [pc, #20]	; (8002704 <HAL_TIM_MspPostInit+0x70>)
 80026f0:	f000 fa4e 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026f4:	bf00      	nop
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40010000 	.word	0x40010000
 8002700:	40023800 	.word	0x40023800
 8002704:	40021000 	.word	0x40021000

08002708 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_USART6_UART_Init+0x4c>)
 800270e:	4a12      	ldr	r2, [pc, #72]	; (8002758 <MX_USART6_UART_Init+0x50>)
 8002710:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <MX_USART6_UART_Init+0x4c>)
 8002714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002718:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_USART6_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <MX_USART6_UART_Init+0x4c>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <MX_USART6_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_USART6_UART_Init+0x4c>)
 800272e:	220c      	movs	r2, #12
 8002730:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <MX_USART6_UART_Init+0x4c>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_USART6_UART_Init+0x4c>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <MX_USART6_UART_Init+0x4c>)
 8002740:	f003 fe44 	bl	80063cc <HAL_UART_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800274a:	f7ff fd2b 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200004ec 	.word	0x200004ec
 8002758:	40011400 	.word	0x40011400

0800275c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <HAL_UART_MspInit+0x84>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d12b      	bne.n	80027d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_UART_MspInit+0x88>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a17      	ldr	r2, [pc, #92]	; (80027e4 <HAL_UART_MspInit+0x88>)
 8002788:	f043 0320 	orr.w	r3, r3, #32
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_UART_MspInit+0x88>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_UART_MspInit+0x88>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <HAL_UART_MspInit+0x88>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_UART_MspInit+0x88>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027b6:	23c0      	movs	r3, #192	; 0xc0
 80027b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027c6:	2308      	movs	r3, #8
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	4805      	ldr	r0, [pc, #20]	; (80027e8 <HAL_UART_MspInit+0x8c>)
 80027d2:	f000 f9dd 	bl	8002b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80027d6:	bf00      	nop
 80027d8:	3728      	adds	r7, #40	; 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40011400 	.word	0x40011400
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40020800 	.word	0x40020800

080027ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027f0:	480d      	ldr	r0, [pc, #52]	; (8002828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027f2:	490e      	ldr	r1, [pc, #56]	; (800282c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027f4:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f8:	e002      	b.n	8002800 <LoopCopyDataInit>

080027fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fe:	3304      	adds	r3, #4

08002800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002804:	d3f9      	bcc.n	80027fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002808:	4c0b      	ldr	r4, [pc, #44]	; (8002838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800280c:	e001      	b.n	8002812 <LoopFillZerobss>

0800280e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002810:	3204      	adds	r2, #4

08002812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002814:	d3fb      	bcc.n	800280e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002816:	f7ff fddb 	bl	80023d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281a:	f006 fc1f 	bl	800905c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281e:	f7fe fcab 	bl	8001178 <main>
  bx  lr    
 8002822:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800282c:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8002830:	0800be58 	.word	0x0800be58
  ldr r2, =_sbss
 8002834:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8002838:	200005f0 	.word	0x200005f0

0800283c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC_IRQHandler>
	...

08002840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_Init+0x40>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <HAL_Init+0x40>)
 800284a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_Init+0x40>)
 8002856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800285a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_Init+0x40>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002868:	2003      	movs	r0, #3
 800286a:	f000 f94f 	bl	8002b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286e:	200f      	movs	r0, #15
 8002870:	f000 f808 	bl	8002884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002874:	f7ff fd1a 	bl	80022ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00

08002884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_InitTick+0x54>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_InitTick+0x58>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4619      	mov	r1, r3
 8002896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289a:	fbb3 f3f1 	udiv	r3, r3, r1
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f967 	bl	8002b76 <HAL_SYSTICK_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00e      	b.n	80028d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b0f      	cmp	r3, #15
 80028b6:	d80a      	bhi.n	80028ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b8:	2200      	movs	r2, #0
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f000 f92f 	bl	8002b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c4:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <HAL_InitTick+0x5c>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000140 	.word	0x20000140
 80028dc:	20000148 	.word	0x20000148
 80028e0:	20000144 	.word	0x20000144

080028e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_IncTick+0x20>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_IncTick+0x24>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_IncTick+0x24>)
 80028f6:	6013      	str	r3, [r2, #0]
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000148 	.word	0x20000148
 8002908:	20000530 	.word	0x20000530

0800290c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return uwTick;
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_GetTick+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000530 	.word	0x20000530

08002924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800292c:	f7ff ffee 	bl	800290c <HAL_GetTick>
 8002930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d005      	beq.n	800294a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_Delay+0x44>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4413      	add	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800294a:	bf00      	nop
 800294c:	f7ff ffde 	bl	800290c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	429a      	cmp	r2, r3
 800295a:	d8f7      	bhi.n	800294c <HAL_Delay+0x28>
  {
  }
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000148 	.word	0x20000148

0800296c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002988:	4013      	ands	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299e:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	60d3      	str	r3, [r2, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <__NVIC_GetPriorityGrouping+0x18>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	f003 0307 	and.w	r3, r3, #7
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	db0b      	blt.n	80029fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	4907      	ldr	r1, [pc, #28]	; (8002a08 <__NVIC_EnableIRQ+0x38>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	2001      	movs	r0, #1
 80029f2:	fa00 f202 	lsl.w	r2, r0, r2
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100

08002a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db0a      	blt.n	8002a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	490c      	ldr	r1, [pc, #48]	; (8002a58 <__NVIC_SetPriority+0x4c>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a34:	e00a      	b.n	8002a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4908      	ldr	r1, [pc, #32]	; (8002a5c <__NVIC_SetPriority+0x50>)
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	3b04      	subs	r3, #4
 8002a44:	0112      	lsls	r2, r2, #4
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	440b      	add	r3, r1
 8002a4a:	761a      	strb	r2, [r3, #24]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000e100 	.word	0xe000e100
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f1c3 0307 	rsb	r3, r3, #7
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	bf28      	it	cs
 8002a7e:	2304      	movcs	r3, #4
 8002a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3304      	adds	r3, #4
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d902      	bls.n	8002a90 <NVIC_EncodePriority+0x30>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3b03      	subs	r3, #3
 8002a8e:	e000      	b.n	8002a92 <NVIC_EncodePriority+0x32>
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	f04f 32ff 	mov.w	r2, #4294967295
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43d9      	mvns	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	4313      	orrs	r3, r2
         );
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad8:	d301      	bcc.n	8002ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00f      	b.n	8002afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <SysTick_Config+0x40>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae6:	210f      	movs	r1, #15
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	f7ff ff8e 	bl	8002a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <SysTick_Config+0x40>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af6:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <SysTick_Config+0x40>)
 8002af8:	2207      	movs	r2, #7
 8002afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	e000e010 	.word	0xe000e010

08002b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff29 	bl	800296c <__NVIC_SetPriorityGrouping>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b34:	f7ff ff3e 	bl	80029b4 <__NVIC_GetPriorityGrouping>
 8002b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f7ff ff8e 	bl	8002a60 <NVIC_EncodePriority>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff5d 	bl	8002a0c <__NVIC_SetPriority>
}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff31 	bl	80029d0 <__NVIC_EnableIRQ>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ffa2 	bl	8002ac8 <SysTick_Config>
 8002b84:	4603      	mov	r3, r0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	e16b      	b.n	8002e84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	f040 815a 	bne.w	8002e7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d005      	beq.n	8002be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d130      	bne.n	8002c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	2203      	movs	r2, #3
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 0201 	and.w	r2, r3, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d017      	beq.n	8002c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d123      	bne.n	8002cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	08da      	lsrs	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3208      	adds	r2, #8
 8002c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	08da      	lsrs	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3208      	adds	r2, #8
 8002cce:	69b9      	ldr	r1, [r7, #24]
 8002cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0203 	and.w	r2, r3, #3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80b4 	beq.w	8002e7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b60      	ldr	r3, [pc, #384]	; (8002e9c <HAL_GPIO_Init+0x30c>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a5f      	ldr	r2, [pc, #380]	; (8002e9c <HAL_GPIO_Init+0x30c>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b5d      	ldr	r3, [pc, #372]	; (8002e9c <HAL_GPIO_Init+0x30c>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d32:	4a5b      	ldr	r2, [pc, #364]	; (8002ea0 <HAL_GPIO_Init+0x310>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a52      	ldr	r2, [pc, #328]	; (8002ea4 <HAL_GPIO_Init+0x314>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d02b      	beq.n	8002db6 <HAL_GPIO_Init+0x226>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a51      	ldr	r2, [pc, #324]	; (8002ea8 <HAL_GPIO_Init+0x318>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d025      	beq.n	8002db2 <HAL_GPIO_Init+0x222>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a50      	ldr	r2, [pc, #320]	; (8002eac <HAL_GPIO_Init+0x31c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01f      	beq.n	8002dae <HAL_GPIO_Init+0x21e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4f      	ldr	r2, [pc, #316]	; (8002eb0 <HAL_GPIO_Init+0x320>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d019      	beq.n	8002daa <HAL_GPIO_Init+0x21a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4e      	ldr	r2, [pc, #312]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_GPIO_Init+0x216>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4d      	ldr	r2, [pc, #308]	; (8002eb8 <HAL_GPIO_Init+0x328>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00d      	beq.n	8002da2 <HAL_GPIO_Init+0x212>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4c      	ldr	r2, [pc, #304]	; (8002ebc <HAL_GPIO_Init+0x32c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <HAL_GPIO_Init+0x20e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4b      	ldr	r2, [pc, #300]	; (8002ec0 <HAL_GPIO_Init+0x330>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_GPIO_Init+0x20a>
 8002d96:	2307      	movs	r3, #7
 8002d98:	e00e      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	e00c      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002d9e:	2306      	movs	r3, #6
 8002da0:	e00a      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002da2:	2305      	movs	r3, #5
 8002da4:	e008      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002da6:	2304      	movs	r3, #4
 8002da8:	e006      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002daa:	2303      	movs	r3, #3
 8002dac:	e004      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e002      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002db6:	2300      	movs	r3, #0
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	f002 0203 	and.w	r2, r2, #3
 8002dbe:	0092      	lsls	r2, r2, #2
 8002dc0:	4093      	lsls	r3, r2
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc8:	4935      	ldr	r1, [pc, #212]	; (8002ea0 <HAL_GPIO_Init+0x310>)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	3302      	adds	r3, #2
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	; (8002ec4 <HAL_GPIO_Init+0x334>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dfa:	4a32      	ldr	r2, [pc, #200]	; (8002ec4 <HAL_GPIO_Init+0x334>)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e00:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <HAL_GPIO_Init+0x334>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e24:	4a27      	ldr	r2, [pc, #156]	; (8002ec4 <HAL_GPIO_Init+0x334>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <HAL_GPIO_Init+0x334>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <HAL_GPIO_Init+0x334>)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_GPIO_Init+0x334>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e78:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <HAL_GPIO_Init+0x334>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3301      	adds	r3, #1
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	f67f ae90 	bls.w	8002bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3724      	adds	r7, #36	; 0x24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40013800 	.word	0x40013800
 8002ea4:	40020000 	.word	0x40020000
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	40020800 	.word	0x40020800
 8002eb0:	40020c00 	.word	0x40020c00
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40021400 	.word	0x40021400
 8002ebc:	40021800 	.word	0x40021800
 8002ec0:	40021c00 	.word	0x40021c00
 8002ec4:	40013c00 	.word	0x40013c00

08002ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed8:	787b      	ldrb	r3, [r7, #1]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ee4:	e003      	b.n	8002eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	041a      	lsls	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	619a      	str	r2, [r3, #24]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f0c:	887a      	ldrh	r2, [r7, #2]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4013      	ands	r3, r2
 8002f12:	041a      	lsls	r2, r3, #16
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	43d9      	mvns	r1, r3
 8002f18:	887b      	ldrh	r3, [r7, #2]
 8002f1a:	400b      	ands	r3, r1
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	619a      	str	r2, [r3, #24]
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e12b      	b.n	800319a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe f8c6 	bl	80010e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2224      	movs	r2, #36	; 0x24
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f94:	f001 fbbc 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8002f98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4a81      	ldr	r2, [pc, #516]	; (80031a4 <HAL_I2C_Init+0x274>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d807      	bhi.n	8002fb4 <HAL_I2C_Init+0x84>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4a80      	ldr	r2, [pc, #512]	; (80031a8 <HAL_I2C_Init+0x278>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	bf94      	ite	ls
 8002fac:	2301      	movls	r3, #1
 8002fae:	2300      	movhi	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	e006      	b.n	8002fc2 <HAL_I2C_Init+0x92>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a7d      	ldr	r2, [pc, #500]	; (80031ac <HAL_I2C_Init+0x27c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	bf94      	ite	ls
 8002fbc:	2301      	movls	r3, #1
 8002fbe:	2300      	movhi	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e0e7      	b.n	800319a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a78      	ldr	r2, [pc, #480]	; (80031b0 <HAL_I2C_Init+0x280>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0c9b      	lsrs	r3, r3, #18
 8002fd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a6a      	ldr	r2, [pc, #424]	; (80031a4 <HAL_I2C_Init+0x274>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d802      	bhi.n	8003004 <HAL_I2C_Init+0xd4>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	3301      	adds	r3, #1
 8003002:	e009      	b.n	8003018 <HAL_I2C_Init+0xe8>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	4a69      	ldr	r2, [pc, #420]	; (80031b4 <HAL_I2C_Init+0x284>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	099b      	lsrs	r3, r3, #6
 8003016:	3301      	adds	r3, #1
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	430b      	orrs	r3, r1
 800301e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800302a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	495c      	ldr	r1, [pc, #368]	; (80031a4 <HAL_I2C_Init+0x274>)
 8003034:	428b      	cmp	r3, r1
 8003036:	d819      	bhi.n	800306c <HAL_I2C_Init+0x13c>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e59      	subs	r1, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fbb1 f3f3 	udiv	r3, r1, r3
 8003046:	1c59      	adds	r1, r3, #1
 8003048:	f640 73fc 	movw	r3, #4092	; 0xffc
 800304c:	400b      	ands	r3, r1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_I2C_Init+0x138>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1e59      	subs	r1, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003060:	3301      	adds	r3, #1
 8003062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003066:	e051      	b.n	800310c <HAL_I2C_Init+0x1dc>
 8003068:	2304      	movs	r3, #4
 800306a:	e04f      	b.n	800310c <HAL_I2C_Init+0x1dc>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d111      	bne.n	8003098 <HAL_I2C_Init+0x168>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e58      	subs	r0, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	440b      	add	r3, r1
 8003082:	fbb0 f3f3 	udiv	r3, r0, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e012      	b.n	80030be <HAL_I2C_Init+0x18e>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1e58      	subs	r0, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6859      	ldr	r1, [r3, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	0099      	lsls	r1, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Init+0x196>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e022      	b.n	800310c <HAL_I2C_Init+0x1dc>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10e      	bne.n	80030ec <HAL_I2C_Init+0x1bc>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1e58      	subs	r0, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	440b      	add	r3, r1
 80030dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e0:	3301      	adds	r3, #1
 80030e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ea:	e00f      	b.n	800310c <HAL_I2C_Init+0x1dc>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1e58      	subs	r0, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	0099      	lsls	r1, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003102:	3301      	adds	r3, #1
 8003104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	6809      	ldr	r1, [r1, #0]
 8003110:	4313      	orrs	r3, r2
 8003112:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800313a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6911      	ldr	r1, [r2, #16]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68d2      	ldr	r2, [r2, #12]
 8003146:	4311      	orrs	r1, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	430b      	orrs	r3, r1
 800314e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	000186a0 	.word	0x000186a0
 80031a8:	001e847f 	.word	0x001e847f
 80031ac:	003d08ff 	.word	0x003d08ff
 80031b0:	431bde83 	.word	0x431bde83
 80031b4:	10624dd3 	.word	0x10624dd3

080031b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	817b      	strh	r3, [r7, #10]
 80031ca:	460b      	mov	r3, r1
 80031cc:	813b      	strh	r3, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031d2:	f7ff fb9b 	bl	800290c <HAL_GetTick>
 80031d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	f040 80d9 	bne.w	8003398 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	2319      	movs	r3, #25
 80031ec:	2201      	movs	r2, #1
 80031ee:	496d      	ldr	r1, [pc, #436]	; (80033a4 <HAL_I2C_Mem_Write+0x1ec>)
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fc7f 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
 80031fe:	e0cc      	b.n	800339a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_I2C_Mem_Write+0x56>
 800320a:	2302      	movs	r3, #2
 800320c:	e0c5      	b.n	800339a <HAL_I2C_Mem_Write+0x1e2>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d007      	beq.n	8003234 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003242:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2221      	movs	r2, #33	; 0x21
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2240      	movs	r2, #64	; 0x40
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a3a      	ldr	r2, [r7, #32]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003264:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4a4d      	ldr	r2, [pc, #308]	; (80033a8 <HAL_I2C_Mem_Write+0x1f0>)
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003276:	88f8      	ldrh	r0, [r7, #6]
 8003278:	893a      	ldrh	r2, [r7, #8]
 800327a:	8979      	ldrh	r1, [r7, #10]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	4603      	mov	r3, r0
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fab6 	bl	80037f8 <I2C_RequestMemoryWrite>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d052      	beq.n	8003338 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e081      	b.n	800339a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fd00 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d107      	bne.n	80032be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e06b      	b.n	800339a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d11b      	bne.n	8003338 <HAL_I2C_Mem_Write+0x180>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	d017      	beq.n	8003338 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	781a      	ldrb	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1aa      	bne.n	8003296 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fcec 	bl	8003d22 <I2C_WaitOnBTFFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	2b04      	cmp	r3, #4
 8003356:	d107      	bne.n	8003368 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003366:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e016      	b.n	800339a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	00100002 	.word	0x00100002
 80033a8:	ffff0000 	.word	0xffff0000

080033ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08c      	sub	sp, #48	; 0x30
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	461a      	mov	r2, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	817b      	strh	r3, [r7, #10]
 80033be:	460b      	mov	r3, r1
 80033c0:	813b      	strh	r3, [r7, #8]
 80033c2:	4613      	mov	r3, r2
 80033c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033c6:	f7ff faa1 	bl	800290c <HAL_GetTick>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	f040 8208 	bne.w	80037ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	2319      	movs	r3, #25
 80033e0:	2201      	movs	r2, #1
 80033e2:	497b      	ldr	r1, [pc, #492]	; (80035d0 <HAL_I2C_Mem_Read+0x224>)
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fb85 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80033f0:	2302      	movs	r3, #2
 80033f2:	e1fb      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_I2C_Mem_Read+0x56>
 80033fe:	2302      	movs	r3, #2
 8003400:	e1f4      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d007      	beq.n	8003428 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003436:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2222      	movs	r2, #34	; 0x22
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2240      	movs	r2, #64	; 0x40
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4a5b      	ldr	r2, [pc, #364]	; (80035d4 <HAL_I2C_Mem_Read+0x228>)
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800346a:	88f8      	ldrh	r0, [r7, #6]
 800346c:	893a      	ldrh	r2, [r7, #8]
 800346e:	8979      	ldrh	r1, [r7, #10]
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	4603      	mov	r3, r0
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fa52 	bl	8003924 <I2C_RequestMemoryRead>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e1b0      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	2b00      	cmp	r3, #0
 8003490:	d113      	bne.n	80034ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	623b      	str	r3, [r7, #32]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	623b      	str	r3, [r7, #32]
 80034a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e184      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d11b      	bne.n	80034fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e164      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d11b      	bne.n	800353a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003510:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003520:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	e144      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003550:	e138      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	2b03      	cmp	r3, #3
 8003558:	f200 80f1 	bhi.w	800373e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	2b01      	cmp	r3, #1
 8003562:	d123      	bne.n	80035ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003566:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fc1b 	bl	8003da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e139      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035aa:	e10b      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d14e      	bne.n	8003652 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ba:	2200      	movs	r2, #0
 80035bc:	4906      	ldr	r1, [pc, #24]	; (80035d8 <HAL_I2C_Mem_Read+0x22c>)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fa98 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e10e      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
 80035ce:	bf00      	nop
 80035d0:	00100002 	.word	0x00100002
 80035d4:	ffff0000 	.word	0xffff0000
 80035d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003650:	e0b8      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	2200      	movs	r2, #0
 800365a:	4966      	ldr	r1, [pc, #408]	; (80037f4 <HAL_I2C_Mem_Read+0x448>)
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fa49 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0bf      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	2200      	movs	r2, #0
 80036b6:	494f      	ldr	r1, [pc, #316]	; (80037f4 <HAL_I2C_Mem_Read+0x448>)
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fa1b 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e091      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800373c:	e042      	b.n	80037c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003740:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fb2e 	bl	8003da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e04c      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b04      	cmp	r3, #4
 8003790:	d118      	bne.n	80037c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f47f aec2 	bne.w	8003552 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3728      	adds	r7, #40	; 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	00010004 	.word	0x00010004

080037f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	461a      	mov	r2, r3
 8003806:	4603      	mov	r3, r0
 8003808:	817b      	strh	r3, [r7, #10]
 800380a:	460b      	mov	r3, r1
 800380c:	813b      	strh	r3, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003820:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	2200      	movs	r2, #0
 800382a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f960 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003848:	d103      	bne.n	8003852 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e05f      	b.n	8003916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003856:	897b      	ldrh	r3, [r7, #10]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003864:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	492d      	ldr	r1, [pc, #180]	; (8003920 <I2C_RequestMemoryWrite+0x128>)
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f998 	bl	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e04c      	b.n	8003916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003894:	6a39      	ldr	r1, [r7, #32]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fa02 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d107      	bne.n	80038ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e02b      	b.n	8003916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d105      	bne.n	80038d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038c4:	893b      	ldrh	r3, [r7, #8]
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	611a      	str	r2, [r3, #16]
 80038ce:	e021      	b.n	8003914 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038d0:	893b      	ldrh	r3, [r7, #8]
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	6a39      	ldr	r1, [r7, #32]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f9dc 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d107      	bne.n	8003906 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003904:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e005      	b.n	8003916 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800390a:	893b      	ldrh	r3, [r7, #8]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	00010002 	.word	0x00010002

08003924 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	4608      	mov	r0, r1
 800392e:	4611      	mov	r1, r2
 8003930:	461a      	mov	r2, r3
 8003932:	4603      	mov	r3, r0
 8003934:	817b      	strh	r3, [r7, #10]
 8003936:	460b      	mov	r3, r1
 8003938:	813b      	strh	r3, [r7, #8]
 800393a:	4613      	mov	r3, r2
 800393c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800394c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800395c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	2200      	movs	r2, #0
 8003966:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f8c2 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00d      	beq.n	8003992 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003984:	d103      	bne.n	800398e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0aa      	b.n	8003ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003992:	897b      	ldrh	r3, [r7, #10]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	6a3a      	ldr	r2, [r7, #32]
 80039a6:	4952      	ldr	r1, [pc, #328]	; (8003af0 <I2C_RequestMemoryRead+0x1cc>)
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f8fa 	bl	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e097      	b.n	8003ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d0:	6a39      	ldr	r1, [r7, #32]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f964 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00d      	beq.n	80039fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d107      	bne.n	80039f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e076      	b.n	8003ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d105      	bne.n	8003a0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a00:	893b      	ldrh	r3, [r7, #8]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	611a      	str	r2, [r3, #16]
 8003a0a:	e021      	b.n	8003a50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a0c:	893b      	ldrh	r3, [r7, #8]
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1c:	6a39      	ldr	r1, [r7, #32]
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f93e 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d107      	bne.n	8003a42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e050      	b.n	8003ae8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a46:	893b      	ldrh	r3, [r7, #8]
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a52:	6a39      	ldr	r1, [r7, #32]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f923 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00d      	beq.n	8003a7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d107      	bne.n	8003a78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e035      	b.n	8003ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f82b 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00d      	beq.n	8003ac0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab2:	d103      	bne.n	8003abc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e013      	b.n	8003ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ac0:	897b      	ldrh	r3, [r7, #10]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	6a3a      	ldr	r2, [r7, #32]
 8003ad4:	4906      	ldr	r1, [pc, #24]	; (8003af0 <I2C_RequestMemoryRead+0x1cc>)
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f863 	bl	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	00010002 	.word	0x00010002

08003af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b04:	e025      	b.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d021      	beq.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fe fefd 	bl	800290c <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d116      	bne.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e023      	b.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d10d      	bne.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	43da      	mvns	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4013      	ands	r3, r2
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2301      	moveq	r3, #1
 8003b70:	2300      	movne	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	e00c      	b.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4013      	ands	r3, r2
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bf0c      	ite	eq
 8003b8a:	2301      	moveq	r3, #1
 8003b8c:	2300      	movne	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d0b6      	beq.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
 8003bae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bb0:	e051      	b.n	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc0:	d123      	bne.n	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f043 0204 	orr.w	r2, r3, #4
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e046      	b.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d021      	beq.n	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c12:	f7fe fe7b 	bl	800290c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d302      	bcc.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d116      	bne.n	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e020      	b.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d10c      	bne.n	8003c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	43da      	mvns	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bf14      	ite	ne
 8003c72:	2301      	movne	r3, #1
 8003c74:	2300      	moveq	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e00b      	b.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	43da      	mvns	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4013      	ands	r3, r2
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d18d      	bne.n	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cac:	e02d      	b.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f8ce 	bl	8003e50 <I2C_IsAcknowledgeFailed>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e02d      	b.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d021      	beq.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc6:	f7fe fe21 	bl	800290c <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d116      	bne.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f043 0220 	orr.w	r2, r3, #32
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e007      	b.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b80      	cmp	r3, #128	; 0x80
 8003d16:	d1ca      	bne.n	8003cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d2e:	e02d      	b.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f88d 	bl	8003e50 <I2C_IsAcknowledgeFailed>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e02d      	b.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d021      	beq.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d48:	f7fe fde0 	bl	800290c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d302      	bcc.n	8003d5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d116      	bne.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	f043 0220 	orr.w	r2, r3, #32
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e007      	b.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d1ca      	bne.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003db0:	e042      	b.n	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d119      	bne.n	8003df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0210 	mvn.w	r2, #16
 8003dc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e029      	b.n	8003e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df4:	f7fe fd8a 	bl	800290c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d302      	bcc.n	8003e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d116      	bne.n	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	f043 0220 	orr.w	r2, r3, #32
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e007      	b.n	8003e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d1b5      	bne.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e66:	d11b      	bne.n	8003ea0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f043 0204 	orr.w	r2, r3, #4
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e267      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d075      	beq.n	8003fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ece:	4b88      	ldr	r3, [pc, #544]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d00c      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eda:	4b85      	ldr	r3, [pc, #532]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d112      	bne.n	8003f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee6:	4b82      	ldr	r3, [pc, #520]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef2:	d10b      	bne.n	8003f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef4:	4b7e      	ldr	r3, [pc, #504]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d05b      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x108>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d157      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e242      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f14:	d106      	bne.n	8003f24 <HAL_RCC_OscConfig+0x74>
 8003f16:	4b76      	ldr	r3, [pc, #472]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a75      	ldr	r2, [pc, #468]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e01d      	b.n	8003f60 <HAL_RCC_OscConfig+0xb0>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x98>
 8003f2e:	4b70      	ldr	r3, [pc, #448]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6f      	ldr	r2, [pc, #444]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b6d      	ldr	r3, [pc, #436]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a6c      	ldr	r2, [pc, #432]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e00b      	b.n	8003f60 <HAL_RCC_OscConfig+0xb0>
 8003f48:	4b69      	ldr	r3, [pc, #420]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a68      	ldr	r2, [pc, #416]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	4b66      	ldr	r3, [pc, #408]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a65      	ldr	r2, [pc, #404]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d013      	beq.n	8003f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe fcd0 	bl	800290c <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fe fccc 	bl	800290c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e207      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	4b5b      	ldr	r3, [pc, #364]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0xc0>
 8003f8e:	e014      	b.n	8003fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fe fcbc 	bl	800290c <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f98:	f7fe fcb8 	bl	800290c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	; 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e1f3      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003faa:	4b51      	ldr	r3, [pc, #324]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0xe8>
 8003fb6:	e000      	b.n	8003fba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d063      	beq.n	800408e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fc6:	4b4a      	ldr	r3, [pc, #296]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fd2:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d11c      	bne.n	8004018 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fde:	4b44      	ldr	r3, [pc, #272]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d116      	bne.n	8004018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	4b41      	ldr	r3, [pc, #260]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <HAL_RCC_OscConfig+0x152>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d001      	beq.n	8004002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e1c7      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004002:	4b3b      	ldr	r3, [pc, #236]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4937      	ldr	r1, [pc, #220]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8004012:	4313      	orrs	r3, r2
 8004014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004016:	e03a      	b.n	800408e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d020      	beq.n	8004062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004020:	4b34      	ldr	r3, [pc, #208]	; (80040f4 <HAL_RCC_OscConfig+0x244>)
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7fe fc71 	bl	800290c <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800402e:	f7fe fc6d 	bl	800290c <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e1a8      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004040:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404c:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4925      	ldr	r1, [pc, #148]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 800405c:	4313      	orrs	r3, r2
 800405e:	600b      	str	r3, [r1, #0]
 8004060:	e015      	b.n	800408e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCC_OscConfig+0x244>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fe fc50 	bl	800290c <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004070:	f7fe fc4c 	bl	800290c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e187      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004082:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d036      	beq.n	8004108 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d016      	beq.n	80040d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040a2:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <HAL_RCC_OscConfig+0x248>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fe fc30 	bl	800290c <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b0:	f7fe fc2c 	bl	800290c <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e167      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_RCC_OscConfig+0x240>)
 80040c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x200>
 80040ce:	e01b      	b.n	8004108 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040d0:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <HAL_RCC_OscConfig+0x248>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d6:	f7fe fc19 	bl	800290c <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040dc:	e00e      	b.n	80040fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040de:	f7fe fc15 	bl	800290c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d907      	bls.n	80040fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e150      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
 80040f0:	40023800 	.word	0x40023800
 80040f4:	42470000 	.word	0x42470000
 80040f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fc:	4b88      	ldr	r3, [pc, #544]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 80040fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1ea      	bne.n	80040de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8097 	beq.w	8004244 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411a:	4b81      	ldr	r3, [pc, #516]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10f      	bne.n	8004146 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	4b7d      	ldr	r3, [pc, #500]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	4a7c      	ldr	r2, [pc, #496]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	; 0x40
 8004136:	4b7a      	ldr	r3, [pc, #488]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004146:	4b77      	ldr	r3, [pc, #476]	; (8004324 <HAL_RCC_OscConfig+0x474>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d118      	bne.n	8004184 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004152:	4b74      	ldr	r3, [pc, #464]	; (8004324 <HAL_RCC_OscConfig+0x474>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a73      	ldr	r2, [pc, #460]	; (8004324 <HAL_RCC_OscConfig+0x474>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415e:	f7fe fbd5 	bl	800290c <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004166:	f7fe fbd1 	bl	800290c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e10c      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004178:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <HAL_RCC_OscConfig+0x474>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d106      	bne.n	800419a <HAL_RCC_OscConfig+0x2ea>
 800418c:	4b64      	ldr	r3, [pc, #400]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4a63      	ldr	r2, [pc, #396]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6713      	str	r3, [r2, #112]	; 0x70
 8004198:	e01c      	b.n	80041d4 <HAL_RCC_OscConfig+0x324>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d10c      	bne.n	80041bc <HAL_RCC_OscConfig+0x30c>
 80041a2:	4b5f      	ldr	r3, [pc, #380]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	4a5e      	ldr	r2, [pc, #376]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 80041a8:	f043 0304 	orr.w	r3, r3, #4
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70
 80041ae:	4b5c      	ldr	r3, [pc, #368]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	4a5b      	ldr	r2, [pc, #364]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ba:	e00b      	b.n	80041d4 <HAL_RCC_OscConfig+0x324>
 80041bc:	4b58      	ldr	r3, [pc, #352]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	4a57      	ldr	r2, [pc, #348]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70
 80041c8:	4b55      	ldr	r3, [pc, #340]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	4a54      	ldr	r2, [pc, #336]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 80041ce:	f023 0304 	bic.w	r3, r3, #4
 80041d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d015      	beq.n	8004208 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fe fb96 	bl	800290c <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fe fb92 	bl	800290c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e0cb      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fa:	4b49      	ldr	r3, [pc, #292]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0ee      	beq.n	80041e4 <HAL_RCC_OscConfig+0x334>
 8004206:	e014      	b.n	8004232 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004208:	f7fe fb80 	bl	800290c <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420e:	e00a      	b.n	8004226 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f7fe fb7c 	bl	800290c <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e0b5      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004226:	4b3e      	ldr	r3, [pc, #248]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1ee      	bne.n	8004210 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d105      	bne.n	8004244 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004238:	4b39      	ldr	r3, [pc, #228]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	4a38      	ldr	r2, [pc, #224]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 800423e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004242:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80a1 	beq.w	8004390 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800424e:	4b34      	ldr	r3, [pc, #208]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b08      	cmp	r3, #8
 8004258:	d05c      	beq.n	8004314 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d141      	bne.n	80042e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004262:	4b31      	ldr	r3, [pc, #196]	; (8004328 <HAL_RCC_OscConfig+0x478>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004268:	f7fe fb50 	bl	800290c <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004270:	f7fe fb4c 	bl	800290c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e087      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004282:	4b27      	ldr	r3, [pc, #156]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	019b      	lsls	r3, r3, #6
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	3b01      	subs	r3, #1
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	491b      	ldr	r1, [pc, #108]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042b8:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <HAL_RCC_OscConfig+0x478>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042be:	f7fe fb25 	bl	800290c <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c6:	f7fe fb21 	bl	800290c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e05c      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d8:	4b11      	ldr	r3, [pc, #68]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCC_OscConfig+0x416>
 80042e4:	e054      	b.n	8004390 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <HAL_RCC_OscConfig+0x478>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7fe fb0e 	bl	800290c <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fe fb0a 	bl	800290c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e045      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_RCC_OscConfig+0x470>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x444>
 8004312:	e03d      	b.n	8004390 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d107      	bne.n	800432c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e038      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
 8004320:	40023800 	.word	0x40023800
 8004324:	40007000 	.word	0x40007000
 8004328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_RCC_OscConfig+0x4ec>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d028      	beq.n	800438c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d121      	bne.n	800438c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d11a      	bne.n	800438c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004364:	4293      	cmp	r3, r2
 8004366:	d111      	bne.n	800438c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	3b01      	subs	r3, #1
 8004376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d107      	bne.n	800438c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800

080043a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0cc      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043b4:	4b68      	ldr	r3, [pc, #416]	; (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d90c      	bls.n	80043dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c2:	4b65      	ldr	r3, [pc, #404]	; (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ca:	4b63      	ldr	r3, [pc, #396]	; (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0b8      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d020      	beq.n	800442a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043f4:	4b59      	ldr	r3, [pc, #356]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4a58      	ldr	r2, [pc, #352]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800440c:	4b53      	ldr	r3, [pc, #332]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	4a52      	ldr	r2, [pc, #328]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004418:	4b50      	ldr	r3, [pc, #320]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	494d      	ldr	r1, [pc, #308]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d044      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d107      	bne.n	800444e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	4b47      	ldr	r3, [pc, #284]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d119      	bne.n	800447e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e07f      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d003      	beq.n	800445e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800445a:	2b03      	cmp	r3, #3
 800445c:	d107      	bne.n	800446e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445e:	4b3f      	ldr	r3, [pc, #252]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e06f      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446e:	4b3b      	ldr	r3, [pc, #236]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e067      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800447e:	4b37      	ldr	r3, [pc, #220]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f023 0203 	bic.w	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4934      	ldr	r1, [pc, #208]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004490:	f7fe fa3c 	bl	800290c <HAL_GetTick>
 8004494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	e00a      	b.n	80044ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004498:	f7fe fa38 	bl	800290c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e04f      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	4b2b      	ldr	r3, [pc, #172]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 020c 	and.w	r2, r3, #12
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	429a      	cmp	r2, r3
 80044be:	d1eb      	bne.n	8004498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044c0:	4b25      	ldr	r3, [pc, #148]	; (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d20c      	bcs.n	80044e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ce:	4b22      	ldr	r3, [pc, #136]	; (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b20      	ldr	r3, [pc, #128]	; (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e032      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044f4:	4b19      	ldr	r3, [pc, #100]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4916      	ldr	r1, [pc, #88]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004512:	4b12      	ldr	r3, [pc, #72]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	490e      	ldr	r1, [pc, #56]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004526:	f000 f821 	bl	800456c <HAL_RCC_GetSysClockFreq>
 800452a:	4602      	mov	r2, r0
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	490a      	ldr	r1, [pc, #40]	; (8004560 <HAL_RCC_ClockConfig+0x1c0>)
 8004538:	5ccb      	ldrb	r3, [r1, r3]
 800453a:	fa22 f303 	lsr.w	r3, r2, r3
 800453e:	4a09      	ldr	r2, [pc, #36]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe f99c 	bl	8002884 <HAL_InitTick>

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40023c00 	.word	0x40023c00
 800455c:	40023800 	.word	0x40023800
 8004560:	0800bbb4 	.word	0x0800bbb4
 8004564:	20000140 	.word	0x20000140
 8004568:	20000144 	.word	0x20000144

0800456c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800456c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004570:	b090      	sub	sp, #64	; 0x40
 8004572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	637b      	str	r3, [r7, #52]	; 0x34
 8004578:	2300      	movs	r3, #0
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457c:	2300      	movs	r3, #0
 800457e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004584:	4b59      	ldr	r3, [pc, #356]	; (80046ec <HAL_RCC_GetSysClockFreq+0x180>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 030c 	and.w	r3, r3, #12
 800458c:	2b08      	cmp	r3, #8
 800458e:	d00d      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x40>
 8004590:	2b08      	cmp	r3, #8
 8004592:	f200 80a1 	bhi.w	80046d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0x34>
 800459a:	2b04      	cmp	r3, #4
 800459c:	d003      	beq.n	80045a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800459e:	e09b      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045a0:	4b53      	ldr	r3, [pc, #332]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80045a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80045a4:	e09b      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045a6:	4b53      	ldr	r3, [pc, #332]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80045a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045aa:	e098      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ac:	4b4f      	ldr	r3, [pc, #316]	; (80046ec <HAL_RCC_GetSysClockFreq+0x180>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045b6:	4b4d      	ldr	r3, [pc, #308]	; (80046ec <HAL_RCC_GetSysClockFreq+0x180>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d028      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c2:	4b4a      	ldr	r3, [pc, #296]	; (80046ec <HAL_RCC_GetSysClockFreq+0x180>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	2200      	movs	r2, #0
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	627a      	str	r2, [r7, #36]	; 0x24
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045d4:	2100      	movs	r1, #0
 80045d6:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80045d8:	fb03 f201 	mul.w	r2, r3, r1
 80045dc:	2300      	movs	r3, #0
 80045de:	fb00 f303 	mul.w	r3, r0, r3
 80045e2:	4413      	add	r3, r2
 80045e4:	4a43      	ldr	r2, [pc, #268]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80045e6:	fba0 1202 	umull	r1, r2, r0, r2
 80045ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ec:	460a      	mov	r2, r1
 80045ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80045f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f2:	4413      	add	r3, r2
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f8:	2200      	movs	r2, #0
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	61fa      	str	r2, [r7, #28]
 80045fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004602:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004606:	f7fc fb1f 	bl	8000c48 <__aeabi_uldivmod>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4613      	mov	r3, r2
 8004610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004612:	e053      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004614:	4b35      	ldr	r3, [pc, #212]	; (80046ec <HAL_RCC_GetSysClockFreq+0x180>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	099b      	lsrs	r3, r3, #6
 800461a:	2200      	movs	r2, #0
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	617a      	str	r2, [r7, #20]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004626:	f04f 0b00 	mov.w	fp, #0
 800462a:	4652      	mov	r2, sl
 800462c:	465b      	mov	r3, fp
 800462e:	f04f 0000 	mov.w	r0, #0
 8004632:	f04f 0100 	mov.w	r1, #0
 8004636:	0159      	lsls	r1, r3, #5
 8004638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800463c:	0150      	lsls	r0, r2, #5
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	ebb2 080a 	subs.w	r8, r2, sl
 8004646:	eb63 090b 	sbc.w	r9, r3, fp
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004656:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800465a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800465e:	ebb2 0408 	subs.w	r4, r2, r8
 8004662:	eb63 0509 	sbc.w	r5, r3, r9
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	00eb      	lsls	r3, r5, #3
 8004670:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004674:	00e2      	lsls	r2, r4, #3
 8004676:	4614      	mov	r4, r2
 8004678:	461d      	mov	r5, r3
 800467a:	eb14 030a 	adds.w	r3, r4, sl
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	eb45 030b 	adc.w	r3, r5, fp
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004692:	4629      	mov	r1, r5
 8004694:	028b      	lsls	r3, r1, #10
 8004696:	4621      	mov	r1, r4
 8004698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800469c:	4621      	mov	r1, r4
 800469e:	028a      	lsls	r2, r1, #10
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a6:	2200      	movs	r2, #0
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	60fa      	str	r2, [r7, #12]
 80046ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b0:	f7fc faca 	bl	8000c48 <__aeabi_uldivmod>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4613      	mov	r3, r2
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_GetSysClockFreq+0x180>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	3301      	adds	r3, #1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80046cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046d6:	e002      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80046da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3740      	adds	r7, #64	; 0x40
 80046e4:	46bd      	mov	sp, r7
 80046e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800
 80046f0:	00f42400 	.word	0x00f42400
 80046f4:	017d7840 	.word	0x017d7840

080046f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_RCC_GetHCLKFreq+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000140 	.word	0x20000140

08004710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004714:	f7ff fff0 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0a9b      	lsrs	r3, r3, #10
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	; (8004734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40023800 	.word	0x40023800
 8004734:	0800bbc4 	.word	0x0800bbc4

08004738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800473c:	f7ff ffdc 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	0b5b      	lsrs	r3, r3, #13
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4903      	ldr	r1, [pc, #12]	; (800475c <HAL_RCC_GetPCLK2Freq+0x24>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004754:	4618      	mov	r0, r3
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40023800 	.word	0x40023800
 800475c:	0800bbc4 	.word	0x0800bbc4

08004760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e07b      	b.n	800486a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d108      	bne.n	800478c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004782:	d009      	beq.n	8004798 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	61da      	str	r2, [r3, #28]
 800478a:	e005      	b.n	8004798 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fd fd32 	bl	800221c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481c:	ea42 0103 	orr.w	r1, r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	f003 0104 	and.w	r1, r3, #4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	f003 0210 	and.w	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004858:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b088      	sub	sp, #32
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_SPI_Transmit+0x22>
 8004890:	2302      	movs	r3, #2
 8004892:	e126      	b.n	8004ae2 <HAL_SPI_Transmit+0x270>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800489c:	f7fe f836 	bl	800290c <HAL_GetTick>
 80048a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d002      	beq.n	80048b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
 80048b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048b6:	e10b      	b.n	8004ad0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_SPI_Transmit+0x52>
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048c8:	e102      	b.n	8004ad0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2203      	movs	r2, #3
 80048ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004910:	d10f      	bne.n	8004932 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004920:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004930:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d007      	beq.n	8004950 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800494e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004958:	d14b      	bne.n	80049f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_Transmit+0xf6>
 8004962:	8afb      	ldrh	r3, [r7, #22]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d13e      	bne.n	80049e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	881a      	ldrh	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	1c9a      	adds	r2, r3, #2
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800498c:	e02b      	b.n	80049e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d112      	bne.n	80049c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	881a      	ldrh	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	1c9a      	adds	r2, r3, #2
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	86da      	strh	r2, [r3, #54]	; 0x36
 80049c0:	e011      	b.n	80049e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c2:	f7fd ffa3 	bl	800290c <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d803      	bhi.n	80049da <HAL_SPI_Transmit+0x168>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d102      	bne.n	80049e0 <HAL_SPI_Transmit+0x16e>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049e4:	e074      	b.n	8004ad0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1ce      	bne.n	800498e <HAL_SPI_Transmit+0x11c>
 80049f0:	e04c      	b.n	8004a8c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_SPI_Transmit+0x18e>
 80049fa:	8afb      	ldrh	r3, [r7, #22]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d140      	bne.n	8004a82 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	7812      	ldrb	r2, [r2, #0]
 8004a0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a26:	e02c      	b.n	8004a82 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d113      	bne.n	8004a5e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	330c      	adds	r3, #12
 8004a40:	7812      	ldrb	r2, [r2, #0]
 8004a42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a5c:	e011      	b.n	8004a82 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a5e:	f7fd ff55 	bl	800290c <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d803      	bhi.n	8004a76 <HAL_SPI_Transmit+0x204>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d102      	bne.n	8004a7c <HAL_SPI_Transmit+0x20a>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a80:	e026      	b.n	8004ad0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1cd      	bne.n	8004a28 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fbcb 	bl	800522c <SPI_EndRxTxTransaction>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e000      	b.n	8004ad0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004ace:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ae0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3720      	adds	r7, #32
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b088      	sub	sp, #32
 8004aee:	af02      	add	r7, sp, #8
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b06:	d112      	bne.n	8004b2e <HAL_SPI_Receive+0x44>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10e      	bne.n	8004b2e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2204      	movs	r2, #4
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b18:	88fa      	ldrh	r2, [r7, #6]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f8f1 	bl	8004d0c <HAL_SPI_TransmitReceive>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	e0ea      	b.n	8004d04 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_SPI_Receive+0x52>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e0e3      	b.n	8004d04 <HAL_SPI_Receive+0x21a>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b44:	f7fd fee2 	bl	800290c <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d002      	beq.n	8004b5c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b56:	2302      	movs	r3, #2
 8004b58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b5a:	e0ca      	b.n	8004cf2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_SPI_Receive+0x7e>
 8004b62:	88fb      	ldrh	r3, [r7, #6]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b6c:	e0c1      	b.n	8004cf2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2204      	movs	r2, #4
 8004b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	88fa      	ldrh	r2, [r7, #6]
 8004b86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb4:	d10f      	bne.n	8004bd6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bd4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d007      	beq.n	8004bf4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bf2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d162      	bne.n	8004cc2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bfc:	e02e      	b.n	8004c5c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d115      	bne.n	8004c38 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f103 020c 	add.w	r2, r3, #12
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	7812      	ldrb	r2, [r2, #0]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c36:	e011      	b.n	8004c5c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c38:	f7fd fe68 	bl	800290c <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d803      	bhi.n	8004c50 <HAL_SPI_Receive+0x166>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d102      	bne.n	8004c56 <HAL_SPI_Receive+0x16c>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c5a:	e04a      	b.n	8004cf2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1cb      	bne.n	8004bfe <HAL_SPI_Receive+0x114>
 8004c66:	e031      	b.n	8004ccc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d113      	bne.n	8004c9e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	b292      	uxth	r2, r2
 8004c82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	1c9a      	adds	r2, r3, #2
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c9c:	e011      	b.n	8004cc2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c9e:	f7fd fe35 	bl	800290c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d803      	bhi.n	8004cb6 <HAL_SPI_Receive+0x1cc>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d102      	bne.n	8004cbc <HAL_SPI_Receive+0x1d2>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d102      	bne.n	8004cc2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cc0:	e017      	b.n	8004cf2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1cd      	bne.n	8004c68 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	6839      	ldr	r1, [r7, #0]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fa45 	bl	8005160 <SPI_EndRxTransaction>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	75fb      	strb	r3, [r7, #23]
 8004cee:	e000      	b.n	8004cf2 <HAL_SPI_Receive+0x208>
  }

error :
 8004cf0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08c      	sub	sp, #48	; 0x30
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x26>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e18a      	b.n	8005048 <HAL_SPI_TransmitReceive+0x33c>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d3a:	f7fd fde7 	bl	800290c <HAL_GetTick>
 8004d3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d00f      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x70>
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d62:	d107      	bne.n	8004d74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d103      	bne.n	8004d74 <HAL_SPI_TransmitReceive+0x68>
 8004d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d003      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d74:	2302      	movs	r3, #2
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d7a:	e15b      	b.n	8005034 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_SPI_TransmitReceive+0x82>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_SPI_TransmitReceive+0x82>
 8004d88:	887b      	ldrh	r3, [r7, #2]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d103      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d94:	e14e      	b.n	8005034 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d003      	beq.n	8004daa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2205      	movs	r2, #5
 8004da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	887a      	ldrh	r2, [r7, #2]
 8004dba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	887a      	ldrh	r2, [r7, #2]
 8004dc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	887a      	ldrh	r2, [r7, #2]
 8004dcc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	887a      	ldrh	r2, [r7, #2]
 8004dd2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dea:	2b40      	cmp	r3, #64	; 0x40
 8004dec:	d007      	beq.n	8004dfe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e06:	d178      	bne.n	8004efa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <HAL_SPI_TransmitReceive+0x10a>
 8004e10:	8b7b      	ldrh	r3, [r7, #26]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d166      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	881a      	ldrh	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	1c9a      	adds	r2, r3, #2
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e3a:	e053      	b.n	8004ee4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d11b      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x176>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d016      	beq.n	8004e82 <HAL_SPI_TransmitReceive+0x176>
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d113      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	881a      	ldrh	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	1c9a      	adds	r2, r3, #2
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d119      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x1b8>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d014      	beq.n	8004ec4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	b292      	uxth	r2, r2
 8004ea6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	1c9a      	adds	r2, r3, #2
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ec4:	f7fd fd22 	bl	800290c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d807      	bhi.n	8004ee4 <HAL_SPI_TransmitReceive+0x1d8>
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d003      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ee2:	e0a7      	b.n	8005034 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1a6      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x130>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1a1      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x130>
 8004ef8:	e07c      	b.n	8004ff4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <HAL_SPI_TransmitReceive+0x1fc>
 8004f02:	8b7b      	ldrh	r3, [r7, #26]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d16b      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	330c      	adds	r3, #12
 8004f12:	7812      	ldrb	r2, [r2, #0]
 8004f14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f2e:	e057      	b.n	8004fe0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d11c      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x26c>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d017      	beq.n	8004f78 <HAL_SPI_TransmitReceive+0x26c>
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d114      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	7812      	ldrb	r2, [r2, #0]
 8004f5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d119      	bne.n	8004fba <HAL_SPI_TransmitReceive+0x2ae>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d014      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fba:	f7fd fca7 	bl	800290c <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d803      	bhi.n	8004fd2 <HAL_SPI_TransmitReceive+0x2c6>
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d102      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x2cc>
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d103      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fde:	e029      	b.n	8005034 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1a2      	bne.n	8004f30 <HAL_SPI_TransmitReceive+0x224>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d19d      	bne.n	8004f30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f917 	bl	800522c <SPI_EndRxTxTransaction>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d006      	beq.n	8005012 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005010:	e010      	b.n	8005034 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10b      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	e000      	b.n	8005034 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005044:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005048:	4618      	mov	r0, r3
 800504a:	3730      	adds	r7, #48	; 0x30
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005060:	f7fd fc54 	bl	800290c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	4413      	add	r3, r2
 800506e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005070:	f7fd fc4c 	bl	800290c <HAL_GetTick>
 8005074:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005076:	4b39      	ldr	r3, [pc, #228]	; (800515c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	015b      	lsls	r3, r3, #5
 800507c:	0d1b      	lsrs	r3, r3, #20
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	fb02 f303 	mul.w	r3, r2, r3
 8005084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005086:	e054      	b.n	8005132 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d050      	beq.n	8005132 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005090:	f7fd fc3c 	bl	800290c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	429a      	cmp	r2, r3
 800509e:	d902      	bls.n	80050a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d13d      	bne.n	8005122 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050be:	d111      	bne.n	80050e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c8:	d004      	beq.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d2:	d107      	bne.n	80050e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ec:	d10f      	bne.n	800510e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800510c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e017      	b.n	8005152 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	3b01      	subs	r3, #1
 8005130:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4013      	ands	r3, r2
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	429a      	cmp	r2, r3
 8005140:	bf0c      	ite	eq
 8005142:	2301      	moveq	r3, #1
 8005144:	2300      	movne	r3, #0
 8005146:	b2db      	uxtb	r3, r3
 8005148:	461a      	mov	r2, r3
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	429a      	cmp	r2, r3
 800514e:	d19b      	bne.n	8005088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000140 	.word	0x20000140

08005160 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005174:	d111      	bne.n	800519a <SPI_EndRxTransaction+0x3a>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800517e:	d004      	beq.n	800518a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005188:	d107      	bne.n	800519a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005198:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a2:	d12a      	bne.n	80051fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ac:	d012      	beq.n	80051d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2200      	movs	r2, #0
 80051b6:	2180      	movs	r1, #128	; 0x80
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ff49 	bl	8005050 <SPI_WaitFlagStateUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d02d      	beq.n	8005220 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e026      	b.n	8005222 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	2101      	movs	r1, #1
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff ff36 	bl	8005050 <SPI_WaitFlagStateUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01a      	beq.n	8005220 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e013      	b.n	8005222 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2200      	movs	r2, #0
 8005202:	2101      	movs	r1, #1
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7ff ff23 	bl	8005050 <SPI_WaitFlagStateUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e000      	b.n	8005222 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005238:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <SPI_EndRxTxTransaction+0x7c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <SPI_EndRxTxTransaction+0x80>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	0d5b      	lsrs	r3, r3, #21
 8005244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005248:	fb02 f303 	mul.w	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005256:	d112      	bne.n	800527e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	2180      	movs	r1, #128	; 0x80
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff fef4 	bl	8005050 <SPI_WaitFlagStateUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d016      	beq.n	800529c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e00f      	b.n	800529e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3b01      	subs	r3, #1
 8005288:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d0f2      	beq.n	800527e <SPI_EndRxTxTransaction+0x52>
 8005298:	e000      	b.n	800529c <SPI_EndRxTxTransaction+0x70>
        break;
 800529a:	bf00      	nop
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20000140 	.word	0x20000140
 80052ac:	165e9f81 	.word	0x165e9f81

080052b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e041      	b.n	8005346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fd f9a0 	bl	800261c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	4619      	mov	r1, r3
 80052ee:	4610      	mov	r0, r2
 80052f0:	f000 fc7a 	bl	8005be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	d001      	beq.n	8005368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e04e      	b.n	8005406 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a23      	ldr	r2, [pc, #140]	; (8005414 <HAL_TIM_Base_Start_IT+0xc4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d022      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005392:	d01d      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <HAL_TIM_Base_Start_IT+0xc8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d018      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1e      	ldr	r2, [pc, #120]	; (800541c <HAL_TIM_Base_Start_IT+0xcc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1c      	ldr	r2, [pc, #112]	; (8005420 <HAL_TIM_Base_Start_IT+0xd0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00e      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <HAL_TIM_Base_Start_IT+0xd4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a19      	ldr	r2, [pc, #100]	; (8005428 <HAL_TIM_Base_Start_IT+0xd8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a18      	ldr	r2, [pc, #96]	; (800542c <HAL_TIM_Base_Start_IT+0xdc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d111      	bne.n	80053f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b06      	cmp	r3, #6
 80053e0:	d010      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0201 	orr.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f2:	e007      	b.n	8005404 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40010000 	.word	0x40010000
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40010400 	.word	0x40010400
 8005428:	40014000 	.word	0x40014000
 800542c:	40001800 	.word	0x40001800

08005430 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e041      	b.n	80054c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f839 	bl	80054ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f000 fbba 	bl	8005be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <HAL_TIM_PWM_Start+0x24>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e022      	b.n	800554e <HAL_TIM_PWM_Start+0x6a>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b04      	cmp	r3, #4
 800550c:	d109      	bne.n	8005522 <HAL_TIM_PWM_Start+0x3e>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b01      	cmp	r3, #1
 8005518:	bf14      	ite	ne
 800551a:	2301      	movne	r3, #1
 800551c:	2300      	moveq	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e015      	b.n	800554e <HAL_TIM_PWM_Start+0x6a>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d109      	bne.n	800553c <HAL_TIM_PWM_Start+0x58>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e008      	b.n	800554e <HAL_TIM_PWM_Start+0x6a>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	bf14      	ite	ne
 8005548:	2301      	movne	r3, #1
 800554a:	2300      	moveq	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e07c      	b.n	8005650 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <HAL_TIM_PWM_Start+0x82>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005564:	e013      	b.n	800558e <HAL_TIM_PWM_Start+0xaa>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b04      	cmp	r3, #4
 800556a:	d104      	bne.n	8005576 <HAL_TIM_PWM_Start+0x92>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005574:	e00b      	b.n	800558e <HAL_TIM_PWM_Start+0xaa>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d104      	bne.n	8005586 <HAL_TIM_PWM_Start+0xa2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005584:	e003      	b.n	800558e <HAL_TIM_PWM_Start+0xaa>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2202      	movs	r2, #2
 800558a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2201      	movs	r2, #1
 8005594:	6839      	ldr	r1, [r7, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fe10 	bl	80061bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a2d      	ldr	r2, [pc, #180]	; (8005658 <HAL_TIM_PWM_Start+0x174>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_TIM_PWM_Start+0xcc>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2c      	ldr	r2, [pc, #176]	; (800565c <HAL_TIM_PWM_Start+0x178>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d101      	bne.n	80055b4 <HAL_TIM_PWM_Start+0xd0>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <HAL_TIM_PWM_Start+0xd2>
 80055b4:	2300      	movs	r3, #0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a22      	ldr	r2, [pc, #136]	; (8005658 <HAL_TIM_PWM_Start+0x174>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d022      	beq.n	800561a <HAL_TIM_PWM_Start+0x136>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055dc:	d01d      	beq.n	800561a <HAL_TIM_PWM_Start+0x136>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <HAL_TIM_PWM_Start+0x17c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d018      	beq.n	800561a <HAL_TIM_PWM_Start+0x136>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <HAL_TIM_PWM_Start+0x180>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <HAL_TIM_PWM_Start+0x136>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <HAL_TIM_PWM_Start+0x184>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00e      	beq.n	800561a <HAL_TIM_PWM_Start+0x136>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a16      	ldr	r2, [pc, #88]	; (800565c <HAL_TIM_PWM_Start+0x178>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_TIM_PWM_Start+0x136>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a18      	ldr	r2, [pc, #96]	; (800566c <HAL_TIM_PWM_Start+0x188>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_TIM_PWM_Start+0x136>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a16      	ldr	r2, [pc, #88]	; (8005670 <HAL_TIM_PWM_Start+0x18c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d111      	bne.n	800563e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b06      	cmp	r3, #6
 800562a:	d010      	beq.n	800564e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0201 	orr.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563c:	e007      	b.n	800564e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0201 	orr.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40010000 	.word	0x40010000
 800565c:	40010400 	.word	0x40010400
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800
 8005668:	40000c00 	.word	0x40000c00
 800566c:	40014000 	.word	0x40014000
 8005670:	40001800 	.word	0x40001800

08005674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d122      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b02      	cmp	r3, #2
 8005696:	d11b      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0202 	mvn.w	r2, #2
 80056a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa77 	bl	8005baa <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa69 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fa7a 	bl	8005bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d122      	bne.n	8005724 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d11b      	bne.n	8005724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0204 	mvn.w	r2, #4
 80056f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fa4d 	bl	8005baa <HAL_TIM_IC_CaptureCallback>
 8005710:	e005      	b.n	800571e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fa3f 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fa50 	bl	8005bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b08      	cmp	r3, #8
 8005730:	d122      	bne.n	8005778 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b08      	cmp	r3, #8
 800573e:	d11b      	bne.n	8005778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0208 	mvn.w	r2, #8
 8005748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2204      	movs	r2, #4
 800574e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa23 	bl	8005baa <HAL_TIM_IC_CaptureCallback>
 8005764:	e005      	b.n	8005772 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fa15 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fa26 	bl	8005bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0310 	and.w	r3, r3, #16
 8005782:	2b10      	cmp	r3, #16
 8005784:	d122      	bne.n	80057cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b10      	cmp	r3, #16
 8005792:	d11b      	bne.n	80057cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0210 	mvn.w	r2, #16
 800579c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2208      	movs	r2, #8
 80057a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f9f9 	bl	8005baa <HAL_TIM_IC_CaptureCallback>
 80057b8:	e005      	b.n	80057c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f9eb 	bl	8005b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f9fc 	bl	8005bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0201 	mvn.w	r2, #1
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fc fc08 	bl	8002008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b80      	cmp	r3, #128	; 0x80
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005810:	2b80      	cmp	r3, #128	; 0x80
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fdca 	bl	80063b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d10e      	bne.n	8005850 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d107      	bne.n	8005850 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f9c1 	bl	8005bd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b20      	cmp	r3, #32
 800585c:	d10e      	bne.n	800587c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b20      	cmp	r3, #32
 800586a:	d107      	bne.n	800587c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0220 	mvn.w	r2, #32
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fd94 	bl	80063a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800587c:	bf00      	nop
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800589e:	2302      	movs	r3, #2
 80058a0:	e0ae      	b.n	8005a00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b0c      	cmp	r3, #12
 80058ae:	f200 809f 	bhi.w	80059f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	080058ed 	.word	0x080058ed
 80058bc:	080059f1 	.word	0x080059f1
 80058c0:	080059f1 	.word	0x080059f1
 80058c4:	080059f1 	.word	0x080059f1
 80058c8:	0800592d 	.word	0x0800592d
 80058cc:	080059f1 	.word	0x080059f1
 80058d0:	080059f1 	.word	0x080059f1
 80058d4:	080059f1 	.word	0x080059f1
 80058d8:	0800596f 	.word	0x0800596f
 80058dc:	080059f1 	.word	0x080059f1
 80058e0:	080059f1 	.word	0x080059f1
 80058e4:	080059f1 	.word	0x080059f1
 80058e8:	080059af 	.word	0x080059af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fa18 	bl	8005d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0208 	orr.w	r2, r2, #8
 8005906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0204 	bic.w	r2, r2, #4
 8005916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6999      	ldr	r1, [r3, #24]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	619a      	str	r2, [r3, #24]
      break;
 800592a:	e064      	b.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fa68 	bl	8005e08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6999      	ldr	r1, [r3, #24]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	021a      	lsls	r2, r3, #8
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	619a      	str	r2, [r3, #24]
      break;
 800596c:	e043      	b.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fabd 	bl	8005ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0208 	orr.w	r2, r2, #8
 8005988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0204 	bic.w	r2, r2, #4
 8005998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69d9      	ldr	r1, [r3, #28]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	61da      	str	r2, [r3, #28]
      break;
 80059ac:	e023      	b.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fb11 	bl	8005fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69d9      	ldr	r1, [r3, #28]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	021a      	lsls	r2, r3, #8
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	61da      	str	r2, [r3, #28]
      break;
 80059ee:	e002      	b.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	75fb      	strb	r3, [r7, #23]
      break;
 80059f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_TIM_ConfigClockSource+0x1c>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e0b4      	b.n	8005b8e <HAL_TIM_ConfigClockSource+0x186>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a5c:	d03e      	beq.n	8005adc <HAL_TIM_ConfigClockSource+0xd4>
 8005a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a62:	f200 8087 	bhi.w	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6a:	f000 8086 	beq.w	8005b7a <HAL_TIM_ConfigClockSource+0x172>
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a72:	d87f      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a74:	2b70      	cmp	r3, #112	; 0x70
 8005a76:	d01a      	beq.n	8005aae <HAL_TIM_ConfigClockSource+0xa6>
 8005a78:	2b70      	cmp	r3, #112	; 0x70
 8005a7a:	d87b      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a7c:	2b60      	cmp	r3, #96	; 0x60
 8005a7e:	d050      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x11a>
 8005a80:	2b60      	cmp	r3, #96	; 0x60
 8005a82:	d877      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a84:	2b50      	cmp	r3, #80	; 0x50
 8005a86:	d03c      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0xfa>
 8005a88:	2b50      	cmp	r3, #80	; 0x50
 8005a8a:	d873      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a8c:	2b40      	cmp	r3, #64	; 0x40
 8005a8e:	d058      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x13a>
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d86f      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a94:	2b30      	cmp	r3, #48	; 0x30
 8005a96:	d064      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x15a>
 8005a98:	2b30      	cmp	r3, #48	; 0x30
 8005a9a:	d86b      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d060      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x15a>
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d867      	bhi.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d05c      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x15a>
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d05a      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x15a>
 8005aac:	e062      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	6899      	ldr	r1, [r3, #8]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f000 fb5d 	bl	800617c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	609a      	str	r2, [r3, #8]
      break;
 8005ada:	e04f      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	6899      	ldr	r1, [r3, #8]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f000 fb46 	bl	800617c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005afe:	609a      	str	r2, [r3, #8]
      break;
 8005b00:	e03c      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6859      	ldr	r1, [r3, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f000 faba 	bl	8006088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2150      	movs	r1, #80	; 0x50
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fb13 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005b20:	e02c      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f000 fad9 	bl	80060e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2160      	movs	r1, #96	; 0x60
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fb03 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005b40:	e01c      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6859      	ldr	r1, [r3, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f000 fa9a 	bl	8006088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2140      	movs	r1, #64	; 0x40
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 faf3 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005b60:	e00c      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f000 faea 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005b72:	e003      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]
      break;
 8005b78:	e000      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a40      	ldr	r2, [pc, #256]	; (8005cfc <TIM_Base_SetConfig+0x114>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d013      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c06:	d00f      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a3d      	ldr	r2, [pc, #244]	; (8005d00 <TIM_Base_SetConfig+0x118>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00b      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a3c      	ldr	r2, [pc, #240]	; (8005d04 <TIM_Base_SetConfig+0x11c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a3b      	ldr	r2, [pc, #236]	; (8005d08 <TIM_Base_SetConfig+0x120>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a3a      	ldr	r2, [pc, #232]	; (8005d0c <TIM_Base_SetConfig+0x124>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d108      	bne.n	8005c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2f      	ldr	r2, [pc, #188]	; (8005cfc <TIM_Base_SetConfig+0x114>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d02b      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c48:	d027      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a2c      	ldr	r2, [pc, #176]	; (8005d00 <TIM_Base_SetConfig+0x118>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d023      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2b      	ldr	r2, [pc, #172]	; (8005d04 <TIM_Base_SetConfig+0x11c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01f      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2a      	ldr	r2, [pc, #168]	; (8005d08 <TIM_Base_SetConfig+0x120>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01b      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a29      	ldr	r2, [pc, #164]	; (8005d0c <TIM_Base_SetConfig+0x124>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d017      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a28      	ldr	r2, [pc, #160]	; (8005d10 <TIM_Base_SetConfig+0x128>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a27      	ldr	r2, [pc, #156]	; (8005d14 <TIM_Base_SetConfig+0x12c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00f      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a26      	ldr	r2, [pc, #152]	; (8005d18 <TIM_Base_SetConfig+0x130>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00b      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a25      	ldr	r2, [pc, #148]	; (8005d1c <TIM_Base_SetConfig+0x134>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d007      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a24      	ldr	r2, [pc, #144]	; (8005d20 <TIM_Base_SetConfig+0x138>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a23      	ldr	r2, [pc, #140]	; (8005d24 <TIM_Base_SetConfig+0x13c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d108      	bne.n	8005cac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <TIM_Base_SetConfig+0x114>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_Base_SetConfig+0xf8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a0c      	ldr	r2, [pc, #48]	; (8005d0c <TIM_Base_SetConfig+0x124>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d103      	bne.n	8005ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	615a      	str	r2, [r3, #20]
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40000c00 	.word	0x40000c00
 8005d0c:	40010400 	.word	0x40010400
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40014400 	.word	0x40014400
 8005d18:	40014800 	.word	0x40014800
 8005d1c:	40001800 	.word	0x40001800
 8005d20:	40001c00 	.word	0x40001c00
 8005d24:	40002000 	.word	0x40002000

08005d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f023 0201 	bic.w	r2, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0303 	bic.w	r3, r3, #3
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f023 0302 	bic.w	r3, r3, #2
 8005d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a20      	ldr	r2, [pc, #128]	; (8005e00 <TIM_OC1_SetConfig+0xd8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_OC1_SetConfig+0x64>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a1f      	ldr	r2, [pc, #124]	; (8005e04 <TIM_OC1_SetConfig+0xdc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d10c      	bne.n	8005da6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f023 0308 	bic.w	r3, r3, #8
 8005d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 0304 	bic.w	r3, r3, #4
 8005da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a15      	ldr	r2, [pc, #84]	; (8005e00 <TIM_OC1_SetConfig+0xd8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d003      	beq.n	8005db6 <TIM_OC1_SetConfig+0x8e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a14      	ldr	r2, [pc, #80]	; (8005e04 <TIM_OC1_SetConfig+0xdc>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d111      	bne.n	8005dda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40010400 	.word	0x40010400

08005e08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f023 0210 	bic.w	r2, r3, #16
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0320 	bic.w	r3, r3, #32
 8005e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a22      	ldr	r2, [pc, #136]	; (8005eec <TIM_OC2_SetConfig+0xe4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC2_SetConfig+0x68>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <TIM_OC2_SetConfig+0xe8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10d      	bne.n	8005e8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a17      	ldr	r2, [pc, #92]	; (8005eec <TIM_OC2_SetConfig+0xe4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_OC2_SetConfig+0x94>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <TIM_OC2_SetConfig+0xe8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d113      	bne.n	8005ec4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ea2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	621a      	str	r2, [r3, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40010000 	.word	0x40010000
 8005ef0:	40010400 	.word	0x40010400

08005ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0303 	bic.w	r3, r3, #3
 8005f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a21      	ldr	r2, [pc, #132]	; (8005fd4 <TIM_OC3_SetConfig+0xe0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d003      	beq.n	8005f5a <TIM_OC3_SetConfig+0x66>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a20      	ldr	r2, [pc, #128]	; (8005fd8 <TIM_OC3_SetConfig+0xe4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d10d      	bne.n	8005f76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a16      	ldr	r2, [pc, #88]	; (8005fd4 <TIM_OC3_SetConfig+0xe0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d003      	beq.n	8005f86 <TIM_OC3_SetConfig+0x92>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <TIM_OC3_SetConfig+0xe4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d113      	bne.n	8005fae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	621a      	str	r2, [r3, #32]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40010000 	.word	0x40010000
 8005fd8:	40010400 	.word	0x40010400

08005fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	031b      	lsls	r3, r3, #12
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	4313      	orrs	r3, r2
 8006032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a12      	ldr	r2, [pc, #72]	; (8006080 <TIM_OC4_SetConfig+0xa4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d003      	beq.n	8006044 <TIM_OC4_SetConfig+0x68>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a11      	ldr	r2, [pc, #68]	; (8006084 <TIM_OC4_SetConfig+0xa8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d109      	bne.n	8006058 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800604a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	019b      	lsls	r3, r3, #6
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40010000 	.word	0x40010000
 8006084:	40010400 	.word	0x40010400

08006088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 030a 	bic.w	r3, r3, #10
 80060c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b087      	sub	sp, #28
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0210 	bic.w	r2, r3, #16
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	031b      	lsls	r3, r3, #12
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	f043 0307 	orr.w	r3, r3, #7
 8006168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	609a      	str	r2, [r3, #8]
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	021a      	lsls	r2, r3, #8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	431a      	orrs	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	609a      	str	r2, [r3, #8]
}
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	2201      	movs	r2, #1
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a1a      	ldr	r2, [r3, #32]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	43db      	mvns	r3, r3
 80061de:	401a      	ands	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1a      	ldr	r2, [r3, #32]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	fa01 f303 	lsl.w	r3, r1, r3
 80061f4:	431a      	orrs	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	621a      	str	r2, [r3, #32]
}
 80061fa:	bf00      	nop
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
	...

08006208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800621c:	2302      	movs	r3, #2
 800621e:	e05a      	b.n	80062d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a21      	ldr	r2, [pc, #132]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d022      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626c:	d01d      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1d      	ldr	r2, [pc, #116]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d018      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1b      	ldr	r2, [pc, #108]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d013      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1a      	ldr	r2, [pc, #104]	; (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00e      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d009      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d004      	beq.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a15      	ldr	r2, [pc, #84]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d10c      	bne.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	40010400 	.word	0x40010400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40001800 	.word	0x40001800

08006300 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006318:	2302      	movs	r3, #2
 800631a:	e03d      	b.n	8006398 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e03f      	b.n	800645e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fc f9b2 	bl	800275c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2224      	movs	r2, #36	; 0x24
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800640e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f929 	bl	8006668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006424:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695a      	ldr	r2, [r3, #20]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006434:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006444:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b08a      	sub	sp, #40	; 0x28
 800646a:	af02      	add	r7, sp, #8
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	603b      	str	r3, [r7, #0]
 8006472:	4613      	mov	r3, r2
 8006474:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b20      	cmp	r3, #32
 8006484:	d17c      	bne.n	8006580 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <HAL_UART_Transmit+0x2c>
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e075      	b.n	8006582 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_UART_Transmit+0x3e>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e06e      	b.n	8006582 <HAL_UART_Transmit+0x11c>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2221      	movs	r2, #33	; 0x21
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ba:	f7fc fa27 	bl	800290c <HAL_GetTick>
 80064be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	88fa      	ldrh	r2, [r7, #6]
 80064ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d4:	d108      	bne.n	80064e8 <HAL_UART_Transmit+0x82>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	e003      	b.n	80064f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80064f8:	e02a      	b.n	8006550 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2200      	movs	r2, #0
 8006502:	2180      	movs	r1, #128	; 0x80
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f840 	bl	800658a <UART_WaitOnFlagUntilTimeout>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e036      	b.n	8006582 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10b      	bne.n	8006532 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006528:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	3302      	adds	r3, #2
 800652e:	61bb      	str	r3, [r7, #24]
 8006530:	e007      	b.n	8006542 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	3301      	adds	r3, #1
 8006540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006546:	b29b      	uxth	r3, r3
 8006548:	3b01      	subs	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1cf      	bne.n	80064fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	2140      	movs	r1, #64	; 0x40
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 f810 	bl	800658a <UART_WaitOnFlagUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e006      	b.n	8006582 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	e000      	b.n	8006582 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006580:	2302      	movs	r3, #2
  }
}
 8006582:	4618      	mov	r0, r3
 8006584:	3720      	adds	r7, #32
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b090      	sub	sp, #64	; 0x40
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	603b      	str	r3, [r7, #0]
 8006596:	4613      	mov	r3, r2
 8006598:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800659a:	e050      	b.n	800663e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800659c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a2:	d04c      	beq.n	800663e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d007      	beq.n	80065ba <UART_WaitOnFlagUntilTimeout+0x30>
 80065aa:	f7fc f9af 	bl	800290c <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d241      	bcs.n	800663e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	330c      	adds	r3, #12
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	330c      	adds	r3, #12
 80065d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065da:	637a      	str	r2, [r7, #52]	; 0x34
 80065dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e5      	bne.n	80065ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3314      	adds	r3, #20
 80065f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	613b      	str	r3, [r7, #16]
   return(result);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	63bb      	str	r3, [r7, #56]	; 0x38
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3314      	adds	r3, #20
 800660c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800660e:	623a      	str	r2, [r7, #32]
 8006610:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	69f9      	ldr	r1, [r7, #28]
 8006614:	6a3a      	ldr	r2, [r7, #32]
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	61bb      	str	r3, [r7, #24]
   return(result);
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e5      	bne.n	80065ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2220      	movs	r2, #32
 8006626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e00f      	b.n	800665e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4013      	ands	r3, r2
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	429a      	cmp	r2, r3
 800664c:	bf0c      	ite	eq
 800664e:	2301      	moveq	r3, #1
 8006650:	2300      	movne	r3, #0
 8006652:	b2db      	uxtb	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	429a      	cmp	r2, r3
 800665a:	d09f      	beq.n	800659c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3740      	adds	r7, #64	; 0x40
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800666c:	b0c0      	sub	sp, #256	; 0x100
 800666e:	af00      	add	r7, sp, #0
 8006670:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006684:	68d9      	ldr	r1, [r3, #12]
 8006686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	ea40 0301 	orr.w	r3, r0, r1
 8006690:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	431a      	orrs	r2, r3
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066c0:	f021 010c 	bic.w	r1, r1, #12
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066ce:	430b      	orrs	r3, r1
 80066d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e2:	6999      	ldr	r1, [r3, #24]
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	ea40 0301 	orr.w	r3, r0, r1
 80066ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	4b8f      	ldr	r3, [pc, #572]	; (8006934 <UART_SetConfig+0x2cc>)
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d005      	beq.n	8006708 <UART_SetConfig+0xa0>
 80066fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	4b8d      	ldr	r3, [pc, #564]	; (8006938 <UART_SetConfig+0x2d0>)
 8006704:	429a      	cmp	r2, r3
 8006706:	d104      	bne.n	8006712 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006708:	f7fe f816 	bl	8004738 <HAL_RCC_GetPCLK2Freq>
 800670c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006710:	e003      	b.n	800671a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006712:	f7fd fffd 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8006716:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006724:	f040 810c 	bne.w	8006940 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800672c:	2200      	movs	r2, #0
 800672e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006732:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006736:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800673a:	4622      	mov	r2, r4
 800673c:	462b      	mov	r3, r5
 800673e:	1891      	adds	r1, r2, r2
 8006740:	65b9      	str	r1, [r7, #88]	; 0x58
 8006742:	415b      	adcs	r3, r3
 8006744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006746:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800674a:	4621      	mov	r1, r4
 800674c:	eb12 0801 	adds.w	r8, r2, r1
 8006750:	4629      	mov	r1, r5
 8006752:	eb43 0901 	adc.w	r9, r3, r1
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	f04f 0300 	mov.w	r3, #0
 800675e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800676a:	4690      	mov	r8, r2
 800676c:	4699      	mov	r9, r3
 800676e:	4623      	mov	r3, r4
 8006770:	eb18 0303 	adds.w	r3, r8, r3
 8006774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006778:	462b      	mov	r3, r5
 800677a:	eb49 0303 	adc.w	r3, r9, r3
 800677e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800678e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006792:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006796:	460b      	mov	r3, r1
 8006798:	18db      	adds	r3, r3, r3
 800679a:	653b      	str	r3, [r7, #80]	; 0x50
 800679c:	4613      	mov	r3, r2
 800679e:	eb42 0303 	adc.w	r3, r2, r3
 80067a2:	657b      	str	r3, [r7, #84]	; 0x54
 80067a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067ac:	f7fa fa4c 	bl	8000c48 <__aeabi_uldivmod>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4b61      	ldr	r3, [pc, #388]	; (800693c <UART_SetConfig+0x2d4>)
 80067b6:	fba3 2302 	umull	r2, r3, r3, r2
 80067ba:	095b      	lsrs	r3, r3, #5
 80067bc:	011c      	lsls	r4, r3, #4
 80067be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067d0:	4642      	mov	r2, r8
 80067d2:	464b      	mov	r3, r9
 80067d4:	1891      	adds	r1, r2, r2
 80067d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80067d8:	415b      	adcs	r3, r3
 80067da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067e0:	4641      	mov	r1, r8
 80067e2:	eb12 0a01 	adds.w	sl, r2, r1
 80067e6:	4649      	mov	r1, r9
 80067e8:	eb43 0b01 	adc.w	fp, r3, r1
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006800:	4692      	mov	sl, r2
 8006802:	469b      	mov	fp, r3
 8006804:	4643      	mov	r3, r8
 8006806:	eb1a 0303 	adds.w	r3, sl, r3
 800680a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800680e:	464b      	mov	r3, r9
 8006810:	eb4b 0303 	adc.w	r3, fp, r3
 8006814:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006824:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006828:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800682c:	460b      	mov	r3, r1
 800682e:	18db      	adds	r3, r3, r3
 8006830:	643b      	str	r3, [r7, #64]	; 0x40
 8006832:	4613      	mov	r3, r2
 8006834:	eb42 0303 	adc.w	r3, r2, r3
 8006838:	647b      	str	r3, [r7, #68]	; 0x44
 800683a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800683e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006842:	f7fa fa01 	bl	8000c48 <__aeabi_uldivmod>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4611      	mov	r1, r2
 800684c:	4b3b      	ldr	r3, [pc, #236]	; (800693c <UART_SetConfig+0x2d4>)
 800684e:	fba3 2301 	umull	r2, r3, r3, r1
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	2264      	movs	r2, #100	; 0x64
 8006856:	fb02 f303 	mul.w	r3, r2, r3
 800685a:	1acb      	subs	r3, r1, r3
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006862:	4b36      	ldr	r3, [pc, #216]	; (800693c <UART_SetConfig+0x2d4>)
 8006864:	fba3 2302 	umull	r2, r3, r3, r2
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006870:	441c      	add	r4, r3
 8006872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006876:	2200      	movs	r2, #0
 8006878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800687c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006880:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006884:	4642      	mov	r2, r8
 8006886:	464b      	mov	r3, r9
 8006888:	1891      	adds	r1, r2, r2
 800688a:	63b9      	str	r1, [r7, #56]	; 0x38
 800688c:	415b      	adcs	r3, r3
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006890:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006894:	4641      	mov	r1, r8
 8006896:	1851      	adds	r1, r2, r1
 8006898:	6339      	str	r1, [r7, #48]	; 0x30
 800689a:	4649      	mov	r1, r9
 800689c:	414b      	adcs	r3, r1
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068ac:	4659      	mov	r1, fp
 80068ae:	00cb      	lsls	r3, r1, #3
 80068b0:	4651      	mov	r1, sl
 80068b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068b6:	4651      	mov	r1, sl
 80068b8:	00ca      	lsls	r2, r1, #3
 80068ba:	4610      	mov	r0, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	4603      	mov	r3, r0
 80068c0:	4642      	mov	r2, r8
 80068c2:	189b      	adds	r3, r3, r2
 80068c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068c8:	464b      	mov	r3, r9
 80068ca:	460a      	mov	r2, r1
 80068cc:	eb42 0303 	adc.w	r3, r2, r3
 80068d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068e8:	460b      	mov	r3, r1
 80068ea:	18db      	adds	r3, r3, r3
 80068ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ee:	4613      	mov	r3, r2
 80068f0:	eb42 0303 	adc.w	r3, r2, r3
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068fe:	f7fa f9a3 	bl	8000c48 <__aeabi_uldivmod>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4b0d      	ldr	r3, [pc, #52]	; (800693c <UART_SetConfig+0x2d4>)
 8006908:	fba3 1302 	umull	r1, r3, r3, r2
 800690c:	095b      	lsrs	r3, r3, #5
 800690e:	2164      	movs	r1, #100	; 0x64
 8006910:	fb01 f303 	mul.w	r3, r1, r3
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	3332      	adds	r3, #50	; 0x32
 800691a:	4a08      	ldr	r2, [pc, #32]	; (800693c <UART_SetConfig+0x2d4>)
 800691c:	fba2 2303 	umull	r2, r3, r2, r3
 8006920:	095b      	lsrs	r3, r3, #5
 8006922:	f003 0207 	and.w	r2, r3, #7
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4422      	add	r2, r4
 800692e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006930:	e105      	b.n	8006b3e <UART_SetConfig+0x4d6>
 8006932:	bf00      	nop
 8006934:	40011000 	.word	0x40011000
 8006938:	40011400 	.word	0x40011400
 800693c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006944:	2200      	movs	r2, #0
 8006946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800694a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800694e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006952:	4642      	mov	r2, r8
 8006954:	464b      	mov	r3, r9
 8006956:	1891      	adds	r1, r2, r2
 8006958:	6239      	str	r1, [r7, #32]
 800695a:	415b      	adcs	r3, r3
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
 800695e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006962:	4641      	mov	r1, r8
 8006964:	1854      	adds	r4, r2, r1
 8006966:	4649      	mov	r1, r9
 8006968:	eb43 0501 	adc.w	r5, r3, r1
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	00eb      	lsls	r3, r5, #3
 8006976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800697a:	00e2      	lsls	r2, r4, #3
 800697c:	4614      	mov	r4, r2
 800697e:	461d      	mov	r5, r3
 8006980:	4643      	mov	r3, r8
 8006982:	18e3      	adds	r3, r4, r3
 8006984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006988:	464b      	mov	r3, r9
 800698a:	eb45 0303 	adc.w	r3, r5, r3
 800698e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800699e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069ae:	4629      	mov	r1, r5
 80069b0:	008b      	lsls	r3, r1, #2
 80069b2:	4621      	mov	r1, r4
 80069b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069b8:	4621      	mov	r1, r4
 80069ba:	008a      	lsls	r2, r1, #2
 80069bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069c0:	f7fa f942 	bl	8000c48 <__aeabi_uldivmod>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4b60      	ldr	r3, [pc, #384]	; (8006b4c <UART_SetConfig+0x4e4>)
 80069ca:	fba3 2302 	umull	r2, r3, r3, r2
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	011c      	lsls	r4, r3, #4
 80069d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069e4:	4642      	mov	r2, r8
 80069e6:	464b      	mov	r3, r9
 80069e8:	1891      	adds	r1, r2, r2
 80069ea:	61b9      	str	r1, [r7, #24]
 80069ec:	415b      	adcs	r3, r3
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069f4:	4641      	mov	r1, r8
 80069f6:	1851      	adds	r1, r2, r1
 80069f8:	6139      	str	r1, [r7, #16]
 80069fa:	4649      	mov	r1, r9
 80069fc:	414b      	adcs	r3, r1
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	00cb      	lsls	r3, r1, #3
 8006a10:	4651      	mov	r1, sl
 8006a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a16:	4651      	mov	r1, sl
 8006a18:	00ca      	lsls	r2, r1, #3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4603      	mov	r3, r0
 8006a20:	4642      	mov	r2, r8
 8006a22:	189b      	adds	r3, r3, r2
 8006a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a28:	464b      	mov	r3, r9
 8006a2a:	460a      	mov	r2, r1
 8006a2c:	eb42 0303 	adc.w	r3, r2, r3
 8006a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	f04f 0300 	mov.w	r3, #0
 8006a48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	008b      	lsls	r3, r1, #2
 8006a50:	4641      	mov	r1, r8
 8006a52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a56:	4641      	mov	r1, r8
 8006a58:	008a      	lsls	r2, r1, #2
 8006a5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a5e:	f7fa f8f3 	bl	8000c48 <__aeabi_uldivmod>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4b39      	ldr	r3, [pc, #228]	; (8006b4c <UART_SetConfig+0x4e4>)
 8006a68:	fba3 1302 	umull	r1, r3, r3, r2
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	2164      	movs	r1, #100	; 0x64
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	3332      	adds	r3, #50	; 0x32
 8006a7a:	4a34      	ldr	r2, [pc, #208]	; (8006b4c <UART_SetConfig+0x4e4>)
 8006a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a80:	095b      	lsrs	r3, r3, #5
 8006a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a86:	441c      	add	r4, r3
 8006a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	673b      	str	r3, [r7, #112]	; 0x70
 8006a90:	677a      	str	r2, [r7, #116]	; 0x74
 8006a92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a96:	4642      	mov	r2, r8
 8006a98:	464b      	mov	r3, r9
 8006a9a:	1891      	adds	r1, r2, r2
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	415b      	adcs	r3, r3
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	1851      	adds	r1, r2, r1
 8006aaa:	6039      	str	r1, [r7, #0]
 8006aac:	4649      	mov	r1, r9
 8006aae:	414b      	adcs	r3, r1
 8006ab0:	607b      	str	r3, [r7, #4]
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006abe:	4659      	mov	r1, fp
 8006ac0:	00cb      	lsls	r3, r1, #3
 8006ac2:	4651      	mov	r1, sl
 8006ac4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ac8:	4651      	mov	r1, sl
 8006aca:	00ca      	lsls	r2, r1, #3
 8006acc:	4610      	mov	r0, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	189b      	adds	r3, r3, r2
 8006ad6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ad8:	464b      	mov	r3, r9
 8006ada:	460a      	mov	r2, r1
 8006adc:	eb42 0303 	adc.w	r3, r2, r3
 8006ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	663b      	str	r3, [r7, #96]	; 0x60
 8006aec:	667a      	str	r2, [r7, #100]	; 0x64
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006afa:	4649      	mov	r1, r9
 8006afc:	008b      	lsls	r3, r1, #2
 8006afe:	4641      	mov	r1, r8
 8006b00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b04:	4641      	mov	r1, r8
 8006b06:	008a      	lsls	r2, r1, #2
 8006b08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b0c:	f7fa f89c 	bl	8000c48 <__aeabi_uldivmod>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <UART_SetConfig+0x4e4>)
 8006b16:	fba3 1302 	umull	r1, r3, r3, r2
 8006b1a:	095b      	lsrs	r3, r3, #5
 8006b1c:	2164      	movs	r1, #100	; 0x64
 8006b1e:	fb01 f303 	mul.w	r3, r1, r3
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	3332      	adds	r3, #50	; 0x32
 8006b28:	4a08      	ldr	r2, [pc, #32]	; (8006b4c <UART_SetConfig+0x4e4>)
 8006b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	f003 020f 	and.w	r2, r3, #15
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4422      	add	r2, r4
 8006b3c:	609a      	str	r2, [r3, #8]
}
 8006b3e:	bf00      	nop
 8006b40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b44:	46bd      	mov	sp, r7
 8006b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b4a:	bf00      	nop
 8006b4c:	51eb851f 	.word	0x51eb851f

08006b50 <setupESC>:
 *
 * @returns None
 */
//1. Setup ESC function
void setupESC(TIM_HandleTypeDef *HTIMx)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(HTIMx);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7fe fbf9 	bl	8005350 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_1);
 8006b5e:	2100      	movs	r1, #0
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7fe fcbf 	bl	80054e4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_1, 20000 * 0.04);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006b6e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_2);
 8006b70:	2104      	movs	r1, #4
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fe fcb6 	bl	80054e4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_2, 20000 * 0.04);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_3);
 8006b82:	2108      	movs	r1, #8
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7fe fcad 	bl	80054e4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_3, 20000 * 0.04);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006b92:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_4);
 8006b94:	210c      	movs	r1, #12
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fe fca4 	bl	80054e4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_4, 20000 * 0.04);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(2000);
 8006ba6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006baa:	f7fb febb 	bl	8002924 <HAL_Delay>
}
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <ESC_Control>:
 *
 * @returns None
 */
//2. ESC control function
void ESC_Control(TIM_HandleTypeDef *HTIMx, uint16_t Duty1,uint16_t Duty2,uint16_t Duty3,uint16_t Duty4)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	4608      	mov	r0, r1
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	817b      	strh	r3, [r7, #10]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	813b      	strh	r3, [r7, #8]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_1, Duty1); // 1000 to 2000
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	897a      	ldrh	r2, [r7, #10]
 8006bd6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_2, Duty2); // 1000 to 2000
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	893a      	ldrh	r2, [r7, #8]
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_3, Duty3); // 1000 to 2000
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	88fa      	ldrh	r2, [r7, #6]
 8006be6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_4, Duty4); // 1000 to 2000
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	8b3a      	ldrh	r2, [r7, #24]
 8006bee:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006bf0:	bf00      	nop
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <MPU6050_Init>:
 *
 * @returns 0 if initialization is successful, 1 otherwise.
 */
//1. Init MPU6050 sensor function
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af04      	add	r7, sp, #16
 8006c02:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &check, 1, TIMEOUT);
 8006c04:	2364      	movs	r3, #100	; 0x64
 8006c06:	9302      	str	r3, [sp, #8]
 8006c08:	2301      	movs	r3, #1
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	f107 030f 	add.w	r3, r7, #15
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	2301      	movs	r3, #1
 8006c14:	2275      	movs	r2, #117	; 0x75
 8006c16:	21d0      	movs	r1, #208	; 0xd0
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fc fbc7 	bl	80033ac <HAL_I2C_Mem_Read>
	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	2b68      	cmp	r3, #104	; 0x68
 8006c22:	d15b      	bne.n	8006cdc <MPU6050_Init+0xe0>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up, gyroscope based clock
		Data = MPU6050_WAKEUP << 6 | MPU6050_CLKSEL_PLLX;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &Data, 1, TIMEOUT);
 8006c28:	2364      	movs	r3, #100	; 0x64
 8006c2a:	9302      	str	r3, [sp, #8]
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	f107 030e 	add.w	r3, r7, #14
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	2301      	movs	r3, #1
 8006c38:	226b      	movs	r2, #107	; 0x6b
 8006c3a:	21d0      	movs	r1, #208	; 0xd0
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7fc fabb 	bl	80031b8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = MPU6050_SMPLRT_DIV_1;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_SMPLRT_DIV, 1, &Data, 1, TIMEOUT);
 8006c46:	2364      	movs	r3, #100	; 0x64
 8006c48:	9302      	str	r3, [sp, #8]
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	f107 030e 	add.w	r3, r7, #14
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	2301      	movs	r3, #1
 8006c56:	2219      	movs	r2, #25
 8006c58:	21d0      	movs	r1, #208	; 0xd0
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fc faac 	bl	80031b8 <HAL_I2C_Mem_Write>

		// This register configures the external Frame Synchronization (FSYNC) pin sampling
		// the Digital Low Pass Filter (DLPF) setting for both the gyroscopes and accelerometers
		Data = MPU6050_EXT_SYNC_SET << 3 | MPU6050_DLPF_CFG;
 8006c60:	2304      	movs	r3, #4
 8006c62:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_CONFIG, 1, &Data, 1, TIMEOUT);
 8006c64:	2364      	movs	r3, #100	; 0x64
 8006c66:	9302      	str	r3, [sp, #8]
 8006c68:	2301      	movs	r3, #1
 8006c6a:	9301      	str	r3, [sp, #4]
 8006c6c:	f107 030e 	add.w	r3, r7, #14
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	2301      	movs	r3, #1
 8006c74:	221a      	movs	r2, #26
 8006c76:	21d0      	movs	r1, #208	; 0xd0
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7fc fa9d 	bl	80031b8 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> +- 2000 degree/s
		Data = MPU6050_FS_SEL_2000 << 3 | 0x00;
 8006c7e:	2318      	movs	r3, #24
 8006c80:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, &Data, 1, TIMEOUT);
 8006c82:	2364      	movs	r3, #100	; 0x64
 8006c84:	9302      	str	r3, [sp, #8]
 8006c86:	2301      	movs	r3, #1
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	f107 030e 	add.w	r3, r7, #14
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	2301      	movs	r3, #1
 8006c92:	221b      	movs	r2, #27
 8006c94:	21d0      	movs	r1, #208	; 0xd0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fc fa8e 	bl	80031b8 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> +- 2g
		Data = MPU6050_AFS_SEL_2 << 3 | 0x00;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1, &Data, 1, TIMEOUT);
 8006ca0:	2364      	movs	r3, #100	; 0x64
 8006ca2:	9302      	str	r3, [sp, #8]
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	f107 030e 	add.w	r3, r7, #14
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	2301      	movs	r3, #1
 8006cb0:	221c      	movs	r2, #28
 8006cb2:	21d0      	movs	r1, #208	; 0xd0
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7fc fa7f 	bl	80031b8 <HAL_I2C_Mem_Write>

		// sets the I2C master clock speed
		Data = MPU6050_I2C_MST_CLK_400;
 8006cba:	230d      	movs	r3, #13
 8006cbc:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_MST_CTRL, 1, &Data, 1, TIMEOUT);
 8006cbe:	2364      	movs	r3, #100	; 0x64
 8006cc0:	9302      	str	r3, [sp, #8]
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	f107 030e 	add.w	r3, r7, #14
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	2301      	movs	r3, #1
 8006cce:	2224      	movs	r2, #36	; 0x24
 8006cd0:	21d0      	movs	r1, #208	; 0xd0
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fc fa70 	bl	80031b8 <HAL_I2C_Mem_Write>
		return 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e000      	b.n	8006cde <MPU6050_Init+0xe2>
	}
	return 1;
 8006cdc:	2301      	movs	r3, #1
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <MPU6050_Bypass>:
 *
 * @returns None
 */
//2.Enable Bypass MPU6050 function
void MPU6050_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b088      	sub	sp, #32
 8006cea:	af04      	add	r7, sp, #16
 8006cec:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// disable i2c master mode
	Data = 0x00;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_USER_CTRL, 1, &Data, 1, TIMEOUT);
 8006cf2:	2364      	movs	r3, #100	; 0x64
 8006cf4:	9302      	str	r3, [sp, #8]
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	9301      	str	r3, [sp, #4]
 8006cfa:	f107 030f 	add.w	r3, r7, #15
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	2301      	movs	r3, #1
 8006d02:	226a      	movs	r2, #106	; 0x6a
 8006d04:	21d0      	movs	r1, #208	; 0xd0
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fc fa56 	bl	80031b8 <HAL_I2C_Mem_Write>
	// enable i2c master bypass mode
	Data = 0x02;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_INT_PIN_CFG, 1, &Data, 1, TIMEOUT);
 8006d10:	2364      	movs	r3, #100	; 0x64
 8006d12:	9302      	str	r3, [sp, #8]
 8006d14:	2301      	movs	r3, #1
 8006d16:	9301      	str	r3, [sp, #4]
 8006d18:	f107 030f 	add.w	r3, r7, #15
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	2301      	movs	r3, #1
 8006d20:	2237      	movs	r2, #55	; 0x37
 8006d22:	21d0      	movs	r1, #208	; 0xd0
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7fc fa47 	bl	80031b8 <HAL_I2C_Mem_Write>
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <MPU6050_Master>:
 *
 * @returns None
 */
//3. Enable Master MPU6050 function
void MPU6050_Master(I2C_HandleTypeDef *I2Cx)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b088      	sub	sp, #32
 8006d36:	af04      	add	r7, sp, #16
 8006d38:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// disable i2c master bypass mode
	Data = 0x00;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_INT_PIN_CFG, 1, &Data, 1, TIMEOUT);
 8006d3e:	2364      	movs	r3, #100	; 0x64
 8006d40:	9302      	str	r3, [sp, #8]
 8006d42:	2301      	movs	r3, #1
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	f107 030f 	add.w	r3, r7, #15
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	2237      	movs	r2, #55	; 0x37
 8006d50:	21d0      	movs	r1, #208	; 0xd0
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fc fa30 	bl	80031b8 <HAL_I2C_Mem_Write>
	// enable i2c master mode
	Data = 0x20;
 8006d58:	2320      	movs	r3, #32
 8006d5a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_USER_CTRL, 1, &Data, 1, TIMEOUT);
 8006d5c:	2364      	movs	r3, #100	; 0x64
 8006d5e:	9302      	str	r3, [sp, #8]
 8006d60:	2301      	movs	r3, #1
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	f107 030f 	add.w	r3, r7, #15
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	226a      	movs	r2, #106	; 0x6a
 8006d6e:	21d0      	movs	r1, #208	; 0xd0
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7fc fa21 	bl	80031b8 <HAL_I2C_Mem_Write>
}
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <MPU6050_Addslave>:
 *
 * @returns None
 */
//4. Configure the MPU6050 to automatically read the magnetometer
void MPU6050_Addslave(I2C_HandleTypeDef *I2Cx)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b088      	sub	sp, #32
 8006d82:	af04      	add	r7, sp, #16
 8006d84:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// slave 0 i2c address, read mode
	Data = HMC5883L_ADDRESS | 0x80;
 8006d86:	239e      	movs	r3, #158	; 0x9e
 8006d88:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_SLV0_ADDR, 1, &Data, 1, TIMEOUT);
 8006d8a:	2364      	movs	r3, #100	; 0x64
 8006d8c:	9302      	str	r3, [sp, #8]
 8006d8e:	2301      	movs	r3, #1
 8006d90:	9301      	str	r3, [sp, #4]
 8006d92:	f107 030f 	add.w	r3, r7, #15
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	2301      	movs	r3, #1
 8006d9a:	2225      	movs	r2, #37	; 0x25
 8006d9c:	21d0      	movs	r1, #208	; 0xd0
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fc fa0a 	bl	80031b8 <HAL_I2C_Mem_Write>
	// slave 0 register = 0x03 (x axis)
	Data = HMC5883L_DATAX_H;
 8006da4:	2303      	movs	r3, #3
 8006da6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_SLV0_REG, 1, &Data, 1, TIMEOUT);
 8006da8:	2364      	movs	r3, #100	; 0x64
 8006daa:	9302      	str	r3, [sp, #8]
 8006dac:	2301      	movs	r3, #1
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	f107 030f 	add.w	r3, r7, #15
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	2301      	movs	r3, #1
 8006db8:	2226      	movs	r2, #38	; 0x26
 8006dba:	21d0      	movs	r1, #208	; 0xd0
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7fc f9fb 	bl	80031b8 <HAL_I2C_Mem_Write>
	// slave 0 transfer size = 6, enabled
	Data = 0x06 | 0x80;
 8006dc2:	2386      	movs	r3, #134	; 0x86
 8006dc4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_SLV0_CTRL, 1, &Data, 1, TIMEOUT);
 8006dc6:	2364      	movs	r3, #100	; 0x64
 8006dc8:	9302      	str	r3, [sp, #8]
 8006dca:	2301      	movs	r3, #1
 8006dcc:	9301      	str	r3, [sp, #4]
 8006dce:	f107 030f 	add.w	r3, r7, #15
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	2227      	movs	r2, #39	; 0x27
 8006dd8:	21d0      	movs	r1, #208	; 0xd0
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fc f9ec 	bl	80031b8 <HAL_I2C_Mem_Write>
	// enable slave 0 delay
	Data = MPU6050_I2C_SLV0_DLY_EN;
 8006de0:	2301      	movs	r3, #1
 8006de2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_MST_DELAY_CTRL, 1, &Data, 1, TIMEOUT);
 8006de4:	2364      	movs	r3, #100	; 0x64
 8006de6:	9302      	str	r3, [sp, #8]
 8006de8:	2301      	movs	r3, #1
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	f107 030f 	add.w	r3, r7, #15
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	2301      	movs	r3, #1
 8006df4:	2267      	movs	r2, #103	; 0x67
 8006df6:	21d0      	movs	r1, #208	; 0xd0
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7fc f9dd 	bl	80031b8 <HAL_I2C_Mem_Write>
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <MPU6050_Read_All>:
 *
 * @returns None
 */
//5. Read data from MPU6050
void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08c      	sub	sp, #48	; 0x30
 8006e0c:	af04      	add	r7, sp, #16
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[20];

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, Rec_Data, 20, TIMEOUT);
 8006e12:	2364      	movs	r3, #100	; 0x64
 8006e14:	9302      	str	r3, [sp, #8]
 8006e16:	2314      	movs	r3, #20
 8006e18:	9301      	str	r3, [sp, #4]
 8006e1a:	f107 030c 	add.w	r3, r7, #12
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	2301      	movs	r3, #1
 8006e22:	223b      	movs	r2, #59	; 0x3b
 8006e24:	21d0      	movs	r1, #208	; 0xd0
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fc fac0 	bl	80033ac <HAL_I2C_Mem_Read>

	DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8006e2c:	7b3b      	ldrb	r3, [r7, #12]
 8006e2e:	021b      	lsls	r3, r3, #8
 8006e30:	b21a      	sxth	r2, r3
 8006e32:	7b7b      	ldrb	r3, [r7, #13]
 8006e34:	b21b      	sxth	r3, r3
 8006e36:	4313      	orrs	r3, r2
 8006e38:	b21a      	sxth	r2, r3
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	b21a      	sxth	r2, r3
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	b21b      	sxth	r3, r3
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	b21a      	sxth	r2, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8006e50:	7c3b      	ldrb	r3, [r7, #16]
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	b21a      	sxth	r2, r3
 8006e56:	7c7b      	ldrb	r3, [r7, #17]
 8006e58:	b21b      	sxth	r3, r3
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	b21a      	sxth	r2, r3
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	809a      	strh	r2, [r3, #4]

	//DataStruct->Temp_RAW = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);

	DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8006e62:	7d3b      	ldrb	r3, [r7, #20]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	b21a      	sxth	r2, r3
 8006e68:	7d7b      	ldrb	r3, [r7, #21]
 8006e6a:	b21b      	sxth	r3, r3
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	b21a      	sxth	r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8006e74:	7dbb      	ldrb	r3, [r7, #22]
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	b21a      	sxth	r2, r3
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
 8006e7c:	b21b      	sxth	r3, r3
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	b21a      	sxth	r2, r3
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	82da      	strh	r2, [r3, #22]
	DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8006e86:	7e3b      	ldrb	r3, [r7, #24]
 8006e88:	021b      	lsls	r3, r3, #8
 8006e8a:	b21a      	sxth	r2, r3
 8006e8c:	7e7b      	ldrb	r3, [r7, #25]
 8006e8e:	b21b      	sxth	r3, r3
 8006e90:	4313      	orrs	r3, r2
 8006e92:	b21a      	sxth	r2, r3
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	831a      	strh	r2, [r3, #24]

	DataStruct->Magn_X_RAW = (int16_t)(Rec_Data[14] << 8 | Rec_Data[15]);
 8006e98:	7ebb      	ldrb	r3, [r7, #26]
 8006e9a:	021b      	lsls	r3, r3, #8
 8006e9c:	b21a      	sxth	r2, r3
 8006e9e:	7efb      	ldrb	r3, [r7, #27]
 8006ea0:	b21b      	sxth	r3, r3
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	b21a      	sxth	r2, r3
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	851a      	strh	r2, [r3, #40]	; 0x28
	DataStruct->Magn_Z_RAW = (int16_t)(Rec_Data[16] << 8 | Rec_Data[17]);
 8006eaa:	7f3b      	ldrb	r3, [r7, #28]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	b21a      	sxth	r2, r3
 8006eb0:	7f7b      	ldrb	r3, [r7, #29]
 8006eb2:	b21b      	sxth	r3, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	b21a      	sxth	r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Magn_Y_RAW = (int16_t)(Rec_Data[18] << 8 | Rec_Data[19]);
 8006ebc:	7fbb      	ldrb	r3, [r7, #30]
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	b21a      	sxth	r2, r3
 8006ec2:	7ffb      	ldrb	r3, [r7, #31]
 8006ec4:	b21b      	sxth	r3, r3
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	b21a      	sxth	r2, r3
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

	DataStruct->Ax = DataStruct->Accel_X_RAW / MPU6050_ACCE_SENS_2;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ed4:	ee07 3a90 	vmov	s15, r3
 8006ed8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006edc:	eddf 6a56 	vldr	s13, [pc, #344]	; 8007038 <MPU6050_Read_All+0x230>
 8006ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / MPU6050_ACCE_SENS_2;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ef0:	ee07 3a90 	vmov	s15, r3
 8006ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ef8:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007038 <MPU6050_Read_All+0x230>
 8006efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Accel_Z_RAW / MPU6050_ACCE_SENS_2;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f0c:	ee07 3a90 	vmov	s15, r3
 8006f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f14:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007038 <MPU6050_Read_All+0x230>
 8006f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	edc3 7a04 	vstr	s15, [r3, #16]

	//DataStruct->Temperature = DataStruct->Temp_RAW / 340.0 + 36.53;

	DataStruct->Gx = DataStruct->Gyro_X_RAW / MPU6050_GYRO_SENS_2000 * DEG_TO_RAD;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006f28:	ee07 3a90 	vmov	s15, r3
 8006f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f30:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800703c <MPU6050_Read_All+0x234>
 8006f34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006f38:	ee16 0a90 	vmov	r0, s13
 8006f3c:	f7f9 fb04 	bl	8000548 <__aeabi_f2d>
 8006f40:	a33b      	add	r3, pc, #236	; (adr r3, 8007030 <MPU6050_Read_All+0x228>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f7f9 fb57 	bl	80005f8 <__aeabi_dmul>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	f7f9 fe29 	bl	8000ba8 <__aeabi_d2f>
 8006f56:	4602      	mov	r2, r0
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	61da      	str	r2, [r3, #28]
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / MPU6050_GYRO_SENS_2000 * DEG_TO_RAD;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f6a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800703c <MPU6050_Read_All+0x234>
 8006f6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006f72:	ee16 0a90 	vmov	r0, s13
 8006f76:	f7f9 fae7 	bl	8000548 <__aeabi_f2d>
 8006f7a:	a32d      	add	r3, pc, #180	; (adr r3, 8007030 <MPU6050_Read_All+0x228>)
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f7f9 fb3a 	bl	80005f8 <__aeabi_dmul>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	f7f9 fe0c 	bl	8000ba8 <__aeabi_d2f>
 8006f90:	4602      	mov	r2, r0
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	621a      	str	r2, [r3, #32]
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / MPU6050_GYRO_SENS_2000 * DEG_TO_RAD;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fa4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800703c <MPU6050_Read_All+0x234>
 8006fa8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006fac:	ee16 0a90 	vmov	r0, s13
 8006fb0:	f7f9 faca 	bl	8000548 <__aeabi_f2d>
 8006fb4:	a31e      	add	r3, pc, #120	; (adr r3, 8007030 <MPU6050_Read_All+0x228>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f7f9 fb1d 	bl	80005f8 <__aeabi_dmul>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f7f9 fdef 	bl	8000ba8 <__aeabi_d2f>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	625a      	str	r2, [r3, #36]	; 0x24

	DataStruct->Mx = DataStruct->Magn_X_RAW / HMC5883L_MAGN_SENS_1P3;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fde:	eddf 6a18 	vldr	s13, [pc, #96]	; 8007040 <MPU6050_Read_All+0x238>
 8006fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->My = DataStruct->Magn_Y_RAW / HMC5883L_MAGN_SENS_1P3;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ffa:	eddf 6a11 	vldr	s13, [pc, #68]	; 8007040 <MPU6050_Read_All+0x238>
 8006ffe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Mz = DataStruct->Magn_Z_RAW / HMC5883L_MAGN_SENS_1P3;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007016:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8007040 <MPU6050_Read_All+0x238>
 800701a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8007024:	bf00      	nop
 8007026:	3720      	adds	r7, #32
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	f3af 8000 	nop.w
 8007030:	a252dd11 	.word	0xa252dd11
 8007034:	3f91df46 	.word	0x3f91df46
 8007038:	46800000 	.word	0x46800000
 800703c:	41833333 	.word	0x41833333
 8007040:	44884000 	.word	0x44884000

08007044 <HMC5883L_Init>:
 *
 * @returns None
 */
//6. Init HMC5883L sensor
void HMC5883L_Init(I2C_HandleTypeDef *I2Cx)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af04      	add	r7, sp, #16
 800704a:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// write CONFIG_A register
	Data = HMC5883L_AVERAGING_1 << 5 | HMC5883L_RATE_75 << 2 | HMC5883L_BIAS_NORMAL;
 800704c:	2318      	movs	r3, #24
 800704e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDR, HMC5883L_CONFIG_A, 1, &Data, 1, TIMEOUT);
 8007050:	2364      	movs	r3, #100	; 0x64
 8007052:	9302      	str	r3, [sp, #8]
 8007054:	2301      	movs	r3, #1
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	f107 030f 	add.w	r3, r7, #15
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	2301      	movs	r3, #1
 8007060:	2200      	movs	r2, #0
 8007062:	213c      	movs	r1, #60	; 0x3c
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7fc f8a7 	bl	80031b8 <HAL_I2C_Mem_Write>
	// write CONFIG_B register
	Data = HMC5883L_SEL_1P3 << 5 | 0x00;
 800706a:	2320      	movs	r3, #32
 800706c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDR, HMC5883L_CONFIG_B, 1, &Data, 1, TIMEOUT);
 800706e:	2364      	movs	r3, #100	; 0x64
 8007070:	9302      	str	r3, [sp, #8]
 8007072:	2301      	movs	r3, #1
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	f107 030f 	add.w	r3, r7, #15
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	2301      	movs	r3, #1
 800707e:	2201      	movs	r2, #1
 8007080:	213c      	movs	r1, #60	; 0x3c
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fc f898 	bl	80031b8 <HAL_I2C_Mem_Write>
	// write MODE register
	Data = HMC5883L_MODE_CONTINUOUS;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDR, HMC5883L_MODE, 1, &Data, 1, TIMEOUT);
 800708c:	2364      	movs	r3, #100	; 0x64
 800708e:	9302      	str	r3, [sp, #8]
 8007090:	2301      	movs	r3, #1
 8007092:	9301      	str	r3, [sp, #4]
 8007094:	f107 030f 	add.w	r3, r7, #15
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	2301      	movs	r3, #1
 800709c:	2202      	movs	r2, #2
 800709e:	213c      	movs	r1, #60	; 0x3c
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7fc f889 	bl	80031b8 <HAL_I2C_Mem_Write>
}
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <MPU2Angle>:
 *
 * @returns None
 */
//14. Calculator Euler angle
void MPU2Angle(MPU6050_t DataStruct, Euler_t *Angle)
{
 80070ae:	b084      	sub	sp, #16
 80070b0:	b5b0      	push	{r4, r5, r7, lr}
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	f107 0410 	add.w	r4, r7, #16
 80070b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Angle->roll 	= atan2(DataStruct.Ay, DataStruct.Az);
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7f9 fa42 	bl	8000548 <__aeabi_f2d>
 80070c4:	4604      	mov	r4, r0
 80070c6:	460d      	mov	r5, r1
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7f9 fa3c 	bl	8000548 <__aeabi_f2d>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	ec43 2b11 	vmov	d1, r2, r3
 80070d8:	ec45 4b10 	vmov	d0, r4, r5
 80070dc:	f002 fcd4 	bl	8009a88 <atan2>
 80070e0:	ec53 2b10 	vmov	r2, r3, d0
 80070e4:	4610      	mov	r0, r2
 80070e6:	4619      	mov	r1, r3
 80070e8:	f7f9 fd5e 	bl	8000ba8 <__aeabi_d2f>
 80070ec:	4602      	mov	r2, r0
 80070ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070f0:	601a      	str	r2, [r3, #0]
	Angle->pitch 	= atan2(-DataStruct.Ax, sqrt(DataStruct.Ay*DataStruct.Ay + DataStruct.Az*DataStruct.Az));
 80070f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80070f6:	eef1 7a67 	vneg.f32	s15, s15
 80070fa:	ee17 3a90 	vmov	r3, s15
 80070fe:	4618      	mov	r0, r3
 8007100:	f7f9 fa22 	bl	8000548 <__aeabi_f2d>
 8007104:	4604      	mov	r4, r0
 8007106:	460d      	mov	r5, r1
 8007108:	ed97 7a07 	vldr	s14, [r7, #28]
 800710c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007110:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007114:	edd7 6a08 	vldr	s13, [r7, #32]
 8007118:	edd7 7a08 	vldr	s15, [r7, #32]
 800711c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007124:	ee17 0a90 	vmov	r0, s15
 8007128:	f7f9 fa0e 	bl	8000548 <__aeabi_f2d>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	ec43 2b10 	vmov	d0, r2, r3
 8007134:	f002 fcaa 	bl	8009a8c <sqrt>
 8007138:	eeb0 7a40 	vmov.f32	s14, s0
 800713c:	eef0 7a60 	vmov.f32	s15, s1
 8007140:	eeb0 1a47 	vmov.f32	s2, s14
 8007144:	eef0 1a67 	vmov.f32	s3, s15
 8007148:	ec45 4b10 	vmov	d0, r4, r5
 800714c:	f002 fc9c 	bl	8009a88 <atan2>
 8007150:	ec53 2b10 	vmov	r2, r3, d0
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	f7f9 fd26 	bl	8000ba8 <__aeabi_d2f>
 800715c:	4602      	mov	r2, r0
 800715e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007160:	605a      	str	r2, [r3, #4]
	Angle->yaw		= 0;
 8007162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	609a      	str	r2, [r3, #8]
}
 800716a:	bf00      	nop
 800716c:	46bd      	mov	sp, r7
 800716e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007172:	b004      	add	sp, #16
 8007174:	4770      	bx	lr

08007176 <OffsetAngle>:
 *
 * @returns None
 */
//15. Offset euler angle
void OffsetAngle(Euler_t *Angle, Euler_t Offset)
{
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	eef0 6a40 	vmov.f32	s13, s0
 8007182:	eeb0 7a60 	vmov.f32	s14, s1
 8007186:	eef0 7a41 	vmov.f32	s15, s2
 800718a:	edc7 6a00 	vstr	s13, [r7]
 800718e:	ed87 7a01 	vstr	s14, [r7, #4]
 8007192:	edc7 7a02 	vstr	s15, [r7, #8]
    Angle->roll += Offset.roll;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	ed93 7a00 	vldr	s14, [r3]
 800719c:	edd7 7a00 	vldr	s15, [r7]
 80071a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	edc3 7a00 	vstr	s15, [r3]
    Angle->pitch += Offset.pitch;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80071b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80071b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	edc3 7a01 	vstr	s15, [r3, #4]
    Angle->yaw += Offset.yaw;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80071c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80071c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80071d2:	bf00      	nop
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <compute_control>:
 *
 * @returns None
 */
//1. LQR controller
void compute_control(double x[6], double K[4][6], double u[4])
{
 80071de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e0:	b089      	sub	sp, #36	; 0x24
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	607a      	str	r2, [r7, #4]
    int m = 4, n = 6;
 80071ea:	2304      	movs	r3, #4
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	2306      	movs	r3, #6
 80071f0:	613b      	str	r3, [r7, #16]
    // Compute u = -K * x
    for (int i = 0; i < m; i++)
 80071f2:	2300      	movs	r3, #0
 80071f4:	61fb      	str	r3, [r7, #28]
 80071f6:	e039      	b.n	800726c <compute_control+0x8e>
    {
        for (int j = 0; j < n; j++)
 80071f8:	2300      	movs	r3, #0
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	e02f      	b.n	800725e <compute_control+0x80>
        {
            u[i] += K[i][j] * x[j];
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	4413      	add	r3, r2
 8007206:	e9d3 4500 	ldrd	r4, r5, [r3]
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	4613      	mov	r3, r2
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	4413      	add	r3, r2
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	461a      	mov	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	441a      	add	r2, r3
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	4413      	add	r3, r2
 8007220:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f7f9 f9e2 	bl	80005f8 <__aeabi_dmul>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4610      	mov	r0, r2
 800723a:	4619      	mov	r1, r3
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	18d6      	adds	r6, r2, r3
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4620      	mov	r0, r4
 800724a:	4629      	mov	r1, r5
 800724c:	f7f9 f81e 	bl	800028c <__adddf3>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	e9c6 2300 	strd	r2, r3, [r6]
        for (int j = 0; j < n; j++)
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	3301      	adds	r3, #1
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	429a      	cmp	r2, r3
 8007264:	dbcb      	blt.n	80071fe <compute_control+0x20>
    for (int i = 0; i < m; i++)
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	3301      	adds	r3, #1
 800726a:	61fb      	str	r3, [r7, #28]
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	429a      	cmp	r2, r3
 8007272:	dbc1      	blt.n	80071f8 <compute_control+0x1a>
        }
    }
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	3724      	adds	r7, #36	; 0x24
 800727a:	46bd      	mov	sp, r7
 800727c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007280 <Lowpass4MPU>:
	filter->ePow = (1-exp(-DELTA_T * 2 * PI * iCutOffFrequency));
	filter->out += (in - filter->out) * filter->ePow;
}
//2. Lowpass filter for Accel
void Lowpass4MPU(MPU6050_t input,MPU6050_t *output)
{
 8007280:	b084      	sub	sp, #16
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	f107 0c10 	add.w	ip, r7, #16
 800728c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	float ePow_Accel = 0.0609;
 8007290:	4b2a      	ldr	r3, [pc, #168]	; (800733c <Lowpass4MPU+0xbc>)
 8007292:	607b      	str	r3, [r7, #4]
	float ePow_Gyro  = 0.9190;
 8007294:	4b2a      	ldr	r3, [pc, #168]	; (8007340 <Lowpass4MPU+0xc0>)
 8007296:	603b      	str	r3, [r7, #0]
//	float ePow_Magn	= 1-exp(-DELTA_T * 2 * PI * f3);

	output->Ax += (input.Ax - output->Ax) * ePow_Accel;
 8007298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800729a:	ed93 7a02 	vldr	s14, [r3, #8]
 800729e:	edd7 6a06 	vldr	s13, [r7, #24]
 80072a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80072a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80072ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80072b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ba:	edc3 7a02 	vstr	s15, [r3, #8]
	output->Ay += (input.Ay - output->Ay) * ePow_Accel;
 80072be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072c0:	ed93 7a03 	vldr	s14, [r3, #12]
 80072c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80072ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80072d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80072d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072e0:	edc3 7a03 	vstr	s15, [r3, #12]
	output->Az += (input.Az - output->Az) * ePow_Accel;
 80072e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80072ea:	edd7 6a08 	vldr	s13, [r7, #32]
 80072ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80072f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80072f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80072fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007306:	edc3 7a04 	vstr	s15, [r3, #16]

//	output->Ax = input.Ax;
//	output->Ay = input.Ay;
//	output->Az = input.Az;

	output->Gx = input.Gx;
 800730a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800730c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800730e:	61da      	str	r2, [r3, #28]
	output->Gy = input.Gy;
 8007310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007314:	621a      	str	r2, [r3, #32]
	output->Gz = input.Gz;
 8007316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800731a:	625a      	str	r2, [r3, #36]	; 0x24

	output->Mx = input.Mx;
 800731c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800731e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007320:	631a      	str	r2, [r3, #48]	; 0x30
	output->My = input.My;
 8007322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007326:	635a      	str	r2, [r3, #52]	; 0x34
	output->Mz = input.Mz;
 8007328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800732a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800732c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	b004      	add	sp, #16
 800733a:	4770      	bx	lr
 800733c:	3d797247 	.word	0x3d797247
 8007340:	3f6b4396 	.word	0x3f6b4396

08007344 <quat_mult>:
 *
 * @returns The product of the two quaternions.
 */
//1. Multiply two quaternions and return a copy of the result, prod = L * R
Quaternion_t quat_mult(Quaternion_t L, Quaternion_t R)
{
 8007344:	b490      	push	{r4, r7}
 8007346:	b094      	sub	sp, #80	; 0x50
 8007348:	af00      	add	r7, sp, #0
 800734a:	eeb0 4a40 	vmov.f32	s8, s0
 800734e:	eef0 4a60 	vmov.f32	s9, s1
 8007352:	eeb0 5a41 	vmov.f32	s10, s2
 8007356:	eef0 5a61 	vmov.f32	s11, s3
 800735a:	eeb0 6a42 	vmov.f32	s12, s4
 800735e:	eef0 6a62 	vmov.f32	s13, s5
 8007362:	eeb0 7a43 	vmov.f32	s14, s6
 8007366:	eef0 7a63 	vmov.f32	s15, s7
 800736a:	ed87 4a08 	vstr	s8, [r7, #32]
 800736e:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8007372:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8007376:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800737a:	ed87 6a04 	vstr	s12, [r7, #16]
 800737e:	edc7 6a05 	vstr	s13, [r7, #20]
 8007382:	ed87 7a06 	vstr	s14, [r7, #24]
 8007386:	edc7 7a07 	vstr	s15, [r7, #28]
    Quaternion_t product;
    product.q1 = (L.q1 * R.q1) - (L.q2 * R.q2) - (L.q3 * R.q3) - (L.q4 * R.q4);
 800738a:	ed97 7a08 	vldr	s14, [r7, #32]
 800738e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007396:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800739a:	edd7 7a05 	vldr	s15, [r7, #20]
 800739e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80073a6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80073aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80073ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80073b6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80073ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80073be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073c6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
 80073ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80073ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80073d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073d6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80073da:	edd7 7a04 	vldr	s15, [r7, #16]
 80073de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073e6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80073ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80073ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80073fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80073fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007406:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
 800740a:	ed97 7a08 	vldr	s14, [r7, #32]
 800740e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007412:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007416:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800741a:	edd7 7a07 	vldr	s15, [r7, #28]
 800741e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007422:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007426:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800742a:	edd7 7a04 	vldr	s15, [r7, #16]
 800742e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007436:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800743a:	edd7 7a05 	vldr	s15, [r7, #20]
 800743e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007446:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
 800744a:	ed97 7a08 	vldr	s14, [r7, #32]
 800744e:	edd7 7a07 	vldr	s15, [r7, #28]
 8007452:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007456:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800745a:	edd7 7a06 	vldr	s15, [r7, #24]
 800745e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007462:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007466:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800746a:	edd7 7a05 	vldr	s15, [r7, #20]
 800746e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007472:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007476:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800747a:	edd7 7a04 	vldr	s15, [r7, #16]
 800747e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007486:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    return product;
 800748a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800748e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007498:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800749a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800749c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800749e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a0:	ee06 0a10 	vmov	s12, r0
 80074a4:	ee06 1a90 	vmov	s13, r1
 80074a8:	ee07 2a10 	vmov	s14, r2
 80074ac:	ee07 3a90 	vmov	s15, r3
}
 80074b0:	eeb0 0a46 	vmov.f32	s0, s12
 80074b4:	eef0 0a66 	vmov.f32	s1, s13
 80074b8:	eeb0 1a47 	vmov.f32	s2, s14
 80074bc:	eef0 1a67 	vmov.f32	s3, s15
 80074c0:	3750      	adds	r7, #80	; 0x50
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc90      	pop	{r4, r7}
 80074c6:	4770      	bx	lr

080074c8 <quat_scalar>:
 *
 * @returns None
 */
//2. Multiply a reference of a quaternion by a scalar, q = s*q
void quat_scalar(Quaternion_t *q, float scalar)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	ed87 0a00 	vstr	s0, [r7]
    q->q1 *= scalar;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	ed93 7a00 	vldr	s14, [r3]
 80074da:	edd7 7a00 	vldr	s15, [r7]
 80074de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	edc3 7a00 	vstr	s15, [r3]
    q->q2 *= scalar;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80074ee:	edd7 7a00 	vldr	s15, [r7]
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	edc3 7a01 	vstr	s15, [r3, #4]
    q->q3 *= scalar;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8007502:	edd7 7a00 	vldr	s15, [r7]
 8007506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	edc3 7a02 	vstr	s15, [r3, #8]
    q->q4 *= scalar;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	ed93 7a03 	vldr	s14, [r3, #12]
 8007516:	edd7 7a00 	vldr	s15, [r7]
 800751a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <quat_add>:
 *
 * @returns None
 */
//3. Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
void quat_add(Quaternion_t *Sum, Quaternion_t L, Quaternion_t R)
{
 8007530:	b480      	push	{r7}
 8007532:	b08b      	sub	sp, #44	; 0x2c
 8007534:	af00      	add	r7, sp, #0
 8007536:	6278      	str	r0, [r7, #36]	; 0x24
 8007538:	eeb0 4a40 	vmov.f32	s8, s0
 800753c:	eef0 4a60 	vmov.f32	s9, s1
 8007540:	eeb0 5a41 	vmov.f32	s10, s2
 8007544:	eef0 5a61 	vmov.f32	s11, s3
 8007548:	eeb0 6a42 	vmov.f32	s12, s4
 800754c:	eef0 6a62 	vmov.f32	s13, s5
 8007550:	eeb0 7a43 	vmov.f32	s14, s6
 8007554:	eef0 7a63 	vmov.f32	s15, s7
 8007558:	ed87 4a05 	vstr	s8, [r7, #20]
 800755c:	edc7 4a06 	vstr	s9, [r7, #24]
 8007560:	ed87 5a07 	vstr	s10, [r7, #28]
 8007564:	edc7 5a08 	vstr	s11, [r7, #32]
 8007568:	ed87 6a01 	vstr	s12, [r7, #4]
 800756c:	edc7 6a02 	vstr	s13, [r7, #8]
 8007570:	ed87 7a03 	vstr	s14, [r7, #12]
 8007574:	edc7 7a04 	vstr	s15, [r7, #16]
    Sum->q1 = L.q1 + R.q1;
 8007578:	ed97 7a05 	vldr	s14, [r7, #20]
 800757c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	edc3 7a00 	vstr	s15, [r3]
    Sum->q2 = L.q2 + R.q2;
 800758a:	ed97 7a06 	vldr	s14, [r7, #24]
 800758e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	edc3 7a01 	vstr	s15, [r3, #4]
    Sum->q3 = L.q3 + R.q3;
 800759c:	ed97 7a07 	vldr	s14, [r7, #28]
 80075a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80075a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	edc3 7a02 	vstr	s15, [r3, #8]
    Sum->q4 = L.q4 + R.q4;
 80075ae:	ed97 7a08 	vldr	s14, [r7, #32]
 80075b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80075b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80075c0:	bf00      	nop
 80075c2:	372c      	adds	r7, #44	; 0x2c
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <quat_sub>:
 *
 * @returns None
 */
//4. Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
void quat_sub(Quaternion_t *Sum, Quaternion_t L, Quaternion_t R)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b08b      	sub	sp, #44	; 0x2c
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6278      	str	r0, [r7, #36]	; 0x24
 80075d4:	eeb0 4a40 	vmov.f32	s8, s0
 80075d8:	eef0 4a60 	vmov.f32	s9, s1
 80075dc:	eeb0 5a41 	vmov.f32	s10, s2
 80075e0:	eef0 5a61 	vmov.f32	s11, s3
 80075e4:	eeb0 6a42 	vmov.f32	s12, s4
 80075e8:	eef0 6a62 	vmov.f32	s13, s5
 80075ec:	eeb0 7a43 	vmov.f32	s14, s6
 80075f0:	eef0 7a63 	vmov.f32	s15, s7
 80075f4:	ed87 4a05 	vstr	s8, [r7, #20]
 80075f8:	edc7 4a06 	vstr	s9, [r7, #24]
 80075fc:	ed87 5a07 	vstr	s10, [r7, #28]
 8007600:	edc7 5a08 	vstr	s11, [r7, #32]
 8007604:	ed87 6a01 	vstr	s12, [r7, #4]
 8007608:	edc7 6a02 	vstr	s13, [r7, #8]
 800760c:	ed87 7a03 	vstr	s14, [r7, #12]
 8007610:	edc7 7a04 	vstr	s15, [r7, #16]
    Sum->q1 = L.q1 - R.q1;
 8007614:	ed97 7a05 	vldr	s14, [r7, #20]
 8007618:	edd7 7a01 	vldr	s15, [r7, #4]
 800761c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	edc3 7a00 	vstr	s15, [r3]
    Sum->q2 = L.q2 - R.q2;
 8007626:	ed97 7a06 	vldr	s14, [r7, #24]
 800762a:	edd7 7a02 	vldr	s15, [r7, #8]
 800762e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	edc3 7a01 	vstr	s15, [r3, #4]
    Sum->q3 = L.q3 - R.q3;
 8007638:	ed97 7a07 	vldr	s14, [r7, #28]
 800763c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	edc3 7a02 	vstr	s15, [r3, #8]
    Sum->q4 = L.q4 - R.q4;
 800764a:	ed97 7a08 	vldr	s14, [r7, #32]
 800764e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800765c:	bf00      	nop
 800765e:	372c      	adds	r7, #44	; 0x2c
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <quat_Norm>:
 *
 * @returns The norm of the quaternion.
 */
//6. norm of a quaternion is the same as a complex number
float quat_Norm(Quaternion_t q)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	eeb0 6a40 	vmov.f32	s12, s0
 8007672:	eef0 6a60 	vmov.f32	s13, s1
 8007676:	eeb0 7a41 	vmov.f32	s14, s2
 800767a:	eef0 7a61 	vmov.f32	s15, s3
 800767e:	ed87 6a00 	vstr	s12, [r7]
 8007682:	edc7 6a01 	vstr	s13, [r7, #4]
 8007686:	ed87 7a02 	vstr	s14, [r7, #8]
 800768a:	edc7 7a03 	vstr	s15, [r7, #12]
    return sqrt(q.q1 * q.q1 + q.q2 * q.q2 + q.q3 * q.q3 + q.q4 * q.q4);
 800768e:	ed97 7a00 	vldr	s14, [r7]
 8007692:	edd7 7a00 	vldr	s15, [r7]
 8007696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800769a:	edd7 6a01 	vldr	s13, [r7, #4]
 800769e:	edd7 7a01 	vldr	s15, [r7, #4]
 80076a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076aa:	edd7 6a02 	vldr	s13, [r7, #8]
 80076ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80076b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076ba:	edd7 6a03 	vldr	s13, [r7, #12]
 80076be:	edd7 7a03 	vldr	s15, [r7, #12]
 80076c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076ca:	ee17 0a90 	vmov	r0, s15
 80076ce:	f7f8 ff3b 	bl	8000548 <__aeabi_f2d>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	ec43 2b10 	vmov	d0, r2, r3
 80076da:	f002 f9d7 	bl	8009a8c <sqrt>
 80076de:	ec53 2b10 	vmov	r2, r3, d0
 80076e2:	4610      	mov	r0, r2
 80076e4:	4619      	mov	r1, r3
 80076e6:	f7f9 fa5f 	bl	8000ba8 <__aeabi_d2f>
 80076ea:	4603      	mov	r3, r0
 80076ec:	ee07 3a90 	vmov	s15, r3
}
 80076f0:	eeb0 0a67 	vmov.f32	s0, s15
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <quat_Normalization>:
 *
 * @returns None
 */
//7. Normalizes pointer q by calling quat_Norm(q),
void quat_Normalization(Quaternion_t *q)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
    float norm = quat_Norm(*q);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	ed93 6a00 	vldr	s12, [r3]
 8007708:	edd3 6a01 	vldr	s13, [r3, #4]
 800770c:	ed93 7a02 	vldr	s14, [r3, #8]
 8007710:	edd3 7a03 	vldr	s15, [r3, #12]
 8007714:	eeb0 0a46 	vmov.f32	s0, s12
 8007718:	eef0 0a66 	vmov.f32	s1, s13
 800771c:	eeb0 1a47 	vmov.f32	s2, s14
 8007720:	eef0 1a67 	vmov.f32	s3, s15
 8007724:	f7ff ffa0 	bl	8007668 <quat_Norm>
 8007728:	ed87 0a03 	vstr	s0, [r7, #12]
    q->q1 /= norm;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	edd3 6a00 	vldr	s13, [r3]
 8007732:	ed97 7a03 	vldr	s14, [r7, #12]
 8007736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	edc3 7a00 	vstr	s15, [r3]
    q->q2 /= norm;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	edd3 6a01 	vldr	s13, [r3, #4]
 8007746:	ed97 7a03 	vldr	s14, [r7, #12]
 800774a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	edc3 7a01 	vstr	s15, [r3, #4]
    q->q3 /= norm;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	edd3 6a02 	vldr	s13, [r3, #8]
 800775a:	ed97 7a03 	vldr	s14, [r7, #12]
 800775e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	edc3 7a02 	vstr	s15, [r3, #8]
    q->q4 /= norm;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	edd3 6a03 	vldr	s13, [r3, #12]
 800776e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <Madgwick_imu>:
 *
 * @returns None
 */
//9. Madgwick filter for IMU
void Madgwick_imu(MPU6050_t *DataStruct, Quaternion_t *q_est)
{
 8007784:	b5b0      	push	{r4, r5, r7, lr}
 8007786:	b0ac      	sub	sp, #176	; 0xb0
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
    float ax = DataStruct->Ax;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    float ay = DataStruct->Ay;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    float az = DataStruct->Az;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    float gx = DataStruct->Gx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float gy = DataStruct->Gy;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float gz = DataStruct->Gz;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    // Variables and constants
    float F_g[3] = {0};    // eq(15/21/25) objective function for gravity
 80077be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	605a      	str	r2, [r3, #4]
 80077c8:	609a      	str	r2, [r3, #8]
    float J_g[3][4] = {0}; // jacobian matrix for gravity
 80077ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80077ce:	2230      	movs	r2, #48	; 0x30
 80077d0:	2100      	movs	r1, #0
 80077d2:	4618      	mov	r0, r3
 80077d4:	f001 fc74 	bl	80090c0 <memset>
    Quaternion_t q_est_prev = *q_est;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80077de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80077e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Quaternion_t q_est_dot = {0}; // eq 42 and 43
 80077e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	605a      	str	r2, [r3, #4]
 80077ee:	609a      	str	r2, [r3, #8]
 80077f0:	60da      	str	r2, [r3, #12]
    Quaternion_t gradient = {0};
 80077f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	605a      	str	r2, [r3, #4]
 80077fc:	609a      	str	r2, [r3, #8]
 80077fe:	60da      	str	r2, [r3, #12]
    // const Quaternion_t q_g_ref = {0, 0, 0, 1};// eq (23) not needed because I used eq 25 instead of eq 21

    Quaternion_t q_a = {0, ax, ay, az}; // eq (24) raw acceleration values, needs to be normalized
 8007800:	f04f 0300 	mov.w	r3, #0
 8007804:	61fb      	str	r3, [r7, #28]
 8007806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800780a:	623b      	str	r3, [r7, #32]
 800780c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
 8007812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28
    if (quat_Norm(q_a) == 0)
 8007818:	ed97 6a07 	vldr	s12, [r7, #28]
 800781c:	edd7 6a08 	vldr	s13, [r7, #32]
 8007820:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007824:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007828:	eeb0 0a46 	vmov.f32	s0, s12
 800782c:	eef0 0a66 	vmov.f32	s1, s13
 8007830:	eeb0 1a47 	vmov.f32	s2, s14
 8007834:	eef0 1a67 	vmov.f32	s3, s15
 8007838:	f7ff ff16 	bl	8007668 <quat_Norm>
 800783c:	eef0 7a40 	vmov.f32	s15, s0
 8007840:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007848:	f000 81c4 	beq.w	8007bd4 <Madgwick_imu+0x450>
        return;
    quat_Normalization(&q_a); // normalize the acceleration quaternion to be a unit quaternion
 800784c:	f107 031c 	add.w	r3, r7, #28
 8007850:	4618      	mov	r0, r3
 8007852:	f7ff ff52 	bl	80076fa <quat_Normalization>

    Quaternion_t q_w = {0, gx, gy, gz}; // equation (10), places gyroscope readings in a quaternion
 8007856:	f04f 0300 	mov.w	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800786c:	61bb      	str	r3, [r7, #24]

    quat_scalar(&q_w, 0.5);           // equation (12) dq/dt = (1/2)q*w
 800786e:	f107 030c 	add.w	r3, r7, #12
 8007872:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff fe26 	bl	80074c8 <quat_scalar>
    q_w = quat_mult(q_est_prev, q_w); // equation (12)
 800787c:	ed97 4a03 	vldr	s8, [r7, #12]
 8007880:	edd7 4a04 	vldr	s9, [r7, #16]
 8007884:	ed97 5a05 	vldr	s10, [r7, #20]
 8007888:	edd7 5a06 	vldr	s11, [r7, #24]
 800788c:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8007890:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8007894:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8007898:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800789c:	eeb0 2a44 	vmov.f32	s4, s8
 80078a0:	eef0 2a64 	vmov.f32	s5, s9
 80078a4:	eeb0 3a45 	vmov.f32	s6, s10
 80078a8:	eef0 3a65 	vmov.f32	s7, s11
 80078ac:	eeb0 0a46 	vmov.f32	s0, s12
 80078b0:	eef0 0a66 	vmov.f32	s1, s13
 80078b4:	eeb0 1a47 	vmov.f32	s2, s14
 80078b8:	eef0 1a67 	vmov.f32	s3, s15
 80078bc:	f7ff fd42 	bl	8007344 <quat_mult>
 80078c0:	eeb0 6a40 	vmov.f32	s12, s0
 80078c4:	eef0 6a60 	vmov.f32	s13, s1
 80078c8:	eeb0 7a41 	vmov.f32	s14, s2
 80078cc:	eef0 7a61 	vmov.f32	s15, s3
 80078d0:	ed87 6a03 	vstr	s12, [r7, #12]
 80078d4:	edc7 6a04 	vstr	s13, [r7, #16]
 80078d8:	ed87 7a05 	vstr	s14, [r7, #20]
 80078dc:	edc7 7a06 	vstr	s15, [r7, #24]

    // quat_scalar(&q_w, deltaT);             // eq (13) integrates the angles velocity to position
    // quat_add(&q_w, q_w, q_est_prev);       // addition part of equation (13)

    // Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2 * (q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 80078e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80078e4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80078e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078ec:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80078f0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80078f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007900:	edd7 7a08 	vldr	s15, [r7, #32]
 8007904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007908:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    F_g[1] = 2 * (q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3 * q_est_prev.q4) - q_a.q3;
 800790c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007910:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007918:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800791c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007928:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800792c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007934:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    F_g[2] = 2 * (0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 8007938:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800793c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007944:	ee17 0a90 	vmov	r0, s15
 8007948:	f7f8 fdfe 	bl	8000548 <__aeabi_f2d>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	f04f 0000 	mov.w	r0, #0
 8007954:	49a1      	ldr	r1, [pc, #644]	; (8007bdc <Madgwick_imu+0x458>)
 8007956:	f7f8 fc97 	bl	8000288 <__aeabi_dsub>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	4614      	mov	r4, r2
 8007960:	461d      	mov	r5, r3
 8007962:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8007966:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800796a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796e:	ee17 0a90 	vmov	r0, s15
 8007972:	f7f8 fde9 	bl	8000548 <__aeabi_f2d>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	4620      	mov	r0, r4
 800797c:	4629      	mov	r1, r5
 800797e:	f7f8 fc83 	bl	8000288 <__aeabi_dsub>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4610      	mov	r0, r2
 8007988:	4619      	mov	r1, r3
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	f7f8 fc7d 	bl	800028c <__adddf3>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4614      	mov	r4, r2
 8007998:	461d      	mov	r5, r3
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	4618      	mov	r0, r3
 800799e:	f7f8 fdd3 	bl	8000548 <__aeabi_f2d>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4620      	mov	r0, r4
 80079a8:	4629      	mov	r1, r5
 80079aa:	f7f8 fc6d 	bl	8000288 <__aeabi_dsub>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	4610      	mov	r0, r2
 80079b4:	4619      	mov	r1, r3
 80079b6:	f7f9 f8f7 	bl	8000ba8 <__aeabi_d2f>
 80079ba:	4603      	mov	r3, r0
 80079bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2 * q_est_prev.q3;
 80079c0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80079c4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80079c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079cc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    J_g[0][1] = 2 * q_est_prev.q4;
 80079d0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80079d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80079d8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    J_g[0][2] = -2 * q_est_prev.q1;
 80079dc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80079e0:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80079e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079e8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    J_g[0][3] = 2 * q_est_prev.q2;
 80079ec:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80079f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80079f4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    J_g[1][0] = 2 * q_est_prev.q2;
 80079f8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80079fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007a00:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    J_g[1][1] = 2 * q_est_prev.q1;
 8007a04:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007a08:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007a0c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    J_g[1][2] = 2 * q_est_prev.q4;
 8007a10:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007a14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007a18:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    J_g[1][3] = 2 * q_est_prev.q3;
 8007a1c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007a20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007a24:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    J_g[2][0] = 0;
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    J_g[2][1] = -4 * q_est_prev.q2;
 8007a2e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007a32:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8007a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a3a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    J_g[2][2] = -4 * q_est_prev.q3;
 8007a3e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007a42:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8007a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a4a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    J_g[2][3] = 0;
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8007a56:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007a5a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a62:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8007a66:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a72:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8007a76:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a82:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8007a86:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8007a8a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a92:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8007a96:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007aa2:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8007aa6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ab2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8007ab6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8007aba:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ac2:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8007ac6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ace:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ad2:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8007ad6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007ada:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ae2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    gradient.q4 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 8007ae6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8007aea:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007af2:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8007af6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007afe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b02:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8007b06:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b12:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    // Normalize the gradient, equation (44)
    quat_Normalization(&gradient);
 8007b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff fded 	bl	80076fa <quat_Normalization>
    // Combining
    quat_scalar(&gradient, BETA);        // multiply normalized gradient by beta
 8007b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b24:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8007be0 <Madgwick_imu+0x45c>
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fccd 	bl	80074c8 <quat_scalar>
    quat_sub(&q_est_dot, q_w, gradient); // subtract above from q_w, the integrated gyro quaternion
 8007b2e:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8007b32:	edd7 4a0c 	vldr	s9, [r7, #48]	; 0x30
 8007b36:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 8007b3a:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 8007b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b42:	edd7 6a04 	vldr	s13, [r7, #16]
 8007b46:	ed97 7a05 	vldr	s14, [r7, #20]
 8007b4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8007b4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b52:	eeb0 2a44 	vmov.f32	s4, s8
 8007b56:	eef0 2a64 	vmov.f32	s5, s9
 8007b5a:	eeb0 3a45 	vmov.f32	s6, s10
 8007b5e:	eef0 3a65 	vmov.f32	s7, s11
 8007b62:	eeb0 0a46 	vmov.f32	s0, s12
 8007b66:	eef0 0a66 	vmov.f32	s1, s13
 8007b6a:	eeb0 1a47 	vmov.f32	s2, s14
 8007b6e:	eef0 1a67 	vmov.f32	s3, s15
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7ff fd2a 	bl	80075cc <quat_sub>
    quat_scalar(&q_est_dot, DELTA_T);
 8007b78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b7c:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8007be4 <Madgwick_imu+0x460>
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fca1 	bl	80074c8 <quat_scalar>
    quat_add(q_est, q_est_prev, q_est_dot); // Integrate orientation rate to find position
 8007b86:	ed97 4a0f 	vldr	s8, [r7, #60]	; 0x3c
 8007b8a:	edd7 4a10 	vldr	s9, [r7, #64]	; 0x40
 8007b8e:	ed97 5a11 	vldr	s10, [r7, #68]	; 0x44
 8007b92:	edd7 5a12 	vldr	s11, [r7, #72]	; 0x48
 8007b96:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8007b9a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8007b9e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8007ba2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007ba6:	eeb0 2a44 	vmov.f32	s4, s8
 8007baa:	eef0 2a64 	vmov.f32	s5, s9
 8007bae:	eeb0 3a45 	vmov.f32	s6, s10
 8007bb2:	eef0 3a65 	vmov.f32	s7, s11
 8007bb6:	eeb0 0a46 	vmov.f32	s0, s12
 8007bba:	eef0 0a66 	vmov.f32	s1, s13
 8007bbe:	eeb0 1a47 	vmov.f32	s2, s14
 8007bc2:	eef0 1a67 	vmov.f32	s3, s15
 8007bc6:	6838      	ldr	r0, [r7, #0]
 8007bc8:	f7ff fcb2 	bl	8007530 <quat_add>
    quat_Normalization(q_est);              // normalize the orientation of the estimate
 8007bcc:	6838      	ldr	r0, [r7, #0]
 8007bce:	f7ff fd94 	bl	80076fa <quat_Normalization>
 8007bd2:	e000      	b.n	8007bd6 <Madgwick_imu+0x452>
        return;
 8007bd4:	bf00      	nop
                                            //(shown in diagram, plus always use unit quaternions for orientation)
}
 8007bd6:	37b0      	adds	r7, #176	; 0xb0
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bdb0      	pop	{r4, r5, r7, pc}
 8007bdc:	3fe00000 	.word	0x3fe00000
 8007be0:	3d27ef9e 	.word	0x3d27ef9e
 8007be4:	3c23d70a 	.word	0x3c23d70a

08007be8 <Quat2Angle>:
 *
 * @returns None
 */
//10. Calculator Euler angle from quaternions
void Quat2Angle(Quaternion_t q, Euler_t *Angle)
{
 8007be8:	b5b0      	push	{r4, r5, r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	eeb0 6a40 	vmov.f32	s12, s0
 8007bf2:	eef0 6a60 	vmov.f32	s13, s1
 8007bf6:	eeb0 7a41 	vmov.f32	s14, s2
 8007bfa:	eef0 7a61 	vmov.f32	s15, s3
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	ed87 6a02 	vstr	s12, [r7, #8]
 8007c04:	edc7 6a03 	vstr	s13, [r7, #12]
 8007c08:	ed87 7a04 	vstr	s14, [r7, #16]
 8007c0c:	edc7 7a05 	vstr	s15, [r7, #20]
    Angle->roll = atan2(2 * (q.q1 * q.q2 + q.q3 * q.q4), q.q1 * q.q1 - q.q2 * q.q2 - q.q3 * q.q3 + q.q4 * q.q4);
 8007c10:	ed97 7a02 	vldr	s14, [r7, #8]
 8007c14:	edd7 7a03 	vldr	s15, [r7, #12]
 8007c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c1c:	edd7 6a04 	vldr	s13, [r7, #16]
 8007c20:	edd7 7a05 	vldr	s15, [r7, #20]
 8007c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007c30:	ee17 0a90 	vmov	r0, s15
 8007c34:	f7f8 fc88 	bl	8000548 <__aeabi_f2d>
 8007c38:	4604      	mov	r4, r0
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	ed97 7a02 	vldr	s14, [r7, #8]
 8007c40:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c48:	edd7 6a03 	vldr	s13, [r7, #12]
 8007c4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c58:	edd7 6a04 	vldr	s13, [r7, #16]
 8007c5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007c60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c68:	edd7 6a05 	vldr	s13, [r7, #20]
 8007c6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c78:	ee17 0a90 	vmov	r0, s15
 8007c7c:	f7f8 fc64 	bl	8000548 <__aeabi_f2d>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	ec43 2b11 	vmov	d1, r2, r3
 8007c88:	ec45 4b10 	vmov	d0, r4, r5
 8007c8c:	f001 fefc 	bl	8009a88 <atan2>
 8007c90:	ec53 2b10 	vmov	r2, r3, d0
 8007c94:	4610      	mov	r0, r2
 8007c96:	4619      	mov	r1, r3
 8007c98:	f7f8 ff86 	bl	8000ba8 <__aeabi_d2f>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	601a      	str	r2, [r3, #0]
    Angle->pitch = asin(2 * (q.q1 * q.q3 - q.q2 * q.q4));
 8007ca2:	ed97 7a02 	vldr	s14, [r7, #8]
 8007ca6:	edd7 7a04 	vldr	s15, [r7, #16]
 8007caa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007cae:	edd7 6a03 	vldr	s13, [r7, #12]
 8007cb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8007cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cbe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007cc2:	ee17 0a90 	vmov	r0, s15
 8007cc6:	f7f8 fc3f 	bl	8000548 <__aeabi_f2d>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	ec43 2b10 	vmov	d0, r2, r3
 8007cd2:	f001 fea5 	bl	8009a20 <asin>
 8007cd6:	ec53 2b10 	vmov	r2, r3, d0
 8007cda:	4610      	mov	r0, r2
 8007cdc:	4619      	mov	r1, r3
 8007cde:	f7f8 ff63 	bl	8000ba8 <__aeabi_d2f>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	605a      	str	r2, [r3, #4]
    Angle->yaw = atan2(2 * (q.q1 * q.q4 + q.q2 * q.q3), q.q1 * q.q1 + q.q2 * q.q2 - q.q3 * q.q3 - q.q4 * q.q4);
 8007ce8:	ed97 7a02 	vldr	s14, [r7, #8]
 8007cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8007cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007cf4:	edd7 6a03 	vldr	s13, [r7, #12]
 8007cf8:	edd7 7a04 	vldr	s15, [r7, #16]
 8007cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007d08:	ee17 0a90 	vmov	r0, s15
 8007d0c:	f7f8 fc1c 	bl	8000548 <__aeabi_f2d>
 8007d10:	4604      	mov	r4, r0
 8007d12:	460d      	mov	r5, r1
 8007d14:	ed97 7a02 	vldr	s14, [r7, #8]
 8007d18:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d20:	edd7 6a03 	vldr	s13, [r7, #12]
 8007d24:	edd7 7a03 	vldr	s15, [r7, #12]
 8007d28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d30:	edd7 6a04 	vldr	s13, [r7, #16]
 8007d34:	edd7 7a04 	vldr	s15, [r7, #16]
 8007d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d40:	edd7 6a05 	vldr	s13, [r7, #20]
 8007d44:	edd7 7a05 	vldr	s15, [r7, #20]
 8007d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d50:	ee17 0a90 	vmov	r0, s15
 8007d54:	f7f8 fbf8 	bl	8000548 <__aeabi_f2d>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	ec43 2b11 	vmov	d1, r2, r3
 8007d60:	ec45 4b10 	vmov	d0, r4, r5
 8007d64:	f001 fe90 	bl	8009a88 <atan2>
 8007d68:	ec53 2b10 	vmov	r2, r3, d0
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4619      	mov	r1, r3
 8007d70:	f7f8 ff1a 	bl	8000ba8 <__aeabi_d2f>
 8007d74:	4602      	mov	r2, r0
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	609a      	str	r2, [r3, #8]
//        Angle->yaw = 2 * atan2(q.q2, q.q1);
//    }
//    Angle->roll *= RAD_TO_DEG;
//    Angle->pitch *= RAD_TO_DEG;
//    Angle->yaw *= RAD_TO_DEG;
}
 8007d7a:	bf00      	nop
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007d84 <NRF24_DelayMicroSeconds>:
 *
 * @returns None
 */
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8007d90:	4b0b      	ldr	r3, [pc, #44]	; (8007dc0 <NRF24_DelayMicroSeconds+0x3c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a0b      	ldr	r2, [pc, #44]	; (8007dc4 <NRF24_DelayMicroSeconds+0x40>)
 8007d96:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9a:	0c9a      	lsrs	r2, r3, #18
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	fb02 f303 	mul.w	r3, r2, r3
 8007da2:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8007da4:	bf00      	nop
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	1e5a      	subs	r2, r3, #1
 8007daa:	60fa      	str	r2, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1fa      	bne.n	8007da6 <NRF24_DelayMicroSeconds+0x22>
}
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20000140 	.word	0x20000140
 8007dc4:	165e9f81 	.word	0x165e9f81

08007dc8 <NRF24_csn>:
 *
 * @returns None
 */
//1. Chip Select function
void NRF24_csn(int state)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d008      	beq.n	8007de8 <NRF24_csn+0x20>
 8007dd6:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <NRF24_csn+0x38>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a0a      	ldr	r2, [pc, #40]	; (8007e04 <NRF24_csn+0x3c>)
 8007ddc:	8811      	ldrh	r1, [r2, #0]
 8007dde:	2201      	movs	r2, #1
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fb f871 	bl	8002ec8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8007de6:	e007      	b.n	8007df8 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <NRF24_csn+0x38>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a05      	ldr	r2, [pc, #20]	; (8007e04 <NRF24_csn+0x3c>)
 8007dee:	8811      	ldrh	r1, [r2, #0]
 8007df0:	2200      	movs	r2, #0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fb f868 	bl	8002ec8 <HAL_GPIO_WritePin>
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	2000053c 	.word	0x2000053c
 8007e04:	20000540 	.word	0x20000540

08007e08 <NRF24_ce>:
 *
 * @returns None
 */
//2. Chip Enable
void NRF24_ce(int state)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d008      	beq.n	8007e28 <NRF24_ce+0x20>
 8007e16:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <NRF24_ce+0x38>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a0a      	ldr	r2, [pc, #40]	; (8007e44 <NRF24_ce+0x3c>)
 8007e1c:	8811      	ldrh	r1, [r2, #0]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fb f851 	bl	8002ec8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8007e26:	e007      	b.n	8007e38 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8007e28:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <NRF24_ce+0x38>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a05      	ldr	r2, [pc, #20]	; (8007e44 <NRF24_ce+0x3c>)
 8007e2e:	8811      	ldrh	r1, [r2, #0]
 8007e30:	2200      	movs	r2, #0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fb f848 	bl	8002ec8 <HAL_GPIO_WritePin>
}
 8007e38:	bf00      	nop
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	2000053c 	.word	0x2000053c
 8007e44:	20000542 	.word	0x20000542

08007e48 <NRF24_read_register>:
 *
 * @returns The value of the specified register.
 */
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8007e52:	2000      	movs	r0, #0
 8007e54:	f7ff ffb8 	bl	8007dc8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 8007e58:	79fb      	ldrb	r3, [r7, #7]
 8007e5a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8007e5c:	f107 010c 	add.w	r1, r7, #12
 8007e60:	2364      	movs	r3, #100	; 0x64
 8007e62:	2201      	movs	r2, #1
 8007e64:	480a      	ldr	r0, [pc, #40]	; (8007e90 <NRF24_read_register+0x48>)
 8007e66:	f7fc fd04 	bl	8004872 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8007e6a:	f107 030c 	add.w	r3, r7, #12
 8007e6e:	1c59      	adds	r1, r3, #1
 8007e70:	2364      	movs	r3, #100	; 0x64
 8007e72:	2201      	movs	r2, #1
 8007e74:	4806      	ldr	r0, [pc, #24]	; (8007e90 <NRF24_read_register+0x48>)
 8007e76:	f7fc fe38 	bl	8004aea <HAL_SPI_Receive>
	retData = spiBuf[1];
 8007e7a:	7b7b      	ldrb	r3, [r7, #13]
 8007e7c:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8007e7e:	2001      	movs	r0, #1
 8007e80:	f7ff ffa2 	bl	8007dc8 <NRF24_csn>
	return retData;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000544 	.word	0x20000544

08007e94 <NRF24_read_registerN>:
 *
 * @returns None
 */
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	6039      	str	r1, [r7, #0]
 8007e9e:	71fb      	strb	r3, [r7, #7]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	f7ff ff8f 	bl	8007dc8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8007eae:	f107 010c 	add.w	r1, r7, #12
 8007eb2:	2364      	movs	r3, #100	; 0x64
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	4808      	ldr	r0, [pc, #32]	; (8007ed8 <NRF24_read_registerN+0x44>)
 8007eb8:	f7fc fcdb 	bl	8004872 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8007ebc:	79bb      	ldrb	r3, [r7, #6]
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	2364      	movs	r3, #100	; 0x64
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	4804      	ldr	r0, [pc, #16]	; (8007ed8 <NRF24_read_registerN+0x44>)
 8007ec6:	f7fc fe10 	bl	8004aea <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8007eca:	2001      	movs	r0, #1
 8007ecc:	f7ff ff7c 	bl	8007dc8 <NRF24_csn>
}
 8007ed0:	bf00      	nop
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000544 	.word	0x20000544

08007edc <NRF24_write_register>:
 *
 * @returns None
 */
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	460a      	mov	r2, r1
 8007ee6:	71fb      	strb	r3, [r7, #7]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8007eec:	2000      	movs	r0, #0
 8007eee:	f7ff ff6b 	bl	8007dc8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8007ef2:	79fb      	ldrb	r3, [r7, #7]
 8007ef4:	f043 0320 	orr.w	r3, r3, #32
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8007efc:	79bb      	ldrb	r3, [r7, #6]
 8007efe:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8007f00:	f107 010c 	add.w	r1, r7, #12
 8007f04:	2364      	movs	r3, #100	; 0x64
 8007f06:	2202      	movs	r2, #2
 8007f08:	4804      	ldr	r0, [pc, #16]	; (8007f1c <NRF24_write_register+0x40>)
 8007f0a:	f7fc fcb2 	bl	8004872 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8007f0e:	2001      	movs	r0, #1
 8007f10:	f7ff ff5a 	bl	8007dc8 <NRF24_csn>
}
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20000544 	.word	0x20000544

08007f20 <NRF24_write_registerN>:
 *
 * @returns None
 */
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	6039      	str	r1, [r7, #0]
 8007f2a:	71fb      	strb	r3, [r7, #7]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8007f30:	2000      	movs	r0, #0
 8007f32:	f7ff ff49 	bl	8007dc8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	f043 0320 	orr.w	r3, r3, #32
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8007f40:	f107 010c 	add.w	r1, r7, #12
 8007f44:	2364      	movs	r3, #100	; 0x64
 8007f46:	2201      	movs	r2, #1
 8007f48:	4808      	ldr	r0, [pc, #32]	; (8007f6c <NRF24_write_registerN+0x4c>)
 8007f4a:	f7fc fc92 	bl	8004872 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8007f4e:	79bb      	ldrb	r3, [r7, #6]
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	2364      	movs	r3, #100	; 0x64
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	4805      	ldr	r0, [pc, #20]	; (8007f6c <NRF24_write_registerN+0x4c>)
 8007f58:	f7fc fc8b 	bl	8004872 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	f7ff ff33 	bl	8007dc8 <NRF24_csn>
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000544 	.word	0x20000544

08007f70 <NRF24_write_payload>:
 *
 * @returns None
 */
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	f7ff ff23 	bl	8007dc8 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8007f82:	23a0      	movs	r3, #160	; 0xa0
 8007f84:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8007f86:	f107 010f 	add.w	r1, r7, #15
 8007f8a:	2364      	movs	r3, #100	; 0x64
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	4808      	ldr	r0, [pc, #32]	; (8007fb0 <NRF24_write_payload+0x40>)
 8007f90:	f7fc fc6f 	bl	8004872 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	2364      	movs	r3, #100	; 0x64
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	4804      	ldr	r0, [pc, #16]	; (8007fb0 <NRF24_write_payload+0x40>)
 8007f9e:	f7fc fc68 	bl	8004872 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	f7ff ff10 	bl	8007dc8 <NRF24_csn>
}
 8007fa8:	bf00      	nop
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	20000544 	.word	0x20000544

08007fb4 <NRF24_read_payload>:
 *
 * @returns None
 */
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8007fc0:	f000 fa12 	bl	80083e8 <NRF24_getPayloadSize>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d303      	bcc.n	8007fd6 <NRF24_read_payload+0x22>
 8007fce:	f000 fa0b 	bl	80083e8 <NRF24_getPayloadSize>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	e000      	b.n	8007fd8 <NRF24_read_payload+0x24>
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f7ff fef4 	bl	8007dc8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8007fe0:	2361      	movs	r3, #97	; 0x61
 8007fe2:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8007fe4:	f107 010e 	add.w	r1, r7, #14
 8007fe8:	2364      	movs	r3, #100	; 0x64
 8007fea:	2201      	movs	r2, #1
 8007fec:	4808      	ldr	r0, [pc, #32]	; (8008010 <NRF24_read_payload+0x5c>)
 8007fee:	f7fc fc40 	bl	8004872 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	2364      	movs	r3, #100	; 0x64
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	4805      	ldr	r0, [pc, #20]	; (8008010 <NRF24_read_payload+0x5c>)
 8007ffc:	f7fc fd75 	bl	8004aea <HAL_SPI_Receive>
	NRF24_csn(1);
 8008000:	2001      	movs	r0, #1
 8008002:	f7ff fee1 	bl	8007dc8 <NRF24_csn>
}
 8008006:	bf00      	nop
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	20000544 	.word	0x20000544

08008014 <NRF24_flush_tx>:
 *
 * @returns None
 */
//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8008018:	21ff      	movs	r1, #255	; 0xff
 800801a:	20e1      	movs	r0, #225	; 0xe1
 800801c:	f7ff ff5e 	bl	8007edc <NRF24_write_register>
}
 8008020:	bf00      	nop
 8008022:	bd80      	pop	{r7, pc}

08008024 <NRF24_flush_rx>:
 *
 * @returns None
 */
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8008028:	21ff      	movs	r1, #255	; 0xff
 800802a:	20e2      	movs	r0, #226	; 0xe2
 800802c:	f7ff ff56 	bl	8007edc <NRF24_write_register>
}
 8008030:	bf00      	nop
 8008032:	bd80      	pop	{r7, pc}

08008034 <NRF24_get_status>:
 *
 * @returns The value of the status register.
 */
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800803a:	2007      	movs	r0, #7
 800803c:	f7ff ff04 	bl	8007e48 <NRF24_read_register>
 8008040:	4603      	mov	r3, r0
 8008042:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8008044:	79fb      	ldrb	r3, [r7, #7]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <NRF24_begin>:
 *
 * @returns None
 */
//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8008050:	b082      	sub	sp, #8
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	61fb      	str	r3, [r7, #28]
 800805c:	460b      	mov	r3, r1
 800805e:	807b      	strh	r3, [r7, #2]
 8008060:	4613      	mov	r3, r2
 8008062:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8008064:	4b66      	ldr	r3, [pc, #408]	; (8008200 <NRF24_begin+0x1b0>)
 8008066:	4618      	mov	r0, r3
 8008068:	f107 031c 	add.w	r3, r7, #28
 800806c:	2258      	movs	r2, #88	; 0x58
 800806e:	4619      	mov	r1, r3
 8008070:	f001 f818 	bl	80090a4 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8008074:	4a63      	ldr	r2, [pc, #396]	; (8008204 <NRF24_begin+0x1b4>)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800807a:	4a63      	ldr	r2, [pc, #396]	; (8008208 <NRF24_begin+0x1b8>)
 800807c:	887b      	ldrh	r3, [r7, #2]
 800807e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;  
 8008080:	4a62      	ldr	r2, [pc, #392]	; (800820c <NRF24_begin+0x1bc>)
 8008082:	883b      	ldrh	r3, [r7, #0]
 8008084:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8008086:	2001      	movs	r0, #1
 8008088:	f7ff fe9e 	bl	8007dc8 <NRF24_csn>
	NRF24_ce(0);
 800808c:	2000      	movs	r0, #0
 800808e:	f7ff febb 	bl	8007e08 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8008092:	2005      	movs	r0, #5
 8008094:	f7fa fc46 	bl	8002924 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08); //0x08
 8008098:	2108      	movs	r1, #8
 800809a:	2000      	movs	r0, #0
 800809c:	f7ff ff1e 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f); //0x3f
 80080a0:	213f      	movs	r1, #63	; 0x3f
 80080a2:	2001      	movs	r0, #1
 80080a4:	f7ff ff1a 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03); //0x03
 80080a8:	2103      	movs	r1, #3
 80080aa:	2002      	movs	r0, #2
 80080ac:	f7ff ff16 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03); //0x03
 80080b0:	2103      	movs	r1, #3
 80080b2:	2003      	movs	r0, #3
 80080b4:	f7ff ff12 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03); //0x03
 80080b8:	2103      	movs	r1, #3
 80080ba:	2004      	movs	r0, #4
 80080bc:	f7ff ff0e 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02); //0x02
 80080c0:	2102      	movs	r1, #2
 80080c2:	2005      	movs	r0, #5
 80080c4:	f7ff ff0a 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f); //0x0f
 80080c8:	210f      	movs	r1, #15
 80080ca:	2006      	movs	r0, #6
 80080cc:	f7ff ff06 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e); //0x0e
 80080d0:	210e      	movs	r1, #14
 80080d2:	2007      	movs	r0, #7
 80080d4:	f7ff ff02 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00); //0x00
 80080d8:	2100      	movs	r1, #0
 80080da:	2008      	movs	r0, #8
 80080dc:	f7ff fefe 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00); //0x00
 80080e0:	2100      	movs	r1, #0
 80080e2:	2009      	movs	r0, #9
 80080e4:	f7ff fefa 	bl	8007edc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80080e8:	23e7      	movs	r3, #231	; 0xe7
 80080ea:	733b      	strb	r3, [r7, #12]
 80080ec:	23e7      	movs	r3, #231	; 0xe7
 80080ee:	72fb      	strb	r3, [r7, #11]
 80080f0:	23e7      	movs	r3, #231	; 0xe7
 80080f2:	72bb      	strb	r3, [r7, #10]
 80080f4:	23e7      	movs	r3, #231	; 0xe7
 80080f6:	727b      	strb	r3, [r7, #9]
 80080f8:	23e7      	movs	r3, #231	; 0xe7
 80080fa:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80080fc:	f107 0308 	add.w	r3, r7, #8
 8008100:	2205      	movs	r2, #5
 8008102:	4619      	mov	r1, r3
 8008104:	200a      	movs	r0, #10
 8008106:	f7ff ff0b 	bl	8007f20 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800810a:	23c2      	movs	r3, #194	; 0xc2
 800810c:	733b      	strb	r3, [r7, #12]
 800810e:	23c2      	movs	r3, #194	; 0xc2
 8008110:	72fb      	strb	r3, [r7, #11]
 8008112:	23c2      	movs	r3, #194	; 0xc2
 8008114:	72bb      	strb	r3, [r7, #10]
 8008116:	23c2      	movs	r3, #194	; 0xc2
 8008118:	727b      	strb	r3, [r7, #9]
 800811a:	23c2      	movs	r3, #194	; 0xc2
 800811c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800811e:	f107 0308 	add.w	r3, r7, #8
 8008122:	2205      	movs	r2, #5
 8008124:	4619      	mov	r1, r3
 8008126:	200b      	movs	r0, #11
 8008128:	f7ff fefa 	bl	8007f20 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800812c:	21c3      	movs	r1, #195	; 0xc3
 800812e:	200c      	movs	r0, #12
 8008130:	f7ff fed4 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8008134:	21c4      	movs	r1, #196	; 0xc4
 8008136:	200d      	movs	r0, #13
 8008138:	f7ff fed0 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800813c:	21c5      	movs	r1, #197	; 0xc5
 800813e:	200e      	movs	r0, #14
 8008140:	f7ff fecc 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8008144:	21c6      	movs	r1, #198	; 0xc6
 8008146:	200f      	movs	r0, #15
 8008148:	f7ff fec8 	bl	8007edc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800814c:	23e7      	movs	r3, #231	; 0xe7
 800814e:	733b      	strb	r3, [r7, #12]
 8008150:	23e7      	movs	r3, #231	; 0xe7
 8008152:	72fb      	strb	r3, [r7, #11]
 8008154:	23e7      	movs	r3, #231	; 0xe7
 8008156:	72bb      	strb	r3, [r7, #10]
 8008158:	23e7      	movs	r3, #231	; 0xe7
 800815a:	727b      	strb	r3, [r7, #9]
 800815c:	23e7      	movs	r3, #231	; 0xe7
 800815e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8008160:	f107 0308 	add.w	r3, r7, #8
 8008164:	2205      	movs	r2, #5
 8008166:	4619      	mov	r1, r3
 8008168:	2010      	movs	r0, #16
 800816a:	f7ff fed9 	bl	8007f20 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800816e:	2100      	movs	r1, #0
 8008170:	2011      	movs	r0, #17
 8008172:	f7ff feb3 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8008176:	2100      	movs	r1, #0
 8008178:	2012      	movs	r0, #18
 800817a:	f7ff feaf 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800817e:	2100      	movs	r1, #0
 8008180:	2013      	movs	r0, #19
 8008182:	f7ff feab 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8008186:	2100      	movs	r1, #0
 8008188:	2014      	movs	r0, #20
 800818a:	f7ff fea7 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800818e:	2100      	movs	r1, #0
 8008190:	2015      	movs	r0, #21
 8008192:	f7ff fea3 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8008196:	2100      	movs	r1, #0
 8008198:	2016      	movs	r0, #22
 800819a:	f7ff fe9f 	bl	8007edc <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800819e:	f000 fb15 	bl	80087cc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80081a2:	2100      	movs	r1, #0
 80081a4:	201c      	movs	r0, #28
 80081a6:	f7ff fe99 	bl	8007edc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80081aa:	2100      	movs	r1, #0
 80081ac:	201d      	movs	r0, #29
 80081ae:	f7ff fe95 	bl	8007edc <NRF24_write_register>
	printRadioSettings();
 80081b2:	f000 fb25 	bl	8008800 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80081b6:	210f      	movs	r1, #15
 80081b8:	200f      	movs	r0, #15
 80081ba:	f000 f8cd 	bl	8008358 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m18dB);
 80081be:	2000      	movs	r0, #0
 80081c0:	f000 f9b3 	bl	800852a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80081c4:	2001      	movs	r0, #1
 80081c6:	f000 f9e9 	bl	800859c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80081ca:	2001      	movs	r0, #1
 80081cc:	f000 fa2c 	bl	8008628 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80081d0:	f000 f97e 	bl	80084d0 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80081d4:	2020      	movs	r0, #32
 80081d6:	f000 f8ef 	bl	80083b8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80081da:	f000 faee 	bl	80087ba <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(52);
 80081de:	2034      	movs	r0, #52	; 0x34
 80081e0:	f000 f8d5 	bl	800838e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80081e4:	f7ff ff16 	bl	8008014 <NRF24_flush_tx>
	NRF24_flush_rx();
 80081e8:	f7ff ff1c 	bl	8008024 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80081ec:	f000 fa44 	bl	8008678 <NRF24_powerDown>
	
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081fa:	b002      	add	sp, #8
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	20000544 	.word	0x20000544
 8008204:	2000053c 	.word	0x2000053c
 8008208:	20000540 	.word	0x20000540
 800820c:	20000542 	.word	0x20000542

08008210 <NRF24_stopListening>:
 *
 * @returns None
 */
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8008214:	2000      	movs	r0, #0
 8008216:	f7ff fdf7 	bl	8007e08 <NRF24_ce>
	NRF24_flush_tx();
 800821a:	f7ff fefb 	bl	8008014 <NRF24_flush_tx>
	NRF24_flush_rx();
 800821e:	f7ff ff01 	bl	8008024 <NRF24_flush_rx>
}
 8008222:	bf00      	nop
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <NRF24_write>:
 *
 * @returns True if the data was successfully sent, false otherwise.
 */
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8008234:	f000 fac1 	bl	80087ba <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa5a 	bl	80086f6 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8008242:	f7fa fb63 	bl	800290c <HAL_GetTick>
 8008246:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8008248:	230a      	movs	r3, #10
 800824a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800824c:	f107 030d 	add.w	r3, r7, #13
 8008250:	2201      	movs	r2, #1
 8008252:	4619      	mov	r1, r3
 8008254:	2008      	movs	r0, #8
 8008256:	f7ff fe1d 	bl	8007e94 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800825a:	f7ff feeb 	bl	8008034 <NRF24_get_status>
 800825e:	4603      	mov	r3, r0
 8008260:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008268:	2b00      	cmp	r3, #0
 800826a:	d107      	bne.n	800827c <NRF24_write+0x54>
 800826c:	f7fa fb4e 	bl	800290c <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	429a      	cmp	r2, r3
 800827a:	d8e7      	bhi.n	800824c <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800827c:	f107 010b 	add.w	r1, r7, #11
 8008280:	f107 030c 	add.w	r3, r7, #12
 8008284:	4a0c      	ldr	r2, [pc, #48]	; (80082b8 <NRF24_write+0x90>)
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fa64 	bl	8008754 <NRF24_whatHappened>
	retStatus = tx_ok;
 800828c:	7b3b      	ldrb	r3, [r7, #12]
 800828e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8008290:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <NRF24_write+0x90>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8008298:	f000 f8b2 	bl	8008400 <NRF24_getDynamicPayloadSize>
 800829c:	4603      	mov	r3, r0
 800829e:	461a      	mov	r2, r3
 80082a0:	4b06      	ldr	r3, [pc, #24]	; (80082bc <NRF24_write+0x94>)
 80082a2:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 80082a4:	f000 f80c 	bl	80082c0 <NRF24_available>
	NRF24_flush_tx();
 80082a8:	f7ff feb4 	bl	8008014 <NRF24_flush_tx>
	return retStatus;
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20000534 	.word	0x20000534
 80082bc:	20000535 	.word	0x20000535

080082c0 <NRF24_available>:
 *
 * @returns True if there is available data to read, false otherwise.
 */
//16. Check for available data to read
bool NRF24_available(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80082c4:	2000      	movs	r0, #0
 80082c6:	f000 f9e6 	bl	8008696 <NRF24_availablePipe>
 80082ca:	4603      	mov	r3, r0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <NRF24_read>:
 *
 * @returns True if the read operation was successful, false otherwise.
 */
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff fe67 	bl	8007fb4 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80082e6:	2017      	movs	r0, #23
 80082e8:	f7ff fdae 	bl	8007e48 <NRF24_read_register>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80082f4:	f7ff fe96 	bl	8008024 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80082f8:	f000 f882 	bl	8008400 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bf14      	ite	ne
 8008302:	2301      	movne	r3, #1
 8008304:	2300      	moveq	r3, #0
 8008306:	b2db      	uxtb	r3, r3
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <NRF24_openWritingPipe>:
 *
 * @returns None
 */
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800831a:	463b      	mov	r3, r7
 800831c:	2205      	movs	r2, #5
 800831e:	4619      	mov	r1, r3
 8008320:	200a      	movs	r0, #10
 8008322:	f7ff fdfd 	bl	8007f20 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8008326:	463b      	mov	r3, r7
 8008328:	2205      	movs	r2, #5
 800832a:	4619      	mov	r1, r3
 800832c:	2010      	movs	r0, #16
 800832e:	f7ff fdf7 	bl	8007f20 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8008332:	2320      	movs	r3, #32
 8008334:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8008336:	4b07      	ldr	r3, [pc, #28]	; (8008354 <NRF24_openWritingPipe+0x44>)
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	7bfa      	ldrb	r2, [r7, #15]
 800833c:	4293      	cmp	r3, r2
 800833e:	bf28      	it	cs
 8008340:	4613      	movcs	r3, r2
 8008342:	b2db      	uxtb	r3, r3
 8008344:	4619      	mov	r1, r3
 8008346:	2011      	movs	r0, #17
 8008348:	f7ff fdc8 	bl	8007edc <NRF24_write_register>
}
 800834c:	bf00      	nop
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	20000536 	.word	0x20000536

08008358 <NRF24_setRetries>:
 *
 * @returns None
 */
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	460a      	mov	r2, r1
 8008362:	71fb      	strb	r3, [r7, #7]
 8008364:	4613      	mov	r3, r2
 8008366:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	011b      	lsls	r3, r3, #4
 800836c:	b25a      	sxtb	r2, r3
 800836e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008372:	f003 030f 	and.w	r3, r3, #15
 8008376:	b25b      	sxtb	r3, r3
 8008378:	4313      	orrs	r3, r2
 800837a:	b25b      	sxtb	r3, r3
 800837c:	b2db      	uxtb	r3, r3
 800837e:	4619      	mov	r1, r3
 8008380:	2004      	movs	r0, #4
 8008382:	f7ff fdab 	bl	8007edc <NRF24_write_register>
}
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <NRF24_setChannel>:
 *
 * @returns None
 */
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	4603      	mov	r3, r0
 8008396:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8008398:	237f      	movs	r3, #127	; 0x7f
 800839a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800839c:	7bfa      	ldrb	r2, [r7, #15]
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	4293      	cmp	r3, r2
 80083a2:	bf28      	it	cs
 80083a4:	4613      	movcs	r3, r2
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	4619      	mov	r1, r3
 80083aa:	2005      	movs	r0, #5
 80083ac:	f7ff fd96 	bl	8007edc <NRF24_write_register>
}
 80083b0:	bf00      	nop
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <NRF24_setPayloadSize>:
 *
 * @returns None
 */
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80083c2:	2320      	movs	r3, #32
 80083c4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80083c6:	7bfa      	ldrb	r2, [r7, #15]
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	4293      	cmp	r3, r2
 80083cc:	bf28      	it	cs
 80083ce:	4613      	movcs	r3, r2
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	4b04      	ldr	r3, [pc, #16]	; (80083e4 <NRF24_setPayloadSize+0x2c>)
 80083d4:	701a      	strb	r2, [r3, #0]
}
 80083d6:	bf00      	nop
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	20000536 	.word	0x20000536

080083e8 <NRF24_getPayloadSize>:
 *
 * @returns The payload size of the NRF24 module.
 */
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
	return payload_size;
 80083ec:	4b03      	ldr	r3, [pc, #12]	; (80083fc <NRF24_getPayloadSize+0x14>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	20000536 	.word	0x20000536

08008400 <NRF24_getDynamicPayloadSize>:
 *
 * @returns The size of the dynamic payload.
 */
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8008404:	2060      	movs	r0, #96	; 0x60
 8008406:	f7ff fd1f 	bl	8007e48 <NRF24_read_register>
 800840a:	4603      	mov	r3, r0
}
 800840c:	4618      	mov	r0, r3
 800840e:	bd80      	pop	{r7, pc}

08008410 <NRF24_enableAckPayload>:
 *
 * @returns None
 */
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8008414:	201d      	movs	r0, #29
 8008416:	f7ff fd17 	bl	8007e48 <NRF24_read_register>
 800841a:	4603      	mov	r3, r0
 800841c:	f043 0306 	orr.w	r3, r3, #6
 8008420:	b2db      	uxtb	r3, r3
 8008422:	4619      	mov	r1, r3
 8008424:	201d      	movs	r0, #29
 8008426:	f7ff fd59 	bl	8007edc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800842a:	201d      	movs	r0, #29
 800842c:	f7ff fd0c 	bl	8007e48 <NRF24_read_register>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10c      	bne.n	8008450 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8008436:	f000 f9c9 	bl	80087cc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800843a:	201d      	movs	r0, #29
 800843c:	f7ff fd04 	bl	8007e48 <NRF24_read_register>
 8008440:	4603      	mov	r3, r0
 8008442:	f043 0306 	orr.w	r3, r3, #6
 8008446:	b2db      	uxtb	r3, r3
 8008448:	4619      	mov	r1, r3
 800844a:	201d      	movs	r0, #29
 800844c:	f7ff fd46 	bl	8007edc <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8008450:	201c      	movs	r0, #28
 8008452:	f7ff fcf9 	bl	8007e48 <NRF24_read_register>
 8008456:	4603      	mov	r3, r0
 8008458:	f043 0303 	orr.w	r3, r3, #3
 800845c:	b2db      	uxtb	r3, r3
 800845e:	4619      	mov	r1, r3
 8008460:	201c      	movs	r0, #28
 8008462:	f7ff fd3b 	bl	8007edc <NRF24_write_register>
}
 8008466:	bf00      	nop
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <NRF24_enableDynamicPayloads>:
 *
 * @returns None
 */
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8008470:	201d      	movs	r0, #29
 8008472:	f7ff fce9 	bl	8007e48 <NRF24_read_register>
 8008476:	4603      	mov	r3, r0
 8008478:	f043 0304 	orr.w	r3, r3, #4
 800847c:	b2db      	uxtb	r3, r3
 800847e:	4619      	mov	r1, r3
 8008480:	201d      	movs	r0, #29
 8008482:	f7ff fd2b 	bl	8007edc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8008486:	201d      	movs	r0, #29
 8008488:	f7ff fcde 	bl	8007e48 <NRF24_read_register>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10c      	bne.n	80084ac <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8008492:	f000 f99b 	bl	80087cc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8008496:	201d      	movs	r0, #29
 8008498:	f7ff fcd6 	bl	8007e48 <NRF24_read_register>
 800849c:	4603      	mov	r3, r0
 800849e:	f043 0304 	orr.w	r3, r3, #4
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	4619      	mov	r1, r3
 80084a6:	201d      	movs	r0, #29
 80084a8:	f7ff fd18 	bl	8007edc <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80084ac:	201c      	movs	r0, #28
 80084ae:	f7ff fccb 	bl	8007e48 <NRF24_read_register>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	4619      	mov	r1, r3
 80084bc:	201c      	movs	r0, #28
 80084be:	f7ff fd0d 	bl	8007edc <NRF24_write_register>
  dynamic_payloads_enabled = true;
 80084c2:	4b02      	ldr	r3, [pc, #8]	; (80084cc <NRF24_enableDynamicPayloads+0x60>)
 80084c4:	2201      	movs	r2, #1
 80084c6:	701a      	strb	r2, [r3, #0]
	
}
 80084c8:	bf00      	nop
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000537 	.word	0x20000537

080084d0 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80084d4:	201d      	movs	r0, #29
 80084d6:	f7ff fcb7 	bl	8007e48 <NRF24_read_register>
 80084da:	4603      	mov	r3, r0
 80084dc:	f023 0304 	bic.w	r3, r3, #4
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	4619      	mov	r1, r3
 80084e4:	201d      	movs	r0, #29
 80084e6:	f7ff fcf9 	bl	8007edc <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80084ea:	2100      	movs	r1, #0
 80084ec:	201c      	movs	r0, #28
 80084ee:	f7ff fcf5 	bl	8007edc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80084f2:	4b02      	ldr	r3, [pc, #8]	; (80084fc <NRF24_disableDynamicPayloads+0x2c>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	701a      	strb	r2, [r3, #0]
}
 80084f8:	bf00      	nop
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20000537 	.word	0x20000537

08008500 <NRF24_setAutoAck>:
 *
 * @returns None
 */
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d004      	beq.n	800851a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8008510:	213f      	movs	r1, #63	; 0x3f
 8008512:	2001      	movs	r0, #1
 8008514:	f7ff fce2 	bl	8007edc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8008518:	e003      	b.n	8008522 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800851a:	2100      	movs	r1, #0
 800851c:	2001      	movs	r0, #1
 800851e:	f7ff fcdd 	bl	8007edc <NRF24_write_register>
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <NRF24_setPALevel>:
 *
 * @returns None
 */
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	4603      	mov	r3, r0
 8008532:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8008534:	2006      	movs	r0, #6
 8008536:	f7ff fc87 	bl	8007e48 <NRF24_read_register>
 800853a:	4603      	mov	r3, r0
 800853c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	f023 0306 	bic.w	r3, r3, #6
 8008544:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8008546:	79fb      	ldrb	r3, [r7, #7]
 8008548:	2b03      	cmp	r3, #3
 800854a:	d104      	bne.n	8008556 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	f043 0306 	orr.w	r3, r3, #6
 8008552:	73fb      	strb	r3, [r7, #15]
 8008554:	e019      	b.n	800858a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	2b02      	cmp	r3, #2
 800855a:	d104      	bne.n	8008566 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	f043 0304 	orr.w	r3, r3, #4
 8008562:	73fb      	strb	r3, [r7, #15]
 8008564:	e011      	b.n	800858a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d104      	bne.n	8008576 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	f043 0302 	orr.w	r3, r3, #2
 8008572:	73fb      	strb	r3, [r7, #15]
 8008574:	e009      	b.n	800858a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d006      	beq.n	800858a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	2b04      	cmp	r3, #4
 8008580:	d103      	bne.n	800858a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	f043 0306 	orr.w	r3, r3, #6
 8008588:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	4619      	mov	r1, r3
 800858e:	2006      	movs	r0, #6
 8008590:	f7ff fca4 	bl	8007edc <NRF24_write_register>
}
 8008594:	bf00      	nop
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <NRF24_setDataRate>:
 *
 * @returns True if the data rate was successfully set, false otherwise.
 */
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80085a6:	2300      	movs	r3, #0
 80085a8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80085aa:	2006      	movs	r0, #6
 80085ac:	f7ff fc4c 	bl	8007e48 <NRF24_read_register>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80085b4:	4b1b      	ldr	r3, [pc, #108]	; (8008624 <NRF24_setDataRate+0x88>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80085c0:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d107      	bne.n	80085d8 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80085c8:	4b16      	ldr	r3, [pc, #88]	; (8008624 <NRF24_setDataRate+0x88>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	f043 0320 	orr.w	r3, r3, #32
 80085d4:	73bb      	strb	r3, [r7, #14]
 80085d6:	e00d      	b.n	80085f4 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d107      	bne.n	80085ee <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80085de:	4b11      	ldr	r3, [pc, #68]	; (8008624 <NRF24_setDataRate+0x88>)
 80085e0:	2201      	movs	r2, #1
 80085e2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	f043 0308 	orr.w	r3, r3, #8
 80085ea:	73bb      	strb	r3, [r7, #14]
 80085ec:	e002      	b.n	80085f4 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80085ee:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <NRF24_setDataRate+0x88>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	4619      	mov	r1, r3
 80085f8:	2006      	movs	r0, #6
 80085fa:	f7ff fc6f 	bl	8007edc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80085fe:	2006      	movs	r0, #6
 8008600:	f7ff fc22 	bl	8007e48 <NRF24_read_register>
 8008604:	4603      	mov	r3, r0
 8008606:	461a      	mov	r2, r3
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	4293      	cmp	r3, r2
 800860c:	d102      	bne.n	8008614 <NRF24_setDataRate+0x78>
  {
    result = true;
 800860e:	2301      	movs	r3, #1
 8008610:	73fb      	strb	r3, [r7, #15]
 8008612:	e002      	b.n	800861a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8008614:	4b03      	ldr	r3, [pc, #12]	; (8008624 <NRF24_setDataRate+0x88>)
 8008616:	2200      	movs	r2, #0
 8008618:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800861a:	7bfb      	ldrb	r3, [r7, #15]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20000538 	.word	0x20000538

08008628 <NRF24_setCRCLength>:
 *
 * @returns None
 */
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8008632:	2000      	movs	r0, #0
 8008634:	f7ff fc08 	bl	8007e48 <NRF24_read_register>
 8008638:	4603      	mov	r3, r0
 800863a:	f023 030c 	bic.w	r3, r3, #12
 800863e:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	2b02      	cmp	r3, #2
 8008644:	d00f      	beq.n	8008666 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d104      	bne.n	8008656 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	f043 0308 	orr.w	r3, r3, #8
 8008652:	73fb      	strb	r3, [r7, #15]
 8008654:	e007      	b.n	8008666 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	f043 0308 	orr.w	r3, r3, #8
 800865c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	f043 0304 	orr.w	r3, r3, #4
 8008664:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	4619      	mov	r1, r3
 800866a:	2000      	movs	r0, #0
 800866c:	f7ff fc36 	bl	8007edc <NRF24_write_register>
}
 8008670:	bf00      	nop
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <NRF24_powerDown>:
 *
 * @returns None
 */
//38. power down
void NRF24_powerDown(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800867c:	2000      	movs	r0, #0
 800867e:	f7ff fbe3 	bl	8007e48 <NRF24_read_register>
 8008682:	4603      	mov	r3, r0
 8008684:	f023 0302 	bic.w	r3, r3, #2
 8008688:	b2db      	uxtb	r3, r3
 800868a:	4619      	mov	r1, r3
 800868c:	2000      	movs	r0, #0
 800868e:	f7ff fc25 	bl	8007edc <NRF24_write_register>
}
 8008692:	bf00      	nop
 8008694:	bd80      	pop	{r7, pc}

08008696 <NRF24_availablePipe>:
 *
 * @returns True if data is available on any of the pipes, false otherwise.
 */
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800869e:	f7ff fcc9 	bl	8008034 <NRF24_get_status>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bf14      	ite	ne
 80086b0:	2301      	movne	r3, #1
 80086b2:	2300      	moveq	r3, #0
 80086b4:	73bb      	strb	r3, [r7, #14]

  if (result)
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d017      	beq.n	80086ec <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d007      	beq.n	80086d2 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	085b      	lsrs	r3, r3, #1
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80086d2:	2140      	movs	r1, #64	; 0x40
 80086d4:	2007      	movs	r0, #7
 80086d6:	f7ff fc01 	bl	8007edc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	f003 0320 	and.w	r3, r3, #32
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80086e4:	2120      	movs	r1, #32
 80086e6:	2007      	movs	r0, #7
 80086e8:	f7ff fbf8 	bl	8007edc <NRF24_write_register>
    }
  }
  return result;
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <NRF24_startWrite>:
 *
 * @returns None
 */
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b082      	sub	sp, #8
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	460b      	mov	r3, r1
 8008700:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8008702:	2000      	movs	r0, #0
 8008704:	f7ff fb80 	bl	8007e08 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8008708:	2000      	movs	r0, #0
 800870a:	f7ff fb9d 	bl	8007e48 <NRF24_read_register>
 800870e:	4603      	mov	r3, r0
 8008710:	f043 0302 	orr.w	r3, r3, #2
 8008714:	b2db      	uxtb	r3, r3
 8008716:	f023 0301 	bic.w	r3, r3, #1
 800871a:	b2db      	uxtb	r3, r3
 800871c:	4619      	mov	r1, r3
 800871e:	2000      	movs	r0, #0
 8008720:	f7ff fbdc 	bl	8007edc <NRF24_write_register>
  NRF24_ce(1);
 8008724:	2001      	movs	r0, #1
 8008726:	f7ff fb6f 	bl	8007e08 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 800872a:	2096      	movs	r0, #150	; 0x96
 800872c:	f7ff fb2a 	bl	8007d84 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8008730:	78fb      	ldrb	r3, [r7, #3]
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff fc1b 	bl	8007f70 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 800873a:	2001      	movs	r0, #1
 800873c:	f7ff fb64 	bl	8007e08 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8008740:	200f      	movs	r0, #15
 8008742:	f7ff fb1f 	bl	8007d84 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8008746:	2000      	movs	r0, #0
 8008748:	f7ff fb5e 	bl	8007e08 <NRF24_ce>
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <NRF24_whatHappened>:
 *
 * @returns None
 */
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8008760:	f7ff fc68 	bl	8008034 <NRF24_get_status>
 8008764:	4603      	mov	r3, r0
 8008766:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800876e:	2170      	movs	r1, #112	; 0x70
 8008770:	2007      	movs	r0, #7
 8008772:	f7ff fbb3 	bl	8007edc <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b00      	cmp	r3, #0
 800877e:	bf14      	ite	ne
 8008780:	2301      	movne	r3, #1
 8008782:	2300      	moveq	r3, #0
 8008784:	b2da      	uxtb	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800878a:	7dfb      	ldrb	r3, [r7, #23]
 800878c:	f003 0310 	and.w	r3, r3, #16
 8008790:	2b00      	cmp	r3, #0
 8008792:	bf14      	ite	ne
 8008794:	2301      	movne	r3, #1
 8008796:	2300      	moveq	r3, #0
 8008798:	b2da      	uxtb	r2, r3
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	bf14      	ite	ne
 80087a8:	2301      	movne	r3, #1
 80087aa:	2300      	moveq	r3, #0
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	701a      	strb	r2, [r3, #0]
}
 80087b2:	bf00      	nop
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <NRF24_resetStatus>:
 *
 * @returns None
 */
//46. Reset Status
void NRF24_resetStatus(void)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80087be:	2170      	movs	r1, #112	; 0x70
 80087c0:	2007      	movs	r0, #7
 80087c2:	f7ff fb8b 	bl	8007edc <NRF24_write_register>
}
 80087c6:	bf00      	nop
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <NRF24_ACTIVATE_cmd>:
 *
 * @returns None
 */
//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80087d2:	2000      	movs	r0, #0
 80087d4:	f7ff faf8 	bl	8007dc8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80087d8:	2350      	movs	r3, #80	; 0x50
 80087da:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80087dc:	2373      	movs	r3, #115	; 0x73
 80087de:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80087e0:	1d39      	adds	r1, r7, #4
 80087e2:	2364      	movs	r3, #100	; 0x64
 80087e4:	2202      	movs	r2, #2
 80087e6:	4805      	ldr	r0, [pc, #20]	; (80087fc <NRF24_ACTIVATE_cmd+0x30>)
 80087e8:	f7fc f843 	bl	8004872 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80087ec:	2001      	movs	r0, #1
 80087ee:	f7ff faeb 	bl	8007dc8 <NRF24_csn>
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20000544 	.word	0x20000544

08008800 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8008800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008802:	b0a1      	sub	sp, #132	; 0x84
 8008804:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8008806:	f107 0308 	add.w	r3, r7, #8
 800880a:	49c3      	ldr	r1, [pc, #780]	; (8008b18 <printRadioSettings+0x318>)
 800880c:	4618      	mov	r0, r3
 800880e:	f000 fc71 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008812:	f107 0308 	add.w	r3, r7, #8
 8008816:	4618      	mov	r0, r3
 8008818:	f7f7 fcda 	bl	80001d0 <strlen>
 800881c:	4603      	mov	r3, r0
 800881e:	b29a      	uxth	r2, r3
 8008820:	f107 0108 	add.w	r1, r7, #8
 8008824:	230a      	movs	r3, #10
 8008826:	48bd      	ldr	r0, [pc, #756]	; (8008b1c <printRadioSettings+0x31c>)
 8008828:	f7fd fe1d 	bl	8006466 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800882c:	2000      	movs	r0, #0
 800882e:	f7ff fb0b 	bl	8007e48 <NRF24_read_register>
 8008832:	4603      	mov	r3, r0
 8008834:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8008838:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800883c:	f003 0308 	and.w	r3, r3, #8
 8008840:	2b00      	cmp	r3, #0
 8008842:	d013      	beq.n	800886c <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8008844:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d006      	beq.n	800885e <printRadioSettings+0x5e>
 8008850:	f107 0308 	add.w	r3, r7, #8
 8008854:	49b2      	ldr	r1, [pc, #712]	; (8008b20 <printRadioSettings+0x320>)
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fc4c 	bl	80090f4 <siprintf>
 800885c:	e00c      	b.n	8008878 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800885e:	f107 0308 	add.w	r3, r7, #8
 8008862:	49b0      	ldr	r1, [pc, #704]	; (8008b24 <printRadioSettings+0x324>)
 8008864:	4618      	mov	r0, r3
 8008866:	f000 fc45 	bl	80090f4 <siprintf>
 800886a:	e005      	b.n	8008878 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800886c:	f107 0308 	add.w	r3, r7, #8
 8008870:	49ad      	ldr	r1, [pc, #692]	; (8008b28 <printRadioSettings+0x328>)
 8008872:	4618      	mov	r0, r3
 8008874:	f000 fc3e 	bl	80090f4 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008878:	f107 0308 	add.w	r3, r7, #8
 800887c:	4618      	mov	r0, r3
 800887e:	f7f7 fca7 	bl	80001d0 <strlen>
 8008882:	4603      	mov	r3, r0
 8008884:	b29a      	uxth	r2, r3
 8008886:	f107 0108 	add.w	r1, r7, #8
 800888a:	230a      	movs	r3, #10
 800888c:	48a3      	ldr	r0, [pc, #652]	; (8008b1c <printRadioSettings+0x31c>)
 800888e:	f7fd fdea 	bl	8006466 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8008892:	2001      	movs	r0, #1
 8008894:	f7ff fad8 	bl	8007e48 <NRF24_read_register>
 8008898:	4603      	mov	r3, r0
 800889a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800889e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80088a2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bfcc      	ite	gt
 80088aa:	2301      	movgt	r3, #1
 80088ac:	2300      	movle	r3, #0
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80088b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80088b6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	bfcc      	ite	gt
 80088be:	2301      	movgt	r3, #1
 80088c0:	2300      	movle	r3, #0
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80088c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80088ca:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	bfcc      	ite	gt
 80088d2:	2301      	movgt	r3, #1
 80088d4:	2300      	movle	r3, #0
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80088da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80088de:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	bfcc      	ite	gt
 80088e6:	2301      	movgt	r3, #1
 80088e8:	2300      	movle	r3, #0
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80088ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80088f2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bfcc      	ite	gt
 80088fa:	2301      	movgt	r3, #1
 80088fc:	2300      	movle	r3, #0
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008902:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008906:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800890a:	2b00      	cmp	r3, #0
 800890c:	bfcc      	ite	gt
 800890e:	2301      	movgt	r3, #1
 8008910:	2300      	movle	r3, #0
 8008912:	b2db      	uxtb	r3, r3
 8008914:	f107 0008 	add.w	r0, r7, #8
 8008918:	9303      	str	r3, [sp, #12]
 800891a:	9402      	str	r4, [sp, #8]
 800891c:	9101      	str	r1, [sp, #4]
 800891e:	9200      	str	r2, [sp, #0]
 8008920:	4633      	mov	r3, r6
 8008922:	462a      	mov	r2, r5
 8008924:	4981      	ldr	r1, [pc, #516]	; (8008b2c <printRadioSettings+0x32c>)
 8008926:	f000 fbe5 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800892a:	f107 0308 	add.w	r3, r7, #8
 800892e:	4618      	mov	r0, r3
 8008930:	f7f7 fc4e 	bl	80001d0 <strlen>
 8008934:	4603      	mov	r3, r0
 8008936:	b29a      	uxth	r2, r3
 8008938:	f107 0108 	add.w	r1, r7, #8
 800893c:	230a      	movs	r3, #10
 800893e:	4877      	ldr	r0, [pc, #476]	; (8008b1c <printRadioSettings+0x31c>)
 8008940:	f7fd fd91 	bl	8006466 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8008944:	2002      	movs	r0, #2
 8008946:	f7ff fa7f 	bl	8007e48 <NRF24_read_register>
 800894a:	4603      	mov	r3, r0
 800894c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008950:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008954:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008958:	2b00      	cmp	r3, #0
 800895a:	bfcc      	ite	gt
 800895c:	2301      	movgt	r3, #1
 800895e:	2300      	movle	r3, #0
 8008960:	b2db      	uxtb	r3, r3
 8008962:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008964:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008968:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800896c:	2b00      	cmp	r3, #0
 800896e:	bfcc      	ite	gt
 8008970:	2301      	movgt	r3, #1
 8008972:	2300      	movle	r3, #0
 8008974:	b2db      	uxtb	r3, r3
 8008976:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008978:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800897c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008980:	2b00      	cmp	r3, #0
 8008982:	bfcc      	ite	gt
 8008984:	2301      	movgt	r3, #1
 8008986:	2300      	movle	r3, #0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800898c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008990:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008994:	2b00      	cmp	r3, #0
 8008996:	bfcc      	ite	gt
 8008998:	2301      	movgt	r3, #1
 800899a:	2300      	movle	r3, #0
 800899c:	b2db      	uxtb	r3, r3
 800899e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80089a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80089a4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	bfcc      	ite	gt
 80089ac:	2301      	movgt	r3, #1
 80089ae:	2300      	movle	r3, #0
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80089b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80089b8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80089bc:	2b00      	cmp	r3, #0
 80089be:	bfcc      	ite	gt
 80089c0:	2301      	movgt	r3, #1
 80089c2:	2300      	movle	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f107 0008 	add.w	r0, r7, #8
 80089ca:	9303      	str	r3, [sp, #12]
 80089cc:	9402      	str	r4, [sp, #8]
 80089ce:	9101      	str	r1, [sp, #4]
 80089d0:	9200      	str	r2, [sp, #0]
 80089d2:	4633      	mov	r3, r6
 80089d4:	462a      	mov	r2, r5
 80089d6:	4956      	ldr	r1, [pc, #344]	; (8008b30 <printRadioSettings+0x330>)
 80089d8:	f000 fb8c 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80089dc:	f107 0308 	add.w	r3, r7, #8
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7f7 fbf5 	bl	80001d0 <strlen>
 80089e6:	4603      	mov	r3, r0
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	f107 0108 	add.w	r1, r7, #8
 80089ee:	230a      	movs	r3, #10
 80089f0:	484a      	ldr	r0, [pc, #296]	; (8008b1c <printRadioSettings+0x31c>)
 80089f2:	f7fd fd38 	bl	8006466 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80089f6:	2003      	movs	r0, #3
 80089f8:	f7ff fa26 	bl	8007e48 <NRF24_read_register>
 80089fc:	4603      	mov	r3, r0
 80089fe:	f003 0303 	and.w	r3, r3, #3
 8008a02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8008a06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008a0a:	3302      	adds	r3, #2
 8008a0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8008a10:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8008a14:	f107 0308 	add.w	r3, r7, #8
 8008a18:	4946      	ldr	r1, [pc, #280]	; (8008b34 <printRadioSettings+0x334>)
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 fb6a 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008a20:	f107 0308 	add.w	r3, r7, #8
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7f7 fbd3 	bl	80001d0 <strlen>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	f107 0108 	add.w	r1, r7, #8
 8008a32:	230a      	movs	r3, #10
 8008a34:	4839      	ldr	r0, [pc, #228]	; (8008b1c <printRadioSettings+0x31c>)
 8008a36:	f7fd fd16 	bl	8006466 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8008a3a:	2005      	movs	r0, #5
 8008a3c:	f7ff fa04 	bl	8007e48 <NRF24_read_register>
 8008a40:	4603      	mov	r3, r0
 8008a42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8008a46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008a4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a4e:	f107 0308 	add.w	r3, r7, #8
 8008a52:	4939      	ldr	r1, [pc, #228]	; (8008b38 <printRadioSettings+0x338>)
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 fb4d 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008a5a:	f107 0308 	add.w	r3, r7, #8
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7f7 fbb6 	bl	80001d0 <strlen>
 8008a64:	4603      	mov	r3, r0
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	f107 0108 	add.w	r1, r7, #8
 8008a6c:	230a      	movs	r3, #10
 8008a6e:	482b      	ldr	r0, [pc, #172]	; (8008b1c <printRadioSettings+0x31c>)
 8008a70:	f7fd fcf9 	bl	8006466 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8008a74:	2006      	movs	r0, #6
 8008a76:	f7ff f9e7 	bl	8007e48 <NRF24_read_register>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8008a80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008a84:	f003 0308 	and.w	r3, r3, #8
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d006      	beq.n	8008a9a <printRadioSettings+0x29a>
 8008a8c:	f107 0308 	add.w	r3, r7, #8
 8008a90:	492a      	ldr	r1, [pc, #168]	; (8008b3c <printRadioSettings+0x33c>)
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 fb2e 	bl	80090f4 <siprintf>
 8008a98:	e005      	b.n	8008aa6 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8008a9a:	f107 0308 	add.w	r3, r7, #8
 8008a9e:	4928      	ldr	r1, [pc, #160]	; (8008b40 <printRadioSettings+0x340>)
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fb27 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008aa6:	f107 0308 	add.w	r3, r7, #8
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7f7 fb90 	bl	80001d0 <strlen>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	f107 0108 	add.w	r1, r7, #8
 8008ab8:	230a      	movs	r3, #10
 8008aba:	4818      	ldr	r0, [pc, #96]	; (8008b1c <printRadioSettings+0x31c>)
 8008abc:	f7fd fcd3 	bl	8006466 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8008ac0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008ac4:	f003 0306 	and.w	r3, r3, #6
 8008ac8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8008acc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008ad0:	085b      	lsrs	r3, r3, #1
 8008ad2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8008ad6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <printRadioSettings+0x2ec>
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	4918      	ldr	r1, [pc, #96]	; (8008b44 <printRadioSettings+0x344>)
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 fb05 	bl	80090f4 <siprintf>
 8008aea:	e03b      	b.n	8008b64 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8008aec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d106      	bne.n	8008b02 <printRadioSettings+0x302>
 8008af4:	f107 0308 	add.w	r3, r7, #8
 8008af8:	4913      	ldr	r1, [pc, #76]	; (8008b48 <printRadioSettings+0x348>)
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fafa 	bl	80090f4 <siprintf>
 8008b00:	e030      	b.n	8008b64 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8008b02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d122      	bne.n	8008b50 <printRadioSettings+0x350>
 8008b0a:	f107 0308 	add.w	r3, r7, #8
 8008b0e:	490f      	ldr	r1, [pc, #60]	; (8008b4c <printRadioSettings+0x34c>)
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 faef 	bl	80090f4 <siprintf>
 8008b16:	e025      	b.n	8008b64 <printRadioSettings+0x364>
 8008b18:	0800b670 	.word	0x0800b670
 8008b1c:	2000059c 	.word	0x2000059c
 8008b20:	0800b6a4 	.word	0x0800b6a4
 8008b24:	0800b6c0 	.word	0x0800b6c0
 8008b28:	0800b6dc 	.word	0x0800b6dc
 8008b2c:	0800b6f0 	.word	0x0800b6f0
 8008b30:	0800b734 	.word	0x0800b734
 8008b34:	0800b780 	.word	0x0800b780
 8008b38:	0800b79c 	.word	0x0800b79c
 8008b3c:	0800b7b0 	.word	0x0800b7b0
 8008b40:	0800b7c8 	.word	0x0800b7c8
 8008b44:	0800b7e0 	.word	0x0800b7e0
 8008b48:	0800b7f4 	.word	0x0800b7f4
 8008b4c:	0800b808 	.word	0x0800b808
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8008b50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d105      	bne.n	8008b64 <printRadioSettings+0x364>
 8008b58:	f107 0308 	add.w	r3, r7, #8
 8008b5c:	49d7      	ldr	r1, [pc, #860]	; (8008ebc <printRadioSettings+0x6bc>)
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fac8 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008b64:	f107 0308 	add.w	r3, r7, #8
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7f7 fb31 	bl	80001d0 <strlen>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	f107 0108 	add.w	r1, r7, #8
 8008b76:	230a      	movs	r3, #10
 8008b78:	48d1      	ldr	r0, [pc, #836]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008b7a:	f7fd fc74 	bl	8006466 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8008b7e:	463b      	mov	r3, r7
 8008b80:	2205      	movs	r2, #5
 8008b82:	4619      	mov	r1, r3
 8008b84:	200a      	movs	r0, #10
 8008b86:	f7ff f985 	bl	8007e94 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8008b8a:	793b      	ldrb	r3, [r7, #4]
 8008b8c:	461c      	mov	r4, r3
 8008b8e:	78fb      	ldrb	r3, [r7, #3]
 8008b90:	461d      	mov	r5, r3
 8008b92:	78bb      	ldrb	r3, [r7, #2]
 8008b94:	787a      	ldrb	r2, [r7, #1]
 8008b96:	7839      	ldrb	r1, [r7, #0]
 8008b98:	f107 0008 	add.w	r0, r7, #8
 8008b9c:	9102      	str	r1, [sp, #8]
 8008b9e:	9201      	str	r2, [sp, #4]
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	462b      	mov	r3, r5
 8008ba4:	4622      	mov	r2, r4
 8008ba6:	49c7      	ldr	r1, [pc, #796]	; (8008ec4 <printRadioSettings+0x6c4>)
 8008ba8:	f000 faa4 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008bac:	f107 0308 	add.w	r3, r7, #8
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7f7 fb0d 	bl	80001d0 <strlen>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	f107 0108 	add.w	r1, r7, #8
 8008bbe:	230a      	movs	r3, #10
 8008bc0:	48bf      	ldr	r0, [pc, #764]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008bc2:	f7fd fc50 	bl	8006466 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8008bc6:	463b      	mov	r3, r7
 8008bc8:	2205      	movs	r2, #5
 8008bca:	4619      	mov	r1, r3
 8008bcc:	200b      	movs	r0, #11
 8008bce:	f7ff f961 	bl	8007e94 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8008bd2:	793b      	ldrb	r3, [r7, #4]
 8008bd4:	461c      	mov	r4, r3
 8008bd6:	78fb      	ldrb	r3, [r7, #3]
 8008bd8:	461d      	mov	r5, r3
 8008bda:	78bb      	ldrb	r3, [r7, #2]
 8008bdc:	787a      	ldrb	r2, [r7, #1]
 8008bde:	7839      	ldrb	r1, [r7, #0]
 8008be0:	f107 0008 	add.w	r0, r7, #8
 8008be4:	9102      	str	r1, [sp, #8]
 8008be6:	9201      	str	r2, [sp, #4]
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	462b      	mov	r3, r5
 8008bec:	4622      	mov	r2, r4
 8008bee:	49b6      	ldr	r1, [pc, #728]	; (8008ec8 <printRadioSettings+0x6c8>)
 8008bf0:	f000 fa80 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008bf4:	f107 0308 	add.w	r3, r7, #8
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7f7 fae9 	bl	80001d0 <strlen>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	f107 0108 	add.w	r1, r7, #8
 8008c06:	230a      	movs	r3, #10
 8008c08:	48ad      	ldr	r0, [pc, #692]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008c0a:	f7fd fc2c 	bl	8006466 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8008c0e:	463b      	mov	r3, r7
 8008c10:	2201      	movs	r2, #1
 8008c12:	4619      	mov	r1, r3
 8008c14:	200c      	movs	r0, #12
 8008c16:	f7ff f93d 	bl	8007e94 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8008c1a:	783b      	ldrb	r3, [r7, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	f107 0308 	add.w	r3, r7, #8
 8008c22:	49aa      	ldr	r1, [pc, #680]	; (8008ecc <printRadioSettings+0x6cc>)
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 fa65 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008c2a:	f107 0308 	add.w	r3, r7, #8
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7f7 face 	bl	80001d0 <strlen>
 8008c34:	4603      	mov	r3, r0
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	f107 0108 	add.w	r1, r7, #8
 8008c3c:	230a      	movs	r3, #10
 8008c3e:	48a0      	ldr	r0, [pc, #640]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008c40:	f7fd fc11 	bl	8006466 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8008c44:	463b      	mov	r3, r7
 8008c46:	2201      	movs	r2, #1
 8008c48:	4619      	mov	r1, r3
 8008c4a:	200d      	movs	r0, #13
 8008c4c:	f7ff f922 	bl	8007e94 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8008c50:	783b      	ldrb	r3, [r7, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f107 0308 	add.w	r3, r7, #8
 8008c58:	499d      	ldr	r1, [pc, #628]	; (8008ed0 <printRadioSettings+0x6d0>)
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fa4a 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008c60:	f107 0308 	add.w	r3, r7, #8
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7f7 fab3 	bl	80001d0 <strlen>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	f107 0108 	add.w	r1, r7, #8
 8008c72:	230a      	movs	r3, #10
 8008c74:	4892      	ldr	r0, [pc, #584]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008c76:	f7fd fbf6 	bl	8006466 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8008c7a:	463b      	mov	r3, r7
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	4619      	mov	r1, r3
 8008c80:	200e      	movs	r0, #14
 8008c82:	f7ff f907 	bl	8007e94 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8008c86:	783b      	ldrb	r3, [r7, #0]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	f107 0308 	add.w	r3, r7, #8
 8008c8e:	4991      	ldr	r1, [pc, #580]	; (8008ed4 <printRadioSettings+0x6d4>)
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fa2f 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008c96:	f107 0308 	add.w	r3, r7, #8
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7f7 fa98 	bl	80001d0 <strlen>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	f107 0108 	add.w	r1, r7, #8
 8008ca8:	230a      	movs	r3, #10
 8008caa:	4885      	ldr	r0, [pc, #532]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008cac:	f7fd fbdb 	bl	8006466 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8008cb0:	463b      	mov	r3, r7
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	200f      	movs	r0, #15
 8008cb8:	f7ff f8ec 	bl	8007e94 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8008cbc:	783b      	ldrb	r3, [r7, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f107 0308 	add.w	r3, r7, #8
 8008cc4:	4984      	ldr	r1, [pc, #528]	; (8008ed8 <printRadioSettings+0x6d8>)
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 fa14 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008ccc:	f107 0308 	add.w	r3, r7, #8
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7f7 fa7d 	bl	80001d0 <strlen>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	f107 0108 	add.w	r1, r7, #8
 8008cde:	230a      	movs	r3, #10
 8008ce0:	4877      	ldr	r0, [pc, #476]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008ce2:	f7fd fbc0 	bl	8006466 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	2205      	movs	r2, #5
 8008cea:	4619      	mov	r1, r3
 8008cec:	2010      	movs	r0, #16
 8008cee:	f7ff f8d1 	bl	8007e94 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8008cf2:	793b      	ldrb	r3, [r7, #4]
 8008cf4:	461c      	mov	r4, r3
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	461d      	mov	r5, r3
 8008cfa:	78bb      	ldrb	r3, [r7, #2]
 8008cfc:	787a      	ldrb	r2, [r7, #1]
 8008cfe:	7839      	ldrb	r1, [r7, #0]
 8008d00:	f107 0008 	add.w	r0, r7, #8
 8008d04:	9102      	str	r1, [sp, #8]
 8008d06:	9201      	str	r2, [sp, #4]
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	462b      	mov	r3, r5
 8008d0c:	4622      	mov	r2, r4
 8008d0e:	4973      	ldr	r1, [pc, #460]	; (8008edc <printRadioSettings+0x6dc>)
 8008d10:	f000 f9f0 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008d14:	f107 0308 	add.w	r3, r7, #8
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7f7 fa59 	bl	80001d0 <strlen>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	f107 0108 	add.w	r1, r7, #8
 8008d26:	230a      	movs	r3, #10
 8008d28:	4865      	ldr	r0, [pc, #404]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008d2a:	f7fd fb9c 	bl	8006466 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8008d2e:	2011      	movs	r0, #17
 8008d30:	f7ff f88a 	bl	8007e48 <NRF24_read_register>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8008d3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008d3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d42:	f107 0308 	add.w	r3, r7, #8
 8008d46:	4966      	ldr	r1, [pc, #408]	; (8008ee0 <printRadioSettings+0x6e0>)
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 f9d3 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008d4e:	f107 0308 	add.w	r3, r7, #8
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7f7 fa3c 	bl	80001d0 <strlen>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	f107 0108 	add.w	r1, r7, #8
 8008d60:	230a      	movs	r3, #10
 8008d62:	4857      	ldr	r0, [pc, #348]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008d64:	f7fd fb7f 	bl	8006466 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8008d68:	2012      	movs	r0, #18
 8008d6a:	f7ff f86d 	bl	8007e48 <NRF24_read_register>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8008d74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008d78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d7c:	f107 0308 	add.w	r3, r7, #8
 8008d80:	4958      	ldr	r1, [pc, #352]	; (8008ee4 <printRadioSettings+0x6e4>)
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 f9b6 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008d88:	f107 0308 	add.w	r3, r7, #8
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7f7 fa1f 	bl	80001d0 <strlen>
 8008d92:	4603      	mov	r3, r0
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	f107 0108 	add.w	r1, r7, #8
 8008d9a:	230a      	movs	r3, #10
 8008d9c:	4848      	ldr	r0, [pc, #288]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008d9e:	f7fd fb62 	bl	8006466 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8008da2:	2013      	movs	r0, #19
 8008da4:	f7ff f850 	bl	8007e48 <NRF24_read_register>
 8008da8:	4603      	mov	r3, r0
 8008daa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8008dae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008db2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008db6:	f107 0308 	add.w	r3, r7, #8
 8008dba:	494b      	ldr	r1, [pc, #300]	; (8008ee8 <printRadioSettings+0x6e8>)
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 f999 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008dc2:	f107 0308 	add.w	r3, r7, #8
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7f7 fa02 	bl	80001d0 <strlen>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	f107 0108 	add.w	r1, r7, #8
 8008dd4:	230a      	movs	r3, #10
 8008dd6:	483a      	ldr	r0, [pc, #232]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008dd8:	f7fd fb45 	bl	8006466 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8008ddc:	2014      	movs	r0, #20
 8008dde:	f7ff f833 	bl	8007e48 <NRF24_read_register>
 8008de2:	4603      	mov	r3, r0
 8008de4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8008de8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008dec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008df0:	f107 0308 	add.w	r3, r7, #8
 8008df4:	493d      	ldr	r1, [pc, #244]	; (8008eec <printRadioSettings+0x6ec>)
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 f97c 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008dfc:	f107 0308 	add.w	r3, r7, #8
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7f7 f9e5 	bl	80001d0 <strlen>
 8008e06:	4603      	mov	r3, r0
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	f107 0108 	add.w	r1, r7, #8
 8008e0e:	230a      	movs	r3, #10
 8008e10:	482b      	ldr	r0, [pc, #172]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008e12:	f7fd fb28 	bl	8006466 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8008e16:	2015      	movs	r0, #21
 8008e18:	f7ff f816 	bl	8007e48 <NRF24_read_register>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8008e22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008e26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e2a:	f107 0308 	add.w	r3, r7, #8
 8008e2e:	4930      	ldr	r1, [pc, #192]	; (8008ef0 <printRadioSettings+0x6f0>)
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 f95f 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008e36:	f107 0308 	add.w	r3, r7, #8
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7f7 f9c8 	bl	80001d0 <strlen>
 8008e40:	4603      	mov	r3, r0
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	f107 0108 	add.w	r1, r7, #8
 8008e48:	230a      	movs	r3, #10
 8008e4a:	481d      	ldr	r0, [pc, #116]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008e4c:	f7fd fb0b 	bl	8006466 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8008e50:	2016      	movs	r0, #22
 8008e52:	f7fe fff9 	bl	8007e48 <NRF24_read_register>
 8008e56:	4603      	mov	r3, r0
 8008e58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8008e5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008e60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e64:	f107 0308 	add.w	r3, r7, #8
 8008e68:	4922      	ldr	r1, [pc, #136]	; (8008ef4 <printRadioSettings+0x6f4>)
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 f942 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008e70:	f107 0308 	add.w	r3, r7, #8
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7f7 f9ab 	bl	80001d0 <strlen>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	f107 0108 	add.w	r1, r7, #8
 8008e82:	230a      	movs	r3, #10
 8008e84:	480e      	ldr	r0, [pc, #56]	; (8008ec0 <printRadioSettings+0x6c0>)
 8008e86:	f7fd faee 	bl	8006466 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8008e8a:	201c      	movs	r0, #28
 8008e8c:	f7fe ffdc 	bl	8007e48 <NRF24_read_register>
 8008e90:	4603      	mov	r3, r0
 8008e92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008e96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008e9a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	bfcc      	ite	gt
 8008ea2:	2301      	movgt	r3, #1
 8008ea4:	2300      	movle	r3, #0
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008eaa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008eae:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bfcc      	ite	gt
 8008eb6:	2301      	movgt	r3, #1
 8008eb8:	2300      	movle	r3, #0
 8008eba:	e01d      	b.n	8008ef8 <printRadioSettings+0x6f8>
 8008ebc:	0800b81c 	.word	0x0800b81c
 8008ec0:	2000059c 	.word	0x2000059c
 8008ec4:	0800b830 	.word	0x0800b830
 8008ec8:	0800b860 	.word	0x0800b860
 8008ecc:	0800b890 	.word	0x0800b890
 8008ed0:	0800b8b8 	.word	0x0800b8b8
 8008ed4:	0800b8e0 	.word	0x0800b8e0
 8008ed8:	0800b908 	.word	0x0800b908
 8008edc:	0800b930 	.word	0x0800b930
 8008ee0:	0800b95c 	.word	0x0800b95c
 8008ee4:	0800b978 	.word	0x0800b978
 8008ee8:	0800b994 	.word	0x0800b994
 8008eec:	0800b9b0 	.word	0x0800b9b0
 8008ef0:	0800b9cc 	.word	0x0800b9cc
 8008ef4:	0800b9e8 	.word	0x0800b9e8
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008efc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008f00:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bfcc      	ite	gt
 8008f08:	2301      	movgt	r3, #1
 8008f0a:	2300      	movle	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008f10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008f14:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bfcc      	ite	gt
 8008f1c:	2301      	movgt	r3, #1
 8008f1e:	2300      	movle	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008f24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008f28:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bfcc      	ite	gt
 8008f30:	2301      	movgt	r3, #1
 8008f32:	2300      	movle	r3, #0
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008f38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008f3c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	bfcc      	ite	gt
 8008f44:	2301      	movgt	r3, #1
 8008f46:	2300      	movle	r3, #0
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	f107 0008 	add.w	r0, r7, #8
 8008f4e:	9303      	str	r3, [sp, #12]
 8008f50:	9402      	str	r4, [sp, #8]
 8008f52:	9101      	str	r1, [sp, #4]
 8008f54:	9200      	str	r2, [sp, #0]
 8008f56:	4633      	mov	r3, r6
 8008f58:	462a      	mov	r2, r5
 8008f5a:	4936      	ldr	r1, [pc, #216]	; (8009034 <printRadioSettings+0x834>)
 8008f5c:	f000 f8ca 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008f60:	f107 0308 	add.w	r3, r7, #8
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7f7 f933 	bl	80001d0 <strlen>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	f107 0108 	add.w	r1, r7, #8
 8008f72:	230a      	movs	r3, #10
 8008f74:	4830      	ldr	r0, [pc, #192]	; (8009038 <printRadioSettings+0x838>)
 8008f76:	f7fd fa76 	bl	8006466 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8008f7a:	201d      	movs	r0, #29
 8008f7c:	f7fe ff64 	bl	8007e48 <NRF24_read_register>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8008f86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d006      	beq.n	8008fa0 <printRadioSettings+0x7a0>
 8008f92:	f107 0308 	add.w	r3, r7, #8
 8008f96:	4929      	ldr	r1, [pc, #164]	; (800903c <printRadioSettings+0x83c>)
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 f8ab 	bl	80090f4 <siprintf>
 8008f9e:	e005      	b.n	8008fac <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8008fa0:	f107 0308 	add.w	r3, r7, #8
 8008fa4:	4926      	ldr	r1, [pc, #152]	; (8009040 <printRadioSettings+0x840>)
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f8a4 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008fac:	f107 0308 	add.w	r3, r7, #8
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7f7 f90d 	bl	80001d0 <strlen>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	f107 0108 	add.w	r1, r7, #8
 8008fbe:	230a      	movs	r3, #10
 8008fc0:	481d      	ldr	r0, [pc, #116]	; (8009038 <printRadioSettings+0x838>)
 8008fc2:	f7fd fa50 	bl	8006466 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8008fc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d006      	beq.n	8008fe0 <printRadioSettings+0x7e0>
 8008fd2:	f107 0308 	add.w	r3, r7, #8
 8008fd6:	491b      	ldr	r1, [pc, #108]	; (8009044 <printRadioSettings+0x844>)
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 f88b 	bl	80090f4 <siprintf>
 8008fde:	e005      	b.n	8008fec <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8008fe0:	f107 0308 	add.w	r3, r7, #8
 8008fe4:	4918      	ldr	r1, [pc, #96]	; (8009048 <printRadioSettings+0x848>)
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 f884 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008fec:	f107 0308 	add.w	r3, r7, #8
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7f7 f8ed 	bl	80001d0 <strlen>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	f107 0108 	add.w	r1, r7, #8
 8008ffe:	230a      	movs	r3, #10
 8009000:	480d      	ldr	r0, [pc, #52]	; (8009038 <printRadioSettings+0x838>)
 8009002:	f7fd fa30 	bl	8006466 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8009006:	f107 0308 	add.w	r3, r7, #8
 800900a:	4910      	ldr	r1, [pc, #64]	; (800904c <printRadioSettings+0x84c>)
 800900c:	4618      	mov	r0, r3
 800900e:	f000 f871 	bl	80090f4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009012:	f107 0308 	add.w	r3, r7, #8
 8009016:	4618      	mov	r0, r3
 8009018:	f7f7 f8da 	bl	80001d0 <strlen>
 800901c:	4603      	mov	r3, r0
 800901e:	b29a      	uxth	r2, r3
 8009020:	f107 0108 	add.w	r1, r7, #8
 8009024:	230a      	movs	r3, #10
 8009026:	4804      	ldr	r0, [pc, #16]	; (8009038 <printRadioSettings+0x838>)
 8009028:	f7fd fa1d 	bl	8006466 <HAL_UART_Transmit>
}
 800902c:	bf00      	nop
 800902e:	3774      	adds	r7, #116	; 0x74
 8009030:	46bd      	mov	sp, r7
 8009032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009034:	0800ba04 	.word	0x0800ba04
 8009038:	2000059c 	.word	0x2000059c
 800903c:	0800ba50 	.word	0x0800ba50
 8009040:	0800ba68 	.word	0x0800ba68
 8009044:	0800ba80 	.word	0x0800ba80
 8009048:	0800ba9c 	.word	0x0800ba9c
 800904c:	0800b670 	.word	0x0800b670

08009050 <__errno>:
 8009050:	4b01      	ldr	r3, [pc, #4]	; (8009058 <__errno+0x8>)
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	2000014c 	.word	0x2000014c

0800905c <__libc_init_array>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	4d0d      	ldr	r5, [pc, #52]	; (8009094 <__libc_init_array+0x38>)
 8009060:	4c0d      	ldr	r4, [pc, #52]	; (8009098 <__libc_init_array+0x3c>)
 8009062:	1b64      	subs	r4, r4, r5
 8009064:	10a4      	asrs	r4, r4, #2
 8009066:	2600      	movs	r6, #0
 8009068:	42a6      	cmp	r6, r4
 800906a:	d109      	bne.n	8009080 <__libc_init_array+0x24>
 800906c:	4d0b      	ldr	r5, [pc, #44]	; (800909c <__libc_init_array+0x40>)
 800906e:	4c0c      	ldr	r4, [pc, #48]	; (80090a0 <__libc_init_array+0x44>)
 8009070:	f002 faf0 	bl	800b654 <_init>
 8009074:	1b64      	subs	r4, r4, r5
 8009076:	10a4      	asrs	r4, r4, #2
 8009078:	2600      	movs	r6, #0
 800907a:	42a6      	cmp	r6, r4
 800907c:	d105      	bne.n	800908a <__libc_init_array+0x2e>
 800907e:	bd70      	pop	{r4, r5, r6, pc}
 8009080:	f855 3b04 	ldr.w	r3, [r5], #4
 8009084:	4798      	blx	r3
 8009086:	3601      	adds	r6, #1
 8009088:	e7ee      	b.n	8009068 <__libc_init_array+0xc>
 800908a:	f855 3b04 	ldr.w	r3, [r5], #4
 800908e:	4798      	blx	r3
 8009090:	3601      	adds	r6, #1
 8009092:	e7f2      	b.n	800907a <__libc_init_array+0x1e>
 8009094:	0800be50 	.word	0x0800be50
 8009098:	0800be50 	.word	0x0800be50
 800909c:	0800be50 	.word	0x0800be50
 80090a0:	0800be54 	.word	0x0800be54

080090a4 <memcpy>:
 80090a4:	440a      	add	r2, r1
 80090a6:	4291      	cmp	r1, r2
 80090a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80090ac:	d100      	bne.n	80090b0 <memcpy+0xc>
 80090ae:	4770      	bx	lr
 80090b0:	b510      	push	{r4, lr}
 80090b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090ba:	4291      	cmp	r1, r2
 80090bc:	d1f9      	bne.n	80090b2 <memcpy+0xe>
 80090be:	bd10      	pop	{r4, pc}

080090c0 <memset>:
 80090c0:	4402      	add	r2, r0
 80090c2:	4603      	mov	r3, r0
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d100      	bne.n	80090ca <memset+0xa>
 80090c8:	4770      	bx	lr
 80090ca:	f803 1b01 	strb.w	r1, [r3], #1
 80090ce:	e7f9      	b.n	80090c4 <memset+0x4>

080090d0 <copysign>:
 80090d0:	b082      	sub	sp, #8
 80090d2:	ec51 0b10 	vmov	r0, r1, d0
 80090d6:	ed8d 1b00 	vstr	d1, [sp]
 80090da:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 80090de:	9901      	ldr	r1, [sp, #4]
 80090e0:	ee10 2a10 	vmov	r2, s0
 80090e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80090e8:	ea40 0301 	orr.w	r3, r0, r1
 80090ec:	ec43 2b10 	vmov	d0, r2, r3
 80090f0:	b002      	add	sp, #8
 80090f2:	4770      	bx	lr

080090f4 <siprintf>:
 80090f4:	b40e      	push	{r1, r2, r3}
 80090f6:	b500      	push	{lr}
 80090f8:	b09c      	sub	sp, #112	; 0x70
 80090fa:	ab1d      	add	r3, sp, #116	; 0x74
 80090fc:	9002      	str	r0, [sp, #8]
 80090fe:	9006      	str	r0, [sp, #24]
 8009100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009104:	4809      	ldr	r0, [pc, #36]	; (800912c <siprintf+0x38>)
 8009106:	9107      	str	r1, [sp, #28]
 8009108:	9104      	str	r1, [sp, #16]
 800910a:	4909      	ldr	r1, [pc, #36]	; (8009130 <siprintf+0x3c>)
 800910c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009110:	9105      	str	r1, [sp, #20]
 8009112:	6800      	ldr	r0, [r0, #0]
 8009114:	9301      	str	r3, [sp, #4]
 8009116:	a902      	add	r1, sp, #8
 8009118:	f000 f868 	bl	80091ec <_svfiprintf_r>
 800911c:	9b02      	ldr	r3, [sp, #8]
 800911e:	2200      	movs	r2, #0
 8009120:	701a      	strb	r2, [r3, #0]
 8009122:	b01c      	add	sp, #112	; 0x70
 8009124:	f85d eb04 	ldr.w	lr, [sp], #4
 8009128:	b003      	add	sp, #12
 800912a:	4770      	bx	lr
 800912c:	2000014c 	.word	0x2000014c
 8009130:	ffff0208 	.word	0xffff0208

08009134 <__ssputs_r>:
 8009134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009138:	688e      	ldr	r6, [r1, #8]
 800913a:	429e      	cmp	r6, r3
 800913c:	4682      	mov	sl, r0
 800913e:	460c      	mov	r4, r1
 8009140:	4690      	mov	r8, r2
 8009142:	461f      	mov	r7, r3
 8009144:	d838      	bhi.n	80091b8 <__ssputs_r+0x84>
 8009146:	898a      	ldrh	r2, [r1, #12]
 8009148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800914c:	d032      	beq.n	80091b4 <__ssputs_r+0x80>
 800914e:	6825      	ldr	r5, [r4, #0]
 8009150:	6909      	ldr	r1, [r1, #16]
 8009152:	eba5 0901 	sub.w	r9, r5, r1
 8009156:	6965      	ldr	r5, [r4, #20]
 8009158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800915c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009160:	3301      	adds	r3, #1
 8009162:	444b      	add	r3, r9
 8009164:	106d      	asrs	r5, r5, #1
 8009166:	429d      	cmp	r5, r3
 8009168:	bf38      	it	cc
 800916a:	461d      	movcc	r5, r3
 800916c:	0553      	lsls	r3, r2, #21
 800916e:	d531      	bpl.n	80091d4 <__ssputs_r+0xa0>
 8009170:	4629      	mov	r1, r5
 8009172:	f000 fb55 	bl	8009820 <_malloc_r>
 8009176:	4606      	mov	r6, r0
 8009178:	b950      	cbnz	r0, 8009190 <__ssputs_r+0x5c>
 800917a:	230c      	movs	r3, #12
 800917c:	f8ca 3000 	str.w	r3, [sl]
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009186:	81a3      	strh	r3, [r4, #12]
 8009188:	f04f 30ff 	mov.w	r0, #4294967295
 800918c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009190:	6921      	ldr	r1, [r4, #16]
 8009192:	464a      	mov	r2, r9
 8009194:	f7ff ff86 	bl	80090a4 <memcpy>
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800919e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	6126      	str	r6, [r4, #16]
 80091a6:	6165      	str	r5, [r4, #20]
 80091a8:	444e      	add	r6, r9
 80091aa:	eba5 0509 	sub.w	r5, r5, r9
 80091ae:	6026      	str	r6, [r4, #0]
 80091b0:	60a5      	str	r5, [r4, #8]
 80091b2:	463e      	mov	r6, r7
 80091b4:	42be      	cmp	r6, r7
 80091b6:	d900      	bls.n	80091ba <__ssputs_r+0x86>
 80091b8:	463e      	mov	r6, r7
 80091ba:	6820      	ldr	r0, [r4, #0]
 80091bc:	4632      	mov	r2, r6
 80091be:	4641      	mov	r1, r8
 80091c0:	f000 faa8 	bl	8009714 <memmove>
 80091c4:	68a3      	ldr	r3, [r4, #8]
 80091c6:	1b9b      	subs	r3, r3, r6
 80091c8:	60a3      	str	r3, [r4, #8]
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	4433      	add	r3, r6
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	2000      	movs	r0, #0
 80091d2:	e7db      	b.n	800918c <__ssputs_r+0x58>
 80091d4:	462a      	mov	r2, r5
 80091d6:	f000 fb97 	bl	8009908 <_realloc_r>
 80091da:	4606      	mov	r6, r0
 80091dc:	2800      	cmp	r0, #0
 80091de:	d1e1      	bne.n	80091a4 <__ssputs_r+0x70>
 80091e0:	6921      	ldr	r1, [r4, #16]
 80091e2:	4650      	mov	r0, sl
 80091e4:	f000 fab0 	bl	8009748 <_free_r>
 80091e8:	e7c7      	b.n	800917a <__ssputs_r+0x46>
	...

080091ec <_svfiprintf_r>:
 80091ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f0:	4698      	mov	r8, r3
 80091f2:	898b      	ldrh	r3, [r1, #12]
 80091f4:	061b      	lsls	r3, r3, #24
 80091f6:	b09d      	sub	sp, #116	; 0x74
 80091f8:	4607      	mov	r7, r0
 80091fa:	460d      	mov	r5, r1
 80091fc:	4614      	mov	r4, r2
 80091fe:	d50e      	bpl.n	800921e <_svfiprintf_r+0x32>
 8009200:	690b      	ldr	r3, [r1, #16]
 8009202:	b963      	cbnz	r3, 800921e <_svfiprintf_r+0x32>
 8009204:	2140      	movs	r1, #64	; 0x40
 8009206:	f000 fb0b 	bl	8009820 <_malloc_r>
 800920a:	6028      	str	r0, [r5, #0]
 800920c:	6128      	str	r0, [r5, #16]
 800920e:	b920      	cbnz	r0, 800921a <_svfiprintf_r+0x2e>
 8009210:	230c      	movs	r3, #12
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
 8009218:	e0d1      	b.n	80093be <_svfiprintf_r+0x1d2>
 800921a:	2340      	movs	r3, #64	; 0x40
 800921c:	616b      	str	r3, [r5, #20]
 800921e:	2300      	movs	r3, #0
 8009220:	9309      	str	r3, [sp, #36]	; 0x24
 8009222:	2320      	movs	r3, #32
 8009224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009228:	f8cd 800c 	str.w	r8, [sp, #12]
 800922c:	2330      	movs	r3, #48	; 0x30
 800922e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093d8 <_svfiprintf_r+0x1ec>
 8009232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009236:	f04f 0901 	mov.w	r9, #1
 800923a:	4623      	mov	r3, r4
 800923c:	469a      	mov	sl, r3
 800923e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009242:	b10a      	cbz	r2, 8009248 <_svfiprintf_r+0x5c>
 8009244:	2a25      	cmp	r2, #37	; 0x25
 8009246:	d1f9      	bne.n	800923c <_svfiprintf_r+0x50>
 8009248:	ebba 0b04 	subs.w	fp, sl, r4
 800924c:	d00b      	beq.n	8009266 <_svfiprintf_r+0x7a>
 800924e:	465b      	mov	r3, fp
 8009250:	4622      	mov	r2, r4
 8009252:	4629      	mov	r1, r5
 8009254:	4638      	mov	r0, r7
 8009256:	f7ff ff6d 	bl	8009134 <__ssputs_r>
 800925a:	3001      	adds	r0, #1
 800925c:	f000 80aa 	beq.w	80093b4 <_svfiprintf_r+0x1c8>
 8009260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009262:	445a      	add	r2, fp
 8009264:	9209      	str	r2, [sp, #36]	; 0x24
 8009266:	f89a 3000 	ldrb.w	r3, [sl]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 80a2 	beq.w	80093b4 <_svfiprintf_r+0x1c8>
 8009270:	2300      	movs	r3, #0
 8009272:	f04f 32ff 	mov.w	r2, #4294967295
 8009276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800927a:	f10a 0a01 	add.w	sl, sl, #1
 800927e:	9304      	str	r3, [sp, #16]
 8009280:	9307      	str	r3, [sp, #28]
 8009282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009286:	931a      	str	r3, [sp, #104]	; 0x68
 8009288:	4654      	mov	r4, sl
 800928a:	2205      	movs	r2, #5
 800928c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009290:	4851      	ldr	r0, [pc, #324]	; (80093d8 <_svfiprintf_r+0x1ec>)
 8009292:	f7f6 ffa5 	bl	80001e0 <memchr>
 8009296:	9a04      	ldr	r2, [sp, #16]
 8009298:	b9d8      	cbnz	r0, 80092d2 <_svfiprintf_r+0xe6>
 800929a:	06d0      	lsls	r0, r2, #27
 800929c:	bf44      	itt	mi
 800929e:	2320      	movmi	r3, #32
 80092a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092a4:	0711      	lsls	r1, r2, #28
 80092a6:	bf44      	itt	mi
 80092a8:	232b      	movmi	r3, #43	; 0x2b
 80092aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ae:	f89a 3000 	ldrb.w	r3, [sl]
 80092b2:	2b2a      	cmp	r3, #42	; 0x2a
 80092b4:	d015      	beq.n	80092e2 <_svfiprintf_r+0xf6>
 80092b6:	9a07      	ldr	r2, [sp, #28]
 80092b8:	4654      	mov	r4, sl
 80092ba:	2000      	movs	r0, #0
 80092bc:	f04f 0c0a 	mov.w	ip, #10
 80092c0:	4621      	mov	r1, r4
 80092c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092c6:	3b30      	subs	r3, #48	; 0x30
 80092c8:	2b09      	cmp	r3, #9
 80092ca:	d94e      	bls.n	800936a <_svfiprintf_r+0x17e>
 80092cc:	b1b0      	cbz	r0, 80092fc <_svfiprintf_r+0x110>
 80092ce:	9207      	str	r2, [sp, #28]
 80092d0:	e014      	b.n	80092fc <_svfiprintf_r+0x110>
 80092d2:	eba0 0308 	sub.w	r3, r0, r8
 80092d6:	fa09 f303 	lsl.w	r3, r9, r3
 80092da:	4313      	orrs	r3, r2
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	46a2      	mov	sl, r4
 80092e0:	e7d2      	b.n	8009288 <_svfiprintf_r+0x9c>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	1d19      	adds	r1, r3, #4
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	9103      	str	r1, [sp, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	bfbb      	ittet	lt
 80092ee:	425b      	neglt	r3, r3
 80092f0:	f042 0202 	orrlt.w	r2, r2, #2
 80092f4:	9307      	strge	r3, [sp, #28]
 80092f6:	9307      	strlt	r3, [sp, #28]
 80092f8:	bfb8      	it	lt
 80092fa:	9204      	strlt	r2, [sp, #16]
 80092fc:	7823      	ldrb	r3, [r4, #0]
 80092fe:	2b2e      	cmp	r3, #46	; 0x2e
 8009300:	d10c      	bne.n	800931c <_svfiprintf_r+0x130>
 8009302:	7863      	ldrb	r3, [r4, #1]
 8009304:	2b2a      	cmp	r3, #42	; 0x2a
 8009306:	d135      	bne.n	8009374 <_svfiprintf_r+0x188>
 8009308:	9b03      	ldr	r3, [sp, #12]
 800930a:	1d1a      	adds	r2, r3, #4
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	9203      	str	r2, [sp, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	bfb8      	it	lt
 8009314:	f04f 33ff 	movlt.w	r3, #4294967295
 8009318:	3402      	adds	r4, #2
 800931a:	9305      	str	r3, [sp, #20]
 800931c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093e8 <_svfiprintf_r+0x1fc>
 8009320:	7821      	ldrb	r1, [r4, #0]
 8009322:	2203      	movs	r2, #3
 8009324:	4650      	mov	r0, sl
 8009326:	f7f6 ff5b 	bl	80001e0 <memchr>
 800932a:	b140      	cbz	r0, 800933e <_svfiprintf_r+0x152>
 800932c:	2340      	movs	r3, #64	; 0x40
 800932e:	eba0 000a 	sub.w	r0, r0, sl
 8009332:	fa03 f000 	lsl.w	r0, r3, r0
 8009336:	9b04      	ldr	r3, [sp, #16]
 8009338:	4303      	orrs	r3, r0
 800933a:	3401      	adds	r4, #1
 800933c:	9304      	str	r3, [sp, #16]
 800933e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009342:	4826      	ldr	r0, [pc, #152]	; (80093dc <_svfiprintf_r+0x1f0>)
 8009344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009348:	2206      	movs	r2, #6
 800934a:	f7f6 ff49 	bl	80001e0 <memchr>
 800934e:	2800      	cmp	r0, #0
 8009350:	d038      	beq.n	80093c4 <_svfiprintf_r+0x1d8>
 8009352:	4b23      	ldr	r3, [pc, #140]	; (80093e0 <_svfiprintf_r+0x1f4>)
 8009354:	bb1b      	cbnz	r3, 800939e <_svfiprintf_r+0x1b2>
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	3307      	adds	r3, #7
 800935a:	f023 0307 	bic.w	r3, r3, #7
 800935e:	3308      	adds	r3, #8
 8009360:	9303      	str	r3, [sp, #12]
 8009362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009364:	4433      	add	r3, r6
 8009366:	9309      	str	r3, [sp, #36]	; 0x24
 8009368:	e767      	b.n	800923a <_svfiprintf_r+0x4e>
 800936a:	fb0c 3202 	mla	r2, ip, r2, r3
 800936e:	460c      	mov	r4, r1
 8009370:	2001      	movs	r0, #1
 8009372:	e7a5      	b.n	80092c0 <_svfiprintf_r+0xd4>
 8009374:	2300      	movs	r3, #0
 8009376:	3401      	adds	r4, #1
 8009378:	9305      	str	r3, [sp, #20]
 800937a:	4619      	mov	r1, r3
 800937c:	f04f 0c0a 	mov.w	ip, #10
 8009380:	4620      	mov	r0, r4
 8009382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009386:	3a30      	subs	r2, #48	; 0x30
 8009388:	2a09      	cmp	r2, #9
 800938a:	d903      	bls.n	8009394 <_svfiprintf_r+0x1a8>
 800938c:	2b00      	cmp	r3, #0
 800938e:	d0c5      	beq.n	800931c <_svfiprintf_r+0x130>
 8009390:	9105      	str	r1, [sp, #20]
 8009392:	e7c3      	b.n	800931c <_svfiprintf_r+0x130>
 8009394:	fb0c 2101 	mla	r1, ip, r1, r2
 8009398:	4604      	mov	r4, r0
 800939a:	2301      	movs	r3, #1
 800939c:	e7f0      	b.n	8009380 <_svfiprintf_r+0x194>
 800939e:	ab03      	add	r3, sp, #12
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	462a      	mov	r2, r5
 80093a4:	4b0f      	ldr	r3, [pc, #60]	; (80093e4 <_svfiprintf_r+0x1f8>)
 80093a6:	a904      	add	r1, sp, #16
 80093a8:	4638      	mov	r0, r7
 80093aa:	f3af 8000 	nop.w
 80093ae:	1c42      	adds	r2, r0, #1
 80093b0:	4606      	mov	r6, r0
 80093b2:	d1d6      	bne.n	8009362 <_svfiprintf_r+0x176>
 80093b4:	89ab      	ldrh	r3, [r5, #12]
 80093b6:	065b      	lsls	r3, r3, #25
 80093b8:	f53f af2c 	bmi.w	8009214 <_svfiprintf_r+0x28>
 80093bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093be:	b01d      	add	sp, #116	; 0x74
 80093c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c4:	ab03      	add	r3, sp, #12
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	462a      	mov	r2, r5
 80093ca:	4b06      	ldr	r3, [pc, #24]	; (80093e4 <_svfiprintf_r+0x1f8>)
 80093cc:	a904      	add	r1, sp, #16
 80093ce:	4638      	mov	r0, r7
 80093d0:	f000 f87a 	bl	80094c8 <_printf_i>
 80093d4:	e7eb      	b.n	80093ae <_svfiprintf_r+0x1c2>
 80093d6:	bf00      	nop
 80093d8:	0800bbcc 	.word	0x0800bbcc
 80093dc:	0800bbd6 	.word	0x0800bbd6
 80093e0:	00000000 	.word	0x00000000
 80093e4:	08009135 	.word	0x08009135
 80093e8:	0800bbd2 	.word	0x0800bbd2

080093ec <_printf_common>:
 80093ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093f0:	4616      	mov	r6, r2
 80093f2:	4699      	mov	r9, r3
 80093f4:	688a      	ldr	r2, [r1, #8]
 80093f6:	690b      	ldr	r3, [r1, #16]
 80093f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093fc:	4293      	cmp	r3, r2
 80093fe:	bfb8      	it	lt
 8009400:	4613      	movlt	r3, r2
 8009402:	6033      	str	r3, [r6, #0]
 8009404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009408:	4607      	mov	r7, r0
 800940a:	460c      	mov	r4, r1
 800940c:	b10a      	cbz	r2, 8009412 <_printf_common+0x26>
 800940e:	3301      	adds	r3, #1
 8009410:	6033      	str	r3, [r6, #0]
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	0699      	lsls	r1, r3, #26
 8009416:	bf42      	ittt	mi
 8009418:	6833      	ldrmi	r3, [r6, #0]
 800941a:	3302      	addmi	r3, #2
 800941c:	6033      	strmi	r3, [r6, #0]
 800941e:	6825      	ldr	r5, [r4, #0]
 8009420:	f015 0506 	ands.w	r5, r5, #6
 8009424:	d106      	bne.n	8009434 <_printf_common+0x48>
 8009426:	f104 0a19 	add.w	sl, r4, #25
 800942a:	68e3      	ldr	r3, [r4, #12]
 800942c:	6832      	ldr	r2, [r6, #0]
 800942e:	1a9b      	subs	r3, r3, r2
 8009430:	42ab      	cmp	r3, r5
 8009432:	dc26      	bgt.n	8009482 <_printf_common+0x96>
 8009434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009438:	1e13      	subs	r3, r2, #0
 800943a:	6822      	ldr	r2, [r4, #0]
 800943c:	bf18      	it	ne
 800943e:	2301      	movne	r3, #1
 8009440:	0692      	lsls	r2, r2, #26
 8009442:	d42b      	bmi.n	800949c <_printf_common+0xb0>
 8009444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009448:	4649      	mov	r1, r9
 800944a:	4638      	mov	r0, r7
 800944c:	47c0      	blx	r8
 800944e:	3001      	adds	r0, #1
 8009450:	d01e      	beq.n	8009490 <_printf_common+0xa4>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	68e5      	ldr	r5, [r4, #12]
 8009456:	6832      	ldr	r2, [r6, #0]
 8009458:	f003 0306 	and.w	r3, r3, #6
 800945c:	2b04      	cmp	r3, #4
 800945e:	bf08      	it	eq
 8009460:	1aad      	subeq	r5, r5, r2
 8009462:	68a3      	ldr	r3, [r4, #8]
 8009464:	6922      	ldr	r2, [r4, #16]
 8009466:	bf0c      	ite	eq
 8009468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800946c:	2500      	movne	r5, #0
 800946e:	4293      	cmp	r3, r2
 8009470:	bfc4      	itt	gt
 8009472:	1a9b      	subgt	r3, r3, r2
 8009474:	18ed      	addgt	r5, r5, r3
 8009476:	2600      	movs	r6, #0
 8009478:	341a      	adds	r4, #26
 800947a:	42b5      	cmp	r5, r6
 800947c:	d11a      	bne.n	80094b4 <_printf_common+0xc8>
 800947e:	2000      	movs	r0, #0
 8009480:	e008      	b.n	8009494 <_printf_common+0xa8>
 8009482:	2301      	movs	r3, #1
 8009484:	4652      	mov	r2, sl
 8009486:	4649      	mov	r1, r9
 8009488:	4638      	mov	r0, r7
 800948a:	47c0      	blx	r8
 800948c:	3001      	adds	r0, #1
 800948e:	d103      	bne.n	8009498 <_printf_common+0xac>
 8009490:	f04f 30ff 	mov.w	r0, #4294967295
 8009494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009498:	3501      	adds	r5, #1
 800949a:	e7c6      	b.n	800942a <_printf_common+0x3e>
 800949c:	18e1      	adds	r1, r4, r3
 800949e:	1c5a      	adds	r2, r3, #1
 80094a0:	2030      	movs	r0, #48	; 0x30
 80094a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094a6:	4422      	add	r2, r4
 80094a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094b0:	3302      	adds	r3, #2
 80094b2:	e7c7      	b.n	8009444 <_printf_common+0x58>
 80094b4:	2301      	movs	r3, #1
 80094b6:	4622      	mov	r2, r4
 80094b8:	4649      	mov	r1, r9
 80094ba:	4638      	mov	r0, r7
 80094bc:	47c0      	blx	r8
 80094be:	3001      	adds	r0, #1
 80094c0:	d0e6      	beq.n	8009490 <_printf_common+0xa4>
 80094c2:	3601      	adds	r6, #1
 80094c4:	e7d9      	b.n	800947a <_printf_common+0x8e>
	...

080094c8 <_printf_i>:
 80094c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094cc:	7e0f      	ldrb	r7, [r1, #24]
 80094ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094d0:	2f78      	cmp	r7, #120	; 0x78
 80094d2:	4691      	mov	r9, r2
 80094d4:	4680      	mov	r8, r0
 80094d6:	460c      	mov	r4, r1
 80094d8:	469a      	mov	sl, r3
 80094da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094de:	d807      	bhi.n	80094f0 <_printf_i+0x28>
 80094e0:	2f62      	cmp	r7, #98	; 0x62
 80094e2:	d80a      	bhi.n	80094fa <_printf_i+0x32>
 80094e4:	2f00      	cmp	r7, #0
 80094e6:	f000 80d8 	beq.w	800969a <_printf_i+0x1d2>
 80094ea:	2f58      	cmp	r7, #88	; 0x58
 80094ec:	f000 80a3 	beq.w	8009636 <_printf_i+0x16e>
 80094f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094f8:	e03a      	b.n	8009570 <_printf_i+0xa8>
 80094fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094fe:	2b15      	cmp	r3, #21
 8009500:	d8f6      	bhi.n	80094f0 <_printf_i+0x28>
 8009502:	a101      	add	r1, pc, #4	; (adr r1, 8009508 <_printf_i+0x40>)
 8009504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009508:	08009561 	.word	0x08009561
 800950c:	08009575 	.word	0x08009575
 8009510:	080094f1 	.word	0x080094f1
 8009514:	080094f1 	.word	0x080094f1
 8009518:	080094f1 	.word	0x080094f1
 800951c:	080094f1 	.word	0x080094f1
 8009520:	08009575 	.word	0x08009575
 8009524:	080094f1 	.word	0x080094f1
 8009528:	080094f1 	.word	0x080094f1
 800952c:	080094f1 	.word	0x080094f1
 8009530:	080094f1 	.word	0x080094f1
 8009534:	08009681 	.word	0x08009681
 8009538:	080095a5 	.word	0x080095a5
 800953c:	08009663 	.word	0x08009663
 8009540:	080094f1 	.word	0x080094f1
 8009544:	080094f1 	.word	0x080094f1
 8009548:	080096a3 	.word	0x080096a3
 800954c:	080094f1 	.word	0x080094f1
 8009550:	080095a5 	.word	0x080095a5
 8009554:	080094f1 	.word	0x080094f1
 8009558:	080094f1 	.word	0x080094f1
 800955c:	0800966b 	.word	0x0800966b
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	1d1a      	adds	r2, r3, #4
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	602a      	str	r2, [r5, #0]
 8009568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800956c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009570:	2301      	movs	r3, #1
 8009572:	e0a3      	b.n	80096bc <_printf_i+0x1f4>
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	6829      	ldr	r1, [r5, #0]
 8009578:	0606      	lsls	r6, r0, #24
 800957a:	f101 0304 	add.w	r3, r1, #4
 800957e:	d50a      	bpl.n	8009596 <_printf_i+0xce>
 8009580:	680e      	ldr	r6, [r1, #0]
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	2e00      	cmp	r6, #0
 8009586:	da03      	bge.n	8009590 <_printf_i+0xc8>
 8009588:	232d      	movs	r3, #45	; 0x2d
 800958a:	4276      	negs	r6, r6
 800958c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009590:	485e      	ldr	r0, [pc, #376]	; (800970c <_printf_i+0x244>)
 8009592:	230a      	movs	r3, #10
 8009594:	e019      	b.n	80095ca <_printf_i+0x102>
 8009596:	680e      	ldr	r6, [r1, #0]
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800959e:	bf18      	it	ne
 80095a0:	b236      	sxthne	r6, r6
 80095a2:	e7ef      	b.n	8009584 <_printf_i+0xbc>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	6820      	ldr	r0, [r4, #0]
 80095a8:	1d19      	adds	r1, r3, #4
 80095aa:	6029      	str	r1, [r5, #0]
 80095ac:	0601      	lsls	r1, r0, #24
 80095ae:	d501      	bpl.n	80095b4 <_printf_i+0xec>
 80095b0:	681e      	ldr	r6, [r3, #0]
 80095b2:	e002      	b.n	80095ba <_printf_i+0xf2>
 80095b4:	0646      	lsls	r6, r0, #25
 80095b6:	d5fb      	bpl.n	80095b0 <_printf_i+0xe8>
 80095b8:	881e      	ldrh	r6, [r3, #0]
 80095ba:	4854      	ldr	r0, [pc, #336]	; (800970c <_printf_i+0x244>)
 80095bc:	2f6f      	cmp	r7, #111	; 0x6f
 80095be:	bf0c      	ite	eq
 80095c0:	2308      	moveq	r3, #8
 80095c2:	230a      	movne	r3, #10
 80095c4:	2100      	movs	r1, #0
 80095c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095ca:	6865      	ldr	r5, [r4, #4]
 80095cc:	60a5      	str	r5, [r4, #8]
 80095ce:	2d00      	cmp	r5, #0
 80095d0:	bfa2      	ittt	ge
 80095d2:	6821      	ldrge	r1, [r4, #0]
 80095d4:	f021 0104 	bicge.w	r1, r1, #4
 80095d8:	6021      	strge	r1, [r4, #0]
 80095da:	b90e      	cbnz	r6, 80095e0 <_printf_i+0x118>
 80095dc:	2d00      	cmp	r5, #0
 80095de:	d04d      	beq.n	800967c <_printf_i+0x1b4>
 80095e0:	4615      	mov	r5, r2
 80095e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80095e6:	fb03 6711 	mls	r7, r3, r1, r6
 80095ea:	5dc7      	ldrb	r7, [r0, r7]
 80095ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095f0:	4637      	mov	r7, r6
 80095f2:	42bb      	cmp	r3, r7
 80095f4:	460e      	mov	r6, r1
 80095f6:	d9f4      	bls.n	80095e2 <_printf_i+0x11a>
 80095f8:	2b08      	cmp	r3, #8
 80095fa:	d10b      	bne.n	8009614 <_printf_i+0x14c>
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	07de      	lsls	r6, r3, #31
 8009600:	d508      	bpl.n	8009614 <_printf_i+0x14c>
 8009602:	6923      	ldr	r3, [r4, #16]
 8009604:	6861      	ldr	r1, [r4, #4]
 8009606:	4299      	cmp	r1, r3
 8009608:	bfde      	ittt	le
 800960a:	2330      	movle	r3, #48	; 0x30
 800960c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009614:	1b52      	subs	r2, r2, r5
 8009616:	6122      	str	r2, [r4, #16]
 8009618:	f8cd a000 	str.w	sl, [sp]
 800961c:	464b      	mov	r3, r9
 800961e:	aa03      	add	r2, sp, #12
 8009620:	4621      	mov	r1, r4
 8009622:	4640      	mov	r0, r8
 8009624:	f7ff fee2 	bl	80093ec <_printf_common>
 8009628:	3001      	adds	r0, #1
 800962a:	d14c      	bne.n	80096c6 <_printf_i+0x1fe>
 800962c:	f04f 30ff 	mov.w	r0, #4294967295
 8009630:	b004      	add	sp, #16
 8009632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009636:	4835      	ldr	r0, [pc, #212]	; (800970c <_printf_i+0x244>)
 8009638:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800963c:	6829      	ldr	r1, [r5, #0]
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	f851 6b04 	ldr.w	r6, [r1], #4
 8009644:	6029      	str	r1, [r5, #0]
 8009646:	061d      	lsls	r5, r3, #24
 8009648:	d514      	bpl.n	8009674 <_printf_i+0x1ac>
 800964a:	07df      	lsls	r7, r3, #31
 800964c:	bf44      	itt	mi
 800964e:	f043 0320 	orrmi.w	r3, r3, #32
 8009652:	6023      	strmi	r3, [r4, #0]
 8009654:	b91e      	cbnz	r6, 800965e <_printf_i+0x196>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	f023 0320 	bic.w	r3, r3, #32
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	2310      	movs	r3, #16
 8009660:	e7b0      	b.n	80095c4 <_printf_i+0xfc>
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	f043 0320 	orr.w	r3, r3, #32
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	2378      	movs	r3, #120	; 0x78
 800966c:	4828      	ldr	r0, [pc, #160]	; (8009710 <_printf_i+0x248>)
 800966e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009672:	e7e3      	b.n	800963c <_printf_i+0x174>
 8009674:	0659      	lsls	r1, r3, #25
 8009676:	bf48      	it	mi
 8009678:	b2b6      	uxthmi	r6, r6
 800967a:	e7e6      	b.n	800964a <_printf_i+0x182>
 800967c:	4615      	mov	r5, r2
 800967e:	e7bb      	b.n	80095f8 <_printf_i+0x130>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	6826      	ldr	r6, [r4, #0]
 8009684:	6961      	ldr	r1, [r4, #20]
 8009686:	1d18      	adds	r0, r3, #4
 8009688:	6028      	str	r0, [r5, #0]
 800968a:	0635      	lsls	r5, r6, #24
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	d501      	bpl.n	8009694 <_printf_i+0x1cc>
 8009690:	6019      	str	r1, [r3, #0]
 8009692:	e002      	b.n	800969a <_printf_i+0x1d2>
 8009694:	0670      	lsls	r0, r6, #25
 8009696:	d5fb      	bpl.n	8009690 <_printf_i+0x1c8>
 8009698:	8019      	strh	r1, [r3, #0]
 800969a:	2300      	movs	r3, #0
 800969c:	6123      	str	r3, [r4, #16]
 800969e:	4615      	mov	r5, r2
 80096a0:	e7ba      	b.n	8009618 <_printf_i+0x150>
 80096a2:	682b      	ldr	r3, [r5, #0]
 80096a4:	1d1a      	adds	r2, r3, #4
 80096a6:	602a      	str	r2, [r5, #0]
 80096a8:	681d      	ldr	r5, [r3, #0]
 80096aa:	6862      	ldr	r2, [r4, #4]
 80096ac:	2100      	movs	r1, #0
 80096ae:	4628      	mov	r0, r5
 80096b0:	f7f6 fd96 	bl	80001e0 <memchr>
 80096b4:	b108      	cbz	r0, 80096ba <_printf_i+0x1f2>
 80096b6:	1b40      	subs	r0, r0, r5
 80096b8:	6060      	str	r0, [r4, #4]
 80096ba:	6863      	ldr	r3, [r4, #4]
 80096bc:	6123      	str	r3, [r4, #16]
 80096be:	2300      	movs	r3, #0
 80096c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c4:	e7a8      	b.n	8009618 <_printf_i+0x150>
 80096c6:	6923      	ldr	r3, [r4, #16]
 80096c8:	462a      	mov	r2, r5
 80096ca:	4649      	mov	r1, r9
 80096cc:	4640      	mov	r0, r8
 80096ce:	47d0      	blx	sl
 80096d0:	3001      	adds	r0, #1
 80096d2:	d0ab      	beq.n	800962c <_printf_i+0x164>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	079b      	lsls	r3, r3, #30
 80096d8:	d413      	bmi.n	8009702 <_printf_i+0x23a>
 80096da:	68e0      	ldr	r0, [r4, #12]
 80096dc:	9b03      	ldr	r3, [sp, #12]
 80096de:	4298      	cmp	r0, r3
 80096e0:	bfb8      	it	lt
 80096e2:	4618      	movlt	r0, r3
 80096e4:	e7a4      	b.n	8009630 <_printf_i+0x168>
 80096e6:	2301      	movs	r3, #1
 80096e8:	4632      	mov	r2, r6
 80096ea:	4649      	mov	r1, r9
 80096ec:	4640      	mov	r0, r8
 80096ee:	47d0      	blx	sl
 80096f0:	3001      	adds	r0, #1
 80096f2:	d09b      	beq.n	800962c <_printf_i+0x164>
 80096f4:	3501      	adds	r5, #1
 80096f6:	68e3      	ldr	r3, [r4, #12]
 80096f8:	9903      	ldr	r1, [sp, #12]
 80096fa:	1a5b      	subs	r3, r3, r1
 80096fc:	42ab      	cmp	r3, r5
 80096fe:	dcf2      	bgt.n	80096e6 <_printf_i+0x21e>
 8009700:	e7eb      	b.n	80096da <_printf_i+0x212>
 8009702:	2500      	movs	r5, #0
 8009704:	f104 0619 	add.w	r6, r4, #25
 8009708:	e7f5      	b.n	80096f6 <_printf_i+0x22e>
 800970a:	bf00      	nop
 800970c:	0800bbdd 	.word	0x0800bbdd
 8009710:	0800bbee 	.word	0x0800bbee

08009714 <memmove>:
 8009714:	4288      	cmp	r0, r1
 8009716:	b510      	push	{r4, lr}
 8009718:	eb01 0402 	add.w	r4, r1, r2
 800971c:	d902      	bls.n	8009724 <memmove+0x10>
 800971e:	4284      	cmp	r4, r0
 8009720:	4623      	mov	r3, r4
 8009722:	d807      	bhi.n	8009734 <memmove+0x20>
 8009724:	1e43      	subs	r3, r0, #1
 8009726:	42a1      	cmp	r1, r4
 8009728:	d008      	beq.n	800973c <memmove+0x28>
 800972a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800972e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009732:	e7f8      	b.n	8009726 <memmove+0x12>
 8009734:	4402      	add	r2, r0
 8009736:	4601      	mov	r1, r0
 8009738:	428a      	cmp	r2, r1
 800973a:	d100      	bne.n	800973e <memmove+0x2a>
 800973c:	bd10      	pop	{r4, pc}
 800973e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009746:	e7f7      	b.n	8009738 <memmove+0x24>

08009748 <_free_r>:
 8009748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800974a:	2900      	cmp	r1, #0
 800974c:	d044      	beq.n	80097d8 <_free_r+0x90>
 800974e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009752:	9001      	str	r0, [sp, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	f1a1 0404 	sub.w	r4, r1, #4
 800975a:	bfb8      	it	lt
 800975c:	18e4      	addlt	r4, r4, r3
 800975e:	f000 f913 	bl	8009988 <__malloc_lock>
 8009762:	4a1e      	ldr	r2, [pc, #120]	; (80097dc <_free_r+0x94>)
 8009764:	9801      	ldr	r0, [sp, #4]
 8009766:	6813      	ldr	r3, [r2, #0]
 8009768:	b933      	cbnz	r3, 8009778 <_free_r+0x30>
 800976a:	6063      	str	r3, [r4, #4]
 800976c:	6014      	str	r4, [r2, #0]
 800976e:	b003      	add	sp, #12
 8009770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009774:	f000 b90e 	b.w	8009994 <__malloc_unlock>
 8009778:	42a3      	cmp	r3, r4
 800977a:	d908      	bls.n	800978e <_free_r+0x46>
 800977c:	6825      	ldr	r5, [r4, #0]
 800977e:	1961      	adds	r1, r4, r5
 8009780:	428b      	cmp	r3, r1
 8009782:	bf01      	itttt	eq
 8009784:	6819      	ldreq	r1, [r3, #0]
 8009786:	685b      	ldreq	r3, [r3, #4]
 8009788:	1949      	addeq	r1, r1, r5
 800978a:	6021      	streq	r1, [r4, #0]
 800978c:	e7ed      	b.n	800976a <_free_r+0x22>
 800978e:	461a      	mov	r2, r3
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	b10b      	cbz	r3, 8009798 <_free_r+0x50>
 8009794:	42a3      	cmp	r3, r4
 8009796:	d9fa      	bls.n	800978e <_free_r+0x46>
 8009798:	6811      	ldr	r1, [r2, #0]
 800979a:	1855      	adds	r5, r2, r1
 800979c:	42a5      	cmp	r5, r4
 800979e:	d10b      	bne.n	80097b8 <_free_r+0x70>
 80097a0:	6824      	ldr	r4, [r4, #0]
 80097a2:	4421      	add	r1, r4
 80097a4:	1854      	adds	r4, r2, r1
 80097a6:	42a3      	cmp	r3, r4
 80097a8:	6011      	str	r1, [r2, #0]
 80097aa:	d1e0      	bne.n	800976e <_free_r+0x26>
 80097ac:	681c      	ldr	r4, [r3, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	6053      	str	r3, [r2, #4]
 80097b2:	4421      	add	r1, r4
 80097b4:	6011      	str	r1, [r2, #0]
 80097b6:	e7da      	b.n	800976e <_free_r+0x26>
 80097b8:	d902      	bls.n	80097c0 <_free_r+0x78>
 80097ba:	230c      	movs	r3, #12
 80097bc:	6003      	str	r3, [r0, #0]
 80097be:	e7d6      	b.n	800976e <_free_r+0x26>
 80097c0:	6825      	ldr	r5, [r4, #0]
 80097c2:	1961      	adds	r1, r4, r5
 80097c4:	428b      	cmp	r3, r1
 80097c6:	bf04      	itt	eq
 80097c8:	6819      	ldreq	r1, [r3, #0]
 80097ca:	685b      	ldreq	r3, [r3, #4]
 80097cc:	6063      	str	r3, [r4, #4]
 80097ce:	bf04      	itt	eq
 80097d0:	1949      	addeq	r1, r1, r5
 80097d2:	6021      	streq	r1, [r4, #0]
 80097d4:	6054      	str	r4, [r2, #4]
 80097d6:	e7ca      	b.n	800976e <_free_r+0x26>
 80097d8:	b003      	add	sp, #12
 80097da:	bd30      	pop	{r4, r5, pc}
 80097dc:	200005e0 	.word	0x200005e0

080097e0 <sbrk_aligned>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	4e0e      	ldr	r6, [pc, #56]	; (800981c <sbrk_aligned+0x3c>)
 80097e4:	460c      	mov	r4, r1
 80097e6:	6831      	ldr	r1, [r6, #0]
 80097e8:	4605      	mov	r5, r0
 80097ea:	b911      	cbnz	r1, 80097f2 <sbrk_aligned+0x12>
 80097ec:	f000 f8bc 	bl	8009968 <_sbrk_r>
 80097f0:	6030      	str	r0, [r6, #0]
 80097f2:	4621      	mov	r1, r4
 80097f4:	4628      	mov	r0, r5
 80097f6:	f000 f8b7 	bl	8009968 <_sbrk_r>
 80097fa:	1c43      	adds	r3, r0, #1
 80097fc:	d00a      	beq.n	8009814 <sbrk_aligned+0x34>
 80097fe:	1cc4      	adds	r4, r0, #3
 8009800:	f024 0403 	bic.w	r4, r4, #3
 8009804:	42a0      	cmp	r0, r4
 8009806:	d007      	beq.n	8009818 <sbrk_aligned+0x38>
 8009808:	1a21      	subs	r1, r4, r0
 800980a:	4628      	mov	r0, r5
 800980c:	f000 f8ac 	bl	8009968 <_sbrk_r>
 8009810:	3001      	adds	r0, #1
 8009812:	d101      	bne.n	8009818 <sbrk_aligned+0x38>
 8009814:	f04f 34ff 	mov.w	r4, #4294967295
 8009818:	4620      	mov	r0, r4
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	200005e4 	.word	0x200005e4

08009820 <_malloc_r>:
 8009820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009824:	1ccd      	adds	r5, r1, #3
 8009826:	f025 0503 	bic.w	r5, r5, #3
 800982a:	3508      	adds	r5, #8
 800982c:	2d0c      	cmp	r5, #12
 800982e:	bf38      	it	cc
 8009830:	250c      	movcc	r5, #12
 8009832:	2d00      	cmp	r5, #0
 8009834:	4607      	mov	r7, r0
 8009836:	db01      	blt.n	800983c <_malloc_r+0x1c>
 8009838:	42a9      	cmp	r1, r5
 800983a:	d905      	bls.n	8009848 <_malloc_r+0x28>
 800983c:	230c      	movs	r3, #12
 800983e:	603b      	str	r3, [r7, #0]
 8009840:	2600      	movs	r6, #0
 8009842:	4630      	mov	r0, r6
 8009844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009848:	4e2e      	ldr	r6, [pc, #184]	; (8009904 <_malloc_r+0xe4>)
 800984a:	f000 f89d 	bl	8009988 <__malloc_lock>
 800984e:	6833      	ldr	r3, [r6, #0]
 8009850:	461c      	mov	r4, r3
 8009852:	bb34      	cbnz	r4, 80098a2 <_malloc_r+0x82>
 8009854:	4629      	mov	r1, r5
 8009856:	4638      	mov	r0, r7
 8009858:	f7ff ffc2 	bl	80097e0 <sbrk_aligned>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	4604      	mov	r4, r0
 8009860:	d14d      	bne.n	80098fe <_malloc_r+0xde>
 8009862:	6834      	ldr	r4, [r6, #0]
 8009864:	4626      	mov	r6, r4
 8009866:	2e00      	cmp	r6, #0
 8009868:	d140      	bne.n	80098ec <_malloc_r+0xcc>
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	4631      	mov	r1, r6
 800986e:	4638      	mov	r0, r7
 8009870:	eb04 0803 	add.w	r8, r4, r3
 8009874:	f000 f878 	bl	8009968 <_sbrk_r>
 8009878:	4580      	cmp	r8, r0
 800987a:	d13a      	bne.n	80098f2 <_malloc_r+0xd2>
 800987c:	6821      	ldr	r1, [r4, #0]
 800987e:	3503      	adds	r5, #3
 8009880:	1a6d      	subs	r5, r5, r1
 8009882:	f025 0503 	bic.w	r5, r5, #3
 8009886:	3508      	adds	r5, #8
 8009888:	2d0c      	cmp	r5, #12
 800988a:	bf38      	it	cc
 800988c:	250c      	movcc	r5, #12
 800988e:	4629      	mov	r1, r5
 8009890:	4638      	mov	r0, r7
 8009892:	f7ff ffa5 	bl	80097e0 <sbrk_aligned>
 8009896:	3001      	adds	r0, #1
 8009898:	d02b      	beq.n	80098f2 <_malloc_r+0xd2>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	442b      	add	r3, r5
 800989e:	6023      	str	r3, [r4, #0]
 80098a0:	e00e      	b.n	80098c0 <_malloc_r+0xa0>
 80098a2:	6822      	ldr	r2, [r4, #0]
 80098a4:	1b52      	subs	r2, r2, r5
 80098a6:	d41e      	bmi.n	80098e6 <_malloc_r+0xc6>
 80098a8:	2a0b      	cmp	r2, #11
 80098aa:	d916      	bls.n	80098da <_malloc_r+0xba>
 80098ac:	1961      	adds	r1, r4, r5
 80098ae:	42a3      	cmp	r3, r4
 80098b0:	6025      	str	r5, [r4, #0]
 80098b2:	bf18      	it	ne
 80098b4:	6059      	strne	r1, [r3, #4]
 80098b6:	6863      	ldr	r3, [r4, #4]
 80098b8:	bf08      	it	eq
 80098ba:	6031      	streq	r1, [r6, #0]
 80098bc:	5162      	str	r2, [r4, r5]
 80098be:	604b      	str	r3, [r1, #4]
 80098c0:	4638      	mov	r0, r7
 80098c2:	f104 060b 	add.w	r6, r4, #11
 80098c6:	f000 f865 	bl	8009994 <__malloc_unlock>
 80098ca:	f026 0607 	bic.w	r6, r6, #7
 80098ce:	1d23      	adds	r3, r4, #4
 80098d0:	1af2      	subs	r2, r6, r3
 80098d2:	d0b6      	beq.n	8009842 <_malloc_r+0x22>
 80098d4:	1b9b      	subs	r3, r3, r6
 80098d6:	50a3      	str	r3, [r4, r2]
 80098d8:	e7b3      	b.n	8009842 <_malloc_r+0x22>
 80098da:	6862      	ldr	r2, [r4, #4]
 80098dc:	42a3      	cmp	r3, r4
 80098de:	bf0c      	ite	eq
 80098e0:	6032      	streq	r2, [r6, #0]
 80098e2:	605a      	strne	r2, [r3, #4]
 80098e4:	e7ec      	b.n	80098c0 <_malloc_r+0xa0>
 80098e6:	4623      	mov	r3, r4
 80098e8:	6864      	ldr	r4, [r4, #4]
 80098ea:	e7b2      	b.n	8009852 <_malloc_r+0x32>
 80098ec:	4634      	mov	r4, r6
 80098ee:	6876      	ldr	r6, [r6, #4]
 80098f0:	e7b9      	b.n	8009866 <_malloc_r+0x46>
 80098f2:	230c      	movs	r3, #12
 80098f4:	603b      	str	r3, [r7, #0]
 80098f6:	4638      	mov	r0, r7
 80098f8:	f000 f84c 	bl	8009994 <__malloc_unlock>
 80098fc:	e7a1      	b.n	8009842 <_malloc_r+0x22>
 80098fe:	6025      	str	r5, [r4, #0]
 8009900:	e7de      	b.n	80098c0 <_malloc_r+0xa0>
 8009902:	bf00      	nop
 8009904:	200005e0 	.word	0x200005e0

08009908 <_realloc_r>:
 8009908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990c:	4680      	mov	r8, r0
 800990e:	4614      	mov	r4, r2
 8009910:	460e      	mov	r6, r1
 8009912:	b921      	cbnz	r1, 800991e <_realloc_r+0x16>
 8009914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009918:	4611      	mov	r1, r2
 800991a:	f7ff bf81 	b.w	8009820 <_malloc_r>
 800991e:	b92a      	cbnz	r2, 800992c <_realloc_r+0x24>
 8009920:	f7ff ff12 	bl	8009748 <_free_r>
 8009924:	4625      	mov	r5, r4
 8009926:	4628      	mov	r0, r5
 8009928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800992c:	f000 f838 	bl	80099a0 <_malloc_usable_size_r>
 8009930:	4284      	cmp	r4, r0
 8009932:	4607      	mov	r7, r0
 8009934:	d802      	bhi.n	800993c <_realloc_r+0x34>
 8009936:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800993a:	d812      	bhi.n	8009962 <_realloc_r+0x5a>
 800993c:	4621      	mov	r1, r4
 800993e:	4640      	mov	r0, r8
 8009940:	f7ff ff6e 	bl	8009820 <_malloc_r>
 8009944:	4605      	mov	r5, r0
 8009946:	2800      	cmp	r0, #0
 8009948:	d0ed      	beq.n	8009926 <_realloc_r+0x1e>
 800994a:	42bc      	cmp	r4, r7
 800994c:	4622      	mov	r2, r4
 800994e:	4631      	mov	r1, r6
 8009950:	bf28      	it	cs
 8009952:	463a      	movcs	r2, r7
 8009954:	f7ff fba6 	bl	80090a4 <memcpy>
 8009958:	4631      	mov	r1, r6
 800995a:	4640      	mov	r0, r8
 800995c:	f7ff fef4 	bl	8009748 <_free_r>
 8009960:	e7e1      	b.n	8009926 <_realloc_r+0x1e>
 8009962:	4635      	mov	r5, r6
 8009964:	e7df      	b.n	8009926 <_realloc_r+0x1e>
	...

08009968 <_sbrk_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4d06      	ldr	r5, [pc, #24]	; (8009984 <_sbrk_r+0x1c>)
 800996c:	2300      	movs	r3, #0
 800996e:	4604      	mov	r4, r0
 8009970:	4608      	mov	r0, r1
 8009972:	602b      	str	r3, [r5, #0]
 8009974:	f7f8 fcf6 	bl	8002364 <_sbrk>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d102      	bne.n	8009982 <_sbrk_r+0x1a>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b103      	cbz	r3, 8009982 <_sbrk_r+0x1a>
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	200005e8 	.word	0x200005e8

08009988 <__malloc_lock>:
 8009988:	4801      	ldr	r0, [pc, #4]	; (8009990 <__malloc_lock+0x8>)
 800998a:	f000 b811 	b.w	80099b0 <__retarget_lock_acquire_recursive>
 800998e:	bf00      	nop
 8009990:	200005ec 	.word	0x200005ec

08009994 <__malloc_unlock>:
 8009994:	4801      	ldr	r0, [pc, #4]	; (800999c <__malloc_unlock+0x8>)
 8009996:	f000 b80c 	b.w	80099b2 <__retarget_lock_release_recursive>
 800999a:	bf00      	nop
 800999c:	200005ec 	.word	0x200005ec

080099a0 <_malloc_usable_size_r>:
 80099a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099a4:	1f18      	subs	r0, r3, #4
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	bfbc      	itt	lt
 80099aa:	580b      	ldrlt	r3, [r1, r0]
 80099ac:	18c0      	addlt	r0, r0, r3
 80099ae:	4770      	bx	lr

080099b0 <__retarget_lock_acquire_recursive>:
 80099b0:	4770      	bx	lr

080099b2 <__retarget_lock_release_recursive>:
 80099b2:	4770      	bx	lr
 80099b4:	0000      	movs	r0, r0
	...

080099b8 <tan>:
 80099b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099ba:	ec53 2b10 	vmov	r2, r3, d0
 80099be:	4816      	ldr	r0, [pc, #88]	; (8009a18 <tan+0x60>)
 80099c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80099c4:	4281      	cmp	r1, r0
 80099c6:	dc07      	bgt.n	80099d8 <tan+0x20>
 80099c8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8009a10 <tan+0x58>
 80099cc:	2001      	movs	r0, #1
 80099ce:	b005      	add	sp, #20
 80099d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099d4:	f001 b978 	b.w	800acc8 <__kernel_tan>
 80099d8:	4810      	ldr	r0, [pc, #64]	; (8009a1c <tan+0x64>)
 80099da:	4281      	cmp	r1, r0
 80099dc:	dd09      	ble.n	80099f2 <tan+0x3a>
 80099de:	ee10 0a10 	vmov	r0, s0
 80099e2:	4619      	mov	r1, r3
 80099e4:	f7f6 fc50 	bl	8000288 <__aeabi_dsub>
 80099e8:	ec41 0b10 	vmov	d0, r0, r1
 80099ec:	b005      	add	sp, #20
 80099ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80099f2:	4668      	mov	r0, sp
 80099f4:	f000 fb58 	bl	800a0a8 <__ieee754_rem_pio2>
 80099f8:	0040      	lsls	r0, r0, #1
 80099fa:	f000 0002 	and.w	r0, r0, #2
 80099fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a02:	ed9d 0b00 	vldr	d0, [sp]
 8009a06:	f1c0 0001 	rsb	r0, r0, #1
 8009a0a:	f001 f95d 	bl	800acc8 <__kernel_tan>
 8009a0e:	e7ed      	b.n	80099ec <tan+0x34>
	...
 8009a18:	3fe921fb 	.word	0x3fe921fb
 8009a1c:	7fefffff 	.word	0x7fefffff

08009a20 <asin>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	ed2d 8b02 	vpush	{d8}
 8009a26:	ec55 4b10 	vmov	r4, r5, d0
 8009a2a:	f000 f85d 	bl	8009ae8 <__ieee754_asin>
 8009a2e:	4622      	mov	r2, r4
 8009a30:	462b      	mov	r3, r5
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	eeb0 8a40 	vmov.f32	s16, s0
 8009a3a:	eef0 8a60 	vmov.f32	s17, s1
 8009a3e:	f7f7 f875 	bl	8000b2c <__aeabi_dcmpun>
 8009a42:	b9a8      	cbnz	r0, 8009a70 <asin+0x50>
 8009a44:	ec45 4b10 	vmov	d0, r4, r5
 8009a48:	f001 fcea 	bl	800b420 <fabs>
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <asin+0x60>)
 8009a4e:	ec51 0b10 	vmov	r0, r1, d0
 8009a52:	2200      	movs	r2, #0
 8009a54:	f7f7 f860 	bl	8000b18 <__aeabi_dcmpgt>
 8009a58:	b150      	cbz	r0, 8009a70 <asin+0x50>
 8009a5a:	f7ff faf9 	bl	8009050 <__errno>
 8009a5e:	ecbd 8b02 	vpop	{d8}
 8009a62:	2321      	movs	r3, #33	; 0x21
 8009a64:	6003      	str	r3, [r0, #0]
 8009a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a6a:	4806      	ldr	r0, [pc, #24]	; (8009a84 <asin+0x64>)
 8009a6c:	f001 bd64 	b.w	800b538 <nan>
 8009a70:	eeb0 0a48 	vmov.f32	s0, s16
 8009a74:	eef0 0a68 	vmov.f32	s1, s17
 8009a78:	ecbd 8b02 	vpop	{d8}
 8009a7c:	bd38      	pop	{r3, r4, r5, pc}
 8009a7e:	bf00      	nop
 8009a80:	3ff00000 	.word	0x3ff00000
 8009a84:	0800bbd1 	.word	0x0800bbd1

08009a88 <atan2>:
 8009a88:	f000 ba42 	b.w	8009f10 <__ieee754_atan2>

08009a8c <sqrt>:
 8009a8c:	b538      	push	{r3, r4, r5, lr}
 8009a8e:	ed2d 8b02 	vpush	{d8}
 8009a92:	ec55 4b10 	vmov	r4, r5, d0
 8009a96:	f000 fd13 	bl	800a4c0 <__ieee754_sqrt>
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	462b      	mov	r3, r5
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	eeb0 8a40 	vmov.f32	s16, s0
 8009aa6:	eef0 8a60 	vmov.f32	s17, s1
 8009aaa:	f7f7 f83f 	bl	8000b2c <__aeabi_dcmpun>
 8009aae:	b990      	cbnz	r0, 8009ad6 <sqrt+0x4a>
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	f7f7 f810 	bl	8000adc <__aeabi_dcmplt>
 8009abc:	b158      	cbz	r0, 8009ad6 <sqrt+0x4a>
 8009abe:	f7ff fac7 	bl	8009050 <__errno>
 8009ac2:	2321      	movs	r3, #33	; 0x21
 8009ac4:	6003      	str	r3, [r0, #0]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2300      	movs	r3, #0
 8009aca:	4610      	mov	r0, r2
 8009acc:	4619      	mov	r1, r3
 8009ace:	f7f6 febd 	bl	800084c <__aeabi_ddiv>
 8009ad2:	ec41 0b18 	vmov	d8, r0, r1
 8009ad6:	eeb0 0a48 	vmov.f32	s0, s16
 8009ada:	eef0 0a68 	vmov.f32	s1, s17
 8009ade:	ecbd 8b02 	vpop	{d8}
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	0000      	movs	r0, r0
	...

08009ae8 <__ieee754_asin>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	ed2d 8b04 	vpush	{d8-d9}
 8009af0:	ec55 4b10 	vmov	r4, r5, d0
 8009af4:	4bcc      	ldr	r3, [pc, #816]	; (8009e28 <__ieee754_asin+0x340>)
 8009af6:	b083      	sub	sp, #12
 8009af8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009afc:	4598      	cmp	r8, r3
 8009afe:	9501      	str	r5, [sp, #4]
 8009b00:	dd35      	ble.n	8009b6e <__ieee754_asin+0x86>
 8009b02:	ee10 3a10 	vmov	r3, s0
 8009b06:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8009b0a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8009b0e:	ea58 0303 	orrs.w	r3, r8, r3
 8009b12:	d117      	bne.n	8009b44 <__ieee754_asin+0x5c>
 8009b14:	a3aa      	add	r3, pc, #680	; (adr r3, 8009dc0 <__ieee754_asin+0x2d8>)
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	ee10 0a10 	vmov	r0, s0
 8009b1e:	4629      	mov	r1, r5
 8009b20:	f7f6 fd6a 	bl	80005f8 <__aeabi_dmul>
 8009b24:	a3a8      	add	r3, pc, #672	; (adr r3, 8009dc8 <__ieee754_asin+0x2e0>)
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	460f      	mov	r7, r1
 8009b2e:	4620      	mov	r0, r4
 8009b30:	4629      	mov	r1, r5
 8009b32:	f7f6 fd61 	bl	80005f8 <__aeabi_dmul>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	4639      	mov	r1, r7
 8009b3e:	f7f6 fba5 	bl	800028c <__adddf3>
 8009b42:	e00b      	b.n	8009b5c <__ieee754_asin+0x74>
 8009b44:	ee10 2a10 	vmov	r2, s0
 8009b48:	462b      	mov	r3, r5
 8009b4a:	ee10 0a10 	vmov	r0, s0
 8009b4e:	4629      	mov	r1, r5
 8009b50:	f7f6 fb9a 	bl	8000288 <__aeabi_dsub>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	f7f6 fe78 	bl	800084c <__aeabi_ddiv>
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	460d      	mov	r5, r1
 8009b60:	ec45 4b10 	vmov	d0, r4, r5
 8009b64:	b003      	add	sp, #12
 8009b66:	ecbd 8b04 	vpop	{d8-d9}
 8009b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6e:	4baf      	ldr	r3, [pc, #700]	; (8009e2c <__ieee754_asin+0x344>)
 8009b70:	4598      	cmp	r8, r3
 8009b72:	dc11      	bgt.n	8009b98 <__ieee754_asin+0xb0>
 8009b74:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009b78:	f280 80ae 	bge.w	8009cd8 <__ieee754_asin+0x1f0>
 8009b7c:	a394      	add	r3, pc, #592	; (adr r3, 8009dd0 <__ieee754_asin+0x2e8>)
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	ee10 0a10 	vmov	r0, s0
 8009b86:	4629      	mov	r1, r5
 8009b88:	f7f6 fb80 	bl	800028c <__adddf3>
 8009b8c:	4ba8      	ldr	r3, [pc, #672]	; (8009e30 <__ieee754_asin+0x348>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f7f6 ffc2 	bl	8000b18 <__aeabi_dcmpgt>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d1e3      	bne.n	8009b60 <__ieee754_asin+0x78>
 8009b98:	ec45 4b10 	vmov	d0, r4, r5
 8009b9c:	f001 fc40 	bl	800b420 <fabs>
 8009ba0:	49a3      	ldr	r1, [pc, #652]	; (8009e30 <__ieee754_asin+0x348>)
 8009ba2:	ec53 2b10 	vmov	r2, r3, d0
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	f7f6 fb6e 	bl	8000288 <__aeabi_dsub>
 8009bac:	4ba1      	ldr	r3, [pc, #644]	; (8009e34 <__ieee754_asin+0x34c>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f7f6 fd22 	bl	80005f8 <__aeabi_dmul>
 8009bb4:	a388      	add	r3, pc, #544	; (adr r3, 8009dd8 <__ieee754_asin+0x2f0>)
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	4604      	mov	r4, r0
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	f7f6 fd1b 	bl	80005f8 <__aeabi_dmul>
 8009bc2:	a387      	add	r3, pc, #540	; (adr r3, 8009de0 <__ieee754_asin+0x2f8>)
 8009bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc8:	f7f6 fb60 	bl	800028c <__adddf3>
 8009bcc:	4622      	mov	r2, r4
 8009bce:	462b      	mov	r3, r5
 8009bd0:	f7f6 fd12 	bl	80005f8 <__aeabi_dmul>
 8009bd4:	a384      	add	r3, pc, #528	; (adr r3, 8009de8 <__ieee754_asin+0x300>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	f7f6 fb55 	bl	8000288 <__aeabi_dsub>
 8009bde:	4622      	mov	r2, r4
 8009be0:	462b      	mov	r3, r5
 8009be2:	f7f6 fd09 	bl	80005f8 <__aeabi_dmul>
 8009be6:	a382      	add	r3, pc, #520	; (adr r3, 8009df0 <__ieee754_asin+0x308>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f7f6 fb4e 	bl	800028c <__adddf3>
 8009bf0:	4622      	mov	r2, r4
 8009bf2:	462b      	mov	r3, r5
 8009bf4:	f7f6 fd00 	bl	80005f8 <__aeabi_dmul>
 8009bf8:	a37f      	add	r3, pc, #508	; (adr r3, 8009df8 <__ieee754_asin+0x310>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f7f6 fb43 	bl	8000288 <__aeabi_dsub>
 8009c02:	4622      	mov	r2, r4
 8009c04:	462b      	mov	r3, r5
 8009c06:	f7f6 fcf7 	bl	80005f8 <__aeabi_dmul>
 8009c0a:	a37d      	add	r3, pc, #500	; (adr r3, 8009e00 <__ieee754_asin+0x318>)
 8009c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c10:	f7f6 fb3c 	bl	800028c <__adddf3>
 8009c14:	4622      	mov	r2, r4
 8009c16:	462b      	mov	r3, r5
 8009c18:	f7f6 fcee 	bl	80005f8 <__aeabi_dmul>
 8009c1c:	a37a      	add	r3, pc, #488	; (adr r3, 8009e08 <__ieee754_asin+0x320>)
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	ec41 0b18 	vmov	d8, r0, r1
 8009c26:	4620      	mov	r0, r4
 8009c28:	4629      	mov	r1, r5
 8009c2a:	f7f6 fce5 	bl	80005f8 <__aeabi_dmul>
 8009c2e:	a378      	add	r3, pc, #480	; (adr r3, 8009e10 <__ieee754_asin+0x328>)
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	f7f6 fb28 	bl	8000288 <__aeabi_dsub>
 8009c38:	4622      	mov	r2, r4
 8009c3a:	462b      	mov	r3, r5
 8009c3c:	f7f6 fcdc 	bl	80005f8 <__aeabi_dmul>
 8009c40:	a375      	add	r3, pc, #468	; (adr r3, 8009e18 <__ieee754_asin+0x330>)
 8009c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c46:	f7f6 fb21 	bl	800028c <__adddf3>
 8009c4a:	4622      	mov	r2, r4
 8009c4c:	462b      	mov	r3, r5
 8009c4e:	f7f6 fcd3 	bl	80005f8 <__aeabi_dmul>
 8009c52:	a373      	add	r3, pc, #460	; (adr r3, 8009e20 <__ieee754_asin+0x338>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	f7f6 fb16 	bl	8000288 <__aeabi_dsub>
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	462b      	mov	r3, r5
 8009c60:	f7f6 fcca 	bl	80005f8 <__aeabi_dmul>
 8009c64:	4b72      	ldr	r3, [pc, #456]	; (8009e30 <__ieee754_asin+0x348>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	f7f6 fb10 	bl	800028c <__adddf3>
 8009c6c:	ec45 4b10 	vmov	d0, r4, r5
 8009c70:	4606      	mov	r6, r0
 8009c72:	460f      	mov	r7, r1
 8009c74:	f000 fc24 	bl	800a4c0 <__ieee754_sqrt>
 8009c78:	4b6f      	ldr	r3, [pc, #444]	; (8009e38 <__ieee754_asin+0x350>)
 8009c7a:	4598      	cmp	r8, r3
 8009c7c:	ec5b ab10 	vmov	sl, fp, d0
 8009c80:	f340 80dc 	ble.w	8009e3c <__ieee754_asin+0x354>
 8009c84:	4632      	mov	r2, r6
 8009c86:	463b      	mov	r3, r7
 8009c88:	ec51 0b18 	vmov	r0, r1, d8
 8009c8c:	f7f6 fdde 	bl	800084c <__aeabi_ddiv>
 8009c90:	4652      	mov	r2, sl
 8009c92:	465b      	mov	r3, fp
 8009c94:	f7f6 fcb0 	bl	80005f8 <__aeabi_dmul>
 8009c98:	4652      	mov	r2, sl
 8009c9a:	465b      	mov	r3, fp
 8009c9c:	f7f6 faf6 	bl	800028c <__adddf3>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	f7f6 faf2 	bl	800028c <__adddf3>
 8009ca8:	a347      	add	r3, pc, #284	; (adr r3, 8009dc8 <__ieee754_asin+0x2e0>)
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	f7f6 faeb 	bl	8000288 <__aeabi_dsub>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	a142      	add	r1, pc, #264	; (adr r1, 8009dc0 <__ieee754_asin+0x2d8>)
 8009cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cbc:	f7f6 fae4 	bl	8000288 <__aeabi_dsub>
 8009cc0:	9b01      	ldr	r3, [sp, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	bfdc      	itt	le
 8009cc6:	4602      	movle	r2, r0
 8009cc8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009ccc:	4604      	mov	r4, r0
 8009cce:	460d      	mov	r5, r1
 8009cd0:	bfdc      	itt	le
 8009cd2:	4614      	movle	r4, r2
 8009cd4:	461d      	movle	r5, r3
 8009cd6:	e743      	b.n	8009b60 <__ieee754_asin+0x78>
 8009cd8:	ee10 2a10 	vmov	r2, s0
 8009cdc:	ee10 0a10 	vmov	r0, s0
 8009ce0:	462b      	mov	r3, r5
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f7f6 fc88 	bl	80005f8 <__aeabi_dmul>
 8009ce8:	a33b      	add	r3, pc, #236	; (adr r3, 8009dd8 <__ieee754_asin+0x2f0>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460f      	mov	r7, r1
 8009cf2:	f7f6 fc81 	bl	80005f8 <__aeabi_dmul>
 8009cf6:	a33a      	add	r3, pc, #232	; (adr r3, 8009de0 <__ieee754_asin+0x2f8>)
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	f7f6 fac6 	bl	800028c <__adddf3>
 8009d00:	4632      	mov	r2, r6
 8009d02:	463b      	mov	r3, r7
 8009d04:	f7f6 fc78 	bl	80005f8 <__aeabi_dmul>
 8009d08:	a337      	add	r3, pc, #220	; (adr r3, 8009de8 <__ieee754_asin+0x300>)
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	f7f6 fabb 	bl	8000288 <__aeabi_dsub>
 8009d12:	4632      	mov	r2, r6
 8009d14:	463b      	mov	r3, r7
 8009d16:	f7f6 fc6f 	bl	80005f8 <__aeabi_dmul>
 8009d1a:	a335      	add	r3, pc, #212	; (adr r3, 8009df0 <__ieee754_asin+0x308>)
 8009d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d20:	f7f6 fab4 	bl	800028c <__adddf3>
 8009d24:	4632      	mov	r2, r6
 8009d26:	463b      	mov	r3, r7
 8009d28:	f7f6 fc66 	bl	80005f8 <__aeabi_dmul>
 8009d2c:	a332      	add	r3, pc, #200	; (adr r3, 8009df8 <__ieee754_asin+0x310>)
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	f7f6 faa9 	bl	8000288 <__aeabi_dsub>
 8009d36:	4632      	mov	r2, r6
 8009d38:	463b      	mov	r3, r7
 8009d3a:	f7f6 fc5d 	bl	80005f8 <__aeabi_dmul>
 8009d3e:	a330      	add	r3, pc, #192	; (adr r3, 8009e00 <__ieee754_asin+0x318>)
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	f7f6 faa2 	bl	800028c <__adddf3>
 8009d48:	4632      	mov	r2, r6
 8009d4a:	463b      	mov	r3, r7
 8009d4c:	f7f6 fc54 	bl	80005f8 <__aeabi_dmul>
 8009d50:	a32d      	add	r3, pc, #180	; (adr r3, 8009e08 <__ieee754_asin+0x320>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	4680      	mov	r8, r0
 8009d58:	4689      	mov	r9, r1
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	f7f6 fc4b 	bl	80005f8 <__aeabi_dmul>
 8009d62:	a32b      	add	r3, pc, #172	; (adr r3, 8009e10 <__ieee754_asin+0x328>)
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	f7f6 fa8e 	bl	8000288 <__aeabi_dsub>
 8009d6c:	4632      	mov	r2, r6
 8009d6e:	463b      	mov	r3, r7
 8009d70:	f7f6 fc42 	bl	80005f8 <__aeabi_dmul>
 8009d74:	a328      	add	r3, pc, #160	; (adr r3, 8009e18 <__ieee754_asin+0x330>)
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f7f6 fa87 	bl	800028c <__adddf3>
 8009d7e:	4632      	mov	r2, r6
 8009d80:	463b      	mov	r3, r7
 8009d82:	f7f6 fc39 	bl	80005f8 <__aeabi_dmul>
 8009d86:	a326      	add	r3, pc, #152	; (adr r3, 8009e20 <__ieee754_asin+0x338>)
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	f7f6 fa7c 	bl	8000288 <__aeabi_dsub>
 8009d90:	4632      	mov	r2, r6
 8009d92:	463b      	mov	r3, r7
 8009d94:	f7f6 fc30 	bl	80005f8 <__aeabi_dmul>
 8009d98:	4b25      	ldr	r3, [pc, #148]	; (8009e30 <__ieee754_asin+0x348>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f7f6 fa76 	bl	800028c <__adddf3>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4640      	mov	r0, r8
 8009da6:	4649      	mov	r1, r9
 8009da8:	f7f6 fd50 	bl	800084c <__aeabi_ddiv>
 8009dac:	4622      	mov	r2, r4
 8009dae:	462b      	mov	r3, r5
 8009db0:	f7f6 fc22 	bl	80005f8 <__aeabi_dmul>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4620      	mov	r0, r4
 8009dba:	4629      	mov	r1, r5
 8009dbc:	e6bf      	b.n	8009b3e <__ieee754_asin+0x56>
 8009dbe:	bf00      	nop
 8009dc0:	54442d18 	.word	0x54442d18
 8009dc4:	3ff921fb 	.word	0x3ff921fb
 8009dc8:	33145c07 	.word	0x33145c07
 8009dcc:	3c91a626 	.word	0x3c91a626
 8009dd0:	8800759c 	.word	0x8800759c
 8009dd4:	7e37e43c 	.word	0x7e37e43c
 8009dd8:	0dfdf709 	.word	0x0dfdf709
 8009ddc:	3f023de1 	.word	0x3f023de1
 8009de0:	7501b288 	.word	0x7501b288
 8009de4:	3f49efe0 	.word	0x3f49efe0
 8009de8:	b5688f3b 	.word	0xb5688f3b
 8009dec:	3fa48228 	.word	0x3fa48228
 8009df0:	0e884455 	.word	0x0e884455
 8009df4:	3fc9c155 	.word	0x3fc9c155
 8009df8:	03eb6f7d 	.word	0x03eb6f7d
 8009dfc:	3fd4d612 	.word	0x3fd4d612
 8009e00:	55555555 	.word	0x55555555
 8009e04:	3fc55555 	.word	0x3fc55555
 8009e08:	b12e9282 	.word	0xb12e9282
 8009e0c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009e10:	1b8d0159 	.word	0x1b8d0159
 8009e14:	3fe6066c 	.word	0x3fe6066c
 8009e18:	9c598ac8 	.word	0x9c598ac8
 8009e1c:	40002ae5 	.word	0x40002ae5
 8009e20:	1c8a2d4b 	.word	0x1c8a2d4b
 8009e24:	40033a27 	.word	0x40033a27
 8009e28:	3fefffff 	.word	0x3fefffff
 8009e2c:	3fdfffff 	.word	0x3fdfffff
 8009e30:	3ff00000 	.word	0x3ff00000
 8009e34:	3fe00000 	.word	0x3fe00000
 8009e38:	3fef3332 	.word	0x3fef3332
 8009e3c:	ee10 2a10 	vmov	r2, s0
 8009e40:	ee10 0a10 	vmov	r0, s0
 8009e44:	465b      	mov	r3, fp
 8009e46:	4659      	mov	r1, fp
 8009e48:	f7f6 fa20 	bl	800028c <__adddf3>
 8009e4c:	4632      	mov	r2, r6
 8009e4e:	463b      	mov	r3, r7
 8009e50:	ec41 0b19 	vmov	d9, r0, r1
 8009e54:	ec51 0b18 	vmov	r0, r1, d8
 8009e58:	f7f6 fcf8 	bl	800084c <__aeabi_ddiv>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	ec51 0b19 	vmov	r0, r1, d9
 8009e64:	f7f6 fbc8 	bl	80005f8 <__aeabi_dmul>
 8009e68:	f04f 0800 	mov.w	r8, #0
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	460f      	mov	r7, r1
 8009e70:	4642      	mov	r2, r8
 8009e72:	465b      	mov	r3, fp
 8009e74:	4640      	mov	r0, r8
 8009e76:	4659      	mov	r1, fp
 8009e78:	f7f6 fbbe 	bl	80005f8 <__aeabi_dmul>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4620      	mov	r0, r4
 8009e82:	4629      	mov	r1, r5
 8009e84:	f7f6 fa00 	bl	8000288 <__aeabi_dsub>
 8009e88:	4642      	mov	r2, r8
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	460d      	mov	r5, r1
 8009e8e:	465b      	mov	r3, fp
 8009e90:	4650      	mov	r0, sl
 8009e92:	4659      	mov	r1, fp
 8009e94:	f7f6 f9fa 	bl	800028c <__adddf3>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	f7f6 fcd4 	bl	800084c <__aeabi_ddiv>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	f7f6 f9f0 	bl	800028c <__adddf3>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	a113      	add	r1, pc, #76	; (adr r1, 8009f00 <__ieee754_asin+0x418>)
 8009eb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb6:	f7f6 f9e7 	bl	8000288 <__aeabi_dsub>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	f7f6 f9e1 	bl	8000288 <__aeabi_dsub>
 8009ec6:	4642      	mov	r2, r8
 8009ec8:	4604      	mov	r4, r0
 8009eca:	460d      	mov	r5, r1
 8009ecc:	465b      	mov	r3, fp
 8009ece:	4640      	mov	r0, r8
 8009ed0:	4659      	mov	r1, fp
 8009ed2:	f7f6 f9db 	bl	800028c <__adddf3>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	a10b      	add	r1, pc, #44	; (adr r1, 8009f08 <__ieee754_asin+0x420>)
 8009edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ee0:	f7f6 f9d2 	bl	8000288 <__aeabi_dsub>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4620      	mov	r0, r4
 8009eea:	4629      	mov	r1, r5
 8009eec:	f7f6 f9cc 	bl	8000288 <__aeabi_dsub>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	a104      	add	r1, pc, #16	; (adr r1, 8009f08 <__ieee754_asin+0x420>)
 8009ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009efa:	e6df      	b.n	8009cbc <__ieee754_asin+0x1d4>
 8009efc:	f3af 8000 	nop.w
 8009f00:	33145c07 	.word	0x33145c07
 8009f04:	3c91a626 	.word	0x3c91a626
 8009f08:	54442d18 	.word	0x54442d18
 8009f0c:	3fe921fb 	.word	0x3fe921fb

08009f10 <__ieee754_atan2>:
 8009f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	ec57 6b11 	vmov	r6, r7, d1
 8009f18:	4273      	negs	r3, r6
 8009f1a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a0a0 <__ieee754_atan2+0x190>
 8009f1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009f22:	4333      	orrs	r3, r6
 8009f24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009f28:	4573      	cmp	r3, lr
 8009f2a:	ec51 0b10 	vmov	r0, r1, d0
 8009f2e:	ee11 8a10 	vmov	r8, s2
 8009f32:	d80a      	bhi.n	8009f4a <__ieee754_atan2+0x3a>
 8009f34:	4244      	negs	r4, r0
 8009f36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f3a:	4304      	orrs	r4, r0
 8009f3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009f40:	4574      	cmp	r4, lr
 8009f42:	ee10 9a10 	vmov	r9, s0
 8009f46:	468c      	mov	ip, r1
 8009f48:	d907      	bls.n	8009f5a <__ieee754_atan2+0x4a>
 8009f4a:	4632      	mov	r2, r6
 8009f4c:	463b      	mov	r3, r7
 8009f4e:	f7f6 f99d 	bl	800028c <__adddf3>
 8009f52:	ec41 0b10 	vmov	d0, r0, r1
 8009f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009f5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009f62:	4334      	orrs	r4, r6
 8009f64:	d103      	bne.n	8009f6e <__ieee754_atan2+0x5e>
 8009f66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f6a:	f001 b8b9 	b.w	800b0e0 <atan>
 8009f6e:	17bc      	asrs	r4, r7, #30
 8009f70:	f004 0402 	and.w	r4, r4, #2
 8009f74:	ea53 0909 	orrs.w	r9, r3, r9
 8009f78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009f7c:	d107      	bne.n	8009f8e <__ieee754_atan2+0x7e>
 8009f7e:	2c02      	cmp	r4, #2
 8009f80:	d060      	beq.n	800a044 <__ieee754_atan2+0x134>
 8009f82:	2c03      	cmp	r4, #3
 8009f84:	d1e5      	bne.n	8009f52 <__ieee754_atan2+0x42>
 8009f86:	a142      	add	r1, pc, #264	; (adr r1, 800a090 <__ieee754_atan2+0x180>)
 8009f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f8c:	e7e1      	b.n	8009f52 <__ieee754_atan2+0x42>
 8009f8e:	ea52 0808 	orrs.w	r8, r2, r8
 8009f92:	d106      	bne.n	8009fa2 <__ieee754_atan2+0x92>
 8009f94:	f1bc 0f00 	cmp.w	ip, #0
 8009f98:	da5f      	bge.n	800a05a <__ieee754_atan2+0x14a>
 8009f9a:	a13f      	add	r1, pc, #252	; (adr r1, 800a098 <__ieee754_atan2+0x188>)
 8009f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa0:	e7d7      	b.n	8009f52 <__ieee754_atan2+0x42>
 8009fa2:	4572      	cmp	r2, lr
 8009fa4:	d10f      	bne.n	8009fc6 <__ieee754_atan2+0xb6>
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	f104 34ff 	add.w	r4, r4, #4294967295
 8009fac:	d107      	bne.n	8009fbe <__ieee754_atan2+0xae>
 8009fae:	2c02      	cmp	r4, #2
 8009fb0:	d84c      	bhi.n	800a04c <__ieee754_atan2+0x13c>
 8009fb2:	4b35      	ldr	r3, [pc, #212]	; (800a088 <__ieee754_atan2+0x178>)
 8009fb4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009fb8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009fbc:	e7c9      	b.n	8009f52 <__ieee754_atan2+0x42>
 8009fbe:	2c02      	cmp	r4, #2
 8009fc0:	d848      	bhi.n	800a054 <__ieee754_atan2+0x144>
 8009fc2:	4b32      	ldr	r3, [pc, #200]	; (800a08c <__ieee754_atan2+0x17c>)
 8009fc4:	e7f6      	b.n	8009fb4 <__ieee754_atan2+0xa4>
 8009fc6:	4573      	cmp	r3, lr
 8009fc8:	d0e4      	beq.n	8009f94 <__ieee754_atan2+0x84>
 8009fca:	1a9b      	subs	r3, r3, r2
 8009fcc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009fd0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009fd4:	da1e      	bge.n	800a014 <__ieee754_atan2+0x104>
 8009fd6:	2f00      	cmp	r7, #0
 8009fd8:	da01      	bge.n	8009fde <__ieee754_atan2+0xce>
 8009fda:	323c      	adds	r2, #60	; 0x3c
 8009fdc:	db1e      	blt.n	800a01c <__ieee754_atan2+0x10c>
 8009fde:	4632      	mov	r2, r6
 8009fe0:	463b      	mov	r3, r7
 8009fe2:	f7f6 fc33 	bl	800084c <__aeabi_ddiv>
 8009fe6:	ec41 0b10 	vmov	d0, r0, r1
 8009fea:	f001 fa19 	bl	800b420 <fabs>
 8009fee:	f001 f877 	bl	800b0e0 <atan>
 8009ff2:	ec51 0b10 	vmov	r0, r1, d0
 8009ff6:	2c01      	cmp	r4, #1
 8009ff8:	d013      	beq.n	800a022 <__ieee754_atan2+0x112>
 8009ffa:	2c02      	cmp	r4, #2
 8009ffc:	d015      	beq.n	800a02a <__ieee754_atan2+0x11a>
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	d0a7      	beq.n	8009f52 <__ieee754_atan2+0x42>
 800a002:	a319      	add	r3, pc, #100	; (adr r3, 800a068 <__ieee754_atan2+0x158>)
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	f7f6 f93e 	bl	8000288 <__aeabi_dsub>
 800a00c:	a318      	add	r3, pc, #96	; (adr r3, 800a070 <__ieee754_atan2+0x160>)
 800a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a012:	e014      	b.n	800a03e <__ieee754_atan2+0x12e>
 800a014:	a118      	add	r1, pc, #96	; (adr r1, 800a078 <__ieee754_atan2+0x168>)
 800a016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a01a:	e7ec      	b.n	8009ff6 <__ieee754_atan2+0xe6>
 800a01c:	2000      	movs	r0, #0
 800a01e:	2100      	movs	r1, #0
 800a020:	e7e9      	b.n	8009ff6 <__ieee754_atan2+0xe6>
 800a022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a026:	4619      	mov	r1, r3
 800a028:	e793      	b.n	8009f52 <__ieee754_atan2+0x42>
 800a02a:	a30f      	add	r3, pc, #60	; (adr r3, 800a068 <__ieee754_atan2+0x158>)
 800a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a030:	f7f6 f92a 	bl	8000288 <__aeabi_dsub>
 800a034:	4602      	mov	r2, r0
 800a036:	460b      	mov	r3, r1
 800a038:	a10d      	add	r1, pc, #52	; (adr r1, 800a070 <__ieee754_atan2+0x160>)
 800a03a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a03e:	f7f6 f923 	bl	8000288 <__aeabi_dsub>
 800a042:	e786      	b.n	8009f52 <__ieee754_atan2+0x42>
 800a044:	a10a      	add	r1, pc, #40	; (adr r1, 800a070 <__ieee754_atan2+0x160>)
 800a046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a04a:	e782      	b.n	8009f52 <__ieee754_atan2+0x42>
 800a04c:	a10c      	add	r1, pc, #48	; (adr r1, 800a080 <__ieee754_atan2+0x170>)
 800a04e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a052:	e77e      	b.n	8009f52 <__ieee754_atan2+0x42>
 800a054:	2000      	movs	r0, #0
 800a056:	2100      	movs	r1, #0
 800a058:	e77b      	b.n	8009f52 <__ieee754_atan2+0x42>
 800a05a:	a107      	add	r1, pc, #28	; (adr r1, 800a078 <__ieee754_atan2+0x168>)
 800a05c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a060:	e777      	b.n	8009f52 <__ieee754_atan2+0x42>
 800a062:	bf00      	nop
 800a064:	f3af 8000 	nop.w
 800a068:	33145c07 	.word	0x33145c07
 800a06c:	3ca1a626 	.word	0x3ca1a626
 800a070:	54442d18 	.word	0x54442d18
 800a074:	400921fb 	.word	0x400921fb
 800a078:	54442d18 	.word	0x54442d18
 800a07c:	3ff921fb 	.word	0x3ff921fb
 800a080:	54442d18 	.word	0x54442d18
 800a084:	3fe921fb 	.word	0x3fe921fb
 800a088:	0800bc00 	.word	0x0800bc00
 800a08c:	0800bc18 	.word	0x0800bc18
 800a090:	54442d18 	.word	0x54442d18
 800a094:	c00921fb 	.word	0xc00921fb
 800a098:	54442d18 	.word	0x54442d18
 800a09c:	bff921fb 	.word	0xbff921fb
 800a0a0:	7ff00000 	.word	0x7ff00000
 800a0a4:	00000000 	.word	0x00000000

0800a0a8 <__ieee754_rem_pio2>:
 800a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ac:	ed2d 8b02 	vpush	{d8}
 800a0b0:	ec55 4b10 	vmov	r4, r5, d0
 800a0b4:	4bca      	ldr	r3, [pc, #808]	; (800a3e0 <__ieee754_rem_pio2+0x338>)
 800a0b6:	b08b      	sub	sp, #44	; 0x2c
 800a0b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a0bc:	4598      	cmp	r8, r3
 800a0be:	4682      	mov	sl, r0
 800a0c0:	9502      	str	r5, [sp, #8]
 800a0c2:	dc08      	bgt.n	800a0d6 <__ieee754_rem_pio2+0x2e>
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	ed80 0b00 	vstr	d0, [r0]
 800a0cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a0d0:	f04f 0b00 	mov.w	fp, #0
 800a0d4:	e028      	b.n	800a128 <__ieee754_rem_pio2+0x80>
 800a0d6:	4bc3      	ldr	r3, [pc, #780]	; (800a3e4 <__ieee754_rem_pio2+0x33c>)
 800a0d8:	4598      	cmp	r8, r3
 800a0da:	dc78      	bgt.n	800a1ce <__ieee754_rem_pio2+0x126>
 800a0dc:	9b02      	ldr	r3, [sp, #8]
 800a0de:	4ec2      	ldr	r6, [pc, #776]	; (800a3e8 <__ieee754_rem_pio2+0x340>)
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	ee10 0a10 	vmov	r0, s0
 800a0e6:	a3b0      	add	r3, pc, #704	; (adr r3, 800a3a8 <__ieee754_rem_pio2+0x300>)
 800a0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	dd39      	ble.n	800a164 <__ieee754_rem_pio2+0xbc>
 800a0f0:	f7f6 f8ca 	bl	8000288 <__aeabi_dsub>
 800a0f4:	45b0      	cmp	r8, r6
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	d01b      	beq.n	800a134 <__ieee754_rem_pio2+0x8c>
 800a0fc:	a3ac      	add	r3, pc, #688	; (adr r3, 800a3b0 <__ieee754_rem_pio2+0x308>)
 800a0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a102:	f7f6 f8c1 	bl	8000288 <__aeabi_dsub>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	e9ca 2300 	strd	r2, r3, [sl]
 800a10e:	4620      	mov	r0, r4
 800a110:	4629      	mov	r1, r5
 800a112:	f7f6 f8b9 	bl	8000288 <__aeabi_dsub>
 800a116:	a3a6      	add	r3, pc, #664	; (adr r3, 800a3b0 <__ieee754_rem_pio2+0x308>)
 800a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11c:	f7f6 f8b4 	bl	8000288 <__aeabi_dsub>
 800a120:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a124:	f04f 0b01 	mov.w	fp, #1
 800a128:	4658      	mov	r0, fp
 800a12a:	b00b      	add	sp, #44	; 0x2c
 800a12c:	ecbd 8b02 	vpop	{d8}
 800a130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a134:	a3a0      	add	r3, pc, #640	; (adr r3, 800a3b8 <__ieee754_rem_pio2+0x310>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	f7f6 f8a5 	bl	8000288 <__aeabi_dsub>
 800a13e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a3c0 <__ieee754_rem_pio2+0x318>)
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	4604      	mov	r4, r0
 800a146:	460d      	mov	r5, r1
 800a148:	f7f6 f89e 	bl	8000288 <__aeabi_dsub>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	e9ca 2300 	strd	r2, r3, [sl]
 800a154:	4620      	mov	r0, r4
 800a156:	4629      	mov	r1, r5
 800a158:	f7f6 f896 	bl	8000288 <__aeabi_dsub>
 800a15c:	a398      	add	r3, pc, #608	; (adr r3, 800a3c0 <__ieee754_rem_pio2+0x318>)
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	e7db      	b.n	800a11c <__ieee754_rem_pio2+0x74>
 800a164:	f7f6 f892 	bl	800028c <__adddf3>
 800a168:	45b0      	cmp	r8, r6
 800a16a:	4604      	mov	r4, r0
 800a16c:	460d      	mov	r5, r1
 800a16e:	d016      	beq.n	800a19e <__ieee754_rem_pio2+0xf6>
 800a170:	a38f      	add	r3, pc, #572	; (adr r3, 800a3b0 <__ieee754_rem_pio2+0x308>)
 800a172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a176:	f7f6 f889 	bl	800028c <__adddf3>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	e9ca 2300 	strd	r2, r3, [sl]
 800a182:	4620      	mov	r0, r4
 800a184:	4629      	mov	r1, r5
 800a186:	f7f6 f87f 	bl	8000288 <__aeabi_dsub>
 800a18a:	a389      	add	r3, pc, #548	; (adr r3, 800a3b0 <__ieee754_rem_pio2+0x308>)
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	f7f6 f87c 	bl	800028c <__adddf3>
 800a194:	f04f 3bff 	mov.w	fp, #4294967295
 800a198:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a19c:	e7c4      	b.n	800a128 <__ieee754_rem_pio2+0x80>
 800a19e:	a386      	add	r3, pc, #536	; (adr r3, 800a3b8 <__ieee754_rem_pio2+0x310>)
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f7f6 f872 	bl	800028c <__adddf3>
 800a1a8:	a385      	add	r3, pc, #532	; (adr r3, 800a3c0 <__ieee754_rem_pio2+0x318>)
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	460d      	mov	r5, r1
 800a1b2:	f7f6 f86b 	bl	800028c <__adddf3>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	e9ca 2300 	strd	r2, r3, [sl]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	f7f6 f861 	bl	8000288 <__aeabi_dsub>
 800a1c6:	a37e      	add	r3, pc, #504	; (adr r3, 800a3c0 <__ieee754_rem_pio2+0x318>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	e7e0      	b.n	800a190 <__ieee754_rem_pio2+0xe8>
 800a1ce:	4b87      	ldr	r3, [pc, #540]	; (800a3ec <__ieee754_rem_pio2+0x344>)
 800a1d0:	4598      	cmp	r8, r3
 800a1d2:	f300 80d9 	bgt.w	800a388 <__ieee754_rem_pio2+0x2e0>
 800a1d6:	f001 f923 	bl	800b420 <fabs>
 800a1da:	ec55 4b10 	vmov	r4, r5, d0
 800a1de:	ee10 0a10 	vmov	r0, s0
 800a1e2:	a379      	add	r3, pc, #484	; (adr r3, 800a3c8 <__ieee754_rem_pio2+0x320>)
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	f7f6 fa05 	bl	80005f8 <__aeabi_dmul>
 800a1ee:	4b80      	ldr	r3, [pc, #512]	; (800a3f0 <__ieee754_rem_pio2+0x348>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f7f6 f84b 	bl	800028c <__adddf3>
 800a1f6:	f7f6 fcaf 	bl	8000b58 <__aeabi_d2iz>
 800a1fa:	4683      	mov	fp, r0
 800a1fc:	f7f6 f992 	bl	8000524 <__aeabi_i2d>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	ec43 2b18 	vmov	d8, r2, r3
 800a208:	a367      	add	r3, pc, #412	; (adr r3, 800a3a8 <__ieee754_rem_pio2+0x300>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f6 f9f3 	bl	80005f8 <__aeabi_dmul>
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	4620      	mov	r0, r4
 800a218:	4629      	mov	r1, r5
 800a21a:	f7f6 f835 	bl	8000288 <__aeabi_dsub>
 800a21e:	a364      	add	r3, pc, #400	; (adr r3, 800a3b0 <__ieee754_rem_pio2+0x308>)
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	4606      	mov	r6, r0
 800a226:	460f      	mov	r7, r1
 800a228:	ec51 0b18 	vmov	r0, r1, d8
 800a22c:	f7f6 f9e4 	bl	80005f8 <__aeabi_dmul>
 800a230:	f1bb 0f1f 	cmp.w	fp, #31
 800a234:	4604      	mov	r4, r0
 800a236:	460d      	mov	r5, r1
 800a238:	dc0d      	bgt.n	800a256 <__ieee754_rem_pio2+0x1ae>
 800a23a:	4b6e      	ldr	r3, [pc, #440]	; (800a3f4 <__ieee754_rem_pio2+0x34c>)
 800a23c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a244:	4543      	cmp	r3, r8
 800a246:	d006      	beq.n	800a256 <__ieee754_rem_pio2+0x1ae>
 800a248:	4622      	mov	r2, r4
 800a24a:	462b      	mov	r3, r5
 800a24c:	4630      	mov	r0, r6
 800a24e:	4639      	mov	r1, r7
 800a250:	f7f6 f81a 	bl	8000288 <__aeabi_dsub>
 800a254:	e00f      	b.n	800a276 <__ieee754_rem_pio2+0x1ce>
 800a256:	462b      	mov	r3, r5
 800a258:	4622      	mov	r2, r4
 800a25a:	4630      	mov	r0, r6
 800a25c:	4639      	mov	r1, r7
 800a25e:	f7f6 f813 	bl	8000288 <__aeabi_dsub>
 800a262:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a266:	9303      	str	r3, [sp, #12]
 800a268:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a26c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a270:	f1b8 0f10 	cmp.w	r8, #16
 800a274:	dc02      	bgt.n	800a27c <__ieee754_rem_pio2+0x1d4>
 800a276:	e9ca 0100 	strd	r0, r1, [sl]
 800a27a:	e039      	b.n	800a2f0 <__ieee754_rem_pio2+0x248>
 800a27c:	a34e      	add	r3, pc, #312	; (adr r3, 800a3b8 <__ieee754_rem_pio2+0x310>)
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	ec51 0b18 	vmov	r0, r1, d8
 800a286:	f7f6 f9b7 	bl	80005f8 <__aeabi_dmul>
 800a28a:	4604      	mov	r4, r0
 800a28c:	460d      	mov	r5, r1
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4630      	mov	r0, r6
 800a294:	4639      	mov	r1, r7
 800a296:	f7f5 fff7 	bl	8000288 <__aeabi_dsub>
 800a29a:	4602      	mov	r2, r0
 800a29c:	460b      	mov	r3, r1
 800a29e:	4680      	mov	r8, r0
 800a2a0:	4689      	mov	r9, r1
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	f7f5 ffef 	bl	8000288 <__aeabi_dsub>
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	462b      	mov	r3, r5
 800a2ae:	f7f5 ffeb 	bl	8000288 <__aeabi_dsub>
 800a2b2:	a343      	add	r3, pc, #268	; (adr r3, 800a3c0 <__ieee754_rem_pio2+0x318>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	ec51 0b18 	vmov	r0, r1, d8
 800a2c0:	f7f6 f99a 	bl	80005f8 <__aeabi_dmul>
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	462b      	mov	r3, r5
 800a2c8:	f7f5 ffde 	bl	8000288 <__aeabi_dsub>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	f7f5 ffd6 	bl	8000288 <__aeabi_dsub>
 800a2dc:	9a03      	ldr	r2, [sp, #12]
 800a2de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	2b31      	cmp	r3, #49	; 0x31
 800a2e6:	dc24      	bgt.n	800a332 <__ieee754_rem_pio2+0x28a>
 800a2e8:	e9ca 0100 	strd	r0, r1, [sl]
 800a2ec:	4646      	mov	r6, r8
 800a2ee:	464f      	mov	r7, r9
 800a2f0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	4642      	mov	r2, r8
 800a2f8:	464b      	mov	r3, r9
 800a2fa:	4639      	mov	r1, r7
 800a2fc:	f7f5 ffc4 	bl	8000288 <__aeabi_dsub>
 800a300:	462b      	mov	r3, r5
 800a302:	4622      	mov	r2, r4
 800a304:	f7f5 ffc0 	bl	8000288 <__aeabi_dsub>
 800a308:	9b02      	ldr	r3, [sp, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a310:	f6bf af0a 	bge.w	800a128 <__ieee754_rem_pio2+0x80>
 800a314:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a318:	f8ca 3004 	str.w	r3, [sl, #4]
 800a31c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a320:	f8ca 8000 	str.w	r8, [sl]
 800a324:	f8ca 0008 	str.w	r0, [sl, #8]
 800a328:	f8ca 300c 	str.w	r3, [sl, #12]
 800a32c:	f1cb 0b00 	rsb	fp, fp, #0
 800a330:	e6fa      	b.n	800a128 <__ieee754_rem_pio2+0x80>
 800a332:	a327      	add	r3, pc, #156	; (adr r3, 800a3d0 <__ieee754_rem_pio2+0x328>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	ec51 0b18 	vmov	r0, r1, d8
 800a33c:	f7f6 f95c 	bl	80005f8 <__aeabi_dmul>
 800a340:	4604      	mov	r4, r0
 800a342:	460d      	mov	r5, r1
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4640      	mov	r0, r8
 800a34a:	4649      	mov	r1, r9
 800a34c:	f7f5 ff9c 	bl	8000288 <__aeabi_dsub>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	4606      	mov	r6, r0
 800a356:	460f      	mov	r7, r1
 800a358:	4640      	mov	r0, r8
 800a35a:	4649      	mov	r1, r9
 800a35c:	f7f5 ff94 	bl	8000288 <__aeabi_dsub>
 800a360:	4622      	mov	r2, r4
 800a362:	462b      	mov	r3, r5
 800a364:	f7f5 ff90 	bl	8000288 <__aeabi_dsub>
 800a368:	a31b      	add	r3, pc, #108	; (adr r3, 800a3d8 <__ieee754_rem_pio2+0x330>)
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	4604      	mov	r4, r0
 800a370:	460d      	mov	r5, r1
 800a372:	ec51 0b18 	vmov	r0, r1, d8
 800a376:	f7f6 f93f 	bl	80005f8 <__aeabi_dmul>
 800a37a:	4622      	mov	r2, r4
 800a37c:	462b      	mov	r3, r5
 800a37e:	f7f5 ff83 	bl	8000288 <__aeabi_dsub>
 800a382:	4604      	mov	r4, r0
 800a384:	460d      	mov	r5, r1
 800a386:	e75f      	b.n	800a248 <__ieee754_rem_pio2+0x1a0>
 800a388:	4b1b      	ldr	r3, [pc, #108]	; (800a3f8 <__ieee754_rem_pio2+0x350>)
 800a38a:	4598      	cmp	r8, r3
 800a38c:	dd36      	ble.n	800a3fc <__ieee754_rem_pio2+0x354>
 800a38e:	ee10 2a10 	vmov	r2, s0
 800a392:	462b      	mov	r3, r5
 800a394:	4620      	mov	r0, r4
 800a396:	4629      	mov	r1, r5
 800a398:	f7f5 ff76 	bl	8000288 <__aeabi_dsub>
 800a39c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a3a0:	e9ca 0100 	strd	r0, r1, [sl]
 800a3a4:	e694      	b.n	800a0d0 <__ieee754_rem_pio2+0x28>
 800a3a6:	bf00      	nop
 800a3a8:	54400000 	.word	0x54400000
 800a3ac:	3ff921fb 	.word	0x3ff921fb
 800a3b0:	1a626331 	.word	0x1a626331
 800a3b4:	3dd0b461 	.word	0x3dd0b461
 800a3b8:	1a600000 	.word	0x1a600000
 800a3bc:	3dd0b461 	.word	0x3dd0b461
 800a3c0:	2e037073 	.word	0x2e037073
 800a3c4:	3ba3198a 	.word	0x3ba3198a
 800a3c8:	6dc9c883 	.word	0x6dc9c883
 800a3cc:	3fe45f30 	.word	0x3fe45f30
 800a3d0:	2e000000 	.word	0x2e000000
 800a3d4:	3ba3198a 	.word	0x3ba3198a
 800a3d8:	252049c1 	.word	0x252049c1
 800a3dc:	397b839a 	.word	0x397b839a
 800a3e0:	3fe921fb 	.word	0x3fe921fb
 800a3e4:	4002d97b 	.word	0x4002d97b
 800a3e8:	3ff921fb 	.word	0x3ff921fb
 800a3ec:	413921fb 	.word	0x413921fb
 800a3f0:	3fe00000 	.word	0x3fe00000
 800a3f4:	0800bc30 	.word	0x0800bc30
 800a3f8:	7fefffff 	.word	0x7fefffff
 800a3fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a400:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a404:	ee10 0a10 	vmov	r0, s0
 800a408:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a40c:	ee10 6a10 	vmov	r6, s0
 800a410:	460f      	mov	r7, r1
 800a412:	f7f6 fba1 	bl	8000b58 <__aeabi_d2iz>
 800a416:	f7f6 f885 	bl	8000524 <__aeabi_i2d>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4630      	mov	r0, r6
 800a420:	4639      	mov	r1, r7
 800a422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a426:	f7f5 ff2f 	bl	8000288 <__aeabi_dsub>
 800a42a:	4b23      	ldr	r3, [pc, #140]	; (800a4b8 <__ieee754_rem_pio2+0x410>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	f7f6 f8e3 	bl	80005f8 <__aeabi_dmul>
 800a432:	460f      	mov	r7, r1
 800a434:	4606      	mov	r6, r0
 800a436:	f7f6 fb8f 	bl	8000b58 <__aeabi_d2iz>
 800a43a:	f7f6 f873 	bl	8000524 <__aeabi_i2d>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4630      	mov	r0, r6
 800a444:	4639      	mov	r1, r7
 800a446:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a44a:	f7f5 ff1d 	bl	8000288 <__aeabi_dsub>
 800a44e:	4b1a      	ldr	r3, [pc, #104]	; (800a4b8 <__ieee754_rem_pio2+0x410>)
 800a450:	2200      	movs	r2, #0
 800a452:	f7f6 f8d1 	bl	80005f8 <__aeabi_dmul>
 800a456:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a45a:	ad04      	add	r5, sp, #16
 800a45c:	f04f 0803 	mov.w	r8, #3
 800a460:	46a9      	mov	r9, r5
 800a462:	2600      	movs	r6, #0
 800a464:	2700      	movs	r7, #0
 800a466:	4632      	mov	r2, r6
 800a468:	463b      	mov	r3, r7
 800a46a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a46e:	46c3      	mov	fp, r8
 800a470:	3d08      	subs	r5, #8
 800a472:	f108 38ff 	add.w	r8, r8, #4294967295
 800a476:	f7f6 fb27 	bl	8000ac8 <__aeabi_dcmpeq>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d1f3      	bne.n	800a466 <__ieee754_rem_pio2+0x3be>
 800a47e:	4b0f      	ldr	r3, [pc, #60]	; (800a4bc <__ieee754_rem_pio2+0x414>)
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	2302      	movs	r3, #2
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	4622      	mov	r2, r4
 800a488:	465b      	mov	r3, fp
 800a48a:	4651      	mov	r1, sl
 800a48c:	4648      	mov	r0, r9
 800a48e:	f000 f8cb 	bl	800a628 <__kernel_rem_pio2>
 800a492:	9b02      	ldr	r3, [sp, #8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	4683      	mov	fp, r0
 800a498:	f6bf ae46 	bge.w	800a128 <__ieee754_rem_pio2+0x80>
 800a49c:	e9da 2100 	ldrd	r2, r1, [sl]
 800a4a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4a4:	e9ca 2300 	strd	r2, r3, [sl]
 800a4a8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a4ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a4b4:	e73a      	b.n	800a32c <__ieee754_rem_pio2+0x284>
 800a4b6:	bf00      	nop
 800a4b8:	41700000 	.word	0x41700000
 800a4bc:	0800bcb0 	.word	0x0800bcb0

0800a4c0 <__ieee754_sqrt>:
 800a4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c4:	ec55 4b10 	vmov	r4, r5, d0
 800a4c8:	4e55      	ldr	r6, [pc, #340]	; (800a620 <__ieee754_sqrt+0x160>)
 800a4ca:	43ae      	bics	r6, r5
 800a4cc:	ee10 0a10 	vmov	r0, s0
 800a4d0:	ee10 3a10 	vmov	r3, s0
 800a4d4:	462a      	mov	r2, r5
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	d110      	bne.n	800a4fc <__ieee754_sqrt+0x3c>
 800a4da:	ee10 2a10 	vmov	r2, s0
 800a4de:	462b      	mov	r3, r5
 800a4e0:	f7f6 f88a 	bl	80005f8 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	f7f5 fece 	bl	800028c <__adddf3>
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	ec45 4b10 	vmov	d0, r4, r5
 800a4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4fc:	2d00      	cmp	r5, #0
 800a4fe:	dc10      	bgt.n	800a522 <__ieee754_sqrt+0x62>
 800a500:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a504:	4330      	orrs	r0, r6
 800a506:	d0f5      	beq.n	800a4f4 <__ieee754_sqrt+0x34>
 800a508:	b15d      	cbz	r5, 800a522 <__ieee754_sqrt+0x62>
 800a50a:	ee10 2a10 	vmov	r2, s0
 800a50e:	462b      	mov	r3, r5
 800a510:	ee10 0a10 	vmov	r0, s0
 800a514:	f7f5 feb8 	bl	8000288 <__aeabi_dsub>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	f7f6 f996 	bl	800084c <__aeabi_ddiv>
 800a520:	e7e6      	b.n	800a4f0 <__ieee754_sqrt+0x30>
 800a522:	1512      	asrs	r2, r2, #20
 800a524:	d074      	beq.n	800a610 <__ieee754_sqrt+0x150>
 800a526:	07d4      	lsls	r4, r2, #31
 800a528:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a52c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a534:	bf5e      	ittt	pl
 800a536:	0fda      	lsrpl	r2, r3, #31
 800a538:	005b      	lslpl	r3, r3, #1
 800a53a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a53e:	2400      	movs	r4, #0
 800a540:	0fda      	lsrs	r2, r3, #31
 800a542:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a546:	107f      	asrs	r7, r7, #1
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	2516      	movs	r5, #22
 800a54c:	4620      	mov	r0, r4
 800a54e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a552:	1886      	adds	r6, r0, r2
 800a554:	428e      	cmp	r6, r1
 800a556:	bfde      	ittt	le
 800a558:	1b89      	suble	r1, r1, r6
 800a55a:	18b0      	addle	r0, r6, r2
 800a55c:	18a4      	addle	r4, r4, r2
 800a55e:	0049      	lsls	r1, r1, #1
 800a560:	3d01      	subs	r5, #1
 800a562:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a566:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a56a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a56e:	d1f0      	bne.n	800a552 <__ieee754_sqrt+0x92>
 800a570:	462a      	mov	r2, r5
 800a572:	f04f 0e20 	mov.w	lr, #32
 800a576:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a57a:	4281      	cmp	r1, r0
 800a57c:	eb06 0c05 	add.w	ip, r6, r5
 800a580:	dc02      	bgt.n	800a588 <__ieee754_sqrt+0xc8>
 800a582:	d113      	bne.n	800a5ac <__ieee754_sqrt+0xec>
 800a584:	459c      	cmp	ip, r3
 800a586:	d811      	bhi.n	800a5ac <__ieee754_sqrt+0xec>
 800a588:	f1bc 0f00 	cmp.w	ip, #0
 800a58c:	eb0c 0506 	add.w	r5, ip, r6
 800a590:	da43      	bge.n	800a61a <__ieee754_sqrt+0x15a>
 800a592:	2d00      	cmp	r5, #0
 800a594:	db41      	blt.n	800a61a <__ieee754_sqrt+0x15a>
 800a596:	f100 0801 	add.w	r8, r0, #1
 800a59a:	1a09      	subs	r1, r1, r0
 800a59c:	459c      	cmp	ip, r3
 800a59e:	bf88      	it	hi
 800a5a0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a5a4:	eba3 030c 	sub.w	r3, r3, ip
 800a5a8:	4432      	add	r2, r6
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a5b0:	f1be 0e01 	subs.w	lr, lr, #1
 800a5b4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a5b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a5bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a5c0:	d1db      	bne.n	800a57a <__ieee754_sqrt+0xba>
 800a5c2:	430b      	orrs	r3, r1
 800a5c4:	d006      	beq.n	800a5d4 <__ieee754_sqrt+0x114>
 800a5c6:	1c50      	adds	r0, r2, #1
 800a5c8:	bf13      	iteet	ne
 800a5ca:	3201      	addne	r2, #1
 800a5cc:	3401      	addeq	r4, #1
 800a5ce:	4672      	moveq	r2, lr
 800a5d0:	f022 0201 	bicne.w	r2, r2, #1
 800a5d4:	1063      	asrs	r3, r4, #1
 800a5d6:	0852      	lsrs	r2, r2, #1
 800a5d8:	07e1      	lsls	r1, r4, #31
 800a5da:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a5de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a5e2:	bf48      	it	mi
 800a5e4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a5e8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a5ec:	4614      	mov	r4, r2
 800a5ee:	e781      	b.n	800a4f4 <__ieee754_sqrt+0x34>
 800a5f0:	0ad9      	lsrs	r1, r3, #11
 800a5f2:	3815      	subs	r0, #21
 800a5f4:	055b      	lsls	r3, r3, #21
 800a5f6:	2900      	cmp	r1, #0
 800a5f8:	d0fa      	beq.n	800a5f0 <__ieee754_sqrt+0x130>
 800a5fa:	02cd      	lsls	r5, r1, #11
 800a5fc:	d50a      	bpl.n	800a614 <__ieee754_sqrt+0x154>
 800a5fe:	f1c2 0420 	rsb	r4, r2, #32
 800a602:	fa23 f404 	lsr.w	r4, r3, r4
 800a606:	1e55      	subs	r5, r2, #1
 800a608:	4093      	lsls	r3, r2
 800a60a:	4321      	orrs	r1, r4
 800a60c:	1b42      	subs	r2, r0, r5
 800a60e:	e78a      	b.n	800a526 <__ieee754_sqrt+0x66>
 800a610:	4610      	mov	r0, r2
 800a612:	e7f0      	b.n	800a5f6 <__ieee754_sqrt+0x136>
 800a614:	0049      	lsls	r1, r1, #1
 800a616:	3201      	adds	r2, #1
 800a618:	e7ef      	b.n	800a5fa <__ieee754_sqrt+0x13a>
 800a61a:	4680      	mov	r8, r0
 800a61c:	e7bd      	b.n	800a59a <__ieee754_sqrt+0xda>
 800a61e:	bf00      	nop
 800a620:	7ff00000 	.word	0x7ff00000
 800a624:	00000000 	.word	0x00000000

0800a628 <__kernel_rem_pio2>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	ed2d 8b02 	vpush	{d8}
 800a630:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a634:	f112 0f14 	cmn.w	r2, #20
 800a638:	9308      	str	r3, [sp, #32]
 800a63a:	9101      	str	r1, [sp, #4]
 800a63c:	4bc4      	ldr	r3, [pc, #784]	; (800a950 <__kernel_rem_pio2+0x328>)
 800a63e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a640:	900b      	str	r0, [sp, #44]	; 0x2c
 800a642:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a646:	9302      	str	r3, [sp, #8]
 800a648:	9b08      	ldr	r3, [sp, #32]
 800a64a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a64e:	bfa8      	it	ge
 800a650:	1ed4      	subge	r4, r2, #3
 800a652:	9306      	str	r3, [sp, #24]
 800a654:	bfb2      	itee	lt
 800a656:	2400      	movlt	r4, #0
 800a658:	2318      	movge	r3, #24
 800a65a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a65e:	f06f 0317 	mvn.w	r3, #23
 800a662:	fb04 3303 	mla	r3, r4, r3, r3
 800a666:	eb03 0a02 	add.w	sl, r3, r2
 800a66a:	9b02      	ldr	r3, [sp, #8]
 800a66c:	9a06      	ldr	r2, [sp, #24]
 800a66e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a940 <__kernel_rem_pio2+0x318>
 800a672:	eb03 0802 	add.w	r8, r3, r2
 800a676:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a678:	1aa7      	subs	r7, r4, r2
 800a67a:	ae22      	add	r6, sp, #136	; 0x88
 800a67c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a680:	2500      	movs	r5, #0
 800a682:	4545      	cmp	r5, r8
 800a684:	dd13      	ble.n	800a6ae <__kernel_rem_pio2+0x86>
 800a686:	9b08      	ldr	r3, [sp, #32]
 800a688:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a940 <__kernel_rem_pio2+0x318>
 800a68c:	aa22      	add	r2, sp, #136	; 0x88
 800a68e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a692:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a696:	f04f 0800 	mov.w	r8, #0
 800a69a:	9b02      	ldr	r3, [sp, #8]
 800a69c:	4598      	cmp	r8, r3
 800a69e:	dc2f      	bgt.n	800a700 <__kernel_rem_pio2+0xd8>
 800a6a0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a6a4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a6a8:	462f      	mov	r7, r5
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	e01b      	b.n	800a6e6 <__kernel_rem_pio2+0xbe>
 800a6ae:	42ef      	cmn	r7, r5
 800a6b0:	d407      	bmi.n	800a6c2 <__kernel_rem_pio2+0x9a>
 800a6b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a6b6:	f7f5 ff35 	bl	8000524 <__aeabi_i2d>
 800a6ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a6be:	3501      	adds	r5, #1
 800a6c0:	e7df      	b.n	800a682 <__kernel_rem_pio2+0x5a>
 800a6c2:	ec51 0b18 	vmov	r0, r1, d8
 800a6c6:	e7f8      	b.n	800a6ba <__kernel_rem_pio2+0x92>
 800a6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a6d0:	f7f5 ff92 	bl	80005f8 <__aeabi_dmul>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6dc:	f7f5 fdd6 	bl	800028c <__adddf3>
 800a6e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6e4:	3601      	adds	r6, #1
 800a6e6:	9b06      	ldr	r3, [sp, #24]
 800a6e8:	429e      	cmp	r6, r3
 800a6ea:	f1a7 0708 	sub.w	r7, r7, #8
 800a6ee:	ddeb      	ble.n	800a6c8 <__kernel_rem_pio2+0xa0>
 800a6f0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a6f4:	f108 0801 	add.w	r8, r8, #1
 800a6f8:	ecab 7b02 	vstmia	fp!, {d7}
 800a6fc:	3508      	adds	r5, #8
 800a6fe:	e7cc      	b.n	800a69a <__kernel_rem_pio2+0x72>
 800a700:	9b02      	ldr	r3, [sp, #8]
 800a702:	aa0e      	add	r2, sp, #56	; 0x38
 800a704:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a708:	930d      	str	r3, [sp, #52]	; 0x34
 800a70a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a70c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a710:	9c02      	ldr	r4, [sp, #8]
 800a712:	930c      	str	r3, [sp, #48]	; 0x30
 800a714:	00e3      	lsls	r3, r4, #3
 800a716:	930a      	str	r3, [sp, #40]	; 0x28
 800a718:	ab9a      	add	r3, sp, #616	; 0x268
 800a71a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a71e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a722:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a726:	ab72      	add	r3, sp, #456	; 0x1c8
 800a728:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a72c:	46c3      	mov	fp, r8
 800a72e:	46a1      	mov	r9, r4
 800a730:	f1b9 0f00 	cmp.w	r9, #0
 800a734:	f1a5 0508 	sub.w	r5, r5, #8
 800a738:	dc77      	bgt.n	800a82a <__kernel_rem_pio2+0x202>
 800a73a:	ec47 6b10 	vmov	d0, r6, r7
 800a73e:	4650      	mov	r0, sl
 800a740:	f000 ff02 	bl	800b548 <scalbn>
 800a744:	ec57 6b10 	vmov	r6, r7, d0
 800a748:	2200      	movs	r2, #0
 800a74a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a74e:	ee10 0a10 	vmov	r0, s0
 800a752:	4639      	mov	r1, r7
 800a754:	f7f5 ff50 	bl	80005f8 <__aeabi_dmul>
 800a758:	ec41 0b10 	vmov	d0, r0, r1
 800a75c:	f000 fe6c 	bl	800b438 <floor>
 800a760:	4b7c      	ldr	r3, [pc, #496]	; (800a954 <__kernel_rem_pio2+0x32c>)
 800a762:	ec51 0b10 	vmov	r0, r1, d0
 800a766:	2200      	movs	r2, #0
 800a768:	f7f5 ff46 	bl	80005f8 <__aeabi_dmul>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	4630      	mov	r0, r6
 800a772:	4639      	mov	r1, r7
 800a774:	f7f5 fd88 	bl	8000288 <__aeabi_dsub>
 800a778:	460f      	mov	r7, r1
 800a77a:	4606      	mov	r6, r0
 800a77c:	f7f6 f9ec 	bl	8000b58 <__aeabi_d2iz>
 800a780:	9004      	str	r0, [sp, #16]
 800a782:	f7f5 fecf 	bl	8000524 <__aeabi_i2d>
 800a786:	4602      	mov	r2, r0
 800a788:	460b      	mov	r3, r1
 800a78a:	4630      	mov	r0, r6
 800a78c:	4639      	mov	r1, r7
 800a78e:	f7f5 fd7b 	bl	8000288 <__aeabi_dsub>
 800a792:	f1ba 0f00 	cmp.w	sl, #0
 800a796:	4606      	mov	r6, r0
 800a798:	460f      	mov	r7, r1
 800a79a:	dd6d      	ble.n	800a878 <__kernel_rem_pio2+0x250>
 800a79c:	1e62      	subs	r2, r4, #1
 800a79e:	ab0e      	add	r3, sp, #56	; 0x38
 800a7a0:	9d04      	ldr	r5, [sp, #16]
 800a7a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a7a6:	f1ca 0118 	rsb	r1, sl, #24
 800a7aa:	fa40 f301 	asr.w	r3, r0, r1
 800a7ae:	441d      	add	r5, r3
 800a7b0:	408b      	lsls	r3, r1
 800a7b2:	1ac0      	subs	r0, r0, r3
 800a7b4:	ab0e      	add	r3, sp, #56	; 0x38
 800a7b6:	9504      	str	r5, [sp, #16]
 800a7b8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a7bc:	f1ca 0317 	rsb	r3, sl, #23
 800a7c0:	fa40 fb03 	asr.w	fp, r0, r3
 800a7c4:	f1bb 0f00 	cmp.w	fp, #0
 800a7c8:	dd65      	ble.n	800a896 <__kernel_rem_pio2+0x26e>
 800a7ca:	9b04      	ldr	r3, [sp, #16]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	9304      	str	r3, [sp, #16]
 800a7d2:	4615      	mov	r5, r2
 800a7d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a7d8:	4294      	cmp	r4, r2
 800a7da:	f300 809c 	bgt.w	800a916 <__kernel_rem_pio2+0x2ee>
 800a7de:	f1ba 0f00 	cmp.w	sl, #0
 800a7e2:	dd07      	ble.n	800a7f4 <__kernel_rem_pio2+0x1cc>
 800a7e4:	f1ba 0f01 	cmp.w	sl, #1
 800a7e8:	f000 80c0 	beq.w	800a96c <__kernel_rem_pio2+0x344>
 800a7ec:	f1ba 0f02 	cmp.w	sl, #2
 800a7f0:	f000 80c6 	beq.w	800a980 <__kernel_rem_pio2+0x358>
 800a7f4:	f1bb 0f02 	cmp.w	fp, #2
 800a7f8:	d14d      	bne.n	800a896 <__kernel_rem_pio2+0x26e>
 800a7fa:	4632      	mov	r2, r6
 800a7fc:	463b      	mov	r3, r7
 800a7fe:	4956      	ldr	r1, [pc, #344]	; (800a958 <__kernel_rem_pio2+0x330>)
 800a800:	2000      	movs	r0, #0
 800a802:	f7f5 fd41 	bl	8000288 <__aeabi_dsub>
 800a806:	4606      	mov	r6, r0
 800a808:	460f      	mov	r7, r1
 800a80a:	2d00      	cmp	r5, #0
 800a80c:	d043      	beq.n	800a896 <__kernel_rem_pio2+0x26e>
 800a80e:	4650      	mov	r0, sl
 800a810:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a948 <__kernel_rem_pio2+0x320>
 800a814:	f000 fe98 	bl	800b548 <scalbn>
 800a818:	4630      	mov	r0, r6
 800a81a:	4639      	mov	r1, r7
 800a81c:	ec53 2b10 	vmov	r2, r3, d0
 800a820:	f7f5 fd32 	bl	8000288 <__aeabi_dsub>
 800a824:	4606      	mov	r6, r0
 800a826:	460f      	mov	r7, r1
 800a828:	e035      	b.n	800a896 <__kernel_rem_pio2+0x26e>
 800a82a:	4b4c      	ldr	r3, [pc, #304]	; (800a95c <__kernel_rem_pio2+0x334>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	4630      	mov	r0, r6
 800a830:	4639      	mov	r1, r7
 800a832:	f7f5 fee1 	bl	80005f8 <__aeabi_dmul>
 800a836:	f7f6 f98f 	bl	8000b58 <__aeabi_d2iz>
 800a83a:	f7f5 fe73 	bl	8000524 <__aeabi_i2d>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	ec43 2b18 	vmov	d8, r2, r3
 800a846:	4b46      	ldr	r3, [pc, #280]	; (800a960 <__kernel_rem_pio2+0x338>)
 800a848:	2200      	movs	r2, #0
 800a84a:	f7f5 fed5 	bl	80005f8 <__aeabi_dmul>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	4630      	mov	r0, r6
 800a854:	4639      	mov	r1, r7
 800a856:	f7f5 fd17 	bl	8000288 <__aeabi_dsub>
 800a85a:	f7f6 f97d 	bl	8000b58 <__aeabi_d2iz>
 800a85e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a862:	f84b 0b04 	str.w	r0, [fp], #4
 800a866:	ec51 0b18 	vmov	r0, r1, d8
 800a86a:	f7f5 fd0f 	bl	800028c <__adddf3>
 800a86e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a872:	4606      	mov	r6, r0
 800a874:	460f      	mov	r7, r1
 800a876:	e75b      	b.n	800a730 <__kernel_rem_pio2+0x108>
 800a878:	d106      	bne.n	800a888 <__kernel_rem_pio2+0x260>
 800a87a:	1e63      	subs	r3, r4, #1
 800a87c:	aa0e      	add	r2, sp, #56	; 0x38
 800a87e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a882:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a886:	e79d      	b.n	800a7c4 <__kernel_rem_pio2+0x19c>
 800a888:	4b36      	ldr	r3, [pc, #216]	; (800a964 <__kernel_rem_pio2+0x33c>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	f7f6 f93a 	bl	8000b04 <__aeabi_dcmpge>
 800a890:	2800      	cmp	r0, #0
 800a892:	d13d      	bne.n	800a910 <__kernel_rem_pio2+0x2e8>
 800a894:	4683      	mov	fp, r0
 800a896:	2200      	movs	r2, #0
 800a898:	2300      	movs	r3, #0
 800a89a:	4630      	mov	r0, r6
 800a89c:	4639      	mov	r1, r7
 800a89e:	f7f6 f913 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	f000 80c0 	beq.w	800aa28 <__kernel_rem_pio2+0x400>
 800a8a8:	1e65      	subs	r5, r4, #1
 800a8aa:	462b      	mov	r3, r5
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	9902      	ldr	r1, [sp, #8]
 800a8b0:	428b      	cmp	r3, r1
 800a8b2:	da6c      	bge.n	800a98e <__kernel_rem_pio2+0x366>
 800a8b4:	2a00      	cmp	r2, #0
 800a8b6:	f000 8089 	beq.w	800a9cc <__kernel_rem_pio2+0x3a4>
 800a8ba:	ab0e      	add	r3, sp, #56	; 0x38
 800a8bc:	f1aa 0a18 	sub.w	sl, sl, #24
 800a8c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f000 80ad 	beq.w	800aa24 <__kernel_rem_pio2+0x3fc>
 800a8ca:	4650      	mov	r0, sl
 800a8cc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a948 <__kernel_rem_pio2+0x320>
 800a8d0:	f000 fe3a 	bl	800b548 <scalbn>
 800a8d4:	ab9a      	add	r3, sp, #616	; 0x268
 800a8d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a8da:	ec57 6b10 	vmov	r6, r7, d0
 800a8de:	00ec      	lsls	r4, r5, #3
 800a8e0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a8e4:	46aa      	mov	sl, r5
 800a8e6:	f1ba 0f00 	cmp.w	sl, #0
 800a8ea:	f280 80d6 	bge.w	800aa9a <__kernel_rem_pio2+0x472>
 800a8ee:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a940 <__kernel_rem_pio2+0x318>
 800a8f2:	462e      	mov	r6, r5
 800a8f4:	2e00      	cmp	r6, #0
 800a8f6:	f2c0 8104 	blt.w	800ab02 <__kernel_rem_pio2+0x4da>
 800a8fa:	ab72      	add	r3, sp, #456	; 0x1c8
 800a8fc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a900:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a968 <__kernel_rem_pio2+0x340>
 800a904:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a908:	f04f 0800 	mov.w	r8, #0
 800a90c:	1baf      	subs	r7, r5, r6
 800a90e:	e0ea      	b.n	800aae6 <__kernel_rem_pio2+0x4be>
 800a910:	f04f 0b02 	mov.w	fp, #2
 800a914:	e759      	b.n	800a7ca <__kernel_rem_pio2+0x1a2>
 800a916:	f8d8 3000 	ldr.w	r3, [r8]
 800a91a:	b955      	cbnz	r5, 800a932 <__kernel_rem_pio2+0x30a>
 800a91c:	b123      	cbz	r3, 800a928 <__kernel_rem_pio2+0x300>
 800a91e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a922:	f8c8 3000 	str.w	r3, [r8]
 800a926:	2301      	movs	r3, #1
 800a928:	3201      	adds	r2, #1
 800a92a:	f108 0804 	add.w	r8, r8, #4
 800a92e:	461d      	mov	r5, r3
 800a930:	e752      	b.n	800a7d8 <__kernel_rem_pio2+0x1b0>
 800a932:	1acb      	subs	r3, r1, r3
 800a934:	f8c8 3000 	str.w	r3, [r8]
 800a938:	462b      	mov	r3, r5
 800a93a:	e7f5      	b.n	800a928 <__kernel_rem_pio2+0x300>
 800a93c:	f3af 8000 	nop.w
	...
 800a94c:	3ff00000 	.word	0x3ff00000
 800a950:	0800bdf8 	.word	0x0800bdf8
 800a954:	40200000 	.word	0x40200000
 800a958:	3ff00000 	.word	0x3ff00000
 800a95c:	3e700000 	.word	0x3e700000
 800a960:	41700000 	.word	0x41700000
 800a964:	3fe00000 	.word	0x3fe00000
 800a968:	0800bdb8 	.word	0x0800bdb8
 800a96c:	1e62      	subs	r2, r4, #1
 800a96e:	ab0e      	add	r3, sp, #56	; 0x38
 800a970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a974:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a978:	a90e      	add	r1, sp, #56	; 0x38
 800a97a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a97e:	e739      	b.n	800a7f4 <__kernel_rem_pio2+0x1cc>
 800a980:	1e62      	subs	r2, r4, #1
 800a982:	ab0e      	add	r3, sp, #56	; 0x38
 800a984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a988:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a98c:	e7f4      	b.n	800a978 <__kernel_rem_pio2+0x350>
 800a98e:	a90e      	add	r1, sp, #56	; 0x38
 800a990:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a994:	3b01      	subs	r3, #1
 800a996:	430a      	orrs	r2, r1
 800a998:	e789      	b.n	800a8ae <__kernel_rem_pio2+0x286>
 800a99a:	3301      	adds	r3, #1
 800a99c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a9a0:	2900      	cmp	r1, #0
 800a9a2:	d0fa      	beq.n	800a99a <__kernel_rem_pio2+0x372>
 800a9a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9a6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a9aa:	446a      	add	r2, sp
 800a9ac:	3a98      	subs	r2, #152	; 0x98
 800a9ae:	920a      	str	r2, [sp, #40]	; 0x28
 800a9b0:	9a08      	ldr	r2, [sp, #32]
 800a9b2:	18e3      	adds	r3, r4, r3
 800a9b4:	18a5      	adds	r5, r4, r2
 800a9b6:	aa22      	add	r2, sp, #136	; 0x88
 800a9b8:	f104 0801 	add.w	r8, r4, #1
 800a9bc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	9b04      	ldr	r3, [sp, #16]
 800a9c4:	4543      	cmp	r3, r8
 800a9c6:	da04      	bge.n	800a9d2 <__kernel_rem_pio2+0x3aa>
 800a9c8:	461c      	mov	r4, r3
 800a9ca:	e6a3      	b.n	800a714 <__kernel_rem_pio2+0xec>
 800a9cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e7e4      	b.n	800a99c <__kernel_rem_pio2+0x374>
 800a9d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9d4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a9d8:	f7f5 fda4 	bl	8000524 <__aeabi_i2d>
 800a9dc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a9e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9e2:	46ab      	mov	fp, r5
 800a9e4:	461c      	mov	r4, r3
 800a9e6:	f04f 0900 	mov.w	r9, #0
 800a9ea:	2600      	movs	r6, #0
 800a9ec:	2700      	movs	r7, #0
 800a9ee:	9b06      	ldr	r3, [sp, #24]
 800a9f0:	4599      	cmp	r9, r3
 800a9f2:	dd06      	ble.n	800aa02 <__kernel_rem_pio2+0x3da>
 800a9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a9fa:	f108 0801 	add.w	r8, r8, #1
 800a9fe:	930a      	str	r3, [sp, #40]	; 0x28
 800aa00:	e7df      	b.n	800a9c2 <__kernel_rem_pio2+0x39a>
 800aa02:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800aa06:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800aa0a:	f7f5 fdf5 	bl	80005f8 <__aeabi_dmul>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	4630      	mov	r0, r6
 800aa14:	4639      	mov	r1, r7
 800aa16:	f7f5 fc39 	bl	800028c <__adddf3>
 800aa1a:	f109 0901 	add.w	r9, r9, #1
 800aa1e:	4606      	mov	r6, r0
 800aa20:	460f      	mov	r7, r1
 800aa22:	e7e4      	b.n	800a9ee <__kernel_rem_pio2+0x3c6>
 800aa24:	3d01      	subs	r5, #1
 800aa26:	e748      	b.n	800a8ba <__kernel_rem_pio2+0x292>
 800aa28:	ec47 6b10 	vmov	d0, r6, r7
 800aa2c:	f1ca 0000 	rsb	r0, sl, #0
 800aa30:	f000 fd8a 	bl	800b548 <scalbn>
 800aa34:	ec57 6b10 	vmov	r6, r7, d0
 800aa38:	4ba0      	ldr	r3, [pc, #640]	; (800acbc <__kernel_rem_pio2+0x694>)
 800aa3a:	ee10 0a10 	vmov	r0, s0
 800aa3e:	2200      	movs	r2, #0
 800aa40:	4639      	mov	r1, r7
 800aa42:	f7f6 f85f 	bl	8000b04 <__aeabi_dcmpge>
 800aa46:	b1f8      	cbz	r0, 800aa88 <__kernel_rem_pio2+0x460>
 800aa48:	4b9d      	ldr	r3, [pc, #628]	; (800acc0 <__kernel_rem_pio2+0x698>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	4639      	mov	r1, r7
 800aa50:	f7f5 fdd2 	bl	80005f8 <__aeabi_dmul>
 800aa54:	f7f6 f880 	bl	8000b58 <__aeabi_d2iz>
 800aa58:	4680      	mov	r8, r0
 800aa5a:	f7f5 fd63 	bl	8000524 <__aeabi_i2d>
 800aa5e:	4b97      	ldr	r3, [pc, #604]	; (800acbc <__kernel_rem_pio2+0x694>)
 800aa60:	2200      	movs	r2, #0
 800aa62:	f7f5 fdc9 	bl	80005f8 <__aeabi_dmul>
 800aa66:	460b      	mov	r3, r1
 800aa68:	4602      	mov	r2, r0
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f7f5 fc0b 	bl	8000288 <__aeabi_dsub>
 800aa72:	f7f6 f871 	bl	8000b58 <__aeabi_d2iz>
 800aa76:	1c65      	adds	r5, r4, #1
 800aa78:	ab0e      	add	r3, sp, #56	; 0x38
 800aa7a:	f10a 0a18 	add.w	sl, sl, #24
 800aa7e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aa82:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800aa86:	e720      	b.n	800a8ca <__kernel_rem_pio2+0x2a2>
 800aa88:	4630      	mov	r0, r6
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	f7f6 f864 	bl	8000b58 <__aeabi_d2iz>
 800aa90:	ab0e      	add	r3, sp, #56	; 0x38
 800aa92:	4625      	mov	r5, r4
 800aa94:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aa98:	e717      	b.n	800a8ca <__kernel_rem_pio2+0x2a2>
 800aa9a:	ab0e      	add	r3, sp, #56	; 0x38
 800aa9c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800aaa0:	f7f5 fd40 	bl	8000524 <__aeabi_i2d>
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	463b      	mov	r3, r7
 800aaa8:	f7f5 fda6 	bl	80005f8 <__aeabi_dmul>
 800aaac:	4b84      	ldr	r3, [pc, #528]	; (800acc0 <__kernel_rem_pio2+0x698>)
 800aaae:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800aab2:	2200      	movs	r2, #0
 800aab4:	4630      	mov	r0, r6
 800aab6:	4639      	mov	r1, r7
 800aab8:	f7f5 fd9e 	bl	80005f8 <__aeabi_dmul>
 800aabc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aac0:	4606      	mov	r6, r0
 800aac2:	460f      	mov	r7, r1
 800aac4:	e70f      	b.n	800a8e6 <__kernel_rem_pio2+0x2be>
 800aac6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800aaca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800aace:	f7f5 fd93 	bl	80005f8 <__aeabi_dmul>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aada:	f7f5 fbd7 	bl	800028c <__adddf3>
 800aade:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aae2:	f108 0801 	add.w	r8, r8, #1
 800aae6:	9b02      	ldr	r3, [sp, #8]
 800aae8:	4598      	cmp	r8, r3
 800aaea:	dc01      	bgt.n	800aaf0 <__kernel_rem_pio2+0x4c8>
 800aaec:	45b8      	cmp	r8, r7
 800aaee:	ddea      	ble.n	800aac6 <__kernel_rem_pio2+0x49e>
 800aaf0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800aaf4:	ab4a      	add	r3, sp, #296	; 0x128
 800aaf6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aafa:	ed87 7b00 	vstr	d7, [r7]
 800aafe:	3e01      	subs	r6, #1
 800ab00:	e6f8      	b.n	800a8f4 <__kernel_rem_pio2+0x2cc>
 800ab02:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	dc0b      	bgt.n	800ab20 <__kernel_rem_pio2+0x4f8>
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	dc35      	bgt.n	800ab78 <__kernel_rem_pio2+0x550>
 800ab0c:	d059      	beq.n	800abc2 <__kernel_rem_pio2+0x59a>
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	f003 0007 	and.w	r0, r3, #7
 800ab14:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ab18:	ecbd 8b02 	vpop	{d8}
 800ab1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab20:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d1f3      	bne.n	800ab0e <__kernel_rem_pio2+0x4e6>
 800ab26:	ab4a      	add	r3, sp, #296	; 0x128
 800ab28:	4423      	add	r3, r4
 800ab2a:	9306      	str	r3, [sp, #24]
 800ab2c:	461c      	mov	r4, r3
 800ab2e:	469a      	mov	sl, r3
 800ab30:	9502      	str	r5, [sp, #8]
 800ab32:	9b02      	ldr	r3, [sp, #8]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f1aa 0a08 	sub.w	sl, sl, #8
 800ab3a:	dc6b      	bgt.n	800ac14 <__kernel_rem_pio2+0x5ec>
 800ab3c:	46aa      	mov	sl, r5
 800ab3e:	f1ba 0f01 	cmp.w	sl, #1
 800ab42:	f1a4 0408 	sub.w	r4, r4, #8
 800ab46:	f300 8085 	bgt.w	800ac54 <__kernel_rem_pio2+0x62c>
 800ab4a:	9c06      	ldr	r4, [sp, #24]
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	3408      	adds	r4, #8
 800ab50:	2100      	movs	r1, #0
 800ab52:	2d01      	cmp	r5, #1
 800ab54:	f300 809d 	bgt.w	800ac92 <__kernel_rem_pio2+0x66a>
 800ab58:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ab5c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ab60:	f1bb 0f00 	cmp.w	fp, #0
 800ab64:	f040 809b 	bne.w	800ac9e <__kernel_rem_pio2+0x676>
 800ab68:	9b01      	ldr	r3, [sp, #4]
 800ab6a:	e9c3 5600 	strd	r5, r6, [r3]
 800ab6e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ab72:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ab76:	e7ca      	b.n	800ab0e <__kernel_rem_pio2+0x4e6>
 800ab78:	3408      	adds	r4, #8
 800ab7a:	ab4a      	add	r3, sp, #296	; 0x128
 800ab7c:	441c      	add	r4, r3
 800ab7e:	462e      	mov	r6, r5
 800ab80:	2000      	movs	r0, #0
 800ab82:	2100      	movs	r1, #0
 800ab84:	2e00      	cmp	r6, #0
 800ab86:	da36      	bge.n	800abf6 <__kernel_rem_pio2+0x5ce>
 800ab88:	f1bb 0f00 	cmp.w	fp, #0
 800ab8c:	d039      	beq.n	800ac02 <__kernel_rem_pio2+0x5da>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab94:	9c01      	ldr	r4, [sp, #4]
 800ab96:	e9c4 2300 	strd	r2, r3, [r4]
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800aba2:	f7f5 fb71 	bl	8000288 <__aeabi_dsub>
 800aba6:	ae4c      	add	r6, sp, #304	; 0x130
 800aba8:	2401      	movs	r4, #1
 800abaa:	42a5      	cmp	r5, r4
 800abac:	da2c      	bge.n	800ac08 <__kernel_rem_pio2+0x5e0>
 800abae:	f1bb 0f00 	cmp.w	fp, #0
 800abb2:	d002      	beq.n	800abba <__kernel_rem_pio2+0x592>
 800abb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abb8:	4619      	mov	r1, r3
 800abba:	9b01      	ldr	r3, [sp, #4]
 800abbc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800abc0:	e7a5      	b.n	800ab0e <__kernel_rem_pio2+0x4e6>
 800abc2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800abc6:	eb0d 0403 	add.w	r4, sp, r3
 800abca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800abce:	2000      	movs	r0, #0
 800abd0:	2100      	movs	r1, #0
 800abd2:	2d00      	cmp	r5, #0
 800abd4:	da09      	bge.n	800abea <__kernel_rem_pio2+0x5c2>
 800abd6:	f1bb 0f00 	cmp.w	fp, #0
 800abda:	d002      	beq.n	800abe2 <__kernel_rem_pio2+0x5ba>
 800abdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abe0:	4619      	mov	r1, r3
 800abe2:	9b01      	ldr	r3, [sp, #4]
 800abe4:	e9c3 0100 	strd	r0, r1, [r3]
 800abe8:	e791      	b.n	800ab0e <__kernel_rem_pio2+0x4e6>
 800abea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800abee:	f7f5 fb4d 	bl	800028c <__adddf3>
 800abf2:	3d01      	subs	r5, #1
 800abf4:	e7ed      	b.n	800abd2 <__kernel_rem_pio2+0x5aa>
 800abf6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800abfa:	f7f5 fb47 	bl	800028c <__adddf3>
 800abfe:	3e01      	subs	r6, #1
 800ac00:	e7c0      	b.n	800ab84 <__kernel_rem_pio2+0x55c>
 800ac02:	4602      	mov	r2, r0
 800ac04:	460b      	mov	r3, r1
 800ac06:	e7c5      	b.n	800ab94 <__kernel_rem_pio2+0x56c>
 800ac08:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ac0c:	f7f5 fb3e 	bl	800028c <__adddf3>
 800ac10:	3401      	adds	r4, #1
 800ac12:	e7ca      	b.n	800abaa <__kernel_rem_pio2+0x582>
 800ac14:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac18:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ac1c:	9b02      	ldr	r3, [sp, #8]
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	9302      	str	r3, [sp, #8]
 800ac22:	4632      	mov	r2, r6
 800ac24:	463b      	mov	r3, r7
 800ac26:	4640      	mov	r0, r8
 800ac28:	4649      	mov	r1, r9
 800ac2a:	f7f5 fb2f 	bl	800028c <__adddf3>
 800ac2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4640      	mov	r0, r8
 800ac38:	4649      	mov	r1, r9
 800ac3a:	f7f5 fb25 	bl	8000288 <__aeabi_dsub>
 800ac3e:	4632      	mov	r2, r6
 800ac40:	463b      	mov	r3, r7
 800ac42:	f7f5 fb23 	bl	800028c <__adddf3>
 800ac46:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ac4a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac4e:	ed8a 7b00 	vstr	d7, [sl]
 800ac52:	e76e      	b.n	800ab32 <__kernel_rem_pio2+0x50a>
 800ac54:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ac58:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ac5c:	4640      	mov	r0, r8
 800ac5e:	4632      	mov	r2, r6
 800ac60:	463b      	mov	r3, r7
 800ac62:	4649      	mov	r1, r9
 800ac64:	f7f5 fb12 	bl	800028c <__adddf3>
 800ac68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4640      	mov	r0, r8
 800ac72:	4649      	mov	r1, r9
 800ac74:	f7f5 fb08 	bl	8000288 <__aeabi_dsub>
 800ac78:	4632      	mov	r2, r6
 800ac7a:	463b      	mov	r3, r7
 800ac7c:	f7f5 fb06 	bl	800028c <__adddf3>
 800ac80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac88:	ed84 7b00 	vstr	d7, [r4]
 800ac8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac90:	e755      	b.n	800ab3e <__kernel_rem_pio2+0x516>
 800ac92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ac96:	f7f5 faf9 	bl	800028c <__adddf3>
 800ac9a:	3d01      	subs	r5, #1
 800ac9c:	e759      	b.n	800ab52 <__kernel_rem_pio2+0x52a>
 800ac9e:	9b01      	ldr	r3, [sp, #4]
 800aca0:	9a01      	ldr	r2, [sp, #4]
 800aca2:	601d      	str	r5, [r3, #0]
 800aca4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800aca8:	605c      	str	r4, [r3, #4]
 800acaa:	609f      	str	r7, [r3, #8]
 800acac:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800acb0:	60d3      	str	r3, [r2, #12]
 800acb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acb6:	6110      	str	r0, [r2, #16]
 800acb8:	6153      	str	r3, [r2, #20]
 800acba:	e728      	b.n	800ab0e <__kernel_rem_pio2+0x4e6>
 800acbc:	41700000 	.word	0x41700000
 800acc0:	3e700000 	.word	0x3e700000
 800acc4:	00000000 	.word	0x00000000

0800acc8 <__kernel_tan>:
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	ed2d 8b06 	vpush	{d8-d10}
 800acd0:	ec5b ab10 	vmov	sl, fp, d0
 800acd4:	4be0      	ldr	r3, [pc, #896]	; (800b058 <__kernel_tan+0x390>)
 800acd6:	b083      	sub	sp, #12
 800acd8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800acdc:	429f      	cmp	r7, r3
 800acde:	ec59 8b11 	vmov	r8, r9, d1
 800ace2:	4606      	mov	r6, r0
 800ace4:	f8cd b000 	str.w	fp, [sp]
 800ace8:	dc61      	bgt.n	800adae <__kernel_tan+0xe6>
 800acea:	ee10 0a10 	vmov	r0, s0
 800acee:	4659      	mov	r1, fp
 800acf0:	f7f5 ff32 	bl	8000b58 <__aeabi_d2iz>
 800acf4:	4605      	mov	r5, r0
 800acf6:	2800      	cmp	r0, #0
 800acf8:	f040 8083 	bne.w	800ae02 <__kernel_tan+0x13a>
 800acfc:	1c73      	adds	r3, r6, #1
 800acfe:	4652      	mov	r2, sl
 800ad00:	4313      	orrs	r3, r2
 800ad02:	433b      	orrs	r3, r7
 800ad04:	d112      	bne.n	800ad2c <__kernel_tan+0x64>
 800ad06:	ec4b ab10 	vmov	d0, sl, fp
 800ad0a:	f000 fb89 	bl	800b420 <fabs>
 800ad0e:	49d3      	ldr	r1, [pc, #844]	; (800b05c <__kernel_tan+0x394>)
 800ad10:	ec53 2b10 	vmov	r2, r3, d0
 800ad14:	2000      	movs	r0, #0
 800ad16:	f7f5 fd99 	bl	800084c <__aeabi_ddiv>
 800ad1a:	4682      	mov	sl, r0
 800ad1c:	468b      	mov	fp, r1
 800ad1e:	ec4b ab10 	vmov	d0, sl, fp
 800ad22:	b003      	add	sp, #12
 800ad24:	ecbd 8b06 	vpop	{d8-d10}
 800ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2c:	2e01      	cmp	r6, #1
 800ad2e:	d0f6      	beq.n	800ad1e <__kernel_tan+0x56>
 800ad30:	4642      	mov	r2, r8
 800ad32:	464b      	mov	r3, r9
 800ad34:	4650      	mov	r0, sl
 800ad36:	4659      	mov	r1, fp
 800ad38:	f7f5 faa8 	bl	800028c <__adddf3>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	460f      	mov	r7, r1
 800ad42:	2000      	movs	r0, #0
 800ad44:	49c6      	ldr	r1, [pc, #792]	; (800b060 <__kernel_tan+0x398>)
 800ad46:	f7f5 fd81 	bl	800084c <__aeabi_ddiv>
 800ad4a:	e9cd 0100 	strd	r0, r1, [sp]
 800ad4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad52:	462e      	mov	r6, r5
 800ad54:	4652      	mov	r2, sl
 800ad56:	462c      	mov	r4, r5
 800ad58:	4630      	mov	r0, r6
 800ad5a:	461d      	mov	r5, r3
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	465b      	mov	r3, fp
 800ad60:	f7f5 fa92 	bl	8000288 <__aeabi_dsub>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4640      	mov	r0, r8
 800ad6a:	4649      	mov	r1, r9
 800ad6c:	f7f5 fa8c 	bl	8000288 <__aeabi_dsub>
 800ad70:	4632      	mov	r2, r6
 800ad72:	462b      	mov	r3, r5
 800ad74:	f7f5 fc40 	bl	80005f8 <__aeabi_dmul>
 800ad78:	4632      	mov	r2, r6
 800ad7a:	4680      	mov	r8, r0
 800ad7c:	4689      	mov	r9, r1
 800ad7e:	462b      	mov	r3, r5
 800ad80:	4630      	mov	r0, r6
 800ad82:	4639      	mov	r1, r7
 800ad84:	f7f5 fc38 	bl	80005f8 <__aeabi_dmul>
 800ad88:	4bb4      	ldr	r3, [pc, #720]	; (800b05c <__kernel_tan+0x394>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f7f5 fa7e 	bl	800028c <__adddf3>
 800ad90:	4602      	mov	r2, r0
 800ad92:	460b      	mov	r3, r1
 800ad94:	4640      	mov	r0, r8
 800ad96:	4649      	mov	r1, r9
 800ad98:	f7f5 fa78 	bl	800028c <__adddf3>
 800ad9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ada0:	f7f5 fc2a 	bl	80005f8 <__aeabi_dmul>
 800ada4:	4622      	mov	r2, r4
 800ada6:	462b      	mov	r3, r5
 800ada8:	f7f5 fa70 	bl	800028c <__adddf3>
 800adac:	e7b5      	b.n	800ad1a <__kernel_tan+0x52>
 800adae:	4bad      	ldr	r3, [pc, #692]	; (800b064 <__kernel_tan+0x39c>)
 800adb0:	429f      	cmp	r7, r3
 800adb2:	dd26      	ble.n	800ae02 <__kernel_tan+0x13a>
 800adb4:	9b00      	ldr	r3, [sp, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	da09      	bge.n	800adce <__kernel_tan+0x106>
 800adba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800adbe:	469b      	mov	fp, r3
 800adc0:	ee10 aa10 	vmov	sl, s0
 800adc4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800adc8:	ee11 8a10 	vmov	r8, s2
 800adcc:	4699      	mov	r9, r3
 800adce:	4652      	mov	r2, sl
 800add0:	465b      	mov	r3, fp
 800add2:	a183      	add	r1, pc, #524	; (adr r1, 800afe0 <__kernel_tan+0x318>)
 800add4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800add8:	f7f5 fa56 	bl	8000288 <__aeabi_dsub>
 800addc:	4642      	mov	r2, r8
 800adde:	464b      	mov	r3, r9
 800ade0:	4604      	mov	r4, r0
 800ade2:	460d      	mov	r5, r1
 800ade4:	a180      	add	r1, pc, #512	; (adr r1, 800afe8 <__kernel_tan+0x320>)
 800ade6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adea:	f7f5 fa4d 	bl	8000288 <__aeabi_dsub>
 800adee:	4622      	mov	r2, r4
 800adf0:	462b      	mov	r3, r5
 800adf2:	f7f5 fa4b 	bl	800028c <__adddf3>
 800adf6:	f04f 0800 	mov.w	r8, #0
 800adfa:	4682      	mov	sl, r0
 800adfc:	468b      	mov	fp, r1
 800adfe:	f04f 0900 	mov.w	r9, #0
 800ae02:	4652      	mov	r2, sl
 800ae04:	465b      	mov	r3, fp
 800ae06:	4650      	mov	r0, sl
 800ae08:	4659      	mov	r1, fp
 800ae0a:	f7f5 fbf5 	bl	80005f8 <__aeabi_dmul>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	ec43 2b18 	vmov	d8, r2, r3
 800ae16:	f7f5 fbef 	bl	80005f8 <__aeabi_dmul>
 800ae1a:	ec53 2b18 	vmov	r2, r3, d8
 800ae1e:	4604      	mov	r4, r0
 800ae20:	460d      	mov	r5, r1
 800ae22:	4650      	mov	r0, sl
 800ae24:	4659      	mov	r1, fp
 800ae26:	f7f5 fbe7 	bl	80005f8 <__aeabi_dmul>
 800ae2a:	a371      	add	r3, pc, #452	; (adr r3, 800aff0 <__kernel_tan+0x328>)
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	ec41 0b19 	vmov	d9, r0, r1
 800ae34:	4620      	mov	r0, r4
 800ae36:	4629      	mov	r1, r5
 800ae38:	f7f5 fbde 	bl	80005f8 <__aeabi_dmul>
 800ae3c:	a36e      	add	r3, pc, #440	; (adr r3, 800aff8 <__kernel_tan+0x330>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f7f5 fa23 	bl	800028c <__adddf3>
 800ae46:	4622      	mov	r2, r4
 800ae48:	462b      	mov	r3, r5
 800ae4a:	f7f5 fbd5 	bl	80005f8 <__aeabi_dmul>
 800ae4e:	a36c      	add	r3, pc, #432	; (adr r3, 800b000 <__kernel_tan+0x338>)
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	f7f5 fa1a 	bl	800028c <__adddf3>
 800ae58:	4622      	mov	r2, r4
 800ae5a:	462b      	mov	r3, r5
 800ae5c:	f7f5 fbcc 	bl	80005f8 <__aeabi_dmul>
 800ae60:	a369      	add	r3, pc, #420	; (adr r3, 800b008 <__kernel_tan+0x340>)
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	f7f5 fa11 	bl	800028c <__adddf3>
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	462b      	mov	r3, r5
 800ae6e:	f7f5 fbc3 	bl	80005f8 <__aeabi_dmul>
 800ae72:	a367      	add	r3, pc, #412	; (adr r3, 800b010 <__kernel_tan+0x348>)
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	f7f5 fa08 	bl	800028c <__adddf3>
 800ae7c:	4622      	mov	r2, r4
 800ae7e:	462b      	mov	r3, r5
 800ae80:	f7f5 fbba 	bl	80005f8 <__aeabi_dmul>
 800ae84:	a364      	add	r3, pc, #400	; (adr r3, 800b018 <__kernel_tan+0x350>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f7f5 f9ff 	bl	800028c <__adddf3>
 800ae8e:	ec53 2b18 	vmov	r2, r3, d8
 800ae92:	f7f5 fbb1 	bl	80005f8 <__aeabi_dmul>
 800ae96:	a362      	add	r3, pc, #392	; (adr r3, 800b020 <__kernel_tan+0x358>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	ec41 0b1a 	vmov	d10, r0, r1
 800aea0:	4620      	mov	r0, r4
 800aea2:	4629      	mov	r1, r5
 800aea4:	f7f5 fba8 	bl	80005f8 <__aeabi_dmul>
 800aea8:	a35f      	add	r3, pc, #380	; (adr r3, 800b028 <__kernel_tan+0x360>)
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	f7f5 f9ed 	bl	800028c <__adddf3>
 800aeb2:	4622      	mov	r2, r4
 800aeb4:	462b      	mov	r3, r5
 800aeb6:	f7f5 fb9f 	bl	80005f8 <__aeabi_dmul>
 800aeba:	a35d      	add	r3, pc, #372	; (adr r3, 800b030 <__kernel_tan+0x368>)
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f7f5 f9e4 	bl	800028c <__adddf3>
 800aec4:	4622      	mov	r2, r4
 800aec6:	462b      	mov	r3, r5
 800aec8:	f7f5 fb96 	bl	80005f8 <__aeabi_dmul>
 800aecc:	a35a      	add	r3, pc, #360	; (adr r3, 800b038 <__kernel_tan+0x370>)
 800aece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed2:	f7f5 f9db 	bl	800028c <__adddf3>
 800aed6:	4622      	mov	r2, r4
 800aed8:	462b      	mov	r3, r5
 800aeda:	f7f5 fb8d 	bl	80005f8 <__aeabi_dmul>
 800aede:	a358      	add	r3, pc, #352	; (adr r3, 800b040 <__kernel_tan+0x378>)
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	f7f5 f9d2 	bl	800028c <__adddf3>
 800aee8:	4622      	mov	r2, r4
 800aeea:	462b      	mov	r3, r5
 800aeec:	f7f5 fb84 	bl	80005f8 <__aeabi_dmul>
 800aef0:	a355      	add	r3, pc, #340	; (adr r3, 800b048 <__kernel_tan+0x380>)
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	f7f5 f9c9 	bl	800028c <__adddf3>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	ec51 0b1a 	vmov	r0, r1, d10
 800af02:	f7f5 f9c3 	bl	800028c <__adddf3>
 800af06:	ec53 2b19 	vmov	r2, r3, d9
 800af0a:	f7f5 fb75 	bl	80005f8 <__aeabi_dmul>
 800af0e:	4642      	mov	r2, r8
 800af10:	464b      	mov	r3, r9
 800af12:	f7f5 f9bb 	bl	800028c <__adddf3>
 800af16:	ec53 2b18 	vmov	r2, r3, d8
 800af1a:	f7f5 fb6d 	bl	80005f8 <__aeabi_dmul>
 800af1e:	4642      	mov	r2, r8
 800af20:	464b      	mov	r3, r9
 800af22:	f7f5 f9b3 	bl	800028c <__adddf3>
 800af26:	a34a      	add	r3, pc, #296	; (adr r3, 800b050 <__kernel_tan+0x388>)
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	4604      	mov	r4, r0
 800af2e:	460d      	mov	r5, r1
 800af30:	ec51 0b19 	vmov	r0, r1, d9
 800af34:	f7f5 fb60 	bl	80005f8 <__aeabi_dmul>
 800af38:	4622      	mov	r2, r4
 800af3a:	462b      	mov	r3, r5
 800af3c:	f7f5 f9a6 	bl	800028c <__adddf3>
 800af40:	460b      	mov	r3, r1
 800af42:	ec41 0b18 	vmov	d8, r0, r1
 800af46:	4602      	mov	r2, r0
 800af48:	4659      	mov	r1, fp
 800af4a:	4650      	mov	r0, sl
 800af4c:	f7f5 f99e 	bl	800028c <__adddf3>
 800af50:	4b44      	ldr	r3, [pc, #272]	; (800b064 <__kernel_tan+0x39c>)
 800af52:	429f      	cmp	r7, r3
 800af54:	4604      	mov	r4, r0
 800af56:	460d      	mov	r5, r1
 800af58:	f340 8086 	ble.w	800b068 <__kernel_tan+0x3a0>
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7f5 fae1 	bl	8000524 <__aeabi_i2d>
 800af62:	4622      	mov	r2, r4
 800af64:	4680      	mov	r8, r0
 800af66:	4689      	mov	r9, r1
 800af68:	462b      	mov	r3, r5
 800af6a:	4620      	mov	r0, r4
 800af6c:	4629      	mov	r1, r5
 800af6e:	f7f5 fb43 	bl	80005f8 <__aeabi_dmul>
 800af72:	4642      	mov	r2, r8
 800af74:	4606      	mov	r6, r0
 800af76:	460f      	mov	r7, r1
 800af78:	464b      	mov	r3, r9
 800af7a:	4620      	mov	r0, r4
 800af7c:	4629      	mov	r1, r5
 800af7e:	f7f5 f985 	bl	800028c <__adddf3>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	4630      	mov	r0, r6
 800af88:	4639      	mov	r1, r7
 800af8a:	f7f5 fc5f 	bl	800084c <__aeabi_ddiv>
 800af8e:	ec53 2b18 	vmov	r2, r3, d8
 800af92:	f7f5 f979 	bl	8000288 <__aeabi_dsub>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	4650      	mov	r0, sl
 800af9c:	4659      	mov	r1, fp
 800af9e:	f7f5 f973 	bl	8000288 <__aeabi_dsub>
 800afa2:	4602      	mov	r2, r0
 800afa4:	460b      	mov	r3, r1
 800afa6:	f7f5 f971 	bl	800028c <__adddf3>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4640      	mov	r0, r8
 800afb0:	4649      	mov	r1, r9
 800afb2:	f7f5 f969 	bl	8000288 <__aeabi_dsub>
 800afb6:	9b00      	ldr	r3, [sp, #0]
 800afb8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800afbc:	f00a 0a02 	and.w	sl, sl, #2
 800afc0:	4604      	mov	r4, r0
 800afc2:	f1ca 0001 	rsb	r0, sl, #1
 800afc6:	460d      	mov	r5, r1
 800afc8:	f7f5 faac 	bl	8000524 <__aeabi_i2d>
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	4620      	mov	r0, r4
 800afd2:	4629      	mov	r1, r5
 800afd4:	f7f5 fb10 	bl	80005f8 <__aeabi_dmul>
 800afd8:	e69f      	b.n	800ad1a <__kernel_tan+0x52>
 800afda:	bf00      	nop
 800afdc:	f3af 8000 	nop.w
 800afe0:	54442d18 	.word	0x54442d18
 800afe4:	3fe921fb 	.word	0x3fe921fb
 800afe8:	33145c07 	.word	0x33145c07
 800afec:	3c81a626 	.word	0x3c81a626
 800aff0:	74bf7ad4 	.word	0x74bf7ad4
 800aff4:	3efb2a70 	.word	0x3efb2a70
 800aff8:	32f0a7e9 	.word	0x32f0a7e9
 800affc:	3f12b80f 	.word	0x3f12b80f
 800b000:	1a8d1068 	.word	0x1a8d1068
 800b004:	3f3026f7 	.word	0x3f3026f7
 800b008:	fee08315 	.word	0xfee08315
 800b00c:	3f57dbc8 	.word	0x3f57dbc8
 800b010:	e96e8493 	.word	0xe96e8493
 800b014:	3f8226e3 	.word	0x3f8226e3
 800b018:	1bb341fe 	.word	0x1bb341fe
 800b01c:	3faba1ba 	.word	0x3faba1ba
 800b020:	db605373 	.word	0xdb605373
 800b024:	bef375cb 	.word	0xbef375cb
 800b028:	a03792a6 	.word	0xa03792a6
 800b02c:	3f147e88 	.word	0x3f147e88
 800b030:	f2f26501 	.word	0xf2f26501
 800b034:	3f4344d8 	.word	0x3f4344d8
 800b038:	c9560328 	.word	0xc9560328
 800b03c:	3f6d6d22 	.word	0x3f6d6d22
 800b040:	8406d637 	.word	0x8406d637
 800b044:	3f9664f4 	.word	0x3f9664f4
 800b048:	1110fe7a 	.word	0x1110fe7a
 800b04c:	3fc11111 	.word	0x3fc11111
 800b050:	55555563 	.word	0x55555563
 800b054:	3fd55555 	.word	0x3fd55555
 800b058:	3e2fffff 	.word	0x3e2fffff
 800b05c:	3ff00000 	.word	0x3ff00000
 800b060:	bff00000 	.word	0xbff00000
 800b064:	3fe59427 	.word	0x3fe59427
 800b068:	2e01      	cmp	r6, #1
 800b06a:	d02f      	beq.n	800b0cc <__kernel_tan+0x404>
 800b06c:	460f      	mov	r7, r1
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	4689      	mov	r9, r1
 800b074:	2000      	movs	r0, #0
 800b076:	4917      	ldr	r1, [pc, #92]	; (800b0d4 <__kernel_tan+0x40c>)
 800b078:	f7f5 fbe8 	bl	800084c <__aeabi_ddiv>
 800b07c:	2600      	movs	r6, #0
 800b07e:	e9cd 0100 	strd	r0, r1, [sp]
 800b082:	4652      	mov	r2, sl
 800b084:	465b      	mov	r3, fp
 800b086:	4630      	mov	r0, r6
 800b088:	4639      	mov	r1, r7
 800b08a:	f7f5 f8fd 	bl	8000288 <__aeabi_dsub>
 800b08e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b092:	4602      	mov	r2, r0
 800b094:	460b      	mov	r3, r1
 800b096:	ec51 0b18 	vmov	r0, r1, d8
 800b09a:	f7f5 f8f5 	bl	8000288 <__aeabi_dsub>
 800b09e:	4632      	mov	r2, r6
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	f7f5 faa9 	bl	80005f8 <__aeabi_dmul>
 800b0a6:	46b0      	mov	r8, r6
 800b0a8:	460f      	mov	r7, r1
 800b0aa:	4642      	mov	r2, r8
 800b0ac:	462b      	mov	r3, r5
 800b0ae:	4634      	mov	r4, r6
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	4640      	mov	r0, r8
 800b0b6:	f7f5 fa9f 	bl	80005f8 <__aeabi_dmul>
 800b0ba:	4b07      	ldr	r3, [pc, #28]	; (800b0d8 <__kernel_tan+0x410>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f7f5 f8e5 	bl	800028c <__adddf3>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	e665      	b.n	800ad98 <__kernel_tan+0xd0>
 800b0cc:	4682      	mov	sl, r0
 800b0ce:	468b      	mov	fp, r1
 800b0d0:	e625      	b.n	800ad1e <__kernel_tan+0x56>
 800b0d2:	bf00      	nop
 800b0d4:	bff00000 	.word	0xbff00000
 800b0d8:	3ff00000 	.word	0x3ff00000
 800b0dc:	00000000 	.word	0x00000000

0800b0e0 <atan>:
 800b0e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e4:	ec55 4b10 	vmov	r4, r5, d0
 800b0e8:	4bc3      	ldr	r3, [pc, #780]	; (800b3f8 <atan+0x318>)
 800b0ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b0ee:	429e      	cmp	r6, r3
 800b0f0:	46ab      	mov	fp, r5
 800b0f2:	dd18      	ble.n	800b126 <atan+0x46>
 800b0f4:	4bc1      	ldr	r3, [pc, #772]	; (800b3fc <atan+0x31c>)
 800b0f6:	429e      	cmp	r6, r3
 800b0f8:	dc01      	bgt.n	800b0fe <atan+0x1e>
 800b0fa:	d109      	bne.n	800b110 <atan+0x30>
 800b0fc:	b144      	cbz	r4, 800b110 <atan+0x30>
 800b0fe:	4622      	mov	r2, r4
 800b100:	462b      	mov	r3, r5
 800b102:	4620      	mov	r0, r4
 800b104:	4629      	mov	r1, r5
 800b106:	f7f5 f8c1 	bl	800028c <__adddf3>
 800b10a:	4604      	mov	r4, r0
 800b10c:	460d      	mov	r5, r1
 800b10e:	e006      	b.n	800b11e <atan+0x3e>
 800b110:	f1bb 0f00 	cmp.w	fp, #0
 800b114:	f300 8131 	bgt.w	800b37a <atan+0x29a>
 800b118:	a59b      	add	r5, pc, #620	; (adr r5, 800b388 <atan+0x2a8>)
 800b11a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b11e:	ec45 4b10 	vmov	d0, r4, r5
 800b122:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b126:	4bb6      	ldr	r3, [pc, #728]	; (800b400 <atan+0x320>)
 800b128:	429e      	cmp	r6, r3
 800b12a:	dc14      	bgt.n	800b156 <atan+0x76>
 800b12c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b130:	429e      	cmp	r6, r3
 800b132:	dc0d      	bgt.n	800b150 <atan+0x70>
 800b134:	a396      	add	r3, pc, #600	; (adr r3, 800b390 <atan+0x2b0>)
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	ee10 0a10 	vmov	r0, s0
 800b13e:	4629      	mov	r1, r5
 800b140:	f7f5 f8a4 	bl	800028c <__adddf3>
 800b144:	4baf      	ldr	r3, [pc, #700]	; (800b404 <atan+0x324>)
 800b146:	2200      	movs	r2, #0
 800b148:	f7f5 fce6 	bl	8000b18 <__aeabi_dcmpgt>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d1e6      	bne.n	800b11e <atan+0x3e>
 800b150:	f04f 3aff 	mov.w	sl, #4294967295
 800b154:	e02b      	b.n	800b1ae <atan+0xce>
 800b156:	f000 f963 	bl	800b420 <fabs>
 800b15a:	4bab      	ldr	r3, [pc, #684]	; (800b408 <atan+0x328>)
 800b15c:	429e      	cmp	r6, r3
 800b15e:	ec55 4b10 	vmov	r4, r5, d0
 800b162:	f300 80bf 	bgt.w	800b2e4 <atan+0x204>
 800b166:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b16a:	429e      	cmp	r6, r3
 800b16c:	f300 80a0 	bgt.w	800b2b0 <atan+0x1d0>
 800b170:	ee10 2a10 	vmov	r2, s0
 800b174:	ee10 0a10 	vmov	r0, s0
 800b178:	462b      	mov	r3, r5
 800b17a:	4629      	mov	r1, r5
 800b17c:	f7f5 f886 	bl	800028c <__adddf3>
 800b180:	4ba0      	ldr	r3, [pc, #640]	; (800b404 <atan+0x324>)
 800b182:	2200      	movs	r2, #0
 800b184:	f7f5 f880 	bl	8000288 <__aeabi_dsub>
 800b188:	2200      	movs	r2, #0
 800b18a:	4606      	mov	r6, r0
 800b18c:	460f      	mov	r7, r1
 800b18e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b192:	4620      	mov	r0, r4
 800b194:	4629      	mov	r1, r5
 800b196:	f7f5 f879 	bl	800028c <__adddf3>
 800b19a:	4602      	mov	r2, r0
 800b19c:	460b      	mov	r3, r1
 800b19e:	4630      	mov	r0, r6
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	f7f5 fb53 	bl	800084c <__aeabi_ddiv>
 800b1a6:	f04f 0a00 	mov.w	sl, #0
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	462b      	mov	r3, r5
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	f7f5 fa1f 	bl	80005f8 <__aeabi_dmul>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4680      	mov	r8, r0
 800b1c0:	4689      	mov	r9, r1
 800b1c2:	f7f5 fa19 	bl	80005f8 <__aeabi_dmul>
 800b1c6:	a374      	add	r3, pc, #464	; (adr r3, 800b398 <atan+0x2b8>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	460f      	mov	r7, r1
 800b1d0:	f7f5 fa12 	bl	80005f8 <__aeabi_dmul>
 800b1d4:	a372      	add	r3, pc, #456	; (adr r3, 800b3a0 <atan+0x2c0>)
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	f7f5 f857 	bl	800028c <__adddf3>
 800b1de:	4632      	mov	r2, r6
 800b1e0:	463b      	mov	r3, r7
 800b1e2:	f7f5 fa09 	bl	80005f8 <__aeabi_dmul>
 800b1e6:	a370      	add	r3, pc, #448	; (adr r3, 800b3a8 <atan+0x2c8>)
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f7f5 f84e 	bl	800028c <__adddf3>
 800b1f0:	4632      	mov	r2, r6
 800b1f2:	463b      	mov	r3, r7
 800b1f4:	f7f5 fa00 	bl	80005f8 <__aeabi_dmul>
 800b1f8:	a36d      	add	r3, pc, #436	; (adr r3, 800b3b0 <atan+0x2d0>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f7f5 f845 	bl	800028c <__adddf3>
 800b202:	4632      	mov	r2, r6
 800b204:	463b      	mov	r3, r7
 800b206:	f7f5 f9f7 	bl	80005f8 <__aeabi_dmul>
 800b20a:	a36b      	add	r3, pc, #428	; (adr r3, 800b3b8 <atan+0x2d8>)
 800b20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b210:	f7f5 f83c 	bl	800028c <__adddf3>
 800b214:	4632      	mov	r2, r6
 800b216:	463b      	mov	r3, r7
 800b218:	f7f5 f9ee 	bl	80005f8 <__aeabi_dmul>
 800b21c:	a368      	add	r3, pc, #416	; (adr r3, 800b3c0 <atan+0x2e0>)
 800b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b222:	f7f5 f833 	bl	800028c <__adddf3>
 800b226:	4642      	mov	r2, r8
 800b228:	464b      	mov	r3, r9
 800b22a:	f7f5 f9e5 	bl	80005f8 <__aeabi_dmul>
 800b22e:	a366      	add	r3, pc, #408	; (adr r3, 800b3c8 <atan+0x2e8>)
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	4680      	mov	r8, r0
 800b236:	4689      	mov	r9, r1
 800b238:	4630      	mov	r0, r6
 800b23a:	4639      	mov	r1, r7
 800b23c:	f7f5 f9dc 	bl	80005f8 <__aeabi_dmul>
 800b240:	a363      	add	r3, pc, #396	; (adr r3, 800b3d0 <atan+0x2f0>)
 800b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b246:	f7f5 f81f 	bl	8000288 <__aeabi_dsub>
 800b24a:	4632      	mov	r2, r6
 800b24c:	463b      	mov	r3, r7
 800b24e:	f7f5 f9d3 	bl	80005f8 <__aeabi_dmul>
 800b252:	a361      	add	r3, pc, #388	; (adr r3, 800b3d8 <atan+0x2f8>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f7f5 f816 	bl	8000288 <__aeabi_dsub>
 800b25c:	4632      	mov	r2, r6
 800b25e:	463b      	mov	r3, r7
 800b260:	f7f5 f9ca 	bl	80005f8 <__aeabi_dmul>
 800b264:	a35e      	add	r3, pc, #376	; (adr r3, 800b3e0 <atan+0x300>)
 800b266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26a:	f7f5 f80d 	bl	8000288 <__aeabi_dsub>
 800b26e:	4632      	mov	r2, r6
 800b270:	463b      	mov	r3, r7
 800b272:	f7f5 f9c1 	bl	80005f8 <__aeabi_dmul>
 800b276:	a35c      	add	r3, pc, #368	; (adr r3, 800b3e8 <atan+0x308>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	f7f5 f804 	bl	8000288 <__aeabi_dsub>
 800b280:	4632      	mov	r2, r6
 800b282:	463b      	mov	r3, r7
 800b284:	f7f5 f9b8 	bl	80005f8 <__aeabi_dmul>
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	4640      	mov	r0, r8
 800b28e:	4649      	mov	r1, r9
 800b290:	f7f4 fffc 	bl	800028c <__adddf3>
 800b294:	4622      	mov	r2, r4
 800b296:	462b      	mov	r3, r5
 800b298:	f7f5 f9ae 	bl	80005f8 <__aeabi_dmul>
 800b29c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	d14b      	bne.n	800b33e <atan+0x25e>
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	f7f4 ffed 	bl	8000288 <__aeabi_dsub>
 800b2ae:	e72c      	b.n	800b10a <atan+0x2a>
 800b2b0:	ee10 0a10 	vmov	r0, s0
 800b2b4:	4b53      	ldr	r3, [pc, #332]	; (800b404 <atan+0x324>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	f7f4 ffe5 	bl	8000288 <__aeabi_dsub>
 800b2be:	4b51      	ldr	r3, [pc, #324]	; (800b404 <atan+0x324>)
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	460f      	mov	r7, r1
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7f4 ffdf 	bl	800028c <__adddf3>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	4639      	mov	r1, r7
 800b2d6:	f7f5 fab9 	bl	800084c <__aeabi_ddiv>
 800b2da:	f04f 0a01 	mov.w	sl, #1
 800b2de:	4604      	mov	r4, r0
 800b2e0:	460d      	mov	r5, r1
 800b2e2:	e764      	b.n	800b1ae <atan+0xce>
 800b2e4:	4b49      	ldr	r3, [pc, #292]	; (800b40c <atan+0x32c>)
 800b2e6:	429e      	cmp	r6, r3
 800b2e8:	da1d      	bge.n	800b326 <atan+0x246>
 800b2ea:	ee10 0a10 	vmov	r0, s0
 800b2ee:	4b48      	ldr	r3, [pc, #288]	; (800b410 <atan+0x330>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	4629      	mov	r1, r5
 800b2f4:	f7f4 ffc8 	bl	8000288 <__aeabi_dsub>
 800b2f8:	4b45      	ldr	r3, [pc, #276]	; (800b410 <atan+0x330>)
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	460f      	mov	r7, r1
 800b2fe:	2200      	movs	r2, #0
 800b300:	4620      	mov	r0, r4
 800b302:	4629      	mov	r1, r5
 800b304:	f7f5 f978 	bl	80005f8 <__aeabi_dmul>
 800b308:	4b3e      	ldr	r3, [pc, #248]	; (800b404 <atan+0x324>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	f7f4 ffbe 	bl	800028c <__adddf3>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	4630      	mov	r0, r6
 800b316:	4639      	mov	r1, r7
 800b318:	f7f5 fa98 	bl	800084c <__aeabi_ddiv>
 800b31c:	f04f 0a02 	mov.w	sl, #2
 800b320:	4604      	mov	r4, r0
 800b322:	460d      	mov	r5, r1
 800b324:	e743      	b.n	800b1ae <atan+0xce>
 800b326:	462b      	mov	r3, r5
 800b328:	ee10 2a10 	vmov	r2, s0
 800b32c:	4939      	ldr	r1, [pc, #228]	; (800b414 <atan+0x334>)
 800b32e:	2000      	movs	r0, #0
 800b330:	f7f5 fa8c 	bl	800084c <__aeabi_ddiv>
 800b334:	f04f 0a03 	mov.w	sl, #3
 800b338:	4604      	mov	r4, r0
 800b33a:	460d      	mov	r5, r1
 800b33c:	e737      	b.n	800b1ae <atan+0xce>
 800b33e:	4b36      	ldr	r3, [pc, #216]	; (800b418 <atan+0x338>)
 800b340:	4e36      	ldr	r6, [pc, #216]	; (800b41c <atan+0x33c>)
 800b342:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b346:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b34a:	e9da 2300 	ldrd	r2, r3, [sl]
 800b34e:	f7f4 ff9b 	bl	8000288 <__aeabi_dsub>
 800b352:	4622      	mov	r2, r4
 800b354:	462b      	mov	r3, r5
 800b356:	f7f4 ff97 	bl	8000288 <__aeabi_dsub>
 800b35a:	4602      	mov	r2, r0
 800b35c:	460b      	mov	r3, r1
 800b35e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b362:	f7f4 ff91 	bl	8000288 <__aeabi_dsub>
 800b366:	f1bb 0f00 	cmp.w	fp, #0
 800b36a:	4604      	mov	r4, r0
 800b36c:	460d      	mov	r5, r1
 800b36e:	f6bf aed6 	bge.w	800b11e <atan+0x3e>
 800b372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b376:	461d      	mov	r5, r3
 800b378:	e6d1      	b.n	800b11e <atan+0x3e>
 800b37a:	a51d      	add	r5, pc, #116	; (adr r5, 800b3f0 <atan+0x310>)
 800b37c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b380:	e6cd      	b.n	800b11e <atan+0x3e>
 800b382:	bf00      	nop
 800b384:	f3af 8000 	nop.w
 800b388:	54442d18 	.word	0x54442d18
 800b38c:	bff921fb 	.word	0xbff921fb
 800b390:	8800759c 	.word	0x8800759c
 800b394:	7e37e43c 	.word	0x7e37e43c
 800b398:	e322da11 	.word	0xe322da11
 800b39c:	3f90ad3a 	.word	0x3f90ad3a
 800b3a0:	24760deb 	.word	0x24760deb
 800b3a4:	3fa97b4b 	.word	0x3fa97b4b
 800b3a8:	a0d03d51 	.word	0xa0d03d51
 800b3ac:	3fb10d66 	.word	0x3fb10d66
 800b3b0:	c54c206e 	.word	0xc54c206e
 800b3b4:	3fb745cd 	.word	0x3fb745cd
 800b3b8:	920083ff 	.word	0x920083ff
 800b3bc:	3fc24924 	.word	0x3fc24924
 800b3c0:	5555550d 	.word	0x5555550d
 800b3c4:	3fd55555 	.word	0x3fd55555
 800b3c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b3cc:	bfa2b444 	.word	0xbfa2b444
 800b3d0:	52defd9a 	.word	0x52defd9a
 800b3d4:	3fadde2d 	.word	0x3fadde2d
 800b3d8:	af749a6d 	.word	0xaf749a6d
 800b3dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b3e0:	fe231671 	.word	0xfe231671
 800b3e4:	3fbc71c6 	.word	0x3fbc71c6
 800b3e8:	9998ebc4 	.word	0x9998ebc4
 800b3ec:	3fc99999 	.word	0x3fc99999
 800b3f0:	54442d18 	.word	0x54442d18
 800b3f4:	3ff921fb 	.word	0x3ff921fb
 800b3f8:	440fffff 	.word	0x440fffff
 800b3fc:	7ff00000 	.word	0x7ff00000
 800b400:	3fdbffff 	.word	0x3fdbffff
 800b404:	3ff00000 	.word	0x3ff00000
 800b408:	3ff2ffff 	.word	0x3ff2ffff
 800b40c:	40038000 	.word	0x40038000
 800b410:	3ff80000 	.word	0x3ff80000
 800b414:	bff00000 	.word	0xbff00000
 800b418:	0800be28 	.word	0x0800be28
 800b41c:	0800be08 	.word	0x0800be08

0800b420 <fabs>:
 800b420:	ec51 0b10 	vmov	r0, r1, d0
 800b424:	ee10 2a10 	vmov	r2, s0
 800b428:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b42c:	ec43 2b10 	vmov	d0, r2, r3
 800b430:	4770      	bx	lr
 800b432:	0000      	movs	r0, r0
 800b434:	0000      	movs	r0, r0
	...

0800b438 <floor>:
 800b438:	ec51 0b10 	vmov	r0, r1, d0
 800b43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b440:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b444:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b448:	2e13      	cmp	r6, #19
 800b44a:	ee10 5a10 	vmov	r5, s0
 800b44e:	ee10 8a10 	vmov	r8, s0
 800b452:	460c      	mov	r4, r1
 800b454:	dc32      	bgt.n	800b4bc <floor+0x84>
 800b456:	2e00      	cmp	r6, #0
 800b458:	da14      	bge.n	800b484 <floor+0x4c>
 800b45a:	a333      	add	r3, pc, #204	; (adr r3, 800b528 <floor+0xf0>)
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	f7f4 ff14 	bl	800028c <__adddf3>
 800b464:	2200      	movs	r2, #0
 800b466:	2300      	movs	r3, #0
 800b468:	f7f5 fb56 	bl	8000b18 <__aeabi_dcmpgt>
 800b46c:	b138      	cbz	r0, 800b47e <floor+0x46>
 800b46e:	2c00      	cmp	r4, #0
 800b470:	da57      	bge.n	800b522 <floor+0xea>
 800b472:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b476:	431d      	orrs	r5, r3
 800b478:	d001      	beq.n	800b47e <floor+0x46>
 800b47a:	4c2d      	ldr	r4, [pc, #180]	; (800b530 <floor+0xf8>)
 800b47c:	2500      	movs	r5, #0
 800b47e:	4621      	mov	r1, r4
 800b480:	4628      	mov	r0, r5
 800b482:	e025      	b.n	800b4d0 <floor+0x98>
 800b484:	4f2b      	ldr	r7, [pc, #172]	; (800b534 <floor+0xfc>)
 800b486:	4137      	asrs	r7, r6
 800b488:	ea01 0307 	and.w	r3, r1, r7
 800b48c:	4303      	orrs	r3, r0
 800b48e:	d01f      	beq.n	800b4d0 <floor+0x98>
 800b490:	a325      	add	r3, pc, #148	; (adr r3, 800b528 <floor+0xf0>)
 800b492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b496:	f7f4 fef9 	bl	800028c <__adddf3>
 800b49a:	2200      	movs	r2, #0
 800b49c:	2300      	movs	r3, #0
 800b49e:	f7f5 fb3b 	bl	8000b18 <__aeabi_dcmpgt>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d0eb      	beq.n	800b47e <floor+0x46>
 800b4a6:	2c00      	cmp	r4, #0
 800b4a8:	bfbe      	ittt	lt
 800b4aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b4ae:	fa43 f606 	asrlt.w	r6, r3, r6
 800b4b2:	19a4      	addlt	r4, r4, r6
 800b4b4:	ea24 0407 	bic.w	r4, r4, r7
 800b4b8:	2500      	movs	r5, #0
 800b4ba:	e7e0      	b.n	800b47e <floor+0x46>
 800b4bc:	2e33      	cmp	r6, #51	; 0x33
 800b4be:	dd0b      	ble.n	800b4d8 <floor+0xa0>
 800b4c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b4c4:	d104      	bne.n	800b4d0 <floor+0x98>
 800b4c6:	ee10 2a10 	vmov	r2, s0
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	f7f4 fede 	bl	800028c <__adddf3>
 800b4d0:	ec41 0b10 	vmov	d0, r0, r1
 800b4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b4e0:	fa23 f707 	lsr.w	r7, r3, r7
 800b4e4:	4207      	tst	r7, r0
 800b4e6:	d0f3      	beq.n	800b4d0 <floor+0x98>
 800b4e8:	a30f      	add	r3, pc, #60	; (adr r3, 800b528 <floor+0xf0>)
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	f7f4 fecd 	bl	800028c <__adddf3>
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	f7f5 fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d0bf      	beq.n	800b47e <floor+0x46>
 800b4fe:	2c00      	cmp	r4, #0
 800b500:	da02      	bge.n	800b508 <floor+0xd0>
 800b502:	2e14      	cmp	r6, #20
 800b504:	d103      	bne.n	800b50e <floor+0xd6>
 800b506:	3401      	adds	r4, #1
 800b508:	ea25 0507 	bic.w	r5, r5, r7
 800b50c:	e7b7      	b.n	800b47e <floor+0x46>
 800b50e:	2301      	movs	r3, #1
 800b510:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b514:	fa03 f606 	lsl.w	r6, r3, r6
 800b518:	4435      	add	r5, r6
 800b51a:	4545      	cmp	r5, r8
 800b51c:	bf38      	it	cc
 800b51e:	18e4      	addcc	r4, r4, r3
 800b520:	e7f2      	b.n	800b508 <floor+0xd0>
 800b522:	2500      	movs	r5, #0
 800b524:	462c      	mov	r4, r5
 800b526:	e7aa      	b.n	800b47e <floor+0x46>
 800b528:	8800759c 	.word	0x8800759c
 800b52c:	7e37e43c 	.word	0x7e37e43c
 800b530:	bff00000 	.word	0xbff00000
 800b534:	000fffff 	.word	0x000fffff

0800b538 <nan>:
 800b538:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b540 <nan+0x8>
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	00000000 	.word	0x00000000
 800b544:	7ff80000 	.word	0x7ff80000

0800b548 <scalbn>:
 800b548:	b570      	push	{r4, r5, r6, lr}
 800b54a:	ec55 4b10 	vmov	r4, r5, d0
 800b54e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b552:	4606      	mov	r6, r0
 800b554:	462b      	mov	r3, r5
 800b556:	b99a      	cbnz	r2, 800b580 <scalbn+0x38>
 800b558:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b55c:	4323      	orrs	r3, r4
 800b55e:	d036      	beq.n	800b5ce <scalbn+0x86>
 800b560:	4b39      	ldr	r3, [pc, #228]	; (800b648 <scalbn+0x100>)
 800b562:	4629      	mov	r1, r5
 800b564:	ee10 0a10 	vmov	r0, s0
 800b568:	2200      	movs	r2, #0
 800b56a:	f7f5 f845 	bl	80005f8 <__aeabi_dmul>
 800b56e:	4b37      	ldr	r3, [pc, #220]	; (800b64c <scalbn+0x104>)
 800b570:	429e      	cmp	r6, r3
 800b572:	4604      	mov	r4, r0
 800b574:	460d      	mov	r5, r1
 800b576:	da10      	bge.n	800b59a <scalbn+0x52>
 800b578:	a32b      	add	r3, pc, #172	; (adr r3, 800b628 <scalbn+0xe0>)
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	e03a      	b.n	800b5f6 <scalbn+0xae>
 800b580:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b584:	428a      	cmp	r2, r1
 800b586:	d10c      	bne.n	800b5a2 <scalbn+0x5a>
 800b588:	ee10 2a10 	vmov	r2, s0
 800b58c:	4620      	mov	r0, r4
 800b58e:	4629      	mov	r1, r5
 800b590:	f7f4 fe7c 	bl	800028c <__adddf3>
 800b594:	4604      	mov	r4, r0
 800b596:	460d      	mov	r5, r1
 800b598:	e019      	b.n	800b5ce <scalbn+0x86>
 800b59a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b59e:	460b      	mov	r3, r1
 800b5a0:	3a36      	subs	r2, #54	; 0x36
 800b5a2:	4432      	add	r2, r6
 800b5a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b5a8:	428a      	cmp	r2, r1
 800b5aa:	dd08      	ble.n	800b5be <scalbn+0x76>
 800b5ac:	2d00      	cmp	r5, #0
 800b5ae:	a120      	add	r1, pc, #128	; (adr r1, 800b630 <scalbn+0xe8>)
 800b5b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5b4:	da1c      	bge.n	800b5f0 <scalbn+0xa8>
 800b5b6:	a120      	add	r1, pc, #128	; (adr r1, 800b638 <scalbn+0xf0>)
 800b5b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5bc:	e018      	b.n	800b5f0 <scalbn+0xa8>
 800b5be:	2a00      	cmp	r2, #0
 800b5c0:	dd08      	ble.n	800b5d4 <scalbn+0x8c>
 800b5c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b5c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b5ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b5ce:	ec45 4b10 	vmov	d0, r4, r5
 800b5d2:	bd70      	pop	{r4, r5, r6, pc}
 800b5d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b5d8:	da19      	bge.n	800b60e <scalbn+0xc6>
 800b5da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b5de:	429e      	cmp	r6, r3
 800b5e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b5e4:	dd0a      	ble.n	800b5fc <scalbn+0xb4>
 800b5e6:	a112      	add	r1, pc, #72	; (adr r1, 800b630 <scalbn+0xe8>)
 800b5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e2      	bne.n	800b5b6 <scalbn+0x6e>
 800b5f0:	a30f      	add	r3, pc, #60	; (adr r3, 800b630 <scalbn+0xe8>)
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	f7f4 ffff 	bl	80005f8 <__aeabi_dmul>
 800b5fa:	e7cb      	b.n	800b594 <scalbn+0x4c>
 800b5fc:	a10a      	add	r1, pc, #40	; (adr r1, 800b628 <scalbn+0xe0>)
 800b5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d0b8      	beq.n	800b578 <scalbn+0x30>
 800b606:	a10e      	add	r1, pc, #56	; (adr r1, 800b640 <scalbn+0xf8>)
 800b608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b60c:	e7b4      	b.n	800b578 <scalbn+0x30>
 800b60e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b612:	3236      	adds	r2, #54	; 0x36
 800b614:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b618:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b61c:	4620      	mov	r0, r4
 800b61e:	4b0c      	ldr	r3, [pc, #48]	; (800b650 <scalbn+0x108>)
 800b620:	2200      	movs	r2, #0
 800b622:	e7e8      	b.n	800b5f6 <scalbn+0xae>
 800b624:	f3af 8000 	nop.w
 800b628:	c2f8f359 	.word	0xc2f8f359
 800b62c:	01a56e1f 	.word	0x01a56e1f
 800b630:	8800759c 	.word	0x8800759c
 800b634:	7e37e43c 	.word	0x7e37e43c
 800b638:	8800759c 	.word	0x8800759c
 800b63c:	fe37e43c 	.word	0xfe37e43c
 800b640:	c2f8f359 	.word	0xc2f8f359
 800b644:	81a56e1f 	.word	0x81a56e1f
 800b648:	43500000 	.word	0x43500000
 800b64c:	ffff3cb0 	.word	0xffff3cb0
 800b650:	3c900000 	.word	0x3c900000

0800b654 <_init>:
 800b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b656:	bf00      	nop
 800b658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b65a:	bc08      	pop	{r3}
 800b65c:	469e      	mov	lr, r3
 800b65e:	4770      	bx	lr

0800b660 <_fini>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	bf00      	nop
 800b664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b666:	bc08      	pop	{r3}
 800b668:	469e      	mov	lr, r3
 800b66a:	4770      	bx	lr
