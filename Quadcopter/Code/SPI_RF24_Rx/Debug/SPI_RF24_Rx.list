
SPI_RF24_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004844  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  080049d4  080049d4  000149d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005064  08005064  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800506c  0800506c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800506c  0800506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005070  08005070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005074  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000001b8  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae66  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018b6  00000000  00000000  0002af0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000948  00000000  00000000  0002d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c92  00000000  00000000  0002daf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae35  00000000  00000000  0004e782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c52b7  00000000  00000000  000595b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e86e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c08  00000000  00000000  0011e8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049bc 	.word	0x080049bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080049bc 	.word	0x080049bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	b0ad      	sub	sp, #180	; 0xb4
 8000588:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800058a:	f000 fbe5 	bl	8000d58 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800058e:	f000 f97b 	bl	8000888 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000592:	f000 fa37 	bl	8000a04 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000596:	f000 f9d5 	bl	8000944 <MX_SPI1_Init>
	MX_USART6_UART_Init();
 800059a:	f000 fa09 	bl	80009b0 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	char a[80] = "----------------Tx---------------------\r\n";
 800059e:	4baa      	ldr	r3, [pc, #680]	; (8000848 <main+0x2c4>)
 80005a0:	1d3c      	adds	r4, r7, #4
 80005a2:	461d      	mov	r5, r3
 80005a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b0:	c403      	stmia	r4!, {r0, r1}
 80005b2:	8022      	strh	r2, [r4, #0]
 80005b4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80005b8:	2226      	movs	r2, #38	; 0x26
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fd95 	bl	80040ec <memset>
	HAL_UART_Transmit(&huart6, (uint8_t*) a, strlen(a), 10);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fe03 	bl	80001d0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	1d39      	adds	r1, r7, #4
 80005d0:	230a      	movs	r3, #10
 80005d2:	489e      	ldr	r0, [pc, #632]	; (800084c <main+0x2c8>)
 80005d4:	f002 f93f 	bl	8002856 <HAL_UART_Transmit>

	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi1);
 80005d8:	4c9d      	ldr	r4, [pc, #628]	; (8000850 <main+0x2cc>)
 80005da:	4668      	mov	r0, sp
 80005dc:	1d23      	adds	r3, r4, #4
 80005de:	2254      	movs	r2, #84	; 0x54
 80005e0:	4619      	mov	r1, r3
 80005e2:	f003 fd75 	bl	80040d0 <memcpy>
 80005e6:	6823      	ldr	r3, [r4, #0]
 80005e8:	2202      	movs	r2, #2
 80005ea:	2101      	movs	r1, #1
 80005ec:	4899      	ldr	r0, [pc, #612]	; (8000854 <main+0x2d0>)
 80005ee:	f002 fdeb 	bl	80031c8 <NRF24_begin>
	nrf24_DebugUART_Init(huart6);
 80005f2:	4e96      	ldr	r6, [pc, #600]	; (800084c <main+0x2c8>)
 80005f4:	466d      	mov	r5, sp
 80005f6:	f106 0410 	add.w	r4, r6, #16
 80005fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000606:	6823      	ldr	r3, [r4, #0]
 8000608:	602b      	str	r3, [r5, #0]
 800060a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800060e:	f003 fd1d 	bl	800404c <nrf24_DebugUART_Init>

	uint8_t reg8Val;
	reg8Val = NRF24_read_register(0x00);
 8000612:	2000      	movs	r0, #0
 8000614:	f002 fcf6 	bl	8003004 <NRF24_read_register>
 8000618:	4603      	mov	r3, r0
 800061a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	sprintf(a, "REG0:		%02X\r\n", reg8Val);
 800061e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	498c      	ldr	r1, [pc, #560]	; (8000858 <main+0x2d4>)
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fd68 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) a, strlen(a), 10);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fdce 	bl	80001d0 <strlen>
 8000634:	4603      	mov	r3, r0
 8000636:	b29a      	uxth	r2, r3
 8000638:	1d39      	adds	r1, r7, #4
 800063a:	230a      	movs	r3, #10
 800063c:	4883      	ldr	r0, [pc, #524]	; (800084c <main+0x2c8>)
 800063e:	f002 f90a 	bl	8002856 <HAL_UART_Transmit>
	reg8Val = NRF24_read_register(0x01);
 8000642:	2001      	movs	r0, #1
 8000644:	f002 fcde 	bl	8003004 <NRF24_read_register>
 8000648:	4603      	mov	r3, r0
 800064a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	sprintf(a, "REG1:		%02X\r\n", reg8Val);
 800064e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4981      	ldr	r1, [pc, #516]	; (800085c <main+0x2d8>)
 8000656:	4618      	mov	r0, r3
 8000658:	f003 fd50 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) a, strlen(a), 10);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fdb6 	bl	80001d0 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	1d39      	adds	r1, r7, #4
 800066a:	230a      	movs	r3, #10
 800066c:	4877      	ldr	r0, [pc, #476]	; (800084c <main+0x2c8>)
 800066e:	f002 f8f2 	bl	8002856 <HAL_UART_Transmit>
	reg8Val = NRF24_read_register(0x02);
 8000672:	2002      	movs	r0, #2
 8000674:	f002 fcc6 	bl	8003004 <NRF24_read_register>
 8000678:	4603      	mov	r3, r0
 800067a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	sprintf(a, "REG2:		%02X\r\n", reg8Val);
 800067e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4976      	ldr	r1, [pc, #472]	; (8000860 <main+0x2dc>)
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fd38 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) a, strlen(a), 10);
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fd9e 	bl	80001d0 <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	1d39      	adds	r1, r7, #4
 800069a:	230a      	movs	r3, #10
 800069c:	486b      	ldr	r0, [pc, #428]	; (800084c <main+0x2c8>)
 800069e:	f002 f8da 	bl	8002856 <HAL_UART_Transmit>
	reg8Val = NRF24_read_register(0x03);
 80006a2:	2003      	movs	r0, #3
 80006a4:	f002 fcae 	bl	8003004 <NRF24_read_register>
 80006a8:	4603      	mov	r3, r0
 80006aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	sprintf(a, "REG3:		%02X\r\n", reg8Val);
 80006ae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	496b      	ldr	r1, [pc, #428]	; (8000864 <main+0x2e0>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 fd20 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) a, strlen(a), 10);
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd86 	bl	80001d0 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	1d39      	adds	r1, r7, #4
 80006ca:	230a      	movs	r3, #10
 80006cc:	485f      	ldr	r0, [pc, #380]	; (800084c <main+0x2c8>)
 80006ce:	f002 f8c2 	bl	8002856 <HAL_UART_Transmit>
	reg8Val = NRF24_read_register(0x04);
 80006d2:	2004      	movs	r0, #4
 80006d4:	f002 fc96 	bl	8003004 <NRF24_read_register>
 80006d8:	4603      	mov	r3, r0
 80006da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	sprintf(a, "REG4:		%02X\r\n", reg8Val);
 80006de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4960      	ldr	r1, [pc, #384]	; (8000868 <main+0x2e4>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fd08 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) a, strlen(a), 10);
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd6e 	bl	80001d0 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	1d39      	adds	r1, r7, #4
 80006fa:	230a      	movs	r3, #10
 80006fc:	4853      	ldr	r0, [pc, #332]	; (800084c <main+0x2c8>)
 80006fe:	f002 f8aa 	bl	8002856 <HAL_UART_Transmit>
	reg8Val = NRF24_read_register(0x05);
 8000702:	2005      	movs	r0, #5
 8000704:	f002 fc7e 	bl	8003004 <NRF24_read_register>
 8000708:	4603      	mov	r3, r0
 800070a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	sprintf(a, "REG5:		%02X\r\n", reg8Val);
 800070e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4955      	ldr	r1, [pc, #340]	; (800086c <main+0x2e8>)
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fcf0 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) a, strlen(a), 10);
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fd56 	bl	80001d0 <strlen>
 8000724:	4603      	mov	r3, r0
 8000726:	b29a      	uxth	r2, r3
 8000728:	1d39      	adds	r1, r7, #4
 800072a:	230a      	movs	r3, #10
 800072c:	4847      	ldr	r0, [pc, #284]	; (800084c <main+0x2c8>)
 800072e:	f002 f892 	bl	8002856 <HAL_UART_Transmit>
	reg8Val = NRF24_read_register(0x06);
 8000732:	2006      	movs	r0, #6
 8000734:	f002 fc66 	bl	8003004 <NRF24_read_register>
 8000738:	4603      	mov	r3, r0
 800073a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	sprintf(a, "REG6:		%02X\r\n", reg8Val);
 800073e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	494a      	ldr	r1, [pc, #296]	; (8000870 <main+0x2ec>)
 8000746:	4618      	mov	r0, r3
 8000748:	f003 fcd8 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) a, strlen(a), 10);
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fd3e 	bl	80001d0 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	1d39      	adds	r1, r7, #4
 800075a:	230a      	movs	r3, #10
 800075c:	483b      	ldr	r0, [pc, #236]	; (800084c <main+0x2c8>)
 800075e:	f002 f87a 	bl	8002856 <HAL_UART_Transmit>
	reg8Val = NRF24_read_register(0x07);
 8000762:	2007      	movs	r0, #7
 8000764:	f002 fc4e 	bl	8003004 <NRF24_read_register>
 8000768:	4603      	mov	r3, r0
 800076a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	sprintf(a, "REG7:		%02X\r\n", reg8Val);
 800076e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	493f      	ldr	r1, [pc, #252]	; (8000874 <main+0x2f0>)
 8000776:	4618      	mov	r0, r3
 8000778:	f003 fcc0 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) a, strlen(a), 10);
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fd26 	bl	80001d0 <strlen>
 8000784:	4603      	mov	r3, r0
 8000786:	b29a      	uxth	r2, r3
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	230a      	movs	r3, #10
 800078c:	482f      	ldr	r0, [pc, #188]	; (800084c <main+0x2c8>)
 800078e:	f002 f862 	bl	8002856 <HAL_UART_Transmit>
	reg8Val = NRF24_read_register(0x08);
 8000792:	2008      	movs	r0, #8
 8000794:	f002 fc36 	bl	8003004 <NRF24_read_register>
 8000798:	4603      	mov	r3, r0
 800079a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	sprintf(a, "REG8:		%02X\r\n", reg8Val);
 800079e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4934      	ldr	r1, [pc, #208]	; (8000878 <main+0x2f4>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fca8 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) a, strlen(a), 10);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fd0e 	bl	80001d0 <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	1d39      	adds	r1, r7, #4
 80007ba:	230a      	movs	r3, #10
 80007bc:	4823      	ldr	r0, [pc, #140]	; (800084c <main+0x2c8>)
 80007be:	f002 f84a 	bl	8002856 <HAL_UART_Transmit>
	reg8Val = NRF24_read_register(0x09);
 80007c2:	2009      	movs	r0, #9
 80007c4:	f002 fc1e 	bl	8003004 <NRF24_read_register>
 80007c8:	4603      	mov	r3, r0
 80007ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	sprintf(a, "REG9:		%02X\r\n", reg8Val);
 80007ce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4929      	ldr	r1, [pc, #164]	; (800087c <main+0x2f8>)
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 fc90 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*) a, strlen(a), 10);
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fcf6 	bl	80001d0 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	1d39      	adds	r1, r7, #4
 80007ea:	230a      	movs	r3, #10
 80007ec:	4817      	ldr	r0, [pc, #92]	; (800084c <main+0x2c8>)
 80007ee:	f002 f832 	bl	8002856 <HAL_UART_Transmit>
	printRadioSettings();
 80007f2:	f003 f803 	bl	80037fc <printRadioSettings>

	NRF24_stopListening();
 80007f6:	f002 fded 	bl	80033d4 <NRF24_stopListening>

	NRF24_openReadingPipe(1, RxpipeAddrs);
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <main+0x2fc>)
 80007fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000800:	2001      	movs	r0, #1
 8000802:	f002 fe1b 	bl	800343c <NRF24_openReadingPipe>

	NRF24_setAutoAck(false);
 8000806:	2000      	movs	r0, #0
 8000808:	f002 feda 	bl	80035c0 <NRF24_setAutoAck>

	NRF24_startListening();
 800080c:	f002 fdbc 	bl	8003388 <NRF24_startListening>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if(NRF24_available())
 8000810:	f002 fdeb 	bl	80033ea <NRF24_available>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d011      	beq.n	800083e <main+0x2ba>
		{
			NRF24_read(myRxData, 32);
 800081a:	2120      	movs	r1, #32
 800081c:	4819      	ldr	r0, [pc, #100]	; (8000884 <main+0x300>)
 800081e:	f002 fdec 	bl	80033fa <NRF24_read>

			myRxData[32] = '\r'; myRxData[32+1] = '\n';
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <main+0x300>)
 8000824:	220d      	movs	r2, #13
 8000826:	f883 2020 	strb.w	r2, [r3, #32]
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <main+0x300>)
 800082c:	220a      	movs	r2, #10
 800082e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			HAL_UART_Transmit(&huart6, (uint8_t *)myRxData, 32+2, 10);
 8000832:	230a      	movs	r3, #10
 8000834:	2222      	movs	r2, #34	; 0x22
 8000836:	4913      	ldr	r1, [pc, #76]	; (8000884 <main+0x300>)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <main+0x2c8>)
 800083a:	f002 f80c 	bl	8002856 <HAL_UART_Transmit>
		}
		HAL_Delay(1000);
 800083e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000842:	f000 fafb 	bl	8000e3c <HAL_Delay>
		if(NRF24_available())
 8000846:	e7e3      	b.n	8000810 <main+0x28c>
 8000848:	08004a74 	.word	0x08004a74
 800084c:	200000ec 	.word	0x200000ec
 8000850:	20000094 	.word	0x20000094
 8000854:	40020400 	.word	0x40020400
 8000858:	080049d4 	.word	0x080049d4
 800085c:	080049e4 	.word	0x080049e4
 8000860:	080049f4 	.word	0x080049f4
 8000864:	08004a04 	.word	0x08004a04
 8000868:	08004a14 	.word	0x08004a14
 800086c:	08004a24 	.word	0x08004a24
 8000870:	08004a34 	.word	0x08004a34
 8000874:	08004a44 	.word	0x08004a44
 8000878:	08004a54 	.word	0x08004a54
 800087c:	08004a64 	.word	0x08004a64
 8000880:	20000000 	.word	0x20000000
 8000884:	20000130 	.word	0x20000130

08000888 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	; 0x50
 800088c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2230      	movs	r2, #48	; 0x30
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f003 fc28 	bl	80040ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <SystemClock_Config+0xb4>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	4a21      	ldr	r2, [pc, #132]	; (800093c <SystemClock_Config+0xb4>)
 80008b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ba:	6413      	str	r3, [r2, #64]	; 0x40
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <SystemClock_Config+0xb4>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <SystemClock_Config+0xb8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <SystemClock_Config+0xb8>)
 80008d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <SystemClock_Config+0xb8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ec:	2310      	movs	r3, #16
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fd5f 	bl	80013bc <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x80>
		Error_Handler();
 8000904:	f000 f8ce 	bl	8000aa4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000908:	230f      	movs	r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f000 ffc2 	bl	80018ac <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xaa>
		Error_Handler();
 800092e:	f000 f8b9 	bl	8000aa4 <Error_Handler>
	}
}
 8000932:	bf00      	nop
 8000934:	3750      	adds	r7, #80	; 0x50
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_SPI1_Init+0x64>)
 800094a:	4a18      	ldr	r2, [pc, #96]	; (80009ac <MX_SPI1_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000954:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000974:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000990:	220a      	movs	r2, #10
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_SPI1_Init+0x64>)
 8000996:	f001 f969 	bl	8001c6c <HAL_SPI_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80009a0:	f000 f880 	bl	8000aa4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000094 	.word	0x20000094
 80009ac:	40013000 	.word	0x40013000

080009b0 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART6_UART_Init+0x4c>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <MX_USART6_UART_Init+0x50>)
 80009b8:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_USART6_UART_Init+0x4c>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART6_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART6_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART6_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART6_UART_Init+0x4c>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART6_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART6_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART6_UART_Init+0x4c>)
 80009e8:	f001 fee8 	bl	80027bc <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 80009f2:	f000 f857 	bl	8000aa4 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000ec 	.word	0x200000ec
 8000a00:	40011400 	.word	0x40011400

08000a04 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_GPIO_Init+0x98>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a1e      	ldr	r2, [pc, #120]	; (8000a9c <MX_GPIO_Init+0x98>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_GPIO_Init+0x98>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_GPIO_Init+0x98>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <MX_GPIO_Init+0x98>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_GPIO_Init+0x98>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_GPIO_Init+0x98>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <MX_GPIO_Init+0x98>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_GPIO_Init+0x98>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2103      	movs	r1, #3
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <MX_GPIO_Init+0x9c>)
 8000a74:	f000 fc88 	bl	8001388 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB0 PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_GPIO_Init+0x9c>)
 8000a90:	f000 fade 	bl	8001050 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_SPI_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12b      	bne.n	8000b7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b5a:	23e0      	movs	r3, #224	; 0xe0
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_SPI_MspInit+0x8c>)
 8000b76:	f000 fa6b 	bl	8001050 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40013000 	.word	0x40013000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_UART_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bbc:	f043 0320 	orr.w	r3, r3, #32
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f003 0320 	and.w	r3, r3, #32
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_UART_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bea:	23c0      	movs	r3, #192	; 0xc0
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000bfa:	2308      	movs	r3, #8
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_UART_MspInit+0x8c>)
 8000c06:	f000 fa23 	bl	8001050 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40011400 	.word	0x40011400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020800 	.word	0x40020800

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f8c6 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f003 f9ea 	bl	800407c <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20020000 	.word	0x20020000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	20000164 	.word	0x20000164
 8000cdc:	20000230 	.word	0x20000230

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d20:	4c0b      	ldr	r4, [pc, #44]	; (8000d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d2e:	f7ff ffd7 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f003 f9a9 	bl	8004088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fc25 	bl	8000584 <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d48:	08005074 	.word	0x08005074
  ldr r2, =_sbss
 8000d4c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d50:	20000230 	.word	0x20000230

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <HAL_Init+0x40>)
 8000d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_Init+0x40>)
 8000d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_Init+0x40>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f931 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	200f      	movs	r0, #15
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fe90 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f93b 	bl	8001036 <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f911 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20000010 	.word	0x20000010
 8000df8:	2000000c 	.word	0x2000000c

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000010 	.word	0x20000010
 8000e20:	20000168 	.word	0x20000168

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000168 	.word	0x20000168

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000010 	.word	0x20000010

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff47 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff5c 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ffb0 	bl	8000fa4 <SysTick_Config>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	e16b      	b.n	8001344 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 815a 	bne.w	800133e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d005      	beq.n	80010a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b03      	cmp	r3, #3
 800110e:	d017      	beq.n	8001140 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d123      	bne.n	8001194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0203 	and.w	r2, r3, #3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80b4 	beq.w	800133e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b60      	ldr	r3, [pc, #384]	; (800135c <HAL_GPIO_Init+0x30c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a5f      	ldr	r2, [pc, #380]	; (800135c <HAL_GPIO_Init+0x30c>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b5d      	ldr	r3, [pc, #372]	; (800135c <HAL_GPIO_Init+0x30c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f2:	4a5b      	ldr	r2, [pc, #364]	; (8001360 <HAL_GPIO_Init+0x310>)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a52      	ldr	r2, [pc, #328]	; (8001364 <HAL_GPIO_Init+0x314>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d02b      	beq.n	8001276 <HAL_GPIO_Init+0x226>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a51      	ldr	r2, [pc, #324]	; (8001368 <HAL_GPIO_Init+0x318>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d025      	beq.n	8001272 <HAL_GPIO_Init+0x222>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a50      	ldr	r2, [pc, #320]	; (800136c <HAL_GPIO_Init+0x31c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d01f      	beq.n	800126e <HAL_GPIO_Init+0x21e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4f      	ldr	r2, [pc, #316]	; (8001370 <HAL_GPIO_Init+0x320>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d019      	beq.n	800126a <HAL_GPIO_Init+0x21a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4e      	ldr	r2, [pc, #312]	; (8001374 <HAL_GPIO_Init+0x324>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x216>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4d      	ldr	r2, [pc, #308]	; (8001378 <HAL_GPIO_Init+0x328>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x212>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4c      	ldr	r2, [pc, #304]	; (800137c <HAL_GPIO_Init+0x32c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x20e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4b      	ldr	r2, [pc, #300]	; (8001380 <HAL_GPIO_Init+0x330>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x20a>
 8001256:	2307      	movs	r3, #7
 8001258:	e00e      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800125a:	2308      	movs	r3, #8
 800125c:	e00c      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800125e:	2306      	movs	r3, #6
 8001260:	e00a      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001262:	2305      	movs	r3, #5
 8001264:	e008      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001266:	2304      	movs	r3, #4
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800126a:	2303      	movs	r3, #3
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001276:	2300      	movs	r3, #0
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	f002 0203 	and.w	r2, r2, #3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001288:	4935      	ldr	r1, [pc, #212]	; (8001360 <HAL_GPIO_Init+0x310>)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_GPIO_Init+0x334>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ba:	4a32      	ldr	r2, [pc, #200]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e4:	4a27      	ldr	r2, [pc, #156]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800130e:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <HAL_GPIO_Init+0x334>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_GPIO_Init+0x334>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <HAL_GPIO_Init+0x334>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3301      	adds	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	f67f ae90 	bls.w	800106c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40013800 	.word	0x40013800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400
 800136c:	40020800 	.word	0x40020800
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40021000 	.word	0x40021000
 8001378:	40021400 	.word	0x40021400
 800137c:	40021800 	.word	0x40021800
 8001380:	40021c00 	.word	0x40021c00
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a4:	e003      	b.n	80013ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	041a      	lsls	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e267      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d075      	beq.n	80014c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013da:	4b88      	ldr	r3, [pc, #544]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d00c      	beq.n	8001400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e6:	4b85      	ldr	r3, [pc, #532]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d112      	bne.n	8001418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f2:	4b82      	ldr	r3, [pc, #520]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013fe:	d10b      	bne.n	8001418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	4b7e      	ldr	r3, [pc, #504]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d05b      	beq.n	80014c4 <HAL_RCC_OscConfig+0x108>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d157      	bne.n	80014c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e242      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x74>
 8001422:	4b76      	ldr	r3, [pc, #472]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a75      	ldr	r2, [pc, #468]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e01d      	b.n	800146c <HAL_RCC_OscConfig+0xb0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0x98>
 800143a:	4b70      	ldr	r3, [pc, #448]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a6f      	ldr	r2, [pc, #444]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b6d      	ldr	r3, [pc, #436]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a6c      	ldr	r2, [pc, #432]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0xb0>
 8001454:	4b69      	ldr	r3, [pc, #420]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a68      	ldr	r2, [pc, #416]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b66      	ldr	r3, [pc, #408]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a65      	ldr	r2, [pc, #404]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fcd6 	bl	8000e24 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fcd2 	bl	8000e24 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e207      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	4b5b      	ldr	r3, [pc, #364]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0xc0>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fcc2 	bl	8000e24 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fcbe 	bl	8000e24 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e1f3      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	4b51      	ldr	r3, [pc, #324]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0xe8>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d063      	beq.n	800159a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d2:	4b4a      	ldr	r3, [pc, #296]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014de:	4b47      	ldr	r3, [pc, #284]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d11c      	bne.n	8001524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ea:	4b44      	ldr	r3, [pc, #272]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d116      	bne.n	8001524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	4b41      	ldr	r3, [pc, #260]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x152>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e1c7      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4937      	ldr	r1, [pc, #220]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	e03a      	b.n	800159a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d020      	beq.n	800156e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_RCC_OscConfig+0x244>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff fc77 	bl	8000e24 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fc73 	bl	8000e24 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e1a8      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4925      	ldr	r1, [pc, #148]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156e:	4b24      	ldr	r3, [pc, #144]	; (8001600 <HAL_RCC_OscConfig+0x244>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fc56 	bl	8000e24 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff fc52 	bl	8000e24 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e187      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d036      	beq.n	8001614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d016      	beq.n	80015dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_RCC_OscConfig+0x248>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fc36 	bl	8000e24 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff fc32 	bl	8000e24 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e167      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_RCC_OscConfig+0x240>)
 80015d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x200>
 80015da:	e01b      	b.n	8001614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_RCC_OscConfig+0x248>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fc1f 	bl	8000e24 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	e00e      	b.n	8001608 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ea:	f7ff fc1b 	bl	8000e24 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d907      	bls.n	8001608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e150      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
 80015fc:	40023800 	.word	0x40023800
 8001600:	42470000 	.word	0x42470000
 8001604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001608:	4b88      	ldr	r3, [pc, #544]	; (800182c <HAL_RCC_OscConfig+0x470>)
 800160a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1ea      	bne.n	80015ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 8097 	beq.w	8001750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001626:	4b81      	ldr	r3, [pc, #516]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10f      	bne.n	8001652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b7d      	ldr	r3, [pc, #500]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a7c      	ldr	r2, [pc, #496]	; (800182c <HAL_RCC_OscConfig+0x470>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b7a      	ldr	r3, [pc, #488]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164e:	2301      	movs	r3, #1
 8001650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001652:	4b77      	ldr	r3, [pc, #476]	; (8001830 <HAL_RCC_OscConfig+0x474>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d118      	bne.n	8001690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800165e:	4b74      	ldr	r3, [pc, #464]	; (8001830 <HAL_RCC_OscConfig+0x474>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a73      	ldr	r2, [pc, #460]	; (8001830 <HAL_RCC_OscConfig+0x474>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166a:	f7ff fbdb 	bl	8000e24 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001672:	f7ff fbd7 	bl	8000e24 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e10c      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	4b6a      	ldr	r3, [pc, #424]	; (8001830 <HAL_RCC_OscConfig+0x474>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d106      	bne.n	80016a6 <HAL_RCC_OscConfig+0x2ea>
 8001698:	4b64      	ldr	r3, [pc, #400]	; (800182c <HAL_RCC_OscConfig+0x470>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169c:	4a63      	ldr	r2, [pc, #396]	; (800182c <HAL_RCC_OscConfig+0x470>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6713      	str	r3, [r2, #112]	; 0x70
 80016a4:	e01c      	b.n	80016e0 <HAL_RCC_OscConfig+0x324>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x30c>
 80016ae:	4b5f      	ldr	r3, [pc, #380]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	4a5e      	ldr	r2, [pc, #376]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ba:	4b5c      	ldr	r3, [pc, #368]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016be:	4a5b      	ldr	r2, [pc, #364]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6713      	str	r3, [r2, #112]	; 0x70
 80016c6:	e00b      	b.n	80016e0 <HAL_RCC_OscConfig+0x324>
 80016c8:	4b58      	ldr	r3, [pc, #352]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	4a57      	ldr	r2, [pc, #348]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
 80016d4:	4b55      	ldr	r3, [pc, #340]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d8:	4a54      	ldr	r2, [pc, #336]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80016da:	f023 0304 	bic.w	r3, r3, #4
 80016de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d015      	beq.n	8001714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e8:	f7ff fb9c 	bl	8000e24 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f0:	f7ff fb98 	bl	8000e24 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e0cb      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001706:	4b49      	ldr	r3, [pc, #292]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0ee      	beq.n	80016f0 <HAL_RCC_OscConfig+0x334>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001714:	f7ff fb86 	bl	8000e24 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171a:	e00a      	b.n	8001732 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171c:	f7ff fb82 	bl	8000e24 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	; 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0b5      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001732:	4b3e      	ldr	r3, [pc, #248]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ee      	bne.n	800171c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800173e:	7dfb      	ldrb	r3, [r7, #23]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d105      	bne.n	8001750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001744:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	4a38      	ldr	r2, [pc, #224]	; (800182c <HAL_RCC_OscConfig+0x470>)
 800174a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800174e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a1 	beq.w	800189c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800175a:	4b34      	ldr	r3, [pc, #208]	; (800182c <HAL_RCC_OscConfig+0x470>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b08      	cmp	r3, #8
 8001764:	d05c      	beq.n	8001820 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d141      	bne.n	80017f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <HAL_RCC_OscConfig+0x478>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fb56 	bl	8000e24 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fb52 	bl	8000e24 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e087      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69da      	ldr	r2, [r3, #28]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	019b      	lsls	r3, r3, #6
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	3b01      	subs	r3, #1
 80017b4:	041b      	lsls	r3, r3, #16
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	491b      	ldr	r1, [pc, #108]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_RCC_OscConfig+0x478>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fb2b 	bl	8000e24 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d2:	f7ff fb27 	bl	8000e24 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e05c      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_RCC_OscConfig+0x470>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x416>
 80017f0:	e054      	b.n	800189c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_RCC_OscConfig+0x478>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fb14 	bl	8000e24 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff fb10 	bl	8000e24 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e045      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_RCC_OscConfig+0x470>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x444>
 800181e:	e03d      	b.n	800189c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d107      	bne.n	8001838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e038      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
 800182c:	40023800 	.word	0x40023800
 8001830:	40007000 	.word	0x40007000
 8001834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x4ec>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d028      	beq.n	8001898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d121      	bne.n	8001898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d11a      	bne.n	8001898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001868:	4013      	ands	r3, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800186e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001870:	4293      	cmp	r3, r2
 8001872:	d111      	bne.n	8001898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	085b      	lsrs	r3, r3, #1
 8001880:	3b01      	subs	r3, #1
 8001882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800

080018ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0cc      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d90c      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0b8      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d020      	beq.n	8001936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001900:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800190a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	494d      	ldr	r1, [pc, #308]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d044      	beq.n	80019cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d119      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e07f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d003      	beq.n	800196a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001966:	2b03      	cmp	r3, #3
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196a:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e06f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e067      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 0203 	bic.w	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4934      	ldr	r1, [pc, #208]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800199c:	f7ff fa42 	bl	8000e24 <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7ff fa3e 	bl	8000e24 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e04f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 020c 	and.w	r2, r3, #12
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d1eb      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d20c      	bcs.n	80019f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e032      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4916      	ldr	r1, [pc, #88]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	490e      	ldr	r1, [pc, #56]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a32:	f000 f821 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001a36:	4602      	mov	r2, r0
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	490a      	ldr	r1, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	5ccb      	ldrb	r3, [r1, r3]
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f9a2 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	08005008 	.word	0x08005008
 8001a70:	20000008 	.word	0x20000008
 8001a74:	2000000c 	.word	0x2000000c

08001a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a7c:	b090      	sub	sp, #64	; 0x40
 8001a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
 8001a84:	2300      	movs	r3, #0
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a88:	2300      	movs	r3, #0
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	f200 80a1 	bhi.w	8001be4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x34>
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d003      	beq.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aaa:	e09b      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ab0:	e09b      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ab2:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ab6:	e098      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab8:	4b4f      	ldr	r3, [pc, #316]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ac2:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d028      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ace:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	099b      	lsrs	r3, r3, #6
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	623b      	str	r3, [r7, #32]
 8001ad8:	627a      	str	r2, [r7, #36]	; 0x24
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ae4:	fb03 f201 	mul.w	r2, r3, r1
 8001ae8:	2300      	movs	r3, #0
 8001aea:	fb00 f303 	mul.w	r3, r0, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	4a43      	ldr	r2, [pc, #268]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8001af2:	fba0 1202 	umull	r1, r2, r0, r2
 8001af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001af8:	460a      	mov	r2, r1
 8001afa:	62ba      	str	r2, [r7, #40]	; 0x28
 8001afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001afe:	4413      	add	r3, r2
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b04:	2200      	movs	r2, #0
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	61fa      	str	r2, [r7, #28]
 8001b0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b12:	f7fe fbb5 	bl	8000280 <__aeabi_uldivmod>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b1e:	e053      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	099b      	lsrs	r3, r3, #6
 8001b26:	2200      	movs	r2, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	617a      	str	r2, [r7, #20]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b32:	f04f 0b00 	mov.w	fp, #0
 8001b36:	4652      	mov	r2, sl
 8001b38:	465b      	mov	r3, fp
 8001b3a:	f04f 0000 	mov.w	r0, #0
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	0159      	lsls	r1, r3, #5
 8001b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b48:	0150      	lsls	r0, r2, #5
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	ebb2 080a 	subs.w	r8, r2, sl
 8001b52:	eb63 090b 	sbc.w	r9, r3, fp
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b6a:	ebb2 0408 	subs.w	r4, r2, r8
 8001b6e:	eb63 0509 	sbc.w	r5, r3, r9
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	00eb      	lsls	r3, r5, #3
 8001b7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b80:	00e2      	lsls	r2, r4, #3
 8001b82:	4614      	mov	r4, r2
 8001b84:	461d      	mov	r5, r3
 8001b86:	eb14 030a 	adds.w	r3, r4, sl
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	eb45 030b 	adc.w	r3, r5, fp
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	028b      	lsls	r3, r1, #10
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba8:	4621      	mov	r1, r4
 8001baa:	028a      	lsls	r2, r1, #10
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	60fa      	str	r2, [r7, #12]
 8001bb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bbc:	f7fe fb60 	bl	8000280 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001be2:	e002      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8001be6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3740      	adds	r7, #64	; 0x40
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	017d7840 	.word	0x017d7840

08001c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000008 	.word	0x20000008

08001c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c20:	f7ff fff0 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0a9b      	lsrs	r3, r3, #10
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4903      	ldr	r1, [pc, #12]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	08005018 	.word	0x08005018

08001c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c48:	f7ff ffdc 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0b5b      	lsrs	r3, r3, #13
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08005018 	.word	0x08005018

08001c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e07b      	b.n	8001d76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d108      	bne.n	8001c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c8e:	d009      	beq.n	8001ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
 8001c96:	e005      	b.n	8001ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe ff1e 	bl	8000b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d28:	ea42 0103 	orr.w	r1, r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	f003 0104 	and.w	r1, r3, #4
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f003 0210 	and.w	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b088      	sub	sp, #32
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_SPI_Transmit+0x22>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e126      	b.n	8001fee <HAL_SPI_Transmit+0x270>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001da8:	f7ff f83c 	bl	8000e24 <HAL_GetTick>
 8001dac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d002      	beq.n	8001dc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dc2:	e10b      	b.n	8001fdc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <HAL_SPI_Transmit+0x52>
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dd4:	e102      	b.n	8001fdc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	88fa      	ldrh	r2, [r7, #6]
 8001dee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	88fa      	ldrh	r2, [r7, #6]
 8001df4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e1c:	d10f      	bne.n	8001e3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e48:	2b40      	cmp	r3, #64	; 0x40
 8001e4a:	d007      	beq.n	8001e5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e64:	d14b      	bne.n	8001efe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_SPI_Transmit+0xf6>
 8001e6e:	8afb      	ldrh	r3, [r7, #22]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d13e      	bne.n	8001ef2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	881a      	ldrh	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	1c9a      	adds	r2, r3, #2
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e98:	e02b      	b.n	8001ef2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d112      	bne.n	8001ece <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	881a      	ldrh	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	1c9a      	adds	r2, r3, #2
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ecc:	e011      	b.n	8001ef2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ece:	f7fe ffa9 	bl	8000e24 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d803      	bhi.n	8001ee6 <HAL_SPI_Transmit+0x168>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d102      	bne.n	8001eec <HAL_SPI_Transmit+0x16e>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ef0:	e074      	b.n	8001fdc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1ce      	bne.n	8001e9a <HAL_SPI_Transmit+0x11c>
 8001efc:	e04c      	b.n	8001f98 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_SPI_Transmit+0x18e>
 8001f06:	8afb      	ldrh	r3, [r7, #22]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d140      	bne.n	8001f8e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	330c      	adds	r3, #12
 8001f16:	7812      	ldrb	r2, [r2, #0]
 8001f18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f32:	e02c      	b.n	8001f8e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d113      	bne.n	8001f6a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	330c      	adds	r3, #12
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f68:	e011      	b.n	8001f8e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f6a:	f7fe ff5b 	bl	8000e24 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d803      	bhi.n	8001f82 <HAL_SPI_Transmit+0x204>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d102      	bne.n	8001f88 <HAL_SPI_Transmit+0x20a>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f8c:	e026      	b.n	8001fdc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1cd      	bne.n	8001f34 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	6839      	ldr	r1, [r7, #0]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fbcb 	bl	8002738 <SPI_EndRxTxTransaction>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	77fb      	strb	r3, [r7, #31]
 8001fd8:	e000      	b.n	8001fdc <HAL_SPI_Transmit+0x25e>
  }

error:
 8001fda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3720      	adds	r7, #32
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b088      	sub	sp, #32
 8001ffa:	af02      	add	r7, sp, #8
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	603b      	str	r3, [r7, #0]
 8002002:	4613      	mov	r3, r2
 8002004:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002012:	d112      	bne.n	800203a <HAL_SPI_Receive+0x44>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10e      	bne.n	800203a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2204      	movs	r2, #4
 8002020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002024:	88fa      	ldrh	r2, [r7, #6]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f8f1 	bl	8002218 <HAL_SPI_TransmitReceive>
 8002036:	4603      	mov	r3, r0
 8002038:	e0ea      	b.n	8002210 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_SPI_Receive+0x52>
 8002044:	2302      	movs	r3, #2
 8002046:	e0e3      	b.n	8002210 <HAL_SPI_Receive+0x21a>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002050:	f7fe fee8 	bl	8000e24 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d002      	beq.n	8002068 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002066:	e0ca      	b.n	80021fe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_SPI_Receive+0x7e>
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002078:	e0c1      	b.n	80021fe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2204      	movs	r2, #4
 800207e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	88fa      	ldrh	r2, [r7, #6]
 8002092:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c0:	d10f      	bne.n	80020e2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ec:	2b40      	cmp	r3, #64	; 0x40
 80020ee:	d007      	beq.n	8002100 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d162      	bne.n	80021ce <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002108:	e02e      	b.n	8002168 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d115      	bne.n	8002144 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f103 020c 	add.w	r2, r3, #12
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002142:	e011      	b.n	8002168 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002144:	f7fe fe6e 	bl	8000e24 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d803      	bhi.n	800215c <HAL_SPI_Receive+0x166>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215a:	d102      	bne.n	8002162 <HAL_SPI_Receive+0x16c>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002166:	e04a      	b.n	80021fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1cb      	bne.n	800210a <HAL_SPI_Receive+0x114>
 8002172:	e031      	b.n	80021d8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d113      	bne.n	80021aa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	b292      	uxth	r2, r2
 800218e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	1c9a      	adds	r2, r3, #2
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021a8:	e011      	b.n	80021ce <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021aa:	f7fe fe3b 	bl	8000e24 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d803      	bhi.n	80021c2 <HAL_SPI_Receive+0x1cc>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c0:	d102      	bne.n	80021c8 <HAL_SPI_Receive+0x1d2>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021cc:	e017      	b.n	80021fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1cd      	bne.n	8002174 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fa45 	bl	800266c <SPI_EndRxTransaction>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]
 80021fa:	e000      	b.n	80021fe <HAL_SPI_Receive+0x208>
  }

error :
 80021fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800220e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	; 0x30
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002226:	2301      	movs	r3, #1
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_SPI_TransmitReceive+0x26>
 800223a:	2302      	movs	r3, #2
 800223c:	e18a      	b.n	8002554 <HAL_SPI_TransmitReceive+0x33c>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002246:	f7fe fded 	bl	8000e24 <HAL_GetTick>
 800224a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002264:	2b01      	cmp	r3, #1
 8002266:	d00f      	beq.n	8002288 <HAL_SPI_TransmitReceive+0x70>
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800226e:	d107      	bne.n	8002280 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d103      	bne.n	8002280 <HAL_SPI_TransmitReceive+0x68>
 8002278:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800227c:	2b04      	cmp	r3, #4
 800227e:	d003      	beq.n	8002288 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002280:	2302      	movs	r3, #2
 8002282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002286:	e15b      	b.n	8002540 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_SPI_TransmitReceive+0x82>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_SPI_TransmitReceive+0x82>
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022a0:	e14e      	b.n	8002540 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d003      	beq.n	80022b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2205      	movs	r2, #5
 80022b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	887a      	ldrh	r2, [r7, #2]
 80022c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	887a      	ldrh	r2, [r7, #2]
 80022d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	887a      	ldrh	r2, [r7, #2]
 80022de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b40      	cmp	r3, #64	; 0x40
 80022f8:	d007      	beq.n	800230a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002312:	d178      	bne.n	8002406 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_SPI_TransmitReceive+0x10a>
 800231c:	8b7b      	ldrh	r3, [r7, #26]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d166      	bne.n	80023f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	881a      	ldrh	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	1c9a      	adds	r2, r3, #2
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002346:	e053      	b.n	80023f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d11b      	bne.n	800238e <HAL_SPI_TransmitReceive+0x176>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d016      	beq.n	800238e <HAL_SPI_TransmitReceive+0x176>
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002362:	2b01      	cmp	r3, #1
 8002364:	d113      	bne.n	800238e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	881a      	ldrh	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	1c9a      	adds	r2, r3, #2
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d119      	bne.n	80023d0 <HAL_SPI_TransmitReceive+0x1b8>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d014      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	b292      	uxth	r2, r2
 80023b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	1c9a      	adds	r2, r3, #2
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023cc:	2301      	movs	r3, #1
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023d0:	f7fe fd28 	bl	8000e24 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023dc:	429a      	cmp	r2, r3
 80023de:	d807      	bhi.n	80023f0 <HAL_SPI_TransmitReceive+0x1d8>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e6:	d003      	beq.n	80023f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023ee:	e0a7      	b.n	8002540 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1a6      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x130>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1a1      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x130>
 8002404:	e07c      	b.n	8002500 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_SPI_TransmitReceive+0x1fc>
 800240e:	8b7b      	ldrh	r3, [r7, #26]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d16b      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	330c      	adds	r3, #12
 800241e:	7812      	ldrb	r2, [r2, #0]
 8002420:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800243a:	e057      	b.n	80024ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d11c      	bne.n	8002484 <HAL_SPI_TransmitReceive+0x26c>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d017      	beq.n	8002484 <HAL_SPI_TransmitReceive+0x26c>
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	2b01      	cmp	r3, #1
 8002458:	d114      	bne.n	8002484 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	330c      	adds	r3, #12
 8002464:	7812      	ldrb	r2, [r2, #0]
 8002466:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d119      	bne.n	80024c6 <HAL_SPI_TransmitReceive+0x2ae>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d014      	beq.n	80024c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024c2:	2301      	movs	r3, #1
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024c6:	f7fe fcad 	bl	8000e24 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d803      	bhi.n	80024de <HAL_SPI_TransmitReceive+0x2c6>
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d102      	bne.n	80024e4 <HAL_SPI_TransmitReceive+0x2cc>
 80024de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d103      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024ea:	e029      	b.n	8002540 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1a2      	bne.n	800243c <HAL_SPI_TransmitReceive+0x224>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d19d      	bne.n	800243c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f917 	bl	8002738 <SPI_EndRxTxTransaction>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800251c:	e010      	b.n	8002540 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10b      	bne.n	800253e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	e000      	b.n	8002540 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800253e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002550:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002554:	4618      	mov	r0, r3
 8002556:	3730      	adds	r7, #48	; 0x30
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800256c:	f7fe fc5a 	bl	8000e24 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	4413      	add	r3, r2
 800257a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800257c:	f7fe fc52 	bl	8000e24 <HAL_GetTick>
 8002580:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002582:	4b39      	ldr	r3, [pc, #228]	; (8002668 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	015b      	lsls	r3, r3, #5
 8002588:	0d1b      	lsrs	r3, r3, #20
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002592:	e054      	b.n	800263e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259a:	d050      	beq.n	800263e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800259c:	f7fe fc42 	bl	8000e24 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d902      	bls.n	80025b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d13d      	bne.n	800262e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ca:	d111      	bne.n	80025f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d4:	d004      	beq.n	80025e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025de:	d107      	bne.n	80025f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f8:	d10f      	bne.n	800261a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e017      	b.n	800265e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3b01      	subs	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4013      	ands	r3, r2
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	429a      	cmp	r2, r3
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	429a      	cmp	r2, r3
 800265a:	d19b      	bne.n	8002594 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3720      	adds	r7, #32
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000008 	.word	0x20000008

0800266c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002680:	d111      	bne.n	80026a6 <SPI_EndRxTransaction+0x3a>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800268a:	d004      	beq.n	8002696 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002694:	d107      	bne.n	80026a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ae:	d12a      	bne.n	8002706 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b8:	d012      	beq.n	80026e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	2180      	movs	r1, #128	; 0x80
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7ff ff49 	bl	800255c <SPI_WaitFlagStateUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d02d      	beq.n	800272c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e026      	b.n	800272e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2200      	movs	r2, #0
 80026e8:	2101      	movs	r1, #1
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7ff ff36 	bl	800255c <SPI_WaitFlagStateUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d01a      	beq.n	800272c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	f043 0220 	orr.w	r2, r3, #32
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e013      	b.n	800272e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2200      	movs	r2, #0
 800270e:	2101      	movs	r1, #1
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff ff23 	bl	800255c <SPI_WaitFlagStateUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e000      	b.n	800272e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <SPI_EndRxTxTransaction+0x7c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <SPI_EndRxTxTransaction+0x80>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0d5b      	lsrs	r3, r3, #21
 8002750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002754:	fb02 f303 	mul.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002762:	d112      	bne.n	800278a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff fef4 	bl	800255c <SPI_WaitFlagStateUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d016      	beq.n	80027a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e00f      	b.n	80027aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	3b01      	subs	r3, #1
 8002794:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a0:	2b80      	cmp	r3, #128	; 0x80
 80027a2:	d0f2      	beq.n	800278a <SPI_EndRxTxTransaction+0x52>
 80027a4:	e000      	b.n	80027a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80027a6:	bf00      	nop
  }

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000008 	.word	0x20000008
 80027b8:	165e9f81 	.word	0x165e9f81

080027bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e03f      	b.n	800284e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe f9d4 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2224      	movs	r2, #36	; 0x24
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f929 	bl	8002a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b08a      	sub	sp, #40	; 0x28
 800285a:	af02      	add	r7, sp, #8
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	d17c      	bne.n	8002970 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_UART_Transmit+0x2c>
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e075      	b.n	8002972 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_UART_Transmit+0x3e>
 8002890:	2302      	movs	r3, #2
 8002892:	e06e      	b.n	8002972 <HAL_UART_Transmit+0x11c>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2221      	movs	r2, #33	; 0x21
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028aa:	f7fe fabb 	bl	8000e24 <HAL_GetTick>
 80028ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	88fa      	ldrh	r2, [r7, #6]
 80028ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c4:	d108      	bne.n	80028d8 <HAL_UART_Transmit+0x82>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d104      	bne.n	80028d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	e003      	b.n	80028e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028e8:	e02a      	b.n	8002940 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2200      	movs	r2, #0
 80028f2:	2180      	movs	r1, #128	; 0x80
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f840 	bl	800297a <UART_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e036      	b.n	8002972 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10b      	bne.n	8002922 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002918:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	3302      	adds	r3, #2
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	e007      	b.n	8002932 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	3301      	adds	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1cf      	bne.n	80028ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	2140      	movs	r1, #64	; 0x40
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f810 	bl	800297a <UART_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e006      	b.n	8002972 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e000      	b.n	8002972 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002970:	2302      	movs	r3, #2
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	3720      	adds	r7, #32
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b090      	sub	sp, #64	; 0x40
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4613      	mov	r3, r2
 8002988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298a:	e050      	b.n	8002a2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d04c      	beq.n	8002a2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <UART_WaitOnFlagUntilTimeout+0x30>
 800299a:	f7fe fa43 	bl	8000e24 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d241      	bcs.n	8002a2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	330c      	adds	r3, #12
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	e853 3f00 	ldrex	r3, [r3]
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	330c      	adds	r3, #12
 80029c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029ca:	637a      	str	r2, [r7, #52]	; 0x34
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e5      	bne.n	80029aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3314      	adds	r3, #20
 80029e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	e853 3f00 	ldrex	r3, [r3]
 80029ec:	613b      	str	r3, [r7, #16]
   return(result);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3314      	adds	r3, #20
 80029fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029fe:	623a      	str	r2, [r7, #32]
 8002a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a02:	69f9      	ldr	r1, [r7, #28]
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	e841 2300 	strex	r3, r2, [r1]
 8002a0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1e5      	bne.n	80029de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e00f      	b.n	8002a4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4013      	ands	r3, r2
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	bf0c      	ite	eq
 8002a3e:	2301      	moveq	r3, #1
 8002a40:	2300      	movne	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d09f      	beq.n	800298c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3740      	adds	r7, #64	; 0x40
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a5c:	b0c0      	sub	sp, #256	; 0x100
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	68d9      	ldr	r1, [r3, #12]
 8002a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	ea40 0301 	orr.w	r3, r0, r1
 8002a80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ab0:	f021 010c 	bic.w	r1, r1, #12
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad2:	6999      	ldr	r1, [r3, #24]
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	ea40 0301 	orr.w	r3, r0, r1
 8002ade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b8f      	ldr	r3, [pc, #572]	; (8002d24 <UART_SetConfig+0x2cc>)
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d005      	beq.n	8002af8 <UART_SetConfig+0xa0>
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4b8d      	ldr	r3, [pc, #564]	; (8002d28 <UART_SetConfig+0x2d0>)
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d104      	bne.n	8002b02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002af8:	f7ff f8a4 	bl	8001c44 <HAL_RCC_GetPCLK2Freq>
 8002afc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b00:	e003      	b.n	8002b0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b02:	f7ff f88b 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8002b06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b14:	f040 810c 	bne.w	8002d30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	1891      	adds	r1, r2, r2
 8002b30:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b32:	415b      	adcs	r3, r3
 8002b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	eb12 0801 	adds.w	r8, r2, r1
 8002b40:	4629      	mov	r1, r5
 8002b42:	eb43 0901 	adc.w	r9, r3, r1
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b5a:	4690      	mov	r8, r2
 8002b5c:	4699      	mov	r9, r3
 8002b5e:	4623      	mov	r3, r4
 8002b60:	eb18 0303 	adds.w	r3, r8, r3
 8002b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b68:	462b      	mov	r3, r5
 8002b6a:	eb49 0303 	adc.w	r3, r9, r3
 8002b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b86:	460b      	mov	r3, r1
 8002b88:	18db      	adds	r3, r3, r3
 8002b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	eb42 0303 	adc.w	r3, r2, r3
 8002b92:	657b      	str	r3, [r7, #84]	; 0x54
 8002b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b9c:	f7fd fb70 	bl	8000280 <__aeabi_uldivmod>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4b61      	ldr	r3, [pc, #388]	; (8002d2c <UART_SetConfig+0x2d4>)
 8002ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	011c      	lsls	r4, r3, #4
 8002bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002bbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	1891      	adds	r1, r2, r2
 8002bc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002bc8:	415b      	adcs	r3, r3
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	eb12 0a01 	adds.w	sl, r2, r1
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	eb43 0b01 	adc.w	fp, r3, r1
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bf0:	4692      	mov	sl, r2
 8002bf2:	469b      	mov	fp, r3
 8002bf4:	4643      	mov	r3, r8
 8002bf6:	eb1a 0303 	adds.w	r3, sl, r3
 8002bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bfe:	464b      	mov	r3, r9
 8002c00:	eb4b 0303 	adc.w	r3, fp, r3
 8002c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	18db      	adds	r3, r3, r3
 8002c20:	643b      	str	r3, [r7, #64]	; 0x40
 8002c22:	4613      	mov	r3, r2
 8002c24:	eb42 0303 	adc.w	r3, r2, r3
 8002c28:	647b      	str	r3, [r7, #68]	; 0x44
 8002c2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c32:	f7fd fb25 	bl	8000280 <__aeabi_uldivmod>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <UART_SetConfig+0x2d4>)
 8002c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2264      	movs	r2, #100	; 0x64
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	1acb      	subs	r3, r1, r3
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <UART_SetConfig+0x2d4>)
 8002c54:	fba3 2302 	umull	r2, r3, r3, r2
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c60:	441c      	add	r4, r3
 8002c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c74:	4642      	mov	r2, r8
 8002c76:	464b      	mov	r3, r9
 8002c78:	1891      	adds	r1, r2, r2
 8002c7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c7c:	415b      	adcs	r3, r3
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c84:	4641      	mov	r1, r8
 8002c86:	1851      	adds	r1, r2, r1
 8002c88:	6339      	str	r1, [r7, #48]	; 0x30
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	414b      	adcs	r3, r1
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c9c:	4659      	mov	r1, fp
 8002c9e:	00cb      	lsls	r3, r1, #3
 8002ca0:	4651      	mov	r1, sl
 8002ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ca6:	4651      	mov	r1, sl
 8002ca8:	00ca      	lsls	r2, r1, #3
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4642      	mov	r2, r8
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cb8:	464b      	mov	r3, r9
 8002cba:	460a      	mov	r2, r1
 8002cbc:	eb42 0303 	adc.w	r3, r2, r3
 8002cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cd8:	460b      	mov	r3, r1
 8002cda:	18db      	adds	r3, r3, r3
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cde:	4613      	mov	r3, r2
 8002ce0:	eb42 0303 	adc.w	r3, r2, r3
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cee:	f7fd fac7 	bl	8000280 <__aeabi_uldivmod>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <UART_SetConfig+0x2d4>)
 8002cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	2164      	movs	r1, #100	; 0x64
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	3332      	adds	r3, #50	; 0x32
 8002d0a:	4a08      	ldr	r2, [pc, #32]	; (8002d2c <UART_SetConfig+0x2d4>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	f003 0207 	and.w	r2, r3, #7
 8002d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4422      	add	r2, r4
 8002d1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d20:	e105      	b.n	8002f2e <UART_SetConfig+0x4d6>
 8002d22:	bf00      	nop
 8002d24:	40011000 	.word	0x40011000
 8002d28:	40011400 	.word	0x40011400
 8002d2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d42:	4642      	mov	r2, r8
 8002d44:	464b      	mov	r3, r9
 8002d46:	1891      	adds	r1, r2, r2
 8002d48:	6239      	str	r1, [r7, #32]
 8002d4a:	415b      	adcs	r3, r3
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d52:	4641      	mov	r1, r8
 8002d54:	1854      	adds	r4, r2, r1
 8002d56:	4649      	mov	r1, r9
 8002d58:	eb43 0501 	adc.w	r5, r3, r1
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	00eb      	lsls	r3, r5, #3
 8002d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d6a:	00e2      	lsls	r2, r4, #3
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	461d      	mov	r5, r3
 8002d70:	4643      	mov	r3, r8
 8002d72:	18e3      	adds	r3, r4, r3
 8002d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d78:	464b      	mov	r3, r9
 8002d7a:	eb45 0303 	adc.w	r3, r5, r3
 8002d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d9e:	4629      	mov	r1, r5
 8002da0:	008b      	lsls	r3, r1, #2
 8002da2:	4621      	mov	r1, r4
 8002da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002da8:	4621      	mov	r1, r4
 8002daa:	008a      	lsls	r2, r1, #2
 8002dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002db0:	f7fd fa66 	bl	8000280 <__aeabi_uldivmod>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <UART_SetConfig+0x4e4>)
 8002dba:	fba3 2302 	umull	r2, r3, r3, r2
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	011c      	lsls	r4, r3, #4
 8002dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	1891      	adds	r1, r2, r2
 8002dda:	61b9      	str	r1, [r7, #24]
 8002ddc:	415b      	adcs	r3, r3
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de4:	4641      	mov	r1, r8
 8002de6:	1851      	adds	r1, r2, r1
 8002de8:	6139      	str	r1, [r7, #16]
 8002dea:	4649      	mov	r1, r9
 8002dec:	414b      	adcs	r3, r1
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	00cb      	lsls	r3, r1, #3
 8002e00:	4651      	mov	r1, sl
 8002e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e06:	4651      	mov	r1, sl
 8002e08:	00ca      	lsls	r2, r1, #3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4642      	mov	r2, r8
 8002e12:	189b      	adds	r3, r3, r2
 8002e14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e18:	464b      	mov	r3, r9
 8002e1a:	460a      	mov	r2, r1
 8002e1c:	eb42 0303 	adc.w	r3, r2, r3
 8002e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e3c:	4649      	mov	r1, r9
 8002e3e:	008b      	lsls	r3, r1, #2
 8002e40:	4641      	mov	r1, r8
 8002e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e46:	4641      	mov	r1, r8
 8002e48:	008a      	lsls	r2, r1, #2
 8002e4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e4e:	f7fd fa17 	bl	8000280 <__aeabi_uldivmod>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <UART_SetConfig+0x4e4>)
 8002e58:	fba3 1302 	umull	r1, r3, r3, r2
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	2164      	movs	r1, #100	; 0x64
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	3332      	adds	r3, #50	; 0x32
 8002e6a:	4a34      	ldr	r2, [pc, #208]	; (8002f3c <UART_SetConfig+0x4e4>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e76:	441c      	add	r4, r3
 8002e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e80:	677a      	str	r2, [r7, #116]	; 0x74
 8002e82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e86:	4642      	mov	r2, r8
 8002e88:	464b      	mov	r3, r9
 8002e8a:	1891      	adds	r1, r2, r2
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	415b      	adcs	r3, r3
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e96:	4641      	mov	r1, r8
 8002e98:	1851      	adds	r1, r2, r1
 8002e9a:	6039      	str	r1, [r7, #0]
 8002e9c:	4649      	mov	r1, r9
 8002e9e:	414b      	adcs	r3, r1
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002eae:	4659      	mov	r1, fp
 8002eb0:	00cb      	lsls	r3, r1, #3
 8002eb2:	4651      	mov	r1, sl
 8002eb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb8:	4651      	mov	r1, sl
 8002eba:	00ca      	lsls	r2, r1, #3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4642      	mov	r2, r8
 8002ec4:	189b      	adds	r3, r3, r2
 8002ec6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ec8:	464b      	mov	r3, r9
 8002eca:	460a      	mov	r2, r1
 8002ecc:	eb42 0303 	adc.w	r3, r2, r3
 8002ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	663b      	str	r3, [r7, #96]	; 0x60
 8002edc:	667a      	str	r2, [r7, #100]	; 0x64
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002eea:	4649      	mov	r1, r9
 8002eec:	008b      	lsls	r3, r1, #2
 8002eee:	4641      	mov	r1, r8
 8002ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	008a      	lsls	r2, r1, #2
 8002ef8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002efc:	f7fd f9c0 	bl	8000280 <__aeabi_uldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <UART_SetConfig+0x4e4>)
 8002f06:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2164      	movs	r1, #100	; 0x64
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	3332      	adds	r3, #50	; 0x32
 8002f18:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <UART_SetConfig+0x4e4>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	f003 020f 	and.w	r2, r3, #15
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4422      	add	r2, r4
 8002f2c:	609a      	str	r2, [r3, #8]
}
 8002f2e:	bf00      	nop
 8002f30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3a:	bf00      	nop
 8002f3c:	51eb851f 	.word	0x51eb851f

08002f40 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <NRF24_DelayMicroSeconds+0x3c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <NRF24_DelayMicroSeconds+0x40>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9a      	lsrs	r2, r3, #18
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8002f60:	bf00      	nop
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1e5a      	subs	r2, r3, #1
 8002f66:	60fa      	str	r2, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1fa      	bne.n	8002f62 <NRF24_DelayMicroSeconds+0x22>
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000008 	.word	0x20000008
 8002f80:	165e9f81 	.word	0x165e9f81

08002f84 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <NRF24_csn+0x20>
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <NRF24_csn+0x38>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <NRF24_csn+0x3c>)
 8002f98:	8811      	ldrh	r1, [r2, #0]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe f9f3 	bl	8001388 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8002fa2:	e007      	b.n	8002fb4 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <NRF24_csn+0x38>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <NRF24_csn+0x3c>)
 8002faa:	8811      	ldrh	r1, [r2, #0]
 8002fac:	2200      	movs	r2, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe f9ea 	bl	8001388 <HAL_GPIO_WritePin>
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	2000017c 	.word	0x2000017c
 8002fc0:	20000180 	.word	0x20000180

08002fc4 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <NRF24_ce+0x20>
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <NRF24_ce+0x38>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <NRF24_ce+0x3c>)
 8002fd8:	8811      	ldrh	r1, [r2, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe f9d3 	bl	8001388 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8002fe2:	e007      	b.n	8002ff4 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <NRF24_ce+0x38>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a05      	ldr	r2, [pc, #20]	; (8003000 <NRF24_ce+0x3c>)
 8002fea:	8811      	ldrh	r1, [r2, #0]
 8002fec:	2200      	movs	r2, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe f9ca 	bl	8001388 <HAL_GPIO_WritePin>
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	2000017c 	.word	0x2000017c
 8003000:	20000182 	.word	0x20000182

08003004 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800300e:	2000      	movs	r0, #0
 8003010:	f7ff ffb8 	bl	8002f84 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003018:	f107 010c 	add.w	r1, r7, #12
 800301c:	2364      	movs	r3, #100	; 0x64
 800301e:	2201      	movs	r2, #1
 8003020:	480a      	ldr	r0, [pc, #40]	; (800304c <NRF24_read_register+0x48>)
 8003022:	f7fe feac 	bl	8001d7e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8003026:	f107 030c 	add.w	r3, r7, #12
 800302a:	1c59      	adds	r1, r3, #1
 800302c:	2364      	movs	r3, #100	; 0x64
 800302e:	2201      	movs	r2, #1
 8003030:	4806      	ldr	r0, [pc, #24]	; (800304c <NRF24_read_register+0x48>)
 8003032:	f7fe ffe0 	bl	8001ff6 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8003036:	7b7b      	ldrb	r3, [r7, #13]
 8003038:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 800303a:	2001      	movs	r0, #1
 800303c:	f7ff ffa2 	bl	8002f84 <NRF24_csn>
	return retData;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000184 	.word	0x20000184

08003050 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
 800305c:	4613      	mov	r3, r2
 800305e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003060:	2000      	movs	r0, #0
 8003062:	f7ff ff8f 	bl	8002f84 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800306a:	f107 010c 	add.w	r1, r7, #12
 800306e:	2364      	movs	r3, #100	; 0x64
 8003070:	2201      	movs	r2, #1
 8003072:	4808      	ldr	r0, [pc, #32]	; (8003094 <NRF24_read_registerN+0x44>)
 8003074:	f7fe fe83 	bl	8001d7e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8003078:	79bb      	ldrb	r3, [r7, #6]
 800307a:	b29a      	uxth	r2, r3
 800307c:	2364      	movs	r3, #100	; 0x64
 800307e:	6839      	ldr	r1, [r7, #0]
 8003080:	4804      	ldr	r0, [pc, #16]	; (8003094 <NRF24_read_registerN+0x44>)
 8003082:	f7fe ffb8 	bl	8001ff6 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8003086:	2001      	movs	r0, #1
 8003088:	f7ff ff7c 	bl	8002f84 <NRF24_csn>
}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000184 	.word	0x20000184

08003098 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	460a      	mov	r2, r1
 80030a2:	71fb      	strb	r3, [r7, #7]
 80030a4:	4613      	mov	r3, r2
 80030a6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7ff ff6b 	bl	8002f84 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f043 0320 	orr.w	r3, r3, #32
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80030b8:	79bb      	ldrb	r3, [r7, #6]
 80030ba:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80030bc:	f107 010c 	add.w	r1, r7, #12
 80030c0:	2364      	movs	r3, #100	; 0x64
 80030c2:	2202      	movs	r2, #2
 80030c4:	4804      	ldr	r0, [pc, #16]	; (80030d8 <NRF24_write_register+0x40>)
 80030c6:	f7fe fe5a 	bl	8001d7e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f7ff ff5a 	bl	8002f84 <NRF24_csn>
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000184 	.word	0x20000184

080030dc <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	71fb      	strb	r3, [r7, #7]
 80030e8:	4613      	mov	r3, r2
 80030ea:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7ff ff49 	bl	8002f84 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f043 0320 	orr.w	r3, r3, #32
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80030fc:	f107 010c 	add.w	r1, r7, #12
 8003100:	2364      	movs	r3, #100	; 0x64
 8003102:	2201      	movs	r2, #1
 8003104:	4808      	ldr	r0, [pc, #32]	; (8003128 <NRF24_write_registerN+0x4c>)
 8003106:	f7fe fe3a 	bl	8001d7e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800310a:	79bb      	ldrb	r3, [r7, #6]
 800310c:	b29a      	uxth	r2, r3
 800310e:	2364      	movs	r3, #100	; 0x64
 8003110:	6839      	ldr	r1, [r7, #0]
 8003112:	4805      	ldr	r0, [pc, #20]	; (8003128 <NRF24_write_registerN+0x4c>)
 8003114:	f7fe fe33 	bl	8001d7e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003118:	2001      	movs	r0, #1
 800311a:	f7ff ff33 	bl	8002f84 <NRF24_csn>
}
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000184 	.word	0x20000184

0800312c <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8003138:	f000 fa16 	bl	8003568 <NRF24_getPayloadSize>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	4293      	cmp	r3, r2
 8003144:	d303      	bcc.n	800314e <NRF24_read_payload+0x22>
 8003146:	f000 fa0f 	bl	8003568 <NRF24_getPayloadSize>
 800314a:	4603      	mov	r3, r0
 800314c:	e000      	b.n	8003150 <NRF24_read_payload+0x24>
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8003152:	2000      	movs	r0, #0
 8003154:	f7ff ff16 	bl	8002f84 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8003158:	2361      	movs	r3, #97	; 0x61
 800315a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800315c:	f107 010e 	add.w	r1, r7, #14
 8003160:	2364      	movs	r3, #100	; 0x64
 8003162:	2201      	movs	r2, #1
 8003164:	4808      	ldr	r0, [pc, #32]	; (8003188 <NRF24_read_payload+0x5c>)
 8003166:	f7fe fe0a 	bl	8001d7e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	b29a      	uxth	r2, r3
 800316e:	2364      	movs	r3, #100	; 0x64
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <NRF24_read_payload+0x5c>)
 8003174:	f7fe ff3f 	bl	8001ff6 <HAL_SPI_Receive>
	NRF24_csn(1);
 8003178:	2001      	movs	r0, #1
 800317a:	f7ff ff03 	bl	8002f84 <NRF24_csn>
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000184 	.word	0x20000184

0800318c <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8003190:	21ff      	movs	r1, #255	; 0xff
 8003192:	20e1      	movs	r0, #225	; 0xe1
 8003194:	f7ff ff80 	bl	8003098 <NRF24_write_register>
}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}

0800319c <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80031a0:	21ff      	movs	r1, #255	; 0xff
 80031a2:	20e2      	movs	r0, #226	; 0xe2
 80031a4:	f7ff ff78 	bl	8003098 <NRF24_write_register>
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}

080031ac <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80031b2:	2007      	movs	r0, #7
 80031b4:	f7ff ff26 	bl	8003004 <NRF24_read_register>
 80031b8:	4603      	mov	r3, r0
 80031ba:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80031bc:	79fb      	ldrb	r3, [r7, #7]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80031c8:	b082      	sub	sp, #8
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
 80031d8:	4613      	mov	r3, r2
 80031da:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80031dc:	4b66      	ldr	r3, [pc, #408]	; (8003378 <NRF24_begin+0x1b0>)
 80031de:	4618      	mov	r0, r3
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	2258      	movs	r2, #88	; 0x58
 80031e6:	4619      	mov	r1, r3
 80031e8:	f000 ff72 	bl	80040d0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80031ec:	4a63      	ldr	r2, [pc, #396]	; (800337c <NRF24_begin+0x1b4>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80031f2:	4a63      	ldr	r2, [pc, #396]	; (8003380 <NRF24_begin+0x1b8>)
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;  
 80031f8:	4a62      	ldr	r2, [pc, #392]	; (8003384 <NRF24_begin+0x1bc>)
 80031fa:	883b      	ldrh	r3, [r7, #0]
 80031fc:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80031fe:	2001      	movs	r0, #1
 8003200:	f7ff fec0 	bl	8002f84 <NRF24_csn>
	NRF24_ce(0);
 8003204:	2000      	movs	r0, #0
 8003206:	f7ff fedd 	bl	8002fc4 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800320a:	2005      	movs	r0, #5
 800320c:	f7fd fe16 	bl	8000e3c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08); //0x08
 8003210:	2108      	movs	r1, #8
 8003212:	2000      	movs	r0, #0
 8003214:	f7ff ff40 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f); //0x3f
 8003218:	213f      	movs	r1, #63	; 0x3f
 800321a:	2001      	movs	r0, #1
 800321c:	f7ff ff3c 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03); //0x03
 8003220:	2103      	movs	r1, #3
 8003222:	2002      	movs	r0, #2
 8003224:	f7ff ff38 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03); //0x03
 8003228:	2103      	movs	r1, #3
 800322a:	2003      	movs	r0, #3
 800322c:	f7ff ff34 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03); //0x03
 8003230:	2103      	movs	r1, #3
 8003232:	2004      	movs	r0, #4
 8003234:	f7ff ff30 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02); //0x02
 8003238:	2102      	movs	r1, #2
 800323a:	2005      	movs	r0, #5
 800323c:	f7ff ff2c 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f); //0x0f
 8003240:	210f      	movs	r1, #15
 8003242:	2006      	movs	r0, #6
 8003244:	f7ff ff28 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e); //0x0e
 8003248:	210e      	movs	r1, #14
 800324a:	2007      	movs	r0, #7
 800324c:	f7ff ff24 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00); //0x00
 8003250:	2100      	movs	r1, #0
 8003252:	2008      	movs	r0, #8
 8003254:	f7ff ff20 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00); //0x00
 8003258:	2100      	movs	r1, #0
 800325a:	2009      	movs	r0, #9
 800325c:	f7ff ff1c 	bl	8003098 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8003260:	23e7      	movs	r3, #231	; 0xe7
 8003262:	733b      	strb	r3, [r7, #12]
 8003264:	23e7      	movs	r3, #231	; 0xe7
 8003266:	72fb      	strb	r3, [r7, #11]
 8003268:	23e7      	movs	r3, #231	; 0xe7
 800326a:	72bb      	strb	r3, [r7, #10]
 800326c:	23e7      	movs	r3, #231	; 0xe7
 800326e:	727b      	strb	r3, [r7, #9]
 8003270:	23e7      	movs	r3, #231	; 0xe7
 8003272:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8003274:	f107 0308 	add.w	r3, r7, #8
 8003278:	2205      	movs	r2, #5
 800327a:	4619      	mov	r1, r3
 800327c:	200a      	movs	r0, #10
 800327e:	f7ff ff2d 	bl	80030dc <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8003282:	23c2      	movs	r3, #194	; 0xc2
 8003284:	733b      	strb	r3, [r7, #12]
 8003286:	23c2      	movs	r3, #194	; 0xc2
 8003288:	72fb      	strb	r3, [r7, #11]
 800328a:	23c2      	movs	r3, #194	; 0xc2
 800328c:	72bb      	strb	r3, [r7, #10]
 800328e:	23c2      	movs	r3, #194	; 0xc2
 8003290:	727b      	strb	r3, [r7, #9]
 8003292:	23c2      	movs	r3, #194	; 0xc2
 8003294:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8003296:	f107 0308 	add.w	r3, r7, #8
 800329a:	2205      	movs	r2, #5
 800329c:	4619      	mov	r1, r3
 800329e:	200b      	movs	r0, #11
 80032a0:	f7ff ff1c 	bl	80030dc <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80032a4:	21c3      	movs	r1, #195	; 0xc3
 80032a6:	200c      	movs	r0, #12
 80032a8:	f7ff fef6 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80032ac:	21c4      	movs	r1, #196	; 0xc4
 80032ae:	200d      	movs	r0, #13
 80032b0:	f7ff fef2 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80032b4:	21c5      	movs	r1, #197	; 0xc5
 80032b6:	200e      	movs	r0, #14
 80032b8:	f7ff feee 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80032bc:	21c6      	movs	r1, #198	; 0xc6
 80032be:	200f      	movs	r0, #15
 80032c0:	f7ff feea 	bl	8003098 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80032c4:	23e7      	movs	r3, #231	; 0xe7
 80032c6:	733b      	strb	r3, [r7, #12]
 80032c8:	23e7      	movs	r3, #231	; 0xe7
 80032ca:	72fb      	strb	r3, [r7, #11]
 80032cc:	23e7      	movs	r3, #231	; 0xe7
 80032ce:	72bb      	strb	r3, [r7, #10]
 80032d0:	23e7      	movs	r3, #231	; 0xe7
 80032d2:	727b      	strb	r3, [r7, #9]
 80032d4:	23e7      	movs	r3, #231	; 0xe7
 80032d6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80032d8:	f107 0308 	add.w	r3, r7, #8
 80032dc:	2205      	movs	r2, #5
 80032de:	4619      	mov	r1, r3
 80032e0:	2010      	movs	r0, #16
 80032e2:	f7ff fefb 	bl	80030dc <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80032e6:	2100      	movs	r1, #0
 80032e8:	2011      	movs	r0, #17
 80032ea:	f7ff fed5 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80032ee:	2100      	movs	r1, #0
 80032f0:	2012      	movs	r0, #18
 80032f2:	f7ff fed1 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80032f6:	2100      	movs	r1, #0
 80032f8:	2013      	movs	r0, #19
 80032fa:	f7ff fecd 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80032fe:	2100      	movs	r1, #0
 8003300:	2014      	movs	r0, #20
 8003302:	f7ff fec9 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8003306:	2100      	movs	r1, #0
 8003308:	2015      	movs	r0, #21
 800330a:	f7ff fec5 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800330e:	2100      	movs	r1, #0
 8003310:	2016      	movs	r0, #22
 8003312:	f7ff fec1 	bl	8003098 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8003316:	f000 fa57 	bl	80037c8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800331a:	2100      	movs	r1, #0
 800331c:	201c      	movs	r0, #28
 800331e:	f7ff febb 	bl	8003098 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8003322:	2100      	movs	r1, #0
 8003324:	201d      	movs	r0, #29
 8003326:	f7ff feb7 	bl	8003098 <NRF24_write_register>
	printRadioSettings();
 800332a:	f000 fa67 	bl	80037fc <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800332e:	210f      	movs	r1, #15
 8003330:	200f      	movs	r0, #15
 8003332:	f000 f8d1 	bl	80034d8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m18dB);
 8003336:	2000      	movs	r0, #0
 8003338:	f000 f957 	bl	80035ea <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 800333c:	2001      	movs	r0, #1
 800333e:	f000 f98d 	bl	800365c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8003342:	2001      	movs	r0, #1
 8003344:	f000 f9d0 	bl	80036e8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8003348:	f000 f922 	bl	8003590 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800334c:	2020      	movs	r0, #32
 800334e:	f000 f8f3 	bl	8003538 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8003352:	f000 fa30 	bl	80037b6 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(52);
 8003356:	2034      	movs	r0, #52	; 0x34
 8003358:	f000 f8d9 	bl	800350e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800335c:	f7ff ff16 	bl	800318c <NRF24_flush_tx>
	NRF24_flush_rx();
 8003360:	f7ff ff1c 	bl	800319c <NRF24_flush_rx>
	
	NRF24_powerDown();
 8003364:	f000 f9e8 	bl	8003738 <NRF24_powerDown>
	
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003372:	b002      	add	sp, #8
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000184 	.word	0x20000184
 800337c:	2000017c 	.word	0x2000017c
 8003380:	20000180 	.word	0x20000180
 8003384:	20000182 	.word	0x20000182

08003388 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 800338c:	2000      	movs	r0, #0
 800338e:	f7ff fe39 	bl	8003004 <NRF24_read_register>
 8003392:	4603      	mov	r3, r0
 8003394:	f043 0303 	orr.w	r3, r3, #3
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	2000      	movs	r0, #0
 800339e:	f7ff fe7b 	bl	8003098 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <NRF24_startListening+0x48>)
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	d004      	beq.n	80033b6 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80033ac:	2205      	movs	r2, #5
 80033ae:	4908      	ldr	r1, [pc, #32]	; (80033d0 <NRF24_startListening+0x48>)
 80033b0:	200a      	movs	r0, #10
 80033b2:	f7ff fe93 	bl	80030dc <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 80033b6:	f7ff fee9 	bl	800318c <NRF24_flush_tx>
	NRF24_flush_rx();
 80033ba:	f7ff feef 	bl	800319c <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80033be:	2001      	movs	r0, #1
 80033c0:	f7ff fe00 	bl	8002fc4 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80033c4:	2096      	movs	r0, #150	; 0x96
 80033c6:	f7ff fdbb 	bl	8002f40 <NRF24_DelayMicroSeconds>
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000170 	.word	0x20000170

080033d4 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80033d8:	2000      	movs	r0, #0
 80033da:	f7ff fdf3 	bl	8002fc4 <NRF24_ce>
	NRF24_flush_tx();
 80033de:	f7ff fed5 	bl	800318c <NRF24_flush_tx>
	NRF24_flush_rx();
 80033e2:	f7ff fedb 	bl	800319c <NRF24_flush_rx>
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}

080033ea <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f000 f9b1 	bl	8003756 <NRF24_availablePipe>
 80033f4:	4603      	mov	r3, r0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	bd80      	pop	{r7, pc}

080033fa <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	4619      	mov	r1, r3
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fe8e 	bl	800312c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8003410:	2017      	movs	r0, #23
 8003412:	f7ff fdf7 	bl	8003004 <NRF24_read_register>
 8003416:	4603      	mov	r3, r0
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 800341e:	f7ff febd 	bl	800319c <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8003422:	f000 f8ad 	bl	8003580 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	4601      	mov	r1, r0
 8003444:	e9c7 2300 	strd	r2, r3, [r7]
 8003448:	460b      	mov	r3, r1
 800344a:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8003452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003456:	491c      	ldr	r1, [pc, #112]	; (80034c8 <NRF24_openReadingPipe+0x8c>)
 8003458:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	2b06      	cmp	r3, #6
 8003460:	d82d      	bhi.n	80034be <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d808      	bhi.n	800347a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	4a18      	ldr	r2, [pc, #96]	; (80034cc <NRF24_openReadingPipe+0x90>)
 800346c:	5cd3      	ldrb	r3, [r2, r3]
 800346e:	4639      	mov	r1, r7
 8003470:	2205      	movs	r2, #5
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fe32 	bl	80030dc <NRF24_write_registerN>
 8003478:	e007      	b.n	800348a <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	4a13      	ldr	r2, [pc, #76]	; (80034cc <NRF24_openReadingPipe+0x90>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	4639      	mov	r1, r7
 8003482:	2201      	movs	r2, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fe29 	bl	80030dc <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <NRF24_openReadingPipe+0x94>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	4a10      	ldr	r2, [pc, #64]	; (80034d4 <NRF24_openReadingPipe+0x98>)
 8003492:	7812      	ldrb	r2, [r2, #0]
 8003494:	4611      	mov	r1, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fdfe 	bl	8003098 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 800349c:	2002      	movs	r0, #2
 800349e:	f7ff fdb1 	bl	8003004 <NRF24_read_register>
 80034a2:	4603      	mov	r3, r0
 80034a4:	b25a      	sxtb	r2, r3
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	b25b      	sxtb	r3, r3
 80034b0:	4313      	orrs	r3, r2
 80034b2:	b25b      	sxtb	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	2002      	movs	r0, #2
 80034ba:	f7ff fded 	bl	8003098 <NRF24_write_register>
	}
	
}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000170 	.word	0x20000170
 80034cc:	08005020 	.word	0x08005020
 80034d0:	08005028 	.word	0x08005028
 80034d4:	20000178 	.word	0x20000178

080034d8 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	460a      	mov	r2, r1
 80034e2:	71fb      	strb	r3, [r7, #7]
 80034e4:	4613      	mov	r3, r2
 80034e6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	b25a      	sxtb	r2, r3
 80034ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	4313      	orrs	r3, r2
 80034fa:	b25b      	sxtb	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	4619      	mov	r1, r3
 8003500:	2004      	movs	r0, #4
 8003502:	f7ff fdc9 	bl	8003098 <NRF24_write_register>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8003518:	237f      	movs	r3, #127	; 0x7f
 800351a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	4293      	cmp	r3, r2
 8003522:	bf28      	it	cs
 8003524:	4613      	movcs	r3, r2
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	2005      	movs	r0, #5
 800352c:	f7ff fdb4 	bl	8003098 <NRF24_write_register>
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8003542:	2320      	movs	r3, #32
 8003544:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	4293      	cmp	r3, r2
 800354c:	bf28      	it	cs
 800354e:	4613      	movcs	r3, r2
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4b04      	ldr	r3, [pc, #16]	; (8003564 <NRF24_setPayloadSize+0x2c>)
 8003554:	701a      	strb	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000178 	.word	0x20000178

08003568 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
	return payload_size;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <NRF24_getPayloadSize+0x14>)
 800356e:	781b      	ldrb	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000178 	.word	0x20000178

08003580 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8003584:	2060      	movs	r0, #96	; 0x60
 8003586:	f7ff fd3d 	bl	8003004 <NRF24_read_register>
 800358a:	4603      	mov	r3, r0
}
 800358c:	4618      	mov	r0, r3
 800358e:	bd80      	pop	{r7, pc}

08003590 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8003594:	201d      	movs	r0, #29
 8003596:	f7ff fd35 	bl	8003004 <NRF24_read_register>
 800359a:	4603      	mov	r3, r0
 800359c:	f023 0304 	bic.w	r3, r3, #4
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	4619      	mov	r1, r3
 80035a4:	201d      	movs	r0, #29
 80035a6:	f7ff fd77 	bl	8003098 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80035aa:	2100      	movs	r1, #0
 80035ac:	201c      	movs	r0, #28
 80035ae:	f7ff fd73 	bl	8003098 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80035b2:	4b02      	ldr	r3, [pc, #8]	; (80035bc <NRF24_disableDynamicPayloads+0x2c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000179 	.word	0x20000179

080035c0 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80035d0:	213f      	movs	r1, #63	; 0x3f
 80035d2:	2001      	movs	r0, #1
 80035d4:	f7ff fd60 	bl	8003098 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80035d8:	e003      	b.n	80035e2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80035da:	2100      	movs	r1, #0
 80035dc:	2001      	movs	r0, #1
 80035de:	f7ff fd5b 	bl	8003098 <NRF24_write_register>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80035f4:	2006      	movs	r0, #6
 80035f6:	f7ff fd05 	bl	8003004 <NRF24_read_register>
 80035fa:	4603      	mov	r3, r0
 80035fc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	f023 0306 	bic.w	r3, r3, #6
 8003604:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d104      	bne.n	8003616 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	f043 0306 	orr.w	r3, r3, #6
 8003612:	73fb      	strb	r3, [r7, #15]
 8003614:	e019      	b.n	800364a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d104      	bne.n	8003626 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	73fb      	strb	r3, [r7, #15]
 8003624:	e011      	b.n	800364a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d104      	bne.n	8003636 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	e009      	b.n	800364a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d006      	beq.n	800364a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	2b04      	cmp	r3, #4
 8003640:	d103      	bne.n	800364a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	f043 0306 	orr.w	r3, r3, #6
 8003648:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	4619      	mov	r1, r3
 800364e:	2006      	movs	r0, #6
 8003650:	f7ff fd22 	bl	8003098 <NRF24_write_register>
}
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800366a:	2006      	movs	r0, #6
 800366c:	f7ff fcca 	bl	8003004 <NRF24_read_register>
 8003670:	4603      	mov	r3, r0
 8003672:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8003674:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <NRF24_setDataRate+0x88>)
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800367a:	7bbb      	ldrb	r3, [r7, #14]
 800367c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003680:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d107      	bne.n	8003698 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <NRF24_setDataRate+0x88>)
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800368e:	7bbb      	ldrb	r3, [r7, #14]
 8003690:	f043 0320 	orr.w	r3, r3, #32
 8003694:	73bb      	strb	r3, [r7, #14]
 8003696:	e00d      	b.n	80036b4 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d107      	bne.n	80036ae <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800369e:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <NRF24_setDataRate+0x88>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80036a4:	7bbb      	ldrb	r3, [r7, #14]
 80036a6:	f043 0308 	orr.w	r3, r3, #8
 80036aa:	73bb      	strb	r3, [r7, #14]
 80036ac:	e002      	b.n	80036b4 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <NRF24_setDataRate+0x88>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80036b4:	7bbb      	ldrb	r3, [r7, #14]
 80036b6:	4619      	mov	r1, r3
 80036b8:	2006      	movs	r0, #6
 80036ba:	f7ff fced 	bl	8003098 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80036be:	2006      	movs	r0, #6
 80036c0:	f7ff fca0 	bl	8003004 <NRF24_read_register>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461a      	mov	r2, r3
 80036c8:	7bbb      	ldrb	r3, [r7, #14]
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d102      	bne.n	80036d4 <NRF24_setDataRate+0x78>
  {
    result = true;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	e002      	b.n	80036da <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <NRF24_setDataRate+0x88>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	2000017a 	.word	0x2000017a

080036e8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80036f2:	2000      	movs	r0, #0
 80036f4:	f7ff fc86 	bl	8003004 <NRF24_read_register>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f023 030c 	bic.w	r3, r3, #12
 80036fe:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d00f      	beq.n	8003726 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	f043 0308 	orr.w	r3, r3, #8
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	e007      	b.n	8003726 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	f043 0308 	orr.w	r3, r3, #8
 800371c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	4619      	mov	r1, r3
 800372a:	2000      	movs	r0, #0
 800372c:	f7ff fcb4 	bl	8003098 <NRF24_write_register>
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800373c:	2000      	movs	r0, #0
 800373e:	f7ff fc61 	bl	8003004 <NRF24_read_register>
 8003742:	4603      	mov	r3, r0
 8003744:	f023 0302 	bic.w	r3, r3, #2
 8003748:	b2db      	uxtb	r3, r3
 800374a:	4619      	mov	r1, r3
 800374c:	2000      	movs	r0, #0
 800374e:	f7ff fca3 	bl	8003098 <NRF24_write_register>
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}

08003756 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800375e:	f7ff fd25 	bl	80031ac <NRF24_get_status>
 8003762:	4603      	mov	r3, r0
 8003764:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	73bb      	strb	r3, [r7, #14]

  if (result)
 8003776:	7bbb      	ldrb	r3, [r7, #14]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d017      	beq.n	80037ac <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	b2da      	uxtb	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8003792:	2140      	movs	r1, #64	; 0x40
 8003794:	2007      	movs	r0, #7
 8003796:	f7ff fc7f 	bl	8003098 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80037a4:	2120      	movs	r1, #32
 80037a6:	2007      	movs	r0, #7
 80037a8:	f7ff fc76 	bl	8003098 <NRF24_write_register>
    }
  }
  return result;
 80037ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80037ba:	2170      	movs	r1, #112	; 0x70
 80037bc:	2007      	movs	r0, #7
 80037be:	f7ff fc6b 	bl	8003098 <NRF24_write_register>
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80037ce:	2000      	movs	r0, #0
 80037d0:	f7ff fbd8 	bl	8002f84 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80037d4:	2350      	movs	r3, #80	; 0x50
 80037d6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80037d8:	2373      	movs	r3, #115	; 0x73
 80037da:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80037dc:	1d39      	adds	r1, r7, #4
 80037de:	2364      	movs	r3, #100	; 0x64
 80037e0:	2202      	movs	r2, #2
 80037e2:	4805      	ldr	r0, [pc, #20]	; (80037f8 <NRF24_ACTIVATE_cmd+0x30>)
 80037e4:	f7fe facb 	bl	8001d7e <HAL_SPI_Transmit>
	NRF24_csn(1);
 80037e8:	2001      	movs	r0, #1
 80037ea:	f7ff fbcb 	bl	8002f84 <NRF24_csn>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000184 	.word	0x20000184

080037fc <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80037fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037fe:	b0a1      	sub	sp, #132	; 0x84
 8003800:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8003802:	f107 0308 	add.w	r3, r7, #8
 8003806:	49c3      	ldr	r1, [pc, #780]	; (8003b14 <printRadioSettings+0x318>)
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fc77 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800380e:	f107 0308 	add.w	r3, r7, #8
 8003812:	4618      	mov	r0, r3
 8003814:	f7fc fcdc 	bl	80001d0 <strlen>
 8003818:	4603      	mov	r3, r0
 800381a:	b29a      	uxth	r2, r3
 800381c:	f107 0108 	add.w	r1, r7, #8
 8003820:	230a      	movs	r3, #10
 8003822:	48bd      	ldr	r0, [pc, #756]	; (8003b18 <printRadioSettings+0x31c>)
 8003824:	f7ff f817 	bl	8002856 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8003828:	2000      	movs	r0, #0
 800382a:	f7ff fbeb 	bl	8003004 <NRF24_read_register>
 800382e:	4603      	mov	r3, r0
 8003830:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8003834:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8003840:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d006      	beq.n	800385a <printRadioSettings+0x5e>
 800384c:	f107 0308 	add.w	r3, r7, #8
 8003850:	49b2      	ldr	r1, [pc, #712]	; (8003b1c <printRadioSettings+0x320>)
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fc52 	bl	80040fc <siprintf>
 8003858:	e00c      	b.n	8003874 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	49b0      	ldr	r1, [pc, #704]	; (8003b20 <printRadioSettings+0x324>)
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fc4b 	bl	80040fc <siprintf>
 8003866:	e005      	b.n	8003874 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8003868:	f107 0308 	add.w	r3, r7, #8
 800386c:	49ad      	ldr	r1, [pc, #692]	; (8003b24 <printRadioSettings+0x328>)
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fc44 	bl	80040fc <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003874:	f107 0308 	add.w	r3, r7, #8
 8003878:	4618      	mov	r0, r3
 800387a:	f7fc fca9 	bl	80001d0 <strlen>
 800387e:	4603      	mov	r3, r0
 8003880:	b29a      	uxth	r2, r3
 8003882:	f107 0108 	add.w	r1, r7, #8
 8003886:	230a      	movs	r3, #10
 8003888:	48a3      	ldr	r0, [pc, #652]	; (8003b18 <printRadioSettings+0x31c>)
 800388a:	f7fe ffe4 	bl	8002856 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800388e:	2001      	movs	r0, #1
 8003890:	f7ff fbb8 	bl	8003004 <NRF24_read_register>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800389a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800389e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bfcc      	ite	gt
 80038a6:	2301      	movgt	r3, #1
 80038a8:	2300      	movle	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80038ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80038b2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bfcc      	ite	gt
 80038ba:	2301      	movgt	r3, #1
 80038bc:	2300      	movle	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80038c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80038c6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bfcc      	ite	gt
 80038ce:	2301      	movgt	r3, #1
 80038d0:	2300      	movle	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80038d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80038da:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bfcc      	ite	gt
 80038e2:	2301      	movgt	r3, #1
 80038e4:	2300      	movle	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80038ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80038ee:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bfcc      	ite	gt
 80038f6:	2301      	movgt	r3, #1
 80038f8:	2300      	movle	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80038fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003902:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003906:	2b00      	cmp	r3, #0
 8003908:	bfcc      	ite	gt
 800390a:	2301      	movgt	r3, #1
 800390c:	2300      	movle	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f107 0008 	add.w	r0, r7, #8
 8003914:	9303      	str	r3, [sp, #12]
 8003916:	9402      	str	r4, [sp, #8]
 8003918:	9101      	str	r1, [sp, #4]
 800391a:	9200      	str	r2, [sp, #0]
 800391c:	4633      	mov	r3, r6
 800391e:	462a      	mov	r2, r5
 8003920:	4981      	ldr	r1, [pc, #516]	; (8003b28 <printRadioSettings+0x32c>)
 8003922:	f000 fbeb 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	4618      	mov	r0, r3
 800392c:	f7fc fc50 	bl	80001d0 <strlen>
 8003930:	4603      	mov	r3, r0
 8003932:	b29a      	uxth	r2, r3
 8003934:	f107 0108 	add.w	r1, r7, #8
 8003938:	230a      	movs	r3, #10
 800393a:	4877      	ldr	r0, [pc, #476]	; (8003b18 <printRadioSettings+0x31c>)
 800393c:	f7fe ff8b 	bl	8002856 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8003940:	2002      	movs	r0, #2
 8003942:	f7ff fb5f 	bl	8003004 <NRF24_read_register>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800394c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003950:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003954:	2b00      	cmp	r3, #0
 8003956:	bfcc      	ite	gt
 8003958:	2301      	movgt	r3, #1
 800395a:	2300      	movle	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003960:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003964:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003968:	2b00      	cmp	r3, #0
 800396a:	bfcc      	ite	gt
 800396c:	2301      	movgt	r3, #1
 800396e:	2300      	movle	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003974:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003978:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800397c:	2b00      	cmp	r3, #0
 800397e:	bfcc      	ite	gt
 8003980:	2301      	movgt	r3, #1
 8003982:	2300      	movle	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003988:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800398c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003990:	2b00      	cmp	r3, #0
 8003992:	bfcc      	ite	gt
 8003994:	2301      	movgt	r3, #1
 8003996:	2300      	movle	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800399c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80039a0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bfcc      	ite	gt
 80039a8:	2301      	movgt	r3, #1
 80039aa:	2300      	movle	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80039b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80039b4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bfcc      	ite	gt
 80039bc:	2301      	movgt	r3, #1
 80039be:	2300      	movle	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f107 0008 	add.w	r0, r7, #8
 80039c6:	9303      	str	r3, [sp, #12]
 80039c8:	9402      	str	r4, [sp, #8]
 80039ca:	9101      	str	r1, [sp, #4]
 80039cc:	9200      	str	r2, [sp, #0]
 80039ce:	4633      	mov	r3, r6
 80039d0:	462a      	mov	r2, r5
 80039d2:	4956      	ldr	r1, [pc, #344]	; (8003b2c <printRadioSettings+0x330>)
 80039d4:	f000 fb92 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80039d8:	f107 0308 	add.w	r3, r7, #8
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fc fbf7 	bl	80001d0 <strlen>
 80039e2:	4603      	mov	r3, r0
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	f107 0108 	add.w	r1, r7, #8
 80039ea:	230a      	movs	r3, #10
 80039ec:	484a      	ldr	r0, [pc, #296]	; (8003b18 <printRadioSettings+0x31c>)
 80039ee:	f7fe ff32 	bl	8002856 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80039f2:	2003      	movs	r0, #3
 80039f4:	f7ff fb06 	bl	8003004 <NRF24_read_register>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8003a02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003a06:	3302      	adds	r3, #2
 8003a08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8003a0c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003a10:	f107 0308 	add.w	r3, r7, #8
 8003a14:	4946      	ldr	r1, [pc, #280]	; (8003b30 <printRadioSettings+0x334>)
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fb70 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003a1c:	f107 0308 	add.w	r3, r7, #8
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fc fbd5 	bl	80001d0 <strlen>
 8003a26:	4603      	mov	r3, r0
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	f107 0108 	add.w	r1, r7, #8
 8003a2e:	230a      	movs	r3, #10
 8003a30:	4839      	ldr	r0, [pc, #228]	; (8003b18 <printRadioSettings+0x31c>)
 8003a32:	f7fe ff10 	bl	8002856 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8003a36:	2005      	movs	r0, #5
 8003a38:	f7ff fae4 	bl	8003004 <NRF24_read_register>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8003a42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a4a:	f107 0308 	add.w	r3, r7, #8
 8003a4e:	4939      	ldr	r1, [pc, #228]	; (8003b34 <printRadioSettings+0x338>)
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fb53 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fbb8 	bl	80001d0 <strlen>
 8003a60:	4603      	mov	r3, r0
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	f107 0108 	add.w	r1, r7, #8
 8003a68:	230a      	movs	r3, #10
 8003a6a:	482b      	ldr	r0, [pc, #172]	; (8003b18 <printRadioSettings+0x31c>)
 8003a6c:	f7fe fef3 	bl	8002856 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8003a70:	2006      	movs	r0, #6
 8003a72:	f7ff fac7 	bl	8003004 <NRF24_read_register>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8003a7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d006      	beq.n	8003a96 <printRadioSettings+0x29a>
 8003a88:	f107 0308 	add.w	r3, r7, #8
 8003a8c:	492a      	ldr	r1, [pc, #168]	; (8003b38 <printRadioSettings+0x33c>)
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fb34 	bl	80040fc <siprintf>
 8003a94:	e005      	b.n	8003aa2 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8003a96:	f107 0308 	add.w	r3, r7, #8
 8003a9a:	4928      	ldr	r1, [pc, #160]	; (8003b3c <printRadioSettings+0x340>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fb2d 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fc fb92 	bl	80001d0 <strlen>
 8003aac:	4603      	mov	r3, r0
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	f107 0108 	add.w	r1, r7, #8
 8003ab4:	230a      	movs	r3, #10
 8003ab6:	4818      	ldr	r0, [pc, #96]	; (8003b18 <printRadioSettings+0x31c>)
 8003ab8:	f7fe fecd 	bl	8002856 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8003abc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003ac0:	f003 0306 	and.w	r3, r3, #6
 8003ac4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8003ac8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8003ad2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <printRadioSettings+0x2ec>
 8003ada:	f107 0308 	add.w	r3, r7, #8
 8003ade:	4918      	ldr	r1, [pc, #96]	; (8003b40 <printRadioSettings+0x344>)
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fb0b 	bl	80040fc <siprintf>
 8003ae6:	e03b      	b.n	8003b60 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8003ae8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d106      	bne.n	8003afe <printRadioSettings+0x302>
 8003af0:	f107 0308 	add.w	r3, r7, #8
 8003af4:	4913      	ldr	r1, [pc, #76]	; (8003b44 <printRadioSettings+0x348>)
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fb00 	bl	80040fc <siprintf>
 8003afc:	e030      	b.n	8003b60 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8003afe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d122      	bne.n	8003b4c <printRadioSettings+0x350>
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	490f      	ldr	r1, [pc, #60]	; (8003b48 <printRadioSettings+0x34c>)
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 faf5 	bl	80040fc <siprintf>
 8003b12:	e025      	b.n	8003b60 <printRadioSettings+0x364>
 8003b14:	08004ac4 	.word	0x08004ac4
 8003b18:	200001dc 	.word	0x200001dc
 8003b1c:	08004af8 	.word	0x08004af8
 8003b20:	08004b14 	.word	0x08004b14
 8003b24:	08004b30 	.word	0x08004b30
 8003b28:	08004b44 	.word	0x08004b44
 8003b2c:	08004b88 	.word	0x08004b88
 8003b30:	08004bd4 	.word	0x08004bd4
 8003b34:	08004bf0 	.word	0x08004bf0
 8003b38:	08004c04 	.word	0x08004c04
 8003b3c:	08004c1c 	.word	0x08004c1c
 8003b40:	08004c34 	.word	0x08004c34
 8003b44:	08004c48 	.word	0x08004c48
 8003b48:	08004c5c 	.word	0x08004c5c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8003b4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d105      	bne.n	8003b60 <printRadioSettings+0x364>
 8003b54:	f107 0308 	add.w	r3, r7, #8
 8003b58:	49d7      	ldr	r1, [pc, #860]	; (8003eb8 <printRadioSettings+0x6bc>)
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 face 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003b60:	f107 0308 	add.w	r3, r7, #8
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fc fb33 	bl	80001d0 <strlen>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	f107 0108 	add.w	r1, r7, #8
 8003b72:	230a      	movs	r3, #10
 8003b74:	48d1      	ldr	r0, [pc, #836]	; (8003ebc <printRadioSettings+0x6c0>)
 8003b76:	f7fe fe6e 	bl	8002856 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8003b7a:	463b      	mov	r3, r7
 8003b7c:	2205      	movs	r2, #5
 8003b7e:	4619      	mov	r1, r3
 8003b80:	200a      	movs	r0, #10
 8003b82:	f7ff fa65 	bl	8003050 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8003b86:	793b      	ldrb	r3, [r7, #4]
 8003b88:	461c      	mov	r4, r3
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	461d      	mov	r5, r3
 8003b8e:	78bb      	ldrb	r3, [r7, #2]
 8003b90:	787a      	ldrb	r2, [r7, #1]
 8003b92:	7839      	ldrb	r1, [r7, #0]
 8003b94:	f107 0008 	add.w	r0, r7, #8
 8003b98:	9102      	str	r1, [sp, #8]
 8003b9a:	9201      	str	r2, [sp, #4]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	462b      	mov	r3, r5
 8003ba0:	4622      	mov	r2, r4
 8003ba2:	49c7      	ldr	r1, [pc, #796]	; (8003ec0 <printRadioSettings+0x6c4>)
 8003ba4:	f000 faaa 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003ba8:	f107 0308 	add.w	r3, r7, #8
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fc fb0f 	bl	80001d0 <strlen>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	f107 0108 	add.w	r1, r7, #8
 8003bba:	230a      	movs	r3, #10
 8003bbc:	48bf      	ldr	r0, [pc, #764]	; (8003ebc <printRadioSettings+0x6c0>)
 8003bbe:	f7fe fe4a 	bl	8002856 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8003bc2:	463b      	mov	r3, r7
 8003bc4:	2205      	movs	r2, #5
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	200b      	movs	r0, #11
 8003bca:	f7ff fa41 	bl	8003050 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8003bce:	793b      	ldrb	r3, [r7, #4]
 8003bd0:	461c      	mov	r4, r3
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	461d      	mov	r5, r3
 8003bd6:	78bb      	ldrb	r3, [r7, #2]
 8003bd8:	787a      	ldrb	r2, [r7, #1]
 8003bda:	7839      	ldrb	r1, [r7, #0]
 8003bdc:	f107 0008 	add.w	r0, r7, #8
 8003be0:	9102      	str	r1, [sp, #8]
 8003be2:	9201      	str	r2, [sp, #4]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	462b      	mov	r3, r5
 8003be8:	4622      	mov	r2, r4
 8003bea:	49b6      	ldr	r1, [pc, #728]	; (8003ec4 <printRadioSettings+0x6c8>)
 8003bec:	f000 fa86 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003bf0:	f107 0308 	add.w	r3, r7, #8
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fc faeb 	bl	80001d0 <strlen>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	f107 0108 	add.w	r1, r7, #8
 8003c02:	230a      	movs	r3, #10
 8003c04:	48ad      	ldr	r0, [pc, #692]	; (8003ebc <printRadioSettings+0x6c0>)
 8003c06:	f7fe fe26 	bl	8002856 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4619      	mov	r1, r3
 8003c10:	200c      	movs	r0, #12
 8003c12:	f7ff fa1d 	bl	8003050 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8003c16:	783b      	ldrb	r3, [r7, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f107 0308 	add.w	r3, r7, #8
 8003c1e:	49aa      	ldr	r1, [pc, #680]	; (8003ec8 <printRadioSettings+0x6cc>)
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fa6b 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003c26:	f107 0308 	add.w	r3, r7, #8
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fc fad0 	bl	80001d0 <strlen>
 8003c30:	4603      	mov	r3, r0
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	f107 0108 	add.w	r1, r7, #8
 8003c38:	230a      	movs	r3, #10
 8003c3a:	48a0      	ldr	r0, [pc, #640]	; (8003ebc <printRadioSettings+0x6c0>)
 8003c3c:	f7fe fe0b 	bl	8002856 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8003c40:	463b      	mov	r3, r7
 8003c42:	2201      	movs	r2, #1
 8003c44:	4619      	mov	r1, r3
 8003c46:	200d      	movs	r0, #13
 8003c48:	f7ff fa02 	bl	8003050 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8003c4c:	783b      	ldrb	r3, [r7, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f107 0308 	add.w	r3, r7, #8
 8003c54:	499d      	ldr	r1, [pc, #628]	; (8003ecc <printRadioSettings+0x6d0>)
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fa50 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003c5c:	f107 0308 	add.w	r3, r7, #8
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc fab5 	bl	80001d0 <strlen>
 8003c66:	4603      	mov	r3, r0
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	f107 0108 	add.w	r1, r7, #8
 8003c6e:	230a      	movs	r3, #10
 8003c70:	4892      	ldr	r0, [pc, #584]	; (8003ebc <printRadioSettings+0x6c0>)
 8003c72:	f7fe fdf0 	bl	8002856 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8003c76:	463b      	mov	r3, r7
 8003c78:	2201      	movs	r2, #1
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	200e      	movs	r0, #14
 8003c7e:	f7ff f9e7 	bl	8003050 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8003c82:	783b      	ldrb	r3, [r7, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	4991      	ldr	r1, [pc, #580]	; (8003ed0 <printRadioSettings+0x6d4>)
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fa35 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003c92:	f107 0308 	add.w	r3, r7, #8
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fc fa9a 	bl	80001d0 <strlen>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	f107 0108 	add.w	r1, r7, #8
 8003ca4:	230a      	movs	r3, #10
 8003ca6:	4885      	ldr	r0, [pc, #532]	; (8003ebc <printRadioSettings+0x6c0>)
 8003ca8:	f7fe fdd5 	bl	8002856 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8003cac:	463b      	mov	r3, r7
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	200f      	movs	r0, #15
 8003cb4:	f7ff f9cc 	bl	8003050 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8003cb8:	783b      	ldrb	r3, [r7, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	4984      	ldr	r1, [pc, #528]	; (8003ed4 <printRadioSettings+0x6d8>)
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fa1a 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003cc8:	f107 0308 	add.w	r3, r7, #8
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fc fa7f 	bl	80001d0 <strlen>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	f107 0108 	add.w	r1, r7, #8
 8003cda:	230a      	movs	r3, #10
 8003cdc:	4877      	ldr	r0, [pc, #476]	; (8003ebc <printRadioSettings+0x6c0>)
 8003cde:	f7fe fdba 	bl	8002856 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8003ce2:	463b      	mov	r3, r7
 8003ce4:	2205      	movs	r2, #5
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	2010      	movs	r0, #16
 8003cea:	f7ff f9b1 	bl	8003050 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8003cee:	793b      	ldrb	r3, [r7, #4]
 8003cf0:	461c      	mov	r4, r3
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	461d      	mov	r5, r3
 8003cf6:	78bb      	ldrb	r3, [r7, #2]
 8003cf8:	787a      	ldrb	r2, [r7, #1]
 8003cfa:	7839      	ldrb	r1, [r7, #0]
 8003cfc:	f107 0008 	add.w	r0, r7, #8
 8003d00:	9102      	str	r1, [sp, #8]
 8003d02:	9201      	str	r2, [sp, #4]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	462b      	mov	r3, r5
 8003d08:	4622      	mov	r2, r4
 8003d0a:	4973      	ldr	r1, [pc, #460]	; (8003ed8 <printRadioSettings+0x6dc>)
 8003d0c:	f000 f9f6 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003d10:	f107 0308 	add.w	r3, r7, #8
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fa5b 	bl	80001d0 <strlen>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	f107 0108 	add.w	r1, r7, #8
 8003d22:	230a      	movs	r3, #10
 8003d24:	4865      	ldr	r0, [pc, #404]	; (8003ebc <printRadioSettings+0x6c0>)
 8003d26:	f7fe fd96 	bl	8002856 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8003d2a:	2011      	movs	r0, #17
 8003d2c:	f7ff f96a 	bl	8003004 <NRF24_read_register>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003d36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d3e:	f107 0308 	add.w	r3, r7, #8
 8003d42:	4966      	ldr	r1, [pc, #408]	; (8003edc <printRadioSettings+0x6e0>)
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 f9d9 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003d4a:	f107 0308 	add.w	r3, r7, #8
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fc fa3e 	bl	80001d0 <strlen>
 8003d54:	4603      	mov	r3, r0
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	f107 0108 	add.w	r1, r7, #8
 8003d5c:	230a      	movs	r3, #10
 8003d5e:	4857      	ldr	r0, [pc, #348]	; (8003ebc <printRadioSettings+0x6c0>)
 8003d60:	f7fe fd79 	bl	8002856 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8003d64:	2012      	movs	r0, #18
 8003d66:	f7ff f94d 	bl	8003004 <NRF24_read_register>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003d70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003d74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d78:	f107 0308 	add.w	r3, r7, #8
 8003d7c:	4958      	ldr	r1, [pc, #352]	; (8003ee0 <printRadioSettings+0x6e4>)
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f9bc 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003d84:	f107 0308 	add.w	r3, r7, #8
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fc fa21 	bl	80001d0 <strlen>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	f107 0108 	add.w	r1, r7, #8
 8003d96:	230a      	movs	r3, #10
 8003d98:	4848      	ldr	r0, [pc, #288]	; (8003ebc <printRadioSettings+0x6c0>)
 8003d9a:	f7fe fd5c 	bl	8002856 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8003d9e:	2013      	movs	r0, #19
 8003da0:	f7ff f930 	bl	8003004 <NRF24_read_register>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003daa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003db2:	f107 0308 	add.w	r3, r7, #8
 8003db6:	494b      	ldr	r1, [pc, #300]	; (8003ee4 <printRadioSettings+0x6e8>)
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f99f 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003dbe:	f107 0308 	add.w	r3, r7, #8
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc fa04 	bl	80001d0 <strlen>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	f107 0108 	add.w	r1, r7, #8
 8003dd0:	230a      	movs	r3, #10
 8003dd2:	483a      	ldr	r0, [pc, #232]	; (8003ebc <printRadioSettings+0x6c0>)
 8003dd4:	f7fe fd3f 	bl	8002856 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8003dd8:	2014      	movs	r0, #20
 8003dda:	f7ff f913 	bl	8003004 <NRF24_read_register>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003de4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003de8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dec:	f107 0308 	add.w	r3, r7, #8
 8003df0:	493d      	ldr	r1, [pc, #244]	; (8003ee8 <printRadioSettings+0x6ec>)
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f982 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003df8:	f107 0308 	add.w	r3, r7, #8
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc f9e7 	bl	80001d0 <strlen>
 8003e02:	4603      	mov	r3, r0
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	f107 0108 	add.w	r1, r7, #8
 8003e0a:	230a      	movs	r3, #10
 8003e0c:	482b      	ldr	r0, [pc, #172]	; (8003ebc <printRadioSettings+0x6c0>)
 8003e0e:	f7fe fd22 	bl	8002856 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8003e12:	2015      	movs	r0, #21
 8003e14:	f7ff f8f6 	bl	8003004 <NRF24_read_register>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003e1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e26:	f107 0308 	add.w	r3, r7, #8
 8003e2a:	4930      	ldr	r1, [pc, #192]	; (8003eec <printRadioSettings+0x6f0>)
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 f965 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003e32:	f107 0308 	add.w	r3, r7, #8
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc f9ca 	bl	80001d0 <strlen>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	f107 0108 	add.w	r1, r7, #8
 8003e44:	230a      	movs	r3, #10
 8003e46:	481d      	ldr	r0, [pc, #116]	; (8003ebc <printRadioSettings+0x6c0>)
 8003e48:	f7fe fd05 	bl	8002856 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8003e4c:	2016      	movs	r0, #22
 8003e4e:	f7ff f8d9 	bl	8003004 <NRF24_read_register>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003e58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003e5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e60:	f107 0308 	add.w	r3, r7, #8
 8003e64:	4922      	ldr	r1, [pc, #136]	; (8003ef0 <printRadioSettings+0x6f4>)
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f948 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003e6c:	f107 0308 	add.w	r3, r7, #8
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fc f9ad 	bl	80001d0 <strlen>
 8003e76:	4603      	mov	r3, r0
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	f107 0108 	add.w	r1, r7, #8
 8003e7e:	230a      	movs	r3, #10
 8003e80:	480e      	ldr	r0, [pc, #56]	; (8003ebc <printRadioSettings+0x6c0>)
 8003e82:	f7fe fce8 	bl	8002856 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8003e86:	201c      	movs	r0, #28
 8003e88:	f7ff f8bc 	bl	8003004 <NRF24_read_register>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003e92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003e96:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bfcc      	ite	gt
 8003e9e:	2301      	movgt	r3, #1
 8003ea0:	2300      	movle	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003ea6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003eaa:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bfcc      	ite	gt
 8003eb2:	2301      	movgt	r3, #1
 8003eb4:	2300      	movle	r3, #0
 8003eb6:	e01d      	b.n	8003ef4 <printRadioSettings+0x6f8>
 8003eb8:	08004c70 	.word	0x08004c70
 8003ebc:	200001dc 	.word	0x200001dc
 8003ec0:	08004c84 	.word	0x08004c84
 8003ec4:	08004cb4 	.word	0x08004cb4
 8003ec8:	08004ce4 	.word	0x08004ce4
 8003ecc:	08004d0c 	.word	0x08004d0c
 8003ed0:	08004d34 	.word	0x08004d34
 8003ed4:	08004d5c 	.word	0x08004d5c
 8003ed8:	08004d84 	.word	0x08004d84
 8003edc:	08004db0 	.word	0x08004db0
 8003ee0:	08004dcc 	.word	0x08004dcc
 8003ee4:	08004de8 	.word	0x08004de8
 8003ee8:	08004e04 	.word	0x08004e04
 8003eec:	08004e20 	.word	0x08004e20
 8003ef0:	08004e3c 	.word	0x08004e3c
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003ef8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003efc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bfcc      	ite	gt
 8003f04:	2301      	movgt	r3, #1
 8003f06:	2300      	movle	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f10:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bfcc      	ite	gt
 8003f18:	2301      	movgt	r3, #1
 8003f1a:	2300      	movle	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f24:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bfcc      	ite	gt
 8003f2c:	2301      	movgt	r3, #1
 8003f2e:	2300      	movle	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f38:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bfcc      	ite	gt
 8003f40:	2301      	movgt	r3, #1
 8003f42:	2300      	movle	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f107 0008 	add.w	r0, r7, #8
 8003f4a:	9303      	str	r3, [sp, #12]
 8003f4c:	9402      	str	r4, [sp, #8]
 8003f4e:	9101      	str	r1, [sp, #4]
 8003f50:	9200      	str	r2, [sp, #0]
 8003f52:	4633      	mov	r3, r6
 8003f54:	462a      	mov	r2, r5
 8003f56:	4936      	ldr	r1, [pc, #216]	; (8004030 <printRadioSettings+0x834>)
 8003f58:	f000 f8d0 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003f5c:	f107 0308 	add.w	r3, r7, #8
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fc f935 	bl	80001d0 <strlen>
 8003f66:	4603      	mov	r3, r0
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	f107 0108 	add.w	r1, r7, #8
 8003f6e:	230a      	movs	r3, #10
 8003f70:	4830      	ldr	r0, [pc, #192]	; (8004034 <printRadioSettings+0x838>)
 8003f72:	f7fe fc70 	bl	8002856 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8003f76:	201d      	movs	r0, #29
 8003f78:	f7ff f844 	bl	8003004 <NRF24_read_register>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8003f82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <printRadioSettings+0x7a0>
 8003f8e:	f107 0308 	add.w	r3, r7, #8
 8003f92:	4929      	ldr	r1, [pc, #164]	; (8004038 <printRadioSettings+0x83c>)
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 f8b1 	bl	80040fc <siprintf>
 8003f9a:	e005      	b.n	8003fa8 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8003f9c:	f107 0308 	add.w	r3, r7, #8
 8003fa0:	4926      	ldr	r1, [pc, #152]	; (800403c <printRadioSettings+0x840>)
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f8aa 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003fa8:	f107 0308 	add.w	r3, r7, #8
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc f90f 	bl	80001d0 <strlen>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	f107 0108 	add.w	r1, r7, #8
 8003fba:	230a      	movs	r3, #10
 8003fbc:	481d      	ldr	r0, [pc, #116]	; (8004034 <printRadioSettings+0x838>)
 8003fbe:	f7fe fc4a 	bl	8002856 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8003fc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <printRadioSettings+0x7e0>
 8003fce:	f107 0308 	add.w	r3, r7, #8
 8003fd2:	491b      	ldr	r1, [pc, #108]	; (8004040 <printRadioSettings+0x844>)
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f891 	bl	80040fc <siprintf>
 8003fda:	e005      	b.n	8003fe8 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8003fdc:	f107 0308 	add.w	r3, r7, #8
 8003fe0:	4918      	ldr	r1, [pc, #96]	; (8004044 <printRadioSettings+0x848>)
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f88a 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003fe8:	f107 0308 	add.w	r3, r7, #8
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fc f8ef 	bl	80001d0 <strlen>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	f107 0108 	add.w	r1, r7, #8
 8003ffa:	230a      	movs	r3, #10
 8003ffc:	480d      	ldr	r0, [pc, #52]	; (8004034 <printRadioSettings+0x838>)
 8003ffe:	f7fe fc2a 	bl	8002856 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004002:	f107 0308 	add.w	r3, r7, #8
 8004006:	4910      	ldr	r1, [pc, #64]	; (8004048 <printRadioSettings+0x84c>)
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f877 	bl	80040fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800400e:	f107 0308 	add.w	r3, r7, #8
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc f8dc 	bl	80001d0 <strlen>
 8004018:	4603      	mov	r3, r0
 800401a:	b29a      	uxth	r2, r3
 800401c:	f107 0108 	add.w	r1, r7, #8
 8004020:	230a      	movs	r3, #10
 8004022:	4804      	ldr	r0, [pc, #16]	; (8004034 <printRadioSettings+0x838>)
 8004024:	f7fe fc17 	bl	8002856 <HAL_UART_Transmit>
}
 8004028:	bf00      	nop
 800402a:	3774      	adds	r7, #116	; 0x74
 800402c:	46bd      	mov	sp, r7
 800402e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004030:	08004e58 	.word	0x08004e58
 8004034:	200001dc 	.word	0x200001dc
 8004038:	08004ea4 	.word	0x08004ea4
 800403c:	08004ebc 	.word	0x08004ebc
 8004040:	08004ed4 	.word	0x08004ed4
 8004044:	08004ef0 	.word	0x08004ef0
 8004048:	08004ac4 	.word	0x08004ac4

0800404c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 800404c:	b084      	sub	sp, #16
 800404e:	b580      	push	{r7, lr}
 8004050:	af00      	add	r7, sp, #0
 8004052:	f107 0c08 	add.w	ip, r7, #8
 8004056:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800405a:	4b07      	ldr	r3, [pc, #28]	; (8004078 <nrf24_DebugUART_Init+0x2c>)
 800405c:	4618      	mov	r0, r3
 800405e:	f107 0308 	add.w	r3, r7, #8
 8004062:	2244      	movs	r2, #68	; 0x44
 8004064:	4619      	mov	r1, r3
 8004066:	f000 f833 	bl	80040d0 <memcpy>
}
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004072:	b004      	add	sp, #16
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	200001dc 	.word	0x200001dc

0800407c <__errno>:
 800407c:	4b01      	ldr	r3, [pc, #4]	; (8004084 <__errno+0x8>)
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000014 	.word	0x20000014

08004088 <__libc_init_array>:
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	4d0d      	ldr	r5, [pc, #52]	; (80040c0 <__libc_init_array+0x38>)
 800408c:	4c0d      	ldr	r4, [pc, #52]	; (80040c4 <__libc_init_array+0x3c>)
 800408e:	1b64      	subs	r4, r4, r5
 8004090:	10a4      	asrs	r4, r4, #2
 8004092:	2600      	movs	r6, #0
 8004094:	42a6      	cmp	r6, r4
 8004096:	d109      	bne.n	80040ac <__libc_init_array+0x24>
 8004098:	4d0b      	ldr	r5, [pc, #44]	; (80040c8 <__libc_init_array+0x40>)
 800409a:	4c0c      	ldr	r4, [pc, #48]	; (80040cc <__libc_init_array+0x44>)
 800409c:	f000 fc8e 	bl	80049bc <_init>
 80040a0:	1b64      	subs	r4, r4, r5
 80040a2:	10a4      	asrs	r4, r4, #2
 80040a4:	2600      	movs	r6, #0
 80040a6:	42a6      	cmp	r6, r4
 80040a8:	d105      	bne.n	80040b6 <__libc_init_array+0x2e>
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
 80040ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b0:	4798      	blx	r3
 80040b2:	3601      	adds	r6, #1
 80040b4:	e7ee      	b.n	8004094 <__libc_init_array+0xc>
 80040b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ba:	4798      	blx	r3
 80040bc:	3601      	adds	r6, #1
 80040be:	e7f2      	b.n	80040a6 <__libc_init_array+0x1e>
 80040c0:	0800506c 	.word	0x0800506c
 80040c4:	0800506c 	.word	0x0800506c
 80040c8:	0800506c 	.word	0x0800506c
 80040cc:	08005070 	.word	0x08005070

080040d0 <memcpy>:
 80040d0:	440a      	add	r2, r1
 80040d2:	4291      	cmp	r1, r2
 80040d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80040d8:	d100      	bne.n	80040dc <memcpy+0xc>
 80040da:	4770      	bx	lr
 80040dc:	b510      	push	{r4, lr}
 80040de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040e6:	4291      	cmp	r1, r2
 80040e8:	d1f9      	bne.n	80040de <memcpy+0xe>
 80040ea:	bd10      	pop	{r4, pc}

080040ec <memset>:
 80040ec:	4402      	add	r2, r0
 80040ee:	4603      	mov	r3, r0
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d100      	bne.n	80040f6 <memset+0xa>
 80040f4:	4770      	bx	lr
 80040f6:	f803 1b01 	strb.w	r1, [r3], #1
 80040fa:	e7f9      	b.n	80040f0 <memset+0x4>

080040fc <siprintf>:
 80040fc:	b40e      	push	{r1, r2, r3}
 80040fe:	b500      	push	{lr}
 8004100:	b09c      	sub	sp, #112	; 0x70
 8004102:	ab1d      	add	r3, sp, #116	; 0x74
 8004104:	9002      	str	r0, [sp, #8]
 8004106:	9006      	str	r0, [sp, #24]
 8004108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800410c:	4809      	ldr	r0, [pc, #36]	; (8004134 <siprintf+0x38>)
 800410e:	9107      	str	r1, [sp, #28]
 8004110:	9104      	str	r1, [sp, #16]
 8004112:	4909      	ldr	r1, [pc, #36]	; (8004138 <siprintf+0x3c>)
 8004114:	f853 2b04 	ldr.w	r2, [r3], #4
 8004118:	9105      	str	r1, [sp, #20]
 800411a:	6800      	ldr	r0, [r0, #0]
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	a902      	add	r1, sp, #8
 8004120:	f000 f868 	bl	80041f4 <_svfiprintf_r>
 8004124:	9b02      	ldr	r3, [sp, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	b01c      	add	sp, #112	; 0x70
 800412c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004130:	b003      	add	sp, #12
 8004132:	4770      	bx	lr
 8004134:	20000014 	.word	0x20000014
 8004138:	ffff0208 	.word	0xffff0208

0800413c <__ssputs_r>:
 800413c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004140:	688e      	ldr	r6, [r1, #8]
 8004142:	429e      	cmp	r6, r3
 8004144:	4682      	mov	sl, r0
 8004146:	460c      	mov	r4, r1
 8004148:	4690      	mov	r8, r2
 800414a:	461f      	mov	r7, r3
 800414c:	d838      	bhi.n	80041c0 <__ssputs_r+0x84>
 800414e:	898a      	ldrh	r2, [r1, #12]
 8004150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004154:	d032      	beq.n	80041bc <__ssputs_r+0x80>
 8004156:	6825      	ldr	r5, [r4, #0]
 8004158:	6909      	ldr	r1, [r1, #16]
 800415a:	eba5 0901 	sub.w	r9, r5, r1
 800415e:	6965      	ldr	r5, [r4, #20]
 8004160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004168:	3301      	adds	r3, #1
 800416a:	444b      	add	r3, r9
 800416c:	106d      	asrs	r5, r5, #1
 800416e:	429d      	cmp	r5, r3
 8004170:	bf38      	it	cc
 8004172:	461d      	movcc	r5, r3
 8004174:	0553      	lsls	r3, r2, #21
 8004176:	d531      	bpl.n	80041dc <__ssputs_r+0xa0>
 8004178:	4629      	mov	r1, r5
 800417a:	f000 fb55 	bl	8004828 <_malloc_r>
 800417e:	4606      	mov	r6, r0
 8004180:	b950      	cbnz	r0, 8004198 <__ssputs_r+0x5c>
 8004182:	230c      	movs	r3, #12
 8004184:	f8ca 3000 	str.w	r3, [sl]
 8004188:	89a3      	ldrh	r3, [r4, #12]
 800418a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800418e:	81a3      	strh	r3, [r4, #12]
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004198:	6921      	ldr	r1, [r4, #16]
 800419a:	464a      	mov	r2, r9
 800419c:	f7ff ff98 	bl	80040d0 <memcpy>
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041aa:	81a3      	strh	r3, [r4, #12]
 80041ac:	6126      	str	r6, [r4, #16]
 80041ae:	6165      	str	r5, [r4, #20]
 80041b0:	444e      	add	r6, r9
 80041b2:	eba5 0509 	sub.w	r5, r5, r9
 80041b6:	6026      	str	r6, [r4, #0]
 80041b8:	60a5      	str	r5, [r4, #8]
 80041ba:	463e      	mov	r6, r7
 80041bc:	42be      	cmp	r6, r7
 80041be:	d900      	bls.n	80041c2 <__ssputs_r+0x86>
 80041c0:	463e      	mov	r6, r7
 80041c2:	6820      	ldr	r0, [r4, #0]
 80041c4:	4632      	mov	r2, r6
 80041c6:	4641      	mov	r1, r8
 80041c8:	f000 faa8 	bl	800471c <memmove>
 80041cc:	68a3      	ldr	r3, [r4, #8]
 80041ce:	1b9b      	subs	r3, r3, r6
 80041d0:	60a3      	str	r3, [r4, #8]
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	4433      	add	r3, r6
 80041d6:	6023      	str	r3, [r4, #0]
 80041d8:	2000      	movs	r0, #0
 80041da:	e7db      	b.n	8004194 <__ssputs_r+0x58>
 80041dc:	462a      	mov	r2, r5
 80041de:	f000 fb97 	bl	8004910 <_realloc_r>
 80041e2:	4606      	mov	r6, r0
 80041e4:	2800      	cmp	r0, #0
 80041e6:	d1e1      	bne.n	80041ac <__ssputs_r+0x70>
 80041e8:	6921      	ldr	r1, [r4, #16]
 80041ea:	4650      	mov	r0, sl
 80041ec:	f000 fab0 	bl	8004750 <_free_r>
 80041f0:	e7c7      	b.n	8004182 <__ssputs_r+0x46>
	...

080041f4 <_svfiprintf_r>:
 80041f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f8:	4698      	mov	r8, r3
 80041fa:	898b      	ldrh	r3, [r1, #12]
 80041fc:	061b      	lsls	r3, r3, #24
 80041fe:	b09d      	sub	sp, #116	; 0x74
 8004200:	4607      	mov	r7, r0
 8004202:	460d      	mov	r5, r1
 8004204:	4614      	mov	r4, r2
 8004206:	d50e      	bpl.n	8004226 <_svfiprintf_r+0x32>
 8004208:	690b      	ldr	r3, [r1, #16]
 800420a:	b963      	cbnz	r3, 8004226 <_svfiprintf_r+0x32>
 800420c:	2140      	movs	r1, #64	; 0x40
 800420e:	f000 fb0b 	bl	8004828 <_malloc_r>
 8004212:	6028      	str	r0, [r5, #0]
 8004214:	6128      	str	r0, [r5, #16]
 8004216:	b920      	cbnz	r0, 8004222 <_svfiprintf_r+0x2e>
 8004218:	230c      	movs	r3, #12
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	e0d1      	b.n	80043c6 <_svfiprintf_r+0x1d2>
 8004222:	2340      	movs	r3, #64	; 0x40
 8004224:	616b      	str	r3, [r5, #20]
 8004226:	2300      	movs	r3, #0
 8004228:	9309      	str	r3, [sp, #36]	; 0x24
 800422a:	2320      	movs	r3, #32
 800422c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004230:	f8cd 800c 	str.w	r8, [sp, #12]
 8004234:	2330      	movs	r3, #48	; 0x30
 8004236:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043e0 <_svfiprintf_r+0x1ec>
 800423a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800423e:	f04f 0901 	mov.w	r9, #1
 8004242:	4623      	mov	r3, r4
 8004244:	469a      	mov	sl, r3
 8004246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800424a:	b10a      	cbz	r2, 8004250 <_svfiprintf_r+0x5c>
 800424c:	2a25      	cmp	r2, #37	; 0x25
 800424e:	d1f9      	bne.n	8004244 <_svfiprintf_r+0x50>
 8004250:	ebba 0b04 	subs.w	fp, sl, r4
 8004254:	d00b      	beq.n	800426e <_svfiprintf_r+0x7a>
 8004256:	465b      	mov	r3, fp
 8004258:	4622      	mov	r2, r4
 800425a:	4629      	mov	r1, r5
 800425c:	4638      	mov	r0, r7
 800425e:	f7ff ff6d 	bl	800413c <__ssputs_r>
 8004262:	3001      	adds	r0, #1
 8004264:	f000 80aa 	beq.w	80043bc <_svfiprintf_r+0x1c8>
 8004268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800426a:	445a      	add	r2, fp
 800426c:	9209      	str	r2, [sp, #36]	; 0x24
 800426e:	f89a 3000 	ldrb.w	r3, [sl]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80a2 	beq.w	80043bc <_svfiprintf_r+0x1c8>
 8004278:	2300      	movs	r3, #0
 800427a:	f04f 32ff 	mov.w	r2, #4294967295
 800427e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004282:	f10a 0a01 	add.w	sl, sl, #1
 8004286:	9304      	str	r3, [sp, #16]
 8004288:	9307      	str	r3, [sp, #28]
 800428a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800428e:	931a      	str	r3, [sp, #104]	; 0x68
 8004290:	4654      	mov	r4, sl
 8004292:	2205      	movs	r2, #5
 8004294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004298:	4851      	ldr	r0, [pc, #324]	; (80043e0 <_svfiprintf_r+0x1ec>)
 800429a:	f7fb ffa1 	bl	80001e0 <memchr>
 800429e:	9a04      	ldr	r2, [sp, #16]
 80042a0:	b9d8      	cbnz	r0, 80042da <_svfiprintf_r+0xe6>
 80042a2:	06d0      	lsls	r0, r2, #27
 80042a4:	bf44      	itt	mi
 80042a6:	2320      	movmi	r3, #32
 80042a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ac:	0711      	lsls	r1, r2, #28
 80042ae:	bf44      	itt	mi
 80042b0:	232b      	movmi	r3, #43	; 0x2b
 80042b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042b6:	f89a 3000 	ldrb.w	r3, [sl]
 80042ba:	2b2a      	cmp	r3, #42	; 0x2a
 80042bc:	d015      	beq.n	80042ea <_svfiprintf_r+0xf6>
 80042be:	9a07      	ldr	r2, [sp, #28]
 80042c0:	4654      	mov	r4, sl
 80042c2:	2000      	movs	r0, #0
 80042c4:	f04f 0c0a 	mov.w	ip, #10
 80042c8:	4621      	mov	r1, r4
 80042ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042ce:	3b30      	subs	r3, #48	; 0x30
 80042d0:	2b09      	cmp	r3, #9
 80042d2:	d94e      	bls.n	8004372 <_svfiprintf_r+0x17e>
 80042d4:	b1b0      	cbz	r0, 8004304 <_svfiprintf_r+0x110>
 80042d6:	9207      	str	r2, [sp, #28]
 80042d8:	e014      	b.n	8004304 <_svfiprintf_r+0x110>
 80042da:	eba0 0308 	sub.w	r3, r0, r8
 80042de:	fa09 f303 	lsl.w	r3, r9, r3
 80042e2:	4313      	orrs	r3, r2
 80042e4:	9304      	str	r3, [sp, #16]
 80042e6:	46a2      	mov	sl, r4
 80042e8:	e7d2      	b.n	8004290 <_svfiprintf_r+0x9c>
 80042ea:	9b03      	ldr	r3, [sp, #12]
 80042ec:	1d19      	adds	r1, r3, #4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	9103      	str	r1, [sp, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	bfbb      	ittet	lt
 80042f6:	425b      	neglt	r3, r3
 80042f8:	f042 0202 	orrlt.w	r2, r2, #2
 80042fc:	9307      	strge	r3, [sp, #28]
 80042fe:	9307      	strlt	r3, [sp, #28]
 8004300:	bfb8      	it	lt
 8004302:	9204      	strlt	r2, [sp, #16]
 8004304:	7823      	ldrb	r3, [r4, #0]
 8004306:	2b2e      	cmp	r3, #46	; 0x2e
 8004308:	d10c      	bne.n	8004324 <_svfiprintf_r+0x130>
 800430a:	7863      	ldrb	r3, [r4, #1]
 800430c:	2b2a      	cmp	r3, #42	; 0x2a
 800430e:	d135      	bne.n	800437c <_svfiprintf_r+0x188>
 8004310:	9b03      	ldr	r3, [sp, #12]
 8004312:	1d1a      	adds	r2, r3, #4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	9203      	str	r2, [sp, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	bfb8      	it	lt
 800431c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004320:	3402      	adds	r4, #2
 8004322:	9305      	str	r3, [sp, #20]
 8004324:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043f0 <_svfiprintf_r+0x1fc>
 8004328:	7821      	ldrb	r1, [r4, #0]
 800432a:	2203      	movs	r2, #3
 800432c:	4650      	mov	r0, sl
 800432e:	f7fb ff57 	bl	80001e0 <memchr>
 8004332:	b140      	cbz	r0, 8004346 <_svfiprintf_r+0x152>
 8004334:	2340      	movs	r3, #64	; 0x40
 8004336:	eba0 000a 	sub.w	r0, r0, sl
 800433a:	fa03 f000 	lsl.w	r0, r3, r0
 800433e:	9b04      	ldr	r3, [sp, #16]
 8004340:	4303      	orrs	r3, r0
 8004342:	3401      	adds	r4, #1
 8004344:	9304      	str	r3, [sp, #16]
 8004346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800434a:	4826      	ldr	r0, [pc, #152]	; (80043e4 <_svfiprintf_r+0x1f0>)
 800434c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004350:	2206      	movs	r2, #6
 8004352:	f7fb ff45 	bl	80001e0 <memchr>
 8004356:	2800      	cmp	r0, #0
 8004358:	d038      	beq.n	80043cc <_svfiprintf_r+0x1d8>
 800435a:	4b23      	ldr	r3, [pc, #140]	; (80043e8 <_svfiprintf_r+0x1f4>)
 800435c:	bb1b      	cbnz	r3, 80043a6 <_svfiprintf_r+0x1b2>
 800435e:	9b03      	ldr	r3, [sp, #12]
 8004360:	3307      	adds	r3, #7
 8004362:	f023 0307 	bic.w	r3, r3, #7
 8004366:	3308      	adds	r3, #8
 8004368:	9303      	str	r3, [sp, #12]
 800436a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800436c:	4433      	add	r3, r6
 800436e:	9309      	str	r3, [sp, #36]	; 0x24
 8004370:	e767      	b.n	8004242 <_svfiprintf_r+0x4e>
 8004372:	fb0c 3202 	mla	r2, ip, r2, r3
 8004376:	460c      	mov	r4, r1
 8004378:	2001      	movs	r0, #1
 800437a:	e7a5      	b.n	80042c8 <_svfiprintf_r+0xd4>
 800437c:	2300      	movs	r3, #0
 800437e:	3401      	adds	r4, #1
 8004380:	9305      	str	r3, [sp, #20]
 8004382:	4619      	mov	r1, r3
 8004384:	f04f 0c0a 	mov.w	ip, #10
 8004388:	4620      	mov	r0, r4
 800438a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800438e:	3a30      	subs	r2, #48	; 0x30
 8004390:	2a09      	cmp	r2, #9
 8004392:	d903      	bls.n	800439c <_svfiprintf_r+0x1a8>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0c5      	beq.n	8004324 <_svfiprintf_r+0x130>
 8004398:	9105      	str	r1, [sp, #20]
 800439a:	e7c3      	b.n	8004324 <_svfiprintf_r+0x130>
 800439c:	fb0c 2101 	mla	r1, ip, r1, r2
 80043a0:	4604      	mov	r4, r0
 80043a2:	2301      	movs	r3, #1
 80043a4:	e7f0      	b.n	8004388 <_svfiprintf_r+0x194>
 80043a6:	ab03      	add	r3, sp, #12
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	462a      	mov	r2, r5
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <_svfiprintf_r+0x1f8>)
 80043ae:	a904      	add	r1, sp, #16
 80043b0:	4638      	mov	r0, r7
 80043b2:	f3af 8000 	nop.w
 80043b6:	1c42      	adds	r2, r0, #1
 80043b8:	4606      	mov	r6, r0
 80043ba:	d1d6      	bne.n	800436a <_svfiprintf_r+0x176>
 80043bc:	89ab      	ldrh	r3, [r5, #12]
 80043be:	065b      	lsls	r3, r3, #25
 80043c0:	f53f af2c 	bmi.w	800421c <_svfiprintf_r+0x28>
 80043c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043c6:	b01d      	add	sp, #116	; 0x74
 80043c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043cc:	ab03      	add	r3, sp, #12
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	462a      	mov	r2, r5
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <_svfiprintf_r+0x1f8>)
 80043d4:	a904      	add	r1, sp, #16
 80043d6:	4638      	mov	r0, r7
 80043d8:	f000 f87a 	bl	80044d0 <_printf_i>
 80043dc:	e7eb      	b.n	80043b6 <_svfiprintf_r+0x1c2>
 80043de:	bf00      	nop
 80043e0:	0800502e 	.word	0x0800502e
 80043e4:	08005038 	.word	0x08005038
 80043e8:	00000000 	.word	0x00000000
 80043ec:	0800413d 	.word	0x0800413d
 80043f0:	08005034 	.word	0x08005034

080043f4 <_printf_common>:
 80043f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f8:	4616      	mov	r6, r2
 80043fa:	4699      	mov	r9, r3
 80043fc:	688a      	ldr	r2, [r1, #8]
 80043fe:	690b      	ldr	r3, [r1, #16]
 8004400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004404:	4293      	cmp	r3, r2
 8004406:	bfb8      	it	lt
 8004408:	4613      	movlt	r3, r2
 800440a:	6033      	str	r3, [r6, #0]
 800440c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004410:	4607      	mov	r7, r0
 8004412:	460c      	mov	r4, r1
 8004414:	b10a      	cbz	r2, 800441a <_printf_common+0x26>
 8004416:	3301      	adds	r3, #1
 8004418:	6033      	str	r3, [r6, #0]
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	0699      	lsls	r1, r3, #26
 800441e:	bf42      	ittt	mi
 8004420:	6833      	ldrmi	r3, [r6, #0]
 8004422:	3302      	addmi	r3, #2
 8004424:	6033      	strmi	r3, [r6, #0]
 8004426:	6825      	ldr	r5, [r4, #0]
 8004428:	f015 0506 	ands.w	r5, r5, #6
 800442c:	d106      	bne.n	800443c <_printf_common+0x48>
 800442e:	f104 0a19 	add.w	sl, r4, #25
 8004432:	68e3      	ldr	r3, [r4, #12]
 8004434:	6832      	ldr	r2, [r6, #0]
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	42ab      	cmp	r3, r5
 800443a:	dc26      	bgt.n	800448a <_printf_common+0x96>
 800443c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004440:	1e13      	subs	r3, r2, #0
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	bf18      	it	ne
 8004446:	2301      	movne	r3, #1
 8004448:	0692      	lsls	r2, r2, #26
 800444a:	d42b      	bmi.n	80044a4 <_printf_common+0xb0>
 800444c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004450:	4649      	mov	r1, r9
 8004452:	4638      	mov	r0, r7
 8004454:	47c0      	blx	r8
 8004456:	3001      	adds	r0, #1
 8004458:	d01e      	beq.n	8004498 <_printf_common+0xa4>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	68e5      	ldr	r5, [r4, #12]
 800445e:	6832      	ldr	r2, [r6, #0]
 8004460:	f003 0306 	and.w	r3, r3, #6
 8004464:	2b04      	cmp	r3, #4
 8004466:	bf08      	it	eq
 8004468:	1aad      	subeq	r5, r5, r2
 800446a:	68a3      	ldr	r3, [r4, #8]
 800446c:	6922      	ldr	r2, [r4, #16]
 800446e:	bf0c      	ite	eq
 8004470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004474:	2500      	movne	r5, #0
 8004476:	4293      	cmp	r3, r2
 8004478:	bfc4      	itt	gt
 800447a:	1a9b      	subgt	r3, r3, r2
 800447c:	18ed      	addgt	r5, r5, r3
 800447e:	2600      	movs	r6, #0
 8004480:	341a      	adds	r4, #26
 8004482:	42b5      	cmp	r5, r6
 8004484:	d11a      	bne.n	80044bc <_printf_common+0xc8>
 8004486:	2000      	movs	r0, #0
 8004488:	e008      	b.n	800449c <_printf_common+0xa8>
 800448a:	2301      	movs	r3, #1
 800448c:	4652      	mov	r2, sl
 800448e:	4649      	mov	r1, r9
 8004490:	4638      	mov	r0, r7
 8004492:	47c0      	blx	r8
 8004494:	3001      	adds	r0, #1
 8004496:	d103      	bne.n	80044a0 <_printf_common+0xac>
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a0:	3501      	adds	r5, #1
 80044a2:	e7c6      	b.n	8004432 <_printf_common+0x3e>
 80044a4:	18e1      	adds	r1, r4, r3
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	2030      	movs	r0, #48	; 0x30
 80044aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044ae:	4422      	add	r2, r4
 80044b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044b8:	3302      	adds	r3, #2
 80044ba:	e7c7      	b.n	800444c <_printf_common+0x58>
 80044bc:	2301      	movs	r3, #1
 80044be:	4622      	mov	r2, r4
 80044c0:	4649      	mov	r1, r9
 80044c2:	4638      	mov	r0, r7
 80044c4:	47c0      	blx	r8
 80044c6:	3001      	adds	r0, #1
 80044c8:	d0e6      	beq.n	8004498 <_printf_common+0xa4>
 80044ca:	3601      	adds	r6, #1
 80044cc:	e7d9      	b.n	8004482 <_printf_common+0x8e>
	...

080044d0 <_printf_i>:
 80044d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	7e0f      	ldrb	r7, [r1, #24]
 80044d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044d8:	2f78      	cmp	r7, #120	; 0x78
 80044da:	4691      	mov	r9, r2
 80044dc:	4680      	mov	r8, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	469a      	mov	sl, r3
 80044e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044e6:	d807      	bhi.n	80044f8 <_printf_i+0x28>
 80044e8:	2f62      	cmp	r7, #98	; 0x62
 80044ea:	d80a      	bhi.n	8004502 <_printf_i+0x32>
 80044ec:	2f00      	cmp	r7, #0
 80044ee:	f000 80d8 	beq.w	80046a2 <_printf_i+0x1d2>
 80044f2:	2f58      	cmp	r7, #88	; 0x58
 80044f4:	f000 80a3 	beq.w	800463e <_printf_i+0x16e>
 80044f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004500:	e03a      	b.n	8004578 <_printf_i+0xa8>
 8004502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004506:	2b15      	cmp	r3, #21
 8004508:	d8f6      	bhi.n	80044f8 <_printf_i+0x28>
 800450a:	a101      	add	r1, pc, #4	; (adr r1, 8004510 <_printf_i+0x40>)
 800450c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004510:	08004569 	.word	0x08004569
 8004514:	0800457d 	.word	0x0800457d
 8004518:	080044f9 	.word	0x080044f9
 800451c:	080044f9 	.word	0x080044f9
 8004520:	080044f9 	.word	0x080044f9
 8004524:	080044f9 	.word	0x080044f9
 8004528:	0800457d 	.word	0x0800457d
 800452c:	080044f9 	.word	0x080044f9
 8004530:	080044f9 	.word	0x080044f9
 8004534:	080044f9 	.word	0x080044f9
 8004538:	080044f9 	.word	0x080044f9
 800453c:	08004689 	.word	0x08004689
 8004540:	080045ad 	.word	0x080045ad
 8004544:	0800466b 	.word	0x0800466b
 8004548:	080044f9 	.word	0x080044f9
 800454c:	080044f9 	.word	0x080044f9
 8004550:	080046ab 	.word	0x080046ab
 8004554:	080044f9 	.word	0x080044f9
 8004558:	080045ad 	.word	0x080045ad
 800455c:	080044f9 	.word	0x080044f9
 8004560:	080044f9 	.word	0x080044f9
 8004564:	08004673 	.word	0x08004673
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	1d1a      	adds	r2, r3, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	602a      	str	r2, [r5, #0]
 8004570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004578:	2301      	movs	r3, #1
 800457a:	e0a3      	b.n	80046c4 <_printf_i+0x1f4>
 800457c:	6820      	ldr	r0, [r4, #0]
 800457e:	6829      	ldr	r1, [r5, #0]
 8004580:	0606      	lsls	r6, r0, #24
 8004582:	f101 0304 	add.w	r3, r1, #4
 8004586:	d50a      	bpl.n	800459e <_printf_i+0xce>
 8004588:	680e      	ldr	r6, [r1, #0]
 800458a:	602b      	str	r3, [r5, #0]
 800458c:	2e00      	cmp	r6, #0
 800458e:	da03      	bge.n	8004598 <_printf_i+0xc8>
 8004590:	232d      	movs	r3, #45	; 0x2d
 8004592:	4276      	negs	r6, r6
 8004594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004598:	485e      	ldr	r0, [pc, #376]	; (8004714 <_printf_i+0x244>)
 800459a:	230a      	movs	r3, #10
 800459c:	e019      	b.n	80045d2 <_printf_i+0x102>
 800459e:	680e      	ldr	r6, [r1, #0]
 80045a0:	602b      	str	r3, [r5, #0]
 80045a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045a6:	bf18      	it	ne
 80045a8:	b236      	sxthne	r6, r6
 80045aa:	e7ef      	b.n	800458c <_printf_i+0xbc>
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	6820      	ldr	r0, [r4, #0]
 80045b0:	1d19      	adds	r1, r3, #4
 80045b2:	6029      	str	r1, [r5, #0]
 80045b4:	0601      	lsls	r1, r0, #24
 80045b6:	d501      	bpl.n	80045bc <_printf_i+0xec>
 80045b8:	681e      	ldr	r6, [r3, #0]
 80045ba:	e002      	b.n	80045c2 <_printf_i+0xf2>
 80045bc:	0646      	lsls	r6, r0, #25
 80045be:	d5fb      	bpl.n	80045b8 <_printf_i+0xe8>
 80045c0:	881e      	ldrh	r6, [r3, #0]
 80045c2:	4854      	ldr	r0, [pc, #336]	; (8004714 <_printf_i+0x244>)
 80045c4:	2f6f      	cmp	r7, #111	; 0x6f
 80045c6:	bf0c      	ite	eq
 80045c8:	2308      	moveq	r3, #8
 80045ca:	230a      	movne	r3, #10
 80045cc:	2100      	movs	r1, #0
 80045ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045d2:	6865      	ldr	r5, [r4, #4]
 80045d4:	60a5      	str	r5, [r4, #8]
 80045d6:	2d00      	cmp	r5, #0
 80045d8:	bfa2      	ittt	ge
 80045da:	6821      	ldrge	r1, [r4, #0]
 80045dc:	f021 0104 	bicge.w	r1, r1, #4
 80045e0:	6021      	strge	r1, [r4, #0]
 80045e2:	b90e      	cbnz	r6, 80045e8 <_printf_i+0x118>
 80045e4:	2d00      	cmp	r5, #0
 80045e6:	d04d      	beq.n	8004684 <_printf_i+0x1b4>
 80045e8:	4615      	mov	r5, r2
 80045ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80045ee:	fb03 6711 	mls	r7, r3, r1, r6
 80045f2:	5dc7      	ldrb	r7, [r0, r7]
 80045f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045f8:	4637      	mov	r7, r6
 80045fa:	42bb      	cmp	r3, r7
 80045fc:	460e      	mov	r6, r1
 80045fe:	d9f4      	bls.n	80045ea <_printf_i+0x11a>
 8004600:	2b08      	cmp	r3, #8
 8004602:	d10b      	bne.n	800461c <_printf_i+0x14c>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	07de      	lsls	r6, r3, #31
 8004608:	d508      	bpl.n	800461c <_printf_i+0x14c>
 800460a:	6923      	ldr	r3, [r4, #16]
 800460c:	6861      	ldr	r1, [r4, #4]
 800460e:	4299      	cmp	r1, r3
 8004610:	bfde      	ittt	le
 8004612:	2330      	movle	r3, #48	; 0x30
 8004614:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004618:	f105 35ff 	addle.w	r5, r5, #4294967295
 800461c:	1b52      	subs	r2, r2, r5
 800461e:	6122      	str	r2, [r4, #16]
 8004620:	f8cd a000 	str.w	sl, [sp]
 8004624:	464b      	mov	r3, r9
 8004626:	aa03      	add	r2, sp, #12
 8004628:	4621      	mov	r1, r4
 800462a:	4640      	mov	r0, r8
 800462c:	f7ff fee2 	bl	80043f4 <_printf_common>
 8004630:	3001      	adds	r0, #1
 8004632:	d14c      	bne.n	80046ce <_printf_i+0x1fe>
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	b004      	add	sp, #16
 800463a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463e:	4835      	ldr	r0, [pc, #212]	; (8004714 <_printf_i+0x244>)
 8004640:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004644:	6829      	ldr	r1, [r5, #0]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	f851 6b04 	ldr.w	r6, [r1], #4
 800464c:	6029      	str	r1, [r5, #0]
 800464e:	061d      	lsls	r5, r3, #24
 8004650:	d514      	bpl.n	800467c <_printf_i+0x1ac>
 8004652:	07df      	lsls	r7, r3, #31
 8004654:	bf44      	itt	mi
 8004656:	f043 0320 	orrmi.w	r3, r3, #32
 800465a:	6023      	strmi	r3, [r4, #0]
 800465c:	b91e      	cbnz	r6, 8004666 <_printf_i+0x196>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	f023 0320 	bic.w	r3, r3, #32
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	2310      	movs	r3, #16
 8004668:	e7b0      	b.n	80045cc <_printf_i+0xfc>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	f043 0320 	orr.w	r3, r3, #32
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	2378      	movs	r3, #120	; 0x78
 8004674:	4828      	ldr	r0, [pc, #160]	; (8004718 <_printf_i+0x248>)
 8004676:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800467a:	e7e3      	b.n	8004644 <_printf_i+0x174>
 800467c:	0659      	lsls	r1, r3, #25
 800467e:	bf48      	it	mi
 8004680:	b2b6      	uxthmi	r6, r6
 8004682:	e7e6      	b.n	8004652 <_printf_i+0x182>
 8004684:	4615      	mov	r5, r2
 8004686:	e7bb      	b.n	8004600 <_printf_i+0x130>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	6826      	ldr	r6, [r4, #0]
 800468c:	6961      	ldr	r1, [r4, #20]
 800468e:	1d18      	adds	r0, r3, #4
 8004690:	6028      	str	r0, [r5, #0]
 8004692:	0635      	lsls	r5, r6, #24
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	d501      	bpl.n	800469c <_printf_i+0x1cc>
 8004698:	6019      	str	r1, [r3, #0]
 800469a:	e002      	b.n	80046a2 <_printf_i+0x1d2>
 800469c:	0670      	lsls	r0, r6, #25
 800469e:	d5fb      	bpl.n	8004698 <_printf_i+0x1c8>
 80046a0:	8019      	strh	r1, [r3, #0]
 80046a2:	2300      	movs	r3, #0
 80046a4:	6123      	str	r3, [r4, #16]
 80046a6:	4615      	mov	r5, r2
 80046a8:	e7ba      	b.n	8004620 <_printf_i+0x150>
 80046aa:	682b      	ldr	r3, [r5, #0]
 80046ac:	1d1a      	adds	r2, r3, #4
 80046ae:	602a      	str	r2, [r5, #0]
 80046b0:	681d      	ldr	r5, [r3, #0]
 80046b2:	6862      	ldr	r2, [r4, #4]
 80046b4:	2100      	movs	r1, #0
 80046b6:	4628      	mov	r0, r5
 80046b8:	f7fb fd92 	bl	80001e0 <memchr>
 80046bc:	b108      	cbz	r0, 80046c2 <_printf_i+0x1f2>
 80046be:	1b40      	subs	r0, r0, r5
 80046c0:	6060      	str	r0, [r4, #4]
 80046c2:	6863      	ldr	r3, [r4, #4]
 80046c4:	6123      	str	r3, [r4, #16]
 80046c6:	2300      	movs	r3, #0
 80046c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046cc:	e7a8      	b.n	8004620 <_printf_i+0x150>
 80046ce:	6923      	ldr	r3, [r4, #16]
 80046d0:	462a      	mov	r2, r5
 80046d2:	4649      	mov	r1, r9
 80046d4:	4640      	mov	r0, r8
 80046d6:	47d0      	blx	sl
 80046d8:	3001      	adds	r0, #1
 80046da:	d0ab      	beq.n	8004634 <_printf_i+0x164>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	079b      	lsls	r3, r3, #30
 80046e0:	d413      	bmi.n	800470a <_printf_i+0x23a>
 80046e2:	68e0      	ldr	r0, [r4, #12]
 80046e4:	9b03      	ldr	r3, [sp, #12]
 80046e6:	4298      	cmp	r0, r3
 80046e8:	bfb8      	it	lt
 80046ea:	4618      	movlt	r0, r3
 80046ec:	e7a4      	b.n	8004638 <_printf_i+0x168>
 80046ee:	2301      	movs	r3, #1
 80046f0:	4632      	mov	r2, r6
 80046f2:	4649      	mov	r1, r9
 80046f4:	4640      	mov	r0, r8
 80046f6:	47d0      	blx	sl
 80046f8:	3001      	adds	r0, #1
 80046fa:	d09b      	beq.n	8004634 <_printf_i+0x164>
 80046fc:	3501      	adds	r5, #1
 80046fe:	68e3      	ldr	r3, [r4, #12]
 8004700:	9903      	ldr	r1, [sp, #12]
 8004702:	1a5b      	subs	r3, r3, r1
 8004704:	42ab      	cmp	r3, r5
 8004706:	dcf2      	bgt.n	80046ee <_printf_i+0x21e>
 8004708:	e7eb      	b.n	80046e2 <_printf_i+0x212>
 800470a:	2500      	movs	r5, #0
 800470c:	f104 0619 	add.w	r6, r4, #25
 8004710:	e7f5      	b.n	80046fe <_printf_i+0x22e>
 8004712:	bf00      	nop
 8004714:	0800503f 	.word	0x0800503f
 8004718:	08005050 	.word	0x08005050

0800471c <memmove>:
 800471c:	4288      	cmp	r0, r1
 800471e:	b510      	push	{r4, lr}
 8004720:	eb01 0402 	add.w	r4, r1, r2
 8004724:	d902      	bls.n	800472c <memmove+0x10>
 8004726:	4284      	cmp	r4, r0
 8004728:	4623      	mov	r3, r4
 800472a:	d807      	bhi.n	800473c <memmove+0x20>
 800472c:	1e43      	subs	r3, r0, #1
 800472e:	42a1      	cmp	r1, r4
 8004730:	d008      	beq.n	8004744 <memmove+0x28>
 8004732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800473a:	e7f8      	b.n	800472e <memmove+0x12>
 800473c:	4402      	add	r2, r0
 800473e:	4601      	mov	r1, r0
 8004740:	428a      	cmp	r2, r1
 8004742:	d100      	bne.n	8004746 <memmove+0x2a>
 8004744:	bd10      	pop	{r4, pc}
 8004746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800474a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800474e:	e7f7      	b.n	8004740 <memmove+0x24>

08004750 <_free_r>:
 8004750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004752:	2900      	cmp	r1, #0
 8004754:	d044      	beq.n	80047e0 <_free_r+0x90>
 8004756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800475a:	9001      	str	r0, [sp, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f1a1 0404 	sub.w	r4, r1, #4
 8004762:	bfb8      	it	lt
 8004764:	18e4      	addlt	r4, r4, r3
 8004766:	f000 f913 	bl	8004990 <__malloc_lock>
 800476a:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <_free_r+0x94>)
 800476c:	9801      	ldr	r0, [sp, #4]
 800476e:	6813      	ldr	r3, [r2, #0]
 8004770:	b933      	cbnz	r3, 8004780 <_free_r+0x30>
 8004772:	6063      	str	r3, [r4, #4]
 8004774:	6014      	str	r4, [r2, #0]
 8004776:	b003      	add	sp, #12
 8004778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800477c:	f000 b90e 	b.w	800499c <__malloc_unlock>
 8004780:	42a3      	cmp	r3, r4
 8004782:	d908      	bls.n	8004796 <_free_r+0x46>
 8004784:	6825      	ldr	r5, [r4, #0]
 8004786:	1961      	adds	r1, r4, r5
 8004788:	428b      	cmp	r3, r1
 800478a:	bf01      	itttt	eq
 800478c:	6819      	ldreq	r1, [r3, #0]
 800478e:	685b      	ldreq	r3, [r3, #4]
 8004790:	1949      	addeq	r1, r1, r5
 8004792:	6021      	streq	r1, [r4, #0]
 8004794:	e7ed      	b.n	8004772 <_free_r+0x22>
 8004796:	461a      	mov	r2, r3
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	b10b      	cbz	r3, 80047a0 <_free_r+0x50>
 800479c:	42a3      	cmp	r3, r4
 800479e:	d9fa      	bls.n	8004796 <_free_r+0x46>
 80047a0:	6811      	ldr	r1, [r2, #0]
 80047a2:	1855      	adds	r5, r2, r1
 80047a4:	42a5      	cmp	r5, r4
 80047a6:	d10b      	bne.n	80047c0 <_free_r+0x70>
 80047a8:	6824      	ldr	r4, [r4, #0]
 80047aa:	4421      	add	r1, r4
 80047ac:	1854      	adds	r4, r2, r1
 80047ae:	42a3      	cmp	r3, r4
 80047b0:	6011      	str	r1, [r2, #0]
 80047b2:	d1e0      	bne.n	8004776 <_free_r+0x26>
 80047b4:	681c      	ldr	r4, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	6053      	str	r3, [r2, #4]
 80047ba:	4421      	add	r1, r4
 80047bc:	6011      	str	r1, [r2, #0]
 80047be:	e7da      	b.n	8004776 <_free_r+0x26>
 80047c0:	d902      	bls.n	80047c8 <_free_r+0x78>
 80047c2:	230c      	movs	r3, #12
 80047c4:	6003      	str	r3, [r0, #0]
 80047c6:	e7d6      	b.n	8004776 <_free_r+0x26>
 80047c8:	6825      	ldr	r5, [r4, #0]
 80047ca:	1961      	adds	r1, r4, r5
 80047cc:	428b      	cmp	r3, r1
 80047ce:	bf04      	itt	eq
 80047d0:	6819      	ldreq	r1, [r3, #0]
 80047d2:	685b      	ldreq	r3, [r3, #4]
 80047d4:	6063      	str	r3, [r4, #4]
 80047d6:	bf04      	itt	eq
 80047d8:	1949      	addeq	r1, r1, r5
 80047da:	6021      	streq	r1, [r4, #0]
 80047dc:	6054      	str	r4, [r2, #4]
 80047de:	e7ca      	b.n	8004776 <_free_r+0x26>
 80047e0:	b003      	add	sp, #12
 80047e2:	bd30      	pop	{r4, r5, pc}
 80047e4:	20000220 	.word	0x20000220

080047e8 <sbrk_aligned>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	4e0e      	ldr	r6, [pc, #56]	; (8004824 <sbrk_aligned+0x3c>)
 80047ec:	460c      	mov	r4, r1
 80047ee:	6831      	ldr	r1, [r6, #0]
 80047f0:	4605      	mov	r5, r0
 80047f2:	b911      	cbnz	r1, 80047fa <sbrk_aligned+0x12>
 80047f4:	f000 f8bc 	bl	8004970 <_sbrk_r>
 80047f8:	6030      	str	r0, [r6, #0]
 80047fa:	4621      	mov	r1, r4
 80047fc:	4628      	mov	r0, r5
 80047fe:	f000 f8b7 	bl	8004970 <_sbrk_r>
 8004802:	1c43      	adds	r3, r0, #1
 8004804:	d00a      	beq.n	800481c <sbrk_aligned+0x34>
 8004806:	1cc4      	adds	r4, r0, #3
 8004808:	f024 0403 	bic.w	r4, r4, #3
 800480c:	42a0      	cmp	r0, r4
 800480e:	d007      	beq.n	8004820 <sbrk_aligned+0x38>
 8004810:	1a21      	subs	r1, r4, r0
 8004812:	4628      	mov	r0, r5
 8004814:	f000 f8ac 	bl	8004970 <_sbrk_r>
 8004818:	3001      	adds	r0, #1
 800481a:	d101      	bne.n	8004820 <sbrk_aligned+0x38>
 800481c:	f04f 34ff 	mov.w	r4, #4294967295
 8004820:	4620      	mov	r0, r4
 8004822:	bd70      	pop	{r4, r5, r6, pc}
 8004824:	20000224 	.word	0x20000224

08004828 <_malloc_r>:
 8004828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482c:	1ccd      	adds	r5, r1, #3
 800482e:	f025 0503 	bic.w	r5, r5, #3
 8004832:	3508      	adds	r5, #8
 8004834:	2d0c      	cmp	r5, #12
 8004836:	bf38      	it	cc
 8004838:	250c      	movcc	r5, #12
 800483a:	2d00      	cmp	r5, #0
 800483c:	4607      	mov	r7, r0
 800483e:	db01      	blt.n	8004844 <_malloc_r+0x1c>
 8004840:	42a9      	cmp	r1, r5
 8004842:	d905      	bls.n	8004850 <_malloc_r+0x28>
 8004844:	230c      	movs	r3, #12
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	2600      	movs	r6, #0
 800484a:	4630      	mov	r0, r6
 800484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004850:	4e2e      	ldr	r6, [pc, #184]	; (800490c <_malloc_r+0xe4>)
 8004852:	f000 f89d 	bl	8004990 <__malloc_lock>
 8004856:	6833      	ldr	r3, [r6, #0]
 8004858:	461c      	mov	r4, r3
 800485a:	bb34      	cbnz	r4, 80048aa <_malloc_r+0x82>
 800485c:	4629      	mov	r1, r5
 800485e:	4638      	mov	r0, r7
 8004860:	f7ff ffc2 	bl	80047e8 <sbrk_aligned>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	4604      	mov	r4, r0
 8004868:	d14d      	bne.n	8004906 <_malloc_r+0xde>
 800486a:	6834      	ldr	r4, [r6, #0]
 800486c:	4626      	mov	r6, r4
 800486e:	2e00      	cmp	r6, #0
 8004870:	d140      	bne.n	80048f4 <_malloc_r+0xcc>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	4631      	mov	r1, r6
 8004876:	4638      	mov	r0, r7
 8004878:	eb04 0803 	add.w	r8, r4, r3
 800487c:	f000 f878 	bl	8004970 <_sbrk_r>
 8004880:	4580      	cmp	r8, r0
 8004882:	d13a      	bne.n	80048fa <_malloc_r+0xd2>
 8004884:	6821      	ldr	r1, [r4, #0]
 8004886:	3503      	adds	r5, #3
 8004888:	1a6d      	subs	r5, r5, r1
 800488a:	f025 0503 	bic.w	r5, r5, #3
 800488e:	3508      	adds	r5, #8
 8004890:	2d0c      	cmp	r5, #12
 8004892:	bf38      	it	cc
 8004894:	250c      	movcc	r5, #12
 8004896:	4629      	mov	r1, r5
 8004898:	4638      	mov	r0, r7
 800489a:	f7ff ffa5 	bl	80047e8 <sbrk_aligned>
 800489e:	3001      	adds	r0, #1
 80048a0:	d02b      	beq.n	80048fa <_malloc_r+0xd2>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	442b      	add	r3, r5
 80048a6:	6023      	str	r3, [r4, #0]
 80048a8:	e00e      	b.n	80048c8 <_malloc_r+0xa0>
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	1b52      	subs	r2, r2, r5
 80048ae:	d41e      	bmi.n	80048ee <_malloc_r+0xc6>
 80048b0:	2a0b      	cmp	r2, #11
 80048b2:	d916      	bls.n	80048e2 <_malloc_r+0xba>
 80048b4:	1961      	adds	r1, r4, r5
 80048b6:	42a3      	cmp	r3, r4
 80048b8:	6025      	str	r5, [r4, #0]
 80048ba:	bf18      	it	ne
 80048bc:	6059      	strne	r1, [r3, #4]
 80048be:	6863      	ldr	r3, [r4, #4]
 80048c0:	bf08      	it	eq
 80048c2:	6031      	streq	r1, [r6, #0]
 80048c4:	5162      	str	r2, [r4, r5]
 80048c6:	604b      	str	r3, [r1, #4]
 80048c8:	4638      	mov	r0, r7
 80048ca:	f104 060b 	add.w	r6, r4, #11
 80048ce:	f000 f865 	bl	800499c <__malloc_unlock>
 80048d2:	f026 0607 	bic.w	r6, r6, #7
 80048d6:	1d23      	adds	r3, r4, #4
 80048d8:	1af2      	subs	r2, r6, r3
 80048da:	d0b6      	beq.n	800484a <_malloc_r+0x22>
 80048dc:	1b9b      	subs	r3, r3, r6
 80048de:	50a3      	str	r3, [r4, r2]
 80048e0:	e7b3      	b.n	800484a <_malloc_r+0x22>
 80048e2:	6862      	ldr	r2, [r4, #4]
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	bf0c      	ite	eq
 80048e8:	6032      	streq	r2, [r6, #0]
 80048ea:	605a      	strne	r2, [r3, #4]
 80048ec:	e7ec      	b.n	80048c8 <_malloc_r+0xa0>
 80048ee:	4623      	mov	r3, r4
 80048f0:	6864      	ldr	r4, [r4, #4]
 80048f2:	e7b2      	b.n	800485a <_malloc_r+0x32>
 80048f4:	4634      	mov	r4, r6
 80048f6:	6876      	ldr	r6, [r6, #4]
 80048f8:	e7b9      	b.n	800486e <_malloc_r+0x46>
 80048fa:	230c      	movs	r3, #12
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	4638      	mov	r0, r7
 8004900:	f000 f84c 	bl	800499c <__malloc_unlock>
 8004904:	e7a1      	b.n	800484a <_malloc_r+0x22>
 8004906:	6025      	str	r5, [r4, #0]
 8004908:	e7de      	b.n	80048c8 <_malloc_r+0xa0>
 800490a:	bf00      	nop
 800490c:	20000220 	.word	0x20000220

08004910 <_realloc_r>:
 8004910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004914:	4680      	mov	r8, r0
 8004916:	4614      	mov	r4, r2
 8004918:	460e      	mov	r6, r1
 800491a:	b921      	cbnz	r1, 8004926 <_realloc_r+0x16>
 800491c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004920:	4611      	mov	r1, r2
 8004922:	f7ff bf81 	b.w	8004828 <_malloc_r>
 8004926:	b92a      	cbnz	r2, 8004934 <_realloc_r+0x24>
 8004928:	f7ff ff12 	bl	8004750 <_free_r>
 800492c:	4625      	mov	r5, r4
 800492e:	4628      	mov	r0, r5
 8004930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004934:	f000 f838 	bl	80049a8 <_malloc_usable_size_r>
 8004938:	4284      	cmp	r4, r0
 800493a:	4607      	mov	r7, r0
 800493c:	d802      	bhi.n	8004944 <_realloc_r+0x34>
 800493e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004942:	d812      	bhi.n	800496a <_realloc_r+0x5a>
 8004944:	4621      	mov	r1, r4
 8004946:	4640      	mov	r0, r8
 8004948:	f7ff ff6e 	bl	8004828 <_malloc_r>
 800494c:	4605      	mov	r5, r0
 800494e:	2800      	cmp	r0, #0
 8004950:	d0ed      	beq.n	800492e <_realloc_r+0x1e>
 8004952:	42bc      	cmp	r4, r7
 8004954:	4622      	mov	r2, r4
 8004956:	4631      	mov	r1, r6
 8004958:	bf28      	it	cs
 800495a:	463a      	movcs	r2, r7
 800495c:	f7ff fbb8 	bl	80040d0 <memcpy>
 8004960:	4631      	mov	r1, r6
 8004962:	4640      	mov	r0, r8
 8004964:	f7ff fef4 	bl	8004750 <_free_r>
 8004968:	e7e1      	b.n	800492e <_realloc_r+0x1e>
 800496a:	4635      	mov	r5, r6
 800496c:	e7df      	b.n	800492e <_realloc_r+0x1e>
	...

08004970 <_sbrk_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d06      	ldr	r5, [pc, #24]	; (800498c <_sbrk_r+0x1c>)
 8004974:	2300      	movs	r3, #0
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	f7fc f97a 	bl	8000c74 <_sbrk>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_sbrk_r+0x1a>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_sbrk_r+0x1a>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	20000228 	.word	0x20000228

08004990 <__malloc_lock>:
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <__malloc_lock+0x8>)
 8004992:	f000 b811 	b.w	80049b8 <__retarget_lock_acquire_recursive>
 8004996:	bf00      	nop
 8004998:	2000022c 	.word	0x2000022c

0800499c <__malloc_unlock>:
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <__malloc_unlock+0x8>)
 800499e:	f000 b80c 	b.w	80049ba <__retarget_lock_release_recursive>
 80049a2:	bf00      	nop
 80049a4:	2000022c 	.word	0x2000022c

080049a8 <_malloc_usable_size_r>:
 80049a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ac:	1f18      	subs	r0, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bfbc      	itt	lt
 80049b2:	580b      	ldrlt	r3, [r1, r0]
 80049b4:	18c0      	addlt	r0, r0, r3
 80049b6:	4770      	bx	lr

080049b8 <__retarget_lock_acquire_recursive>:
 80049b8:	4770      	bx	lr

080049ba <__retarget_lock_release_recursive>:
 80049ba:	4770      	bx	lr

080049bc <_init>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	bf00      	nop
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr

080049c8 <_fini>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	bf00      	nop
 80049cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ce:	bc08      	pop	{r3}
 80049d0:	469e      	mov	lr, r3
 80049d2:	4770      	bx	lr
