
CODE_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005038  08005038  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005040  08005040  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005044  08005044  00015044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005048  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000001a0  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000238  20000238  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae98  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018bb  00000000  00000000  0002af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000948  00000000  00000000  0002d200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c92  00000000  00000000  0002db48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000addf  00000000  00000000  0004e7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c52df  00000000  00000000  000595b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e898  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c08  00000000  00000000  0011e8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a20 	.word	0x08004a20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08004a20 	.word	0x08004a20

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	b0ab      	sub	sp, #172	; 0xac
 8000588:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800058a:	f000 fb37 	bl	8000bfc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800058e:	f000 f8b5 	bl	80006fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000592:	f000 f97b 	bl	800088c <MX_GPIO_Init>
	MX_SPI1_Init();
 8000596:	f000 f919 	bl	80007cc <MX_SPI1_Init>
	MX_USART6_UART_Init();
 800059a:	f000 f94d 	bl	8000838 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	char a[80] = "----------------Tx---------------------\r\n";
 800059e:	4b4a      	ldr	r3, [pc, #296]	; (80006c8 <main+0x144>)
 80005a0:	463c      	mov	r4, r7
 80005a2:	461d      	mov	r5, r3
 80005a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b0:	c403      	stmia	r4!, {r0, r1}
 80005b2:	8022      	strh	r2, [r4, #0]
 80005b4:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80005b8:	2226      	movs	r2, #38	; 0x26
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fdc7 	bl	8004150 <memset>
	HAL_UART_Transmit(&huart6, (uint8_t*) a, strlen(a), 10);
 80005c2:	463b      	mov	r3, r7
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fe03 	bl	80001d0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4639      	mov	r1, r7
 80005d0:	230a      	movs	r3, #10
 80005d2:	483e      	ldr	r0, [pc, #248]	; (80006cc <main+0x148>)
 80005d4:	f002 f891 	bl	80026fa <HAL_UART_Transmit>
	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi1);
 80005d8:	4c3d      	ldr	r4, [pc, #244]	; (80006d0 <main+0x14c>)
 80005da:	4668      	mov	r0, sp
 80005dc:	1d23      	adds	r3, r4, #4
 80005de:	2254      	movs	r2, #84	; 0x54
 80005e0:	4619      	mov	r1, r3
 80005e2:	f003 fda7 	bl	8004134 <memcpy>
 80005e6:	6823      	ldr	r3, [r4, #0]
 80005e8:	2202      	movs	r2, #2
 80005ea:	2101      	movs	r1, #1
 80005ec:	4839      	ldr	r0, [pc, #228]	; (80006d4 <main+0x150>)
 80005ee:	f002 fd5f 	bl	80030b0 <NRF24_begin>
	nrf24_DebugUART_Init(huart6);
 80005f2:	4e36      	ldr	r6, [pc, #216]	; (80006cc <main+0x148>)
 80005f4:	466d      	mov	r5, sp
 80005f6:	f106 0410 	add.w	r4, r6, #16
 80005fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000606:	6823      	ldr	r3, [r4, #0]
 8000608:	602b      	str	r3, [r5, #0]
 800060a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800060e:	f003 fd4f 	bl	80040b0 <nrf24_DebugUART_Init>
	printRadioSettings();
 8000612:	f003 f925 	bl	8003860 <printRadioSettings>

	//**** TRANSMIT - ACK ****//
		NRF24_stopListening();
 8000616:	f002 fe2b 	bl	8003270 <NRF24_stopListening>
		NRF24_openWritingPipe(TxpipeAddrs);
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <main+0x154>)
 800061c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000620:	4610      	mov	r0, r2
 8000622:	4619      	mov	r1, r3
 8000624:	f002 fea4 	bl	8003370 <NRF24_openWritingPipe>
		NRF24_setAutoAck(true);
 8000628:	2001      	movs	r0, #1
 800062a:	f002 ff99 	bl	8003560 <NRF24_setAutoAck>

		NRF24_enableDynamicPayloads();
 800062e:	f002 ff4d 	bl	80034cc <NRF24_enableDynamicPayloads>
		NRF24_enableAckPayload();
 8000632:	f002 ff1d 	bl	8003470 <NRF24_enableAckPayload>
		/* Infinite loop */
		/* USER CODE BEGIN WHILE */
		while (1) {

			//Send
			value = HAL_GetTick();
 8000636:	f000 fb47 	bl	8000cc8 <HAL_GetTick>
 800063a:	4603      	mov	r3, r0
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <main+0x158>)
 8000640:	701a      	strb	r2, [r3, #0]
			sprintf(myTxData, "%d", value);
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <main+0x158>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	4925      	ldr	r1, [pc, #148]	; (80006e0 <main+0x15c>)
 800064a:	4826      	ldr	r0, [pc, #152]	; (80006e4 <main+0x160>)
 800064c:	f003 fd88 	bl	8004160 <siprintf>
			if (NRF24_write(myTxData, 32)) {
 8000650:	2120      	movs	r1, #32
 8000652:	4824      	ldr	r0, [pc, #144]	; (80006e4 <main+0x160>)
 8000654:	f002 fe18 	bl	8003288 <NRF24_write>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d02f      	beq.n	80006be <main+0x13a>
				//Receive
				NRF24_read(AckPayload, 32);
 800065e:	2120      	movs	r1, #32
 8000660:	4821      	ldr	r0, [pc, #132]	; (80006e8 <main+0x164>)
 8000662:	f002 fe65 	bl	8003330 <NRF24_read>

				HAL_UART_Transmit(&huart6, (uint8_t*) "Send: ",strlen("Send: "), 10);
 8000666:	230a      	movs	r3, #10
 8000668:	2206      	movs	r2, #6
 800066a:	4920      	ldr	r1, [pc, #128]	; (80006ec <main+0x168>)
 800066c:	4817      	ldr	r0, [pc, #92]	; (80006cc <main+0x148>)
 800066e:	f002 f844 	bl	80026fa <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*) myTxData,strlen(myTxData), 10);
 8000672:	481c      	ldr	r0, [pc, #112]	; (80006e4 <main+0x160>)
 8000674:	f7ff fdac 	bl	80001d0 <strlen>
 8000678:	4603      	mov	r3, r0
 800067a:	b29a      	uxth	r2, r3
 800067c:	230a      	movs	r3, #10
 800067e:	4919      	ldr	r1, [pc, #100]	; (80006e4 <main+0x160>)
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <main+0x148>)
 8000682:	f002 f83a 	bl	80026fa <HAL_UART_Transmit>

				HAL_UART_Transmit(&huart6, (uint8_t*) "		", strlen("		"),10);
 8000686:	230a      	movs	r3, #10
 8000688:	2202      	movs	r2, #2
 800068a:	4919      	ldr	r1, [pc, #100]	; (80006f0 <main+0x16c>)
 800068c:	480f      	ldr	r0, [pc, #60]	; (80006cc <main+0x148>)
 800068e:	f002 f834 	bl	80026fa <HAL_UART_Transmit>

				HAL_UART_Transmit(&huart6, (uint8_t*) "Receive: ",strlen("Receive: "), 10);
 8000692:	230a      	movs	r3, #10
 8000694:	2209      	movs	r2, #9
 8000696:	4917      	ldr	r1, [pc, #92]	; (80006f4 <main+0x170>)
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <main+0x148>)
 800069a:	f002 f82e 	bl	80026fa <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*) AckPayload,strlen(AckPayload), 10);
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <main+0x164>)
 80006a0:	f7ff fd96 	bl	80001d0 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	230a      	movs	r3, #10
 80006aa:	490f      	ldr	r1, [pc, #60]	; (80006e8 <main+0x164>)
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <main+0x148>)
 80006ae:	f002 f824 	bl	80026fa <HAL_UART_Transmit>

				HAL_UART_Transmit(&huart6, (uint8_t*) "\r\n", strlen("\r\n"),10);
 80006b2:	230a      	movs	r3, #10
 80006b4:	2202      	movs	r2, #2
 80006b6:	4910      	ldr	r1, [pc, #64]	; (80006f8 <main+0x174>)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <main+0x148>)
 80006ba:	f002 f81e 	bl	80026fa <HAL_UART_Transmit>
			}
			HAL_Delay(10);
 80006be:	200a      	movs	r0, #10
 80006c0:	f000 fb0e 	bl	8000ce0 <HAL_Delay>
			value = HAL_GetTick();
 80006c4:	e7b7      	b.n	8000636 <main+0xb2>
 80006c6:	bf00      	nop
 80006c8:	08004a58 	.word	0x08004a58
 80006cc:	2000010c 	.word	0x2000010c
 80006d0:	200000b4 	.word	0x200000b4
 80006d4:	40020400 	.word	0x40020400
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000170 	.word	0x20000170
 80006e0:	08004a38 	.word	0x08004a38
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000150 	.word	0x20000150
 80006ec:	08004a3c 	.word	0x08004a3c
 80006f0:	08004a44 	.word	0x08004a44
 80006f4:	08004a48 	.word	0x08004a48
 80006f8:	08004a54 	.word	0x08004a54

080006fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f003 fd20 	bl	8004150 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <SystemClock_Config+0xc8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <SystemClock_Config+0xc8>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <SystemClock_Config+0xc8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <SystemClock_Config+0xcc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a20      	ldr	r2, [pc, #128]	; (80007c8 <SystemClock_Config+0xcc>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <SystemClock_Config+0xcc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000770:	2348      	movs	r3, #72	; 0x48
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fd6d 	bl	8001260 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
		Error_Handler();
 800078c:	f000 f8dc 	bl	8000948 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2102      	movs	r1, #2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 ffcf 	bl	8001750 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xc0>
		Error_Handler();
 80007b8:	f000 f8c6 	bl	8000948 <Error_Handler>
	}
}
 80007bc:	bf00      	nop
 80007be:	3750      	adds	r7, #80	; 0x50
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_SPI1_Init+0x64>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_SPI1_Init+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_SPI1_Init+0x64>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_SPI1_Init+0x64>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_SPI1_Init+0x64>)
 8000800:	2210      	movs	r2, #16
 8000802:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_SPI1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_SPI1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_SPI1_Init+0x64>)
 8000818:	220a      	movs	r2, #10
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_SPI1_Init+0x64>)
 800081e:	f001 f977 	bl	8001b10 <HAL_SPI_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_SPI1_Init+0x60>
		Error_Handler();
 8000828:	f000 f88e 	bl	8000948 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000b4 	.word	0x200000b4
 8000834:	40013000 	.word	0x40013000

08000838 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_USART6_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART6_UART_Init+0x4c>)
 8000870:	f001 fef6 	bl	8002660 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART6_UART_Init+0x46>
		Error_Handler();
 800087a:	f000 f865 	bl	8000948 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000010c 	.word	0x2000010c
 8000888:	40011400 	.word	0x40011400

0800088c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_GPIO_Init+0xb4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a25      	ldr	r2, [pc, #148]	; (8000940 <MX_GPIO_Init+0xb4>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_GPIO_Init+0xb4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_GPIO_Init+0xb4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a1e      	ldr	r2, [pc, #120]	; (8000940 <MX_GPIO_Init+0xb4>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_GPIO_Init+0xb4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_GPIO_Init+0xb4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a17      	ldr	r2, [pc, #92]	; (8000940 <MX_GPIO_Init+0xb4>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_GPIO_Init+0xb4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_GPIO_Init+0xb4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <MX_GPIO_Init+0xb4>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_GPIO_Init+0xb4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2103      	movs	r1, #3
 8000916:	480b      	ldr	r0, [pc, #44]	; (8000944 <MX_GPIO_Init+0xb8>)
 8000918:	f000 fc88 	bl	800122c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB0 PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800091c:	2303      	movs	r3, #3
 800091e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_GPIO_Init+0xb8>)
 8000934:	f000 fade 	bl	8000ef4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40020400 	.word	0x40020400

08000948 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_SPI_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12b      	bne.n	8000a1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_SPI_MspInit+0x88>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_SPI_MspInit+0x88>)
 80009d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_SPI_MspInit+0x88>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_SPI_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_SPI_MspInit+0x88>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_SPI_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009fe:	23e0      	movs	r3, #224	; 0xe0
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_SPI_MspInit+0x8c>)
 8000a1a:	f000 fa6b 	bl	8000ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40013000 	.word	0x40013000
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <HAL_UART_MspInit+0x84>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d12b      	bne.n	8000aae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a17      	ldr	r2, [pc, #92]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a60:	f043 0320 	orr.w	r3, r3, #32
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f003 0320 	and.w	r3, r3, #32
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a10      	ldr	r2, [pc, #64]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a8e:	23c0      	movs	r3, #192	; 0xc0
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <HAL_UART_MspInit+0x8c>)
 8000aaa:	f000 fa23 	bl	8000ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	; 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40011400 	.word	0x40011400
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b10:	f000 f8c6 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f003 faca 	bl	80040e0 <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20020000 	.word	0x20020000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	20000174 	.word	0x20000174
 8000b80:	20000238 	.word	0x20000238

08000b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <Reset_Handler>:
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be0 <LoopFillZerobss+0x12>
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopFillZerobss+0x16>)
 8000bae:	490e      	ldr	r1, [pc, #56]	; (8000be8 <LoopFillZerobss+0x1a>)
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <LoopFillZerobss+0x1e>)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:
 8000bb6:	58d4      	ldr	r4, [r2, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:
 8000bbc:	18c4      	adds	r4, r0, r3
 8000bbe:	428c      	cmp	r4, r1
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <LoopFillZerobss+0x22>)
 8000bc4:	4c0b      	ldr	r4, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x26>)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:
 8000bce:	42a2      	cmp	r2, r4
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>
 8000bd2:	f7ff ffd7 	bl	8000b84 <SystemInit>
 8000bd6:	f003 fa89 	bl	80040ec <__libc_init_array>
 8000bda:	f7ff fcd3 	bl	8000584 <main>
 8000bde:	4770      	bx	lr
 8000be0:	20020000 	.word	0x20020000
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000098 	.word	0x20000098
 8000bec:	08005048 	.word	0x08005048
 8000bf0:	20000098 	.word	0x20000098
 8000bf4:	20000238 	.word	0x20000238

08000bf8 <ADC_IRQHandler>:
 8000bf8:	e7fe      	b.n	8000bf8 <ADC_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <HAL_Init+0x40>)
 8000c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <HAL_Init+0x40>)
 8000c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_Init+0x40>)
 8000c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 f931 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2a:	200f      	movs	r0, #15
 8000c2c:	f000 f808 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c30:	f7ff fe90 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023c00 	.word	0x40023c00

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x54>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x58>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f93b 	bl	8000eda <HAL_SYSTICK_Config>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00e      	b.n	8000c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d80a      	bhi.n	8000c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f000 f911 	bl	8000ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_InitTick+0x5c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e000      	b.n	8000c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000028 	.word	0x20000028
 8000c98:	20000030 	.word	0x20000030
 8000c9c:	2000002c 	.word	0x2000002c

08000ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000030 	.word	0x20000030
 8000cc4:	20000178 	.word	0x20000178

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000178 	.word	0x20000178

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff ffee 	bl	8000cc8 <HAL_GetTick>
 8000cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	d005      	beq.n	8000d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_Delay+0x44>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d06:	bf00      	nop
 8000d08:	f7ff ffde 	bl	8000cc8 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f7      	bhi.n	8000d08 <HAL_Delay+0x28>
  {
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000030 	.word	0x20000030

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff47 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff5c 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff8e 	bl	8000de0 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffb0 	bl	8000e48 <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	e16b      	b.n	80011e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f10:	2201      	movs	r2, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	f040 815a 	bne.w	80011e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d005      	beq.n	8000f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d130      	bne.n	8000fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	f003 0201 	and.w	r2, r3, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d017      	beq.n	8000fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d123      	bne.n	8001038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	08da      	lsrs	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3208      	adds	r2, #8
 8001032:	69b9      	ldr	r1, [r7, #24]
 8001034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0203 	and.w	r2, r3, #3
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 80b4 	beq.w	80011e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b60      	ldr	r3, [pc, #384]	; (8001200 <HAL_GPIO_Init+0x30c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a5f      	ldr	r2, [pc, #380]	; (8001200 <HAL_GPIO_Init+0x30c>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b5d      	ldr	r3, [pc, #372]	; (8001200 <HAL_GPIO_Init+0x30c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001096:	4a5b      	ldr	r2, [pc, #364]	; (8001204 <HAL_GPIO_Init+0x310>)
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a52      	ldr	r2, [pc, #328]	; (8001208 <HAL_GPIO_Init+0x314>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d02b      	beq.n	800111a <HAL_GPIO_Init+0x226>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a51      	ldr	r2, [pc, #324]	; (800120c <HAL_GPIO_Init+0x318>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d025      	beq.n	8001116 <HAL_GPIO_Init+0x222>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a50      	ldr	r2, [pc, #320]	; (8001210 <HAL_GPIO_Init+0x31c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d01f      	beq.n	8001112 <HAL_GPIO_Init+0x21e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4f      	ldr	r2, [pc, #316]	; (8001214 <HAL_GPIO_Init+0x320>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d019      	beq.n	800110e <HAL_GPIO_Init+0x21a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <HAL_GPIO_Init+0x324>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x216>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4d      	ldr	r2, [pc, #308]	; (800121c <HAL_GPIO_Init+0x328>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x212>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4c      	ldr	r2, [pc, #304]	; (8001220 <HAL_GPIO_Init+0x32c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x20e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4b      	ldr	r2, [pc, #300]	; (8001224 <HAL_GPIO_Init+0x330>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x20a>
 80010fa:	2307      	movs	r3, #7
 80010fc:	e00e      	b.n	800111c <HAL_GPIO_Init+0x228>
 80010fe:	2308      	movs	r3, #8
 8001100:	e00c      	b.n	800111c <HAL_GPIO_Init+0x228>
 8001102:	2306      	movs	r3, #6
 8001104:	e00a      	b.n	800111c <HAL_GPIO_Init+0x228>
 8001106:	2305      	movs	r3, #5
 8001108:	e008      	b.n	800111c <HAL_GPIO_Init+0x228>
 800110a:	2304      	movs	r3, #4
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x228>
 800110e:	2303      	movs	r3, #3
 8001110:	e004      	b.n	800111c <HAL_GPIO_Init+0x228>
 8001112:	2302      	movs	r3, #2
 8001114:	e002      	b.n	800111c <HAL_GPIO_Init+0x228>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <HAL_GPIO_Init+0x228>
 800111a:	2300      	movs	r3, #0
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	f002 0203 	and.w	r2, r2, #3
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	4093      	lsls	r3, r2
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800112c:	4935      	ldr	r1, [pc, #212]	; (8001204 <HAL_GPIO_Init+0x310>)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <HAL_GPIO_Init+0x334>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115e:	4a32      	ldr	r2, [pc, #200]	; (8001228 <HAL_GPIO_Init+0x334>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <HAL_GPIO_Init+0x334>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001188:	4a27      	ldr	r2, [pc, #156]	; (8001228 <HAL_GPIO_Init+0x334>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <HAL_GPIO_Init+0x334>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b2:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_GPIO_Init+0x334>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_GPIO_Init+0x334>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011dc:	4a12      	ldr	r2, [pc, #72]	; (8001228 <HAL_GPIO_Init+0x334>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	f67f ae90 	bls.w	8000f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40013800 	.word	0x40013800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020400 	.word	0x40020400
 8001210:	40020800 	.word	0x40020800
 8001214:	40020c00 	.word	0x40020c00
 8001218:	40021000 	.word	0x40021000
 800121c:	40021400 	.word	0x40021400
 8001220:	40021800 	.word	0x40021800
 8001224:	40021c00 	.word	0x40021c00
 8001228:	40013c00 	.word	0x40013c00

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001248:	e003      	b.n	8001252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	041a      	lsls	r2, r3, #16
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e267      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d075      	beq.n	800136a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127e:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b04      	cmp	r3, #4
 8001288:	d00c      	beq.n	80012a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4b85      	ldr	r3, [pc, #532]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001292:	2b08      	cmp	r3, #8
 8001294:	d112      	bne.n	80012bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001296:	4b82      	ldr	r3, [pc, #520]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012a2:	d10b      	bne.n	80012bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	4b7e      	ldr	r3, [pc, #504]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d05b      	beq.n	8001368 <HAL_RCC_OscConfig+0x108>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d157      	bne.n	8001368 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e242      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c4:	d106      	bne.n	80012d4 <HAL_RCC_OscConfig+0x74>
 80012c6:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a75      	ldr	r2, [pc, #468]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e01d      	b.n	8001310 <HAL_RCC_OscConfig+0xb0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x98>
 80012de:	4b70      	ldr	r3, [pc, #448]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6f      	ldr	r2, [pc, #444]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b6d      	ldr	r3, [pc, #436]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6c      	ldr	r2, [pc, #432]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0xb0>
 80012f8:	4b69      	ldr	r3, [pc, #420]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a68      	ldr	r2, [pc, #416]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b66      	ldr	r3, [pc, #408]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a65      	ldr	r2, [pc, #404]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d013      	beq.n	8001340 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fcd6 	bl	8000cc8 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fcd2 	bl	8000cc8 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e207      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b5b      	ldr	r3, [pc, #364]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0xc0>
 800133e:	e014      	b.n	800136a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fcc2 	bl	8000cc8 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fcbe 	bl	8000cc8 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1f3      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0xe8>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d063      	beq.n	800143e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00b      	beq.n	800139a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138a:	2b08      	cmp	r3, #8
 800138c:	d11c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138e:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <HAL_RCC_OscConfig+0x152>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e1c7      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4937      	ldr	r1, [pc, #220]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	e03a      	b.n	800143e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d0:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d6:	f7ff fc77 	bl	8000cc8 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fc73 	bl	8000cc8 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1a8      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4925      	ldr	r1, [pc, #148]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e015      	b.n	800143e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fc56 	bl	8000cc8 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff fc52 	bl	8000cc8 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e187      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d036      	beq.n	80014b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d016      	beq.n	8001480 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_RCC_OscConfig+0x248>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001458:	f7ff fc36 	bl	8000cc8 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff fc32 	bl	8000cc8 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e167      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x200>
 800147e:	e01b      	b.n	80014b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_RCC_OscConfig+0x248>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff fc1f 	bl	8000cc8 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	e00e      	b.n	80014ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148e:	f7ff fc1b 	bl	8000cc8 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d907      	bls.n	80014ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e150      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
 80014a0:	40023800 	.word	0x40023800
 80014a4:	42470000 	.word	0x42470000
 80014a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1ea      	bne.n	800148e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 8097 	beq.w	80015f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b7d      	ldr	r3, [pc, #500]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a7c      	ldr	r2, [pc, #496]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b7a      	ldr	r3, [pc, #488]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f6:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <HAL_RCC_OscConfig+0x474>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d118      	bne.n	8001534 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001502:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <HAL_RCC_OscConfig+0x474>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a73      	ldr	r2, [pc, #460]	; (80016d4 <HAL_RCC_OscConfig+0x474>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150e:	f7ff fbdb 	bl	8000cc8 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001516:	f7ff fbd7 	bl	8000cc8 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e10c      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_RCC_OscConfig+0x474>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x2ea>
 800153c:	4b64      	ldr	r3, [pc, #400]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a63      	ldr	r2, [pc, #396]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	e01c      	b.n	8001584 <HAL_RCC_OscConfig+0x324>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b05      	cmp	r3, #5
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x30c>
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a5e      	ldr	r2, [pc, #376]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
 800155e:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001562:	4a5b      	ldr	r2, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6713      	str	r3, [r2, #112]	; 0x70
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0x324>
 800156c:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001570:	4a57      	ldr	r2, [pc, #348]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	6713      	str	r3, [r2, #112]	; 0x70
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157c:	4a54      	ldr	r2, [pc, #336]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 800157e:	f023 0304 	bic.w	r3, r3, #4
 8001582:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d015      	beq.n	80015b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158c:	f7ff fb9c 	bl	8000cc8 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff fb98 	bl	8000cc8 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0cb      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015aa:	4b49      	ldr	r3, [pc, #292]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0ee      	beq.n	8001594 <HAL_RCC_OscConfig+0x334>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b8:	f7ff fb86 	bl	8000cc8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff fb82 	bl	8000cc8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e0b5      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d6:	4b3e      	ldr	r3, [pc, #248]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ee      	bne.n	80015c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	4a38      	ldr	r2, [pc, #224]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80015ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80a1 	beq.w	8001740 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015fe:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b08      	cmp	r3, #8
 8001608:	d05c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d141      	bne.n	8001696 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <HAL_RCC_OscConfig+0x478>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb56 	bl	8000cc8 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fb52 	bl	8000cc8 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e087      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	019b      	lsls	r3, r3, #6
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	3b01      	subs	r3, #1
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	491b      	ldr	r1, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_RCC_OscConfig+0x478>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fb2b 	bl	8000cc8 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff fb27 	bl	8000cc8 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e05c      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x416>
 8001694:	e054      	b.n	8001740 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_RCC_OscConfig+0x478>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fb14 	bl	8000cc8 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff fb10 	bl	8000cc8 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e045      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x444>
 80016c2:	e03d      	b.n	8001740 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e038      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000
 80016d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_RCC_OscConfig+0x4ec>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d028      	beq.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d121      	bne.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d11a      	bne.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800170c:	4013      	ands	r3, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001712:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001714:	4293      	cmp	r3, r2
 8001716:	d111      	bne.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	3b01      	subs	r3, #1
 8001726:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d107      	bne.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0cc      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d90c      	bls.n	800178c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b63      	ldr	r3, [pc, #396]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b8      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a58      	ldr	r2, [pc, #352]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	494d      	ldr	r1, [pc, #308]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d044      	beq.n	8001870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d119      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e07f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d003      	beq.n	800180e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	2b03      	cmp	r3, #3
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e067      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4934      	ldr	r1, [pc, #208]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001840:	f7ff fa42 	bl	8000cc8 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff fa3e 	bl	8000cc8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e04f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d20c      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e032      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4916      	ldr	r1, [pc, #88]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	490e      	ldr	r1, [pc, #56]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d6:	f000 f821 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018da:	4602      	mov	r2, r0
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	490a      	ldr	r1, [pc, #40]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	5ccb      	ldrb	r3, [r1, r3]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f9a2 	bl	8000c40 <HAL_InitTick>

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00
 800190c:	40023800 	.word	0x40023800
 8001910:	08004fec 	.word	0x08004fec
 8001914:	20000028 	.word	0x20000028
 8001918:	2000002c 	.word	0x2000002c

0800191c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001920:	b090      	sub	sp, #64	; 0x40
 8001922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
 8001928:	2300      	movs	r3, #0
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800192c:	2300      	movs	r3, #0
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001934:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d00d      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x40>
 8001940:	2b08      	cmp	r3, #8
 8001942:	f200 80a1 	bhi.w	8001a88 <HAL_RCC_GetSysClockFreq+0x16c>
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x34>
 800194a:	2b04      	cmp	r3, #4
 800194c:	d003      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x3a>
 800194e:	e09b      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001954:	e09b      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001956:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001958:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800195a:	e098      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800195c:	4b4f      	ldr	r3, [pc, #316]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x180>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001966:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d028      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	2200      	movs	r2, #0
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	627a      	str	r2, [r7, #36]	; 0x24
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001984:	2100      	movs	r1, #0
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001988:	fb03 f201 	mul.w	r2, r3, r1
 800198c:	2300      	movs	r3, #0
 800198e:	fb00 f303 	mul.w	r3, r0, r3
 8001992:	4413      	add	r3, r2
 8001994:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001996:	fba0 1202 	umull	r1, r2, r0, r2
 800199a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800199c:	460a      	mov	r2, r1
 800199e:	62ba      	str	r2, [r7, #40]	; 0x28
 80019a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a2:	4413      	add	r3, r2
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a8:	2200      	movs	r2, #0
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	61fa      	str	r2, [r7, #28]
 80019ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019b6:	f7fe fc63 	bl	8000280 <__aeabi_uldivmod>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4613      	mov	r3, r2
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019c2:	e053      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c4:	4b35      	ldr	r3, [pc, #212]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x180>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	099b      	lsrs	r3, r3, #6
 80019ca:	2200      	movs	r2, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	617a      	str	r2, [r7, #20]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019d6:	f04f 0b00 	mov.w	fp, #0
 80019da:	4652      	mov	r2, sl
 80019dc:	465b      	mov	r3, fp
 80019de:	f04f 0000 	mov.w	r0, #0
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	0159      	lsls	r1, r3, #5
 80019e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ec:	0150      	lsls	r0, r2, #5
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	ebb2 080a 	subs.w	r8, r2, sl
 80019f6:	eb63 090b 	sbc.w	r9, r3, fp
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a0e:	ebb2 0408 	subs.w	r4, r2, r8
 8001a12:	eb63 0509 	sbc.w	r5, r3, r9
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	00eb      	lsls	r3, r5, #3
 8001a20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a24:	00e2      	lsls	r2, r4, #3
 8001a26:	4614      	mov	r4, r2
 8001a28:	461d      	mov	r5, r3
 8001a2a:	eb14 030a 	adds.w	r3, r4, sl
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	eb45 030b 	adc.w	r3, r5, fp
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a42:	4629      	mov	r1, r5
 8001a44:	028b      	lsls	r3, r1, #10
 8001a46:	4621      	mov	r1, r4
 8001a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	028a      	lsls	r2, r1, #10
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a56:	2200      	movs	r2, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	60fa      	str	r2, [r7, #12]
 8001a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a60:	f7fe fc0e 	bl	8000280 <__aeabi_uldivmod>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	0c1b      	lsrs	r3, r3, #16
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	3301      	adds	r3, #1
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a86:	e002      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3740      	adds	r7, #64	; 0x40
 8001a94:	46bd      	mov	sp, r7
 8001a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	00f42400 	.word	0x00f42400
 8001aa4:	017d7840 	.word	0x017d7840

08001aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_RCC_GetHCLKFreq+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000028 	.word	0x20000028

08001ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ac4:	f7ff fff0 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	0a9b      	lsrs	r3, r3, #10
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	; (8001ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	08004ffc 	.word	0x08004ffc

08001ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aec:	f7ff ffdc 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	0b5b      	lsrs	r3, r3, #13
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	4903      	ldr	r1, [pc, #12]	; (8001b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08004ffc 	.word	0x08004ffc

08001b10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e07b      	b.n	8001c1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d108      	bne.n	8001b3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b32:	d009      	beq.n	8001b48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
 8001b3a:	e005      	b.n	8001b48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7fe ff1e 	bl	80009a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bcc:	ea42 0103 	orr.w	r1, r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	f003 0104 	and.w	r1, r3, #4
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	f003 0210 	and.w	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69da      	ldr	r2, [r3, #28]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b088      	sub	sp, #32
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_SPI_Transmit+0x22>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e126      	b.n	8001e92 <HAL_SPI_Transmit+0x270>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c4c:	f7ff f83c 	bl	8000cc8 <HAL_GetTick>
 8001c50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d002      	beq.n	8001c68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c62:	2302      	movs	r3, #2
 8001c64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c66:	e10b      	b.n	8001e80 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_SPI_Transmit+0x52>
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c78:	e102      	b.n	8001e80 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	88fa      	ldrh	r2, [r7, #6]
 8001c92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ce0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cec:	2b40      	cmp	r3, #64	; 0x40
 8001cee:	d007      	beq.n	8001d00 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d08:	d14b      	bne.n	8001da2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_SPI_Transmit+0xf6>
 8001d12:	8afb      	ldrh	r3, [r7, #22]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d13e      	bne.n	8001d96 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	881a      	ldrh	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	1c9a      	adds	r2, r3, #2
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d3c:	e02b      	b.n	8001d96 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d112      	bne.n	8001d72 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	881a      	ldrh	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	1c9a      	adds	r2, r3, #2
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d70:	e011      	b.n	8001d96 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d72:	f7fe ffa9 	bl	8000cc8 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d803      	bhi.n	8001d8a <HAL_SPI_Transmit+0x168>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d102      	bne.n	8001d90 <HAL_SPI_Transmit+0x16e>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d94:	e074      	b.n	8001e80 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1ce      	bne.n	8001d3e <HAL_SPI_Transmit+0x11c>
 8001da0:	e04c      	b.n	8001e3c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_SPI_Transmit+0x18e>
 8001daa:	8afb      	ldrh	r3, [r7, #22]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d140      	bne.n	8001e32 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	330c      	adds	r3, #12
 8001dba:	7812      	ldrb	r2, [r2, #0]
 8001dbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001dd6:	e02c      	b.n	8001e32 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d113      	bne.n	8001e0e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	330c      	adds	r3, #12
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e0c:	e011      	b.n	8001e32 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e0e:	f7fe ff5b 	bl	8000cc8 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d803      	bhi.n	8001e26 <HAL_SPI_Transmit+0x204>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d102      	bne.n	8001e2c <HAL_SPI_Transmit+0x20a>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e30:	e026      	b.n	8001e80 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1cd      	bne.n	8001dd8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	6839      	ldr	r1, [r7, #0]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fbcb 	bl	80025dc <SPI_EndRxTxTransaction>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10a      	bne.n	8001e70 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	77fb      	strb	r3, [r7, #31]
 8001e7c:	e000      	b.n	8001e80 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001e7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e90:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b088      	sub	sp, #32
 8001e9e:	af02      	add	r7, sp, #8
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eb6:	d112      	bne.n	8001ede <HAL_SPI_Receive+0x44>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10e      	bne.n	8001ede <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001ec8:	88fa      	ldrh	r2, [r7, #6]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	68b9      	ldr	r1, [r7, #8]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 f8f1 	bl	80020bc <HAL_SPI_TransmitReceive>
 8001eda:	4603      	mov	r3, r0
 8001edc:	e0ea      	b.n	80020b4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_SPI_Receive+0x52>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e0e3      	b.n	80020b4 <HAL_SPI_Receive+0x21a>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ef4:	f7fe fee8 	bl	8000cc8 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d002      	beq.n	8001f0c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
 8001f08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f0a:	e0ca      	b.n	80020a2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <HAL_SPI_Receive+0x7e>
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f1c:	e0c1      	b.n	80020a2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2204      	movs	r2, #4
 8001f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	88fa      	ldrh	r2, [r7, #6]
 8001f3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f64:	d10f      	bne.n	8001f86 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f90:	2b40      	cmp	r3, #64	; 0x40
 8001f92:	d007      	beq.n	8001fa4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fa2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d162      	bne.n	8002072 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001fac:	e02e      	b.n	800200c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d115      	bne.n	8001fe8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f103 020c 	add.w	r2, r3, #12
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc8:	7812      	ldrb	r2, [r2, #0]
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fe6:	e011      	b.n	800200c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fe8:	f7fe fe6e 	bl	8000cc8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d803      	bhi.n	8002000 <HAL_SPI_Receive+0x166>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffe:	d102      	bne.n	8002006 <HAL_SPI_Receive+0x16c>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	75fb      	strb	r3, [r7, #23]
          goto error;
 800200a:	e04a      	b.n	80020a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1cb      	bne.n	8001fae <HAL_SPI_Receive+0x114>
 8002016:	e031      	b.n	800207c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d113      	bne.n	800204e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	b292      	uxth	r2, r2
 8002032:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	1c9a      	adds	r2, r3, #2
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800204c:	e011      	b.n	8002072 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800204e:	f7fe fe3b 	bl	8000cc8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d803      	bhi.n	8002066 <HAL_SPI_Receive+0x1cc>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d102      	bne.n	800206c <HAL_SPI_Receive+0x1d2>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002070:	e017      	b.n	80020a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1cd      	bne.n	8002018 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	6839      	ldr	r1, [r7, #0]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 fa45 	bl	8002510 <SPI_EndRxTransaction>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	75fb      	strb	r3, [r7, #23]
 800209e:	e000      	b.n	80020a2 <HAL_SPI_Receive+0x208>
  }

error :
 80020a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020ca:	2301      	movs	r3, #1
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_SPI_TransmitReceive+0x26>
 80020de:	2302      	movs	r3, #2
 80020e0:	e18a      	b.n	80023f8 <HAL_SPI_TransmitReceive+0x33c>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020ea:	f7fe fded 	bl	8000cc8 <HAL_GetTick>
 80020ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002108:	2b01      	cmp	r3, #1
 800210a:	d00f      	beq.n	800212c <HAL_SPI_TransmitReceive+0x70>
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002112:	d107      	bne.n	8002124 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d103      	bne.n	8002124 <HAL_SPI_TransmitReceive+0x68>
 800211c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002120:	2b04      	cmp	r3, #4
 8002122:	d003      	beq.n	800212c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002124:	2302      	movs	r3, #2
 8002126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800212a:	e15b      	b.n	80023e4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_SPI_TransmitReceive+0x82>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_SPI_TransmitReceive+0x82>
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d103      	bne.n	8002146 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002144:	e14e      	b.n	80023e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b04      	cmp	r3, #4
 8002150:	d003      	beq.n	800215a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2205      	movs	r2, #5
 8002156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	887a      	ldrh	r2, [r7, #2]
 800216a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	887a      	ldrh	r2, [r7, #2]
 8002182:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219a:	2b40      	cmp	r3, #64	; 0x40
 800219c:	d007      	beq.n	80021ae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021b6:	d178      	bne.n	80022aa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_SPI_TransmitReceive+0x10a>
 80021c0:	8b7b      	ldrh	r3, [r7, #26]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d166      	bne.n	8002294 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	881a      	ldrh	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	1c9a      	adds	r2, r3, #2
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ea:	e053      	b.n	8002294 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d11b      	bne.n	8002232 <HAL_SPI_TransmitReceive+0x176>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d016      	beq.n	8002232 <HAL_SPI_TransmitReceive+0x176>
 8002204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002206:	2b01      	cmp	r3, #1
 8002208:	d113      	bne.n	8002232 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	881a      	ldrh	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	1c9a      	adds	r2, r3, #2
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d119      	bne.n	8002274 <HAL_SPI_TransmitReceive+0x1b8>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d014      	beq.n	8002274 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	b292      	uxth	r2, r2
 8002256:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	1c9a      	adds	r2, r3, #2
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002270:	2301      	movs	r3, #1
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002274:	f7fe fd28 	bl	8000cc8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002280:	429a      	cmp	r2, r3
 8002282:	d807      	bhi.n	8002294 <HAL_SPI_TransmitReceive+0x1d8>
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228a:	d003      	beq.n	8002294 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002292:	e0a7      	b.n	80023e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1a6      	bne.n	80021ec <HAL_SPI_TransmitReceive+0x130>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1a1      	bne.n	80021ec <HAL_SPI_TransmitReceive+0x130>
 80022a8:	e07c      	b.n	80023a4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_SPI_TransmitReceive+0x1fc>
 80022b2:	8b7b      	ldrh	r3, [r7, #26]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d16b      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	330c      	adds	r3, #12
 80022c2:	7812      	ldrb	r2, [r2, #0]
 80022c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022de:	e057      	b.n	8002390 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d11c      	bne.n	8002328 <HAL_SPI_TransmitReceive+0x26c>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d017      	beq.n	8002328 <HAL_SPI_TransmitReceive+0x26c>
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d114      	bne.n	8002328 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	330c      	adds	r3, #12
 8002308:	7812      	ldrb	r2, [r2, #0]
 800230a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d119      	bne.n	800236a <HAL_SPI_TransmitReceive+0x2ae>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d014      	beq.n	800236a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002366:	2301      	movs	r3, #1
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800236a:	f7fe fcad 	bl	8000cc8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002376:	429a      	cmp	r2, r3
 8002378:	d803      	bhi.n	8002382 <HAL_SPI_TransmitReceive+0x2c6>
 800237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d102      	bne.n	8002388 <HAL_SPI_TransmitReceive+0x2cc>
 8002382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002384:	2b00      	cmp	r3, #0
 8002386:	d103      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800238e:	e029      	b.n	80023e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1a2      	bne.n	80022e0 <HAL_SPI_TransmitReceive+0x224>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d19d      	bne.n	80022e0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f917 	bl	80025dc <SPI_EndRxTxTransaction>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80023c0:	e010      	b.n	80023e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10b      	bne.n	80023e2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	e000      	b.n	80023e4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80023e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3730      	adds	r7, #48	; 0x30
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002410:	f7fe fc5a 	bl	8000cc8 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	4413      	add	r3, r2
 800241e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002420:	f7fe fc52 	bl	8000cc8 <HAL_GetTick>
 8002424:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002426:	4b39      	ldr	r3, [pc, #228]	; (800250c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	015b      	lsls	r3, r3, #5
 800242c:	0d1b      	lsrs	r3, r3, #20
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	fb02 f303 	mul.w	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002436:	e054      	b.n	80024e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243e:	d050      	beq.n	80024e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002440:	f7fe fc42 	bl	8000cc8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	429a      	cmp	r2, r3
 800244e:	d902      	bls.n	8002456 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d13d      	bne.n	80024d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800246e:	d111      	bne.n	8002494 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002478:	d004      	beq.n	8002484 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002482:	d107      	bne.n	8002494 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002492:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249c:	d10f      	bne.n	80024be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e017      	b.n	8002502 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3b01      	subs	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4013      	ands	r3, r2
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d19b      	bne.n	8002438 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000028 	.word	0x20000028

08002510 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002524:	d111      	bne.n	800254a <SPI_EndRxTransaction+0x3a>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800252e:	d004      	beq.n	800253a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002538:	d107      	bne.n	800254a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002548:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002552:	d12a      	bne.n	80025aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255c:	d012      	beq.n	8002584 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2200      	movs	r2, #0
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7ff ff49 	bl	8002400 <SPI_WaitFlagStateUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d02d      	beq.n	80025d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e026      	b.n	80025d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2200      	movs	r2, #0
 800258c:	2101      	movs	r1, #1
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f7ff ff36 	bl	8002400 <SPI_WaitFlagStateUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01a      	beq.n	80025d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259e:	f043 0220 	orr.w	r2, r3, #32
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e013      	b.n	80025d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	2101      	movs	r1, #1
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7ff ff23 	bl	8002400 <SPI_WaitFlagStateUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f043 0220 	orr.w	r2, r3, #32
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e000      	b.n	80025d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <SPI_EndRxTxTransaction+0x7c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <SPI_EndRxTxTransaction+0x80>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0d5b      	lsrs	r3, r3, #21
 80025f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025f8:	fb02 f303 	mul.w	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002606:	d112      	bne.n	800262e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2200      	movs	r2, #0
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff fef4 	bl	8002400 <SPI_WaitFlagStateUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f043 0220 	orr.w	r2, r3, #32
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e00f      	b.n	800264e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3b01      	subs	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	2b80      	cmp	r3, #128	; 0x80
 8002646:	d0f2      	beq.n	800262e <SPI_EndRxTxTransaction+0x52>
 8002648:	e000      	b.n	800264c <SPI_EndRxTxTransaction+0x70>
        break;
 800264a:	bf00      	nop
  }

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000028 	.word	0x20000028
 800265c:	165e9f81 	.word	0x165e9f81

08002660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e03f      	b.n	80026f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe f9d4 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2224      	movs	r2, #36	; 0x24
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f929 	bl	80028fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b08a      	sub	sp, #40	; 0x28
 80026fe:	af02      	add	r7, sp, #8
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	d17c      	bne.n	8002814 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <HAL_UART_Transmit+0x2c>
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e075      	b.n	8002816 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_UART_Transmit+0x3e>
 8002734:	2302      	movs	r3, #2
 8002736:	e06e      	b.n	8002816 <HAL_UART_Transmit+0x11c>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2221      	movs	r2, #33	; 0x21
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800274e:	f7fe fabb 	bl	8000cc8 <HAL_GetTick>
 8002752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	88fa      	ldrh	r2, [r7, #6]
 8002758:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	88fa      	ldrh	r2, [r7, #6]
 800275e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002768:	d108      	bne.n	800277c <HAL_UART_Transmit+0x82>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d104      	bne.n	800277c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	e003      	b.n	8002784 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800278c:	e02a      	b.n	80027e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2200      	movs	r2, #0
 8002796:	2180      	movs	r1, #128	; 0x80
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f840 	bl	800281e <UART_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e036      	b.n	8002816 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	3302      	adds	r3, #2
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	e007      	b.n	80027d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	3301      	adds	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1cf      	bne.n	800278e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2200      	movs	r2, #0
 80027f6:	2140      	movs	r1, #64	; 0x40
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f810 	bl	800281e <UART_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e006      	b.n	8002816 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b090      	sub	sp, #64	; 0x40
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800282e:	e050      	b.n	80028d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d04c      	beq.n	80028d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <UART_WaitOnFlagUntilTimeout+0x30>
 800283e:	f7fe fa43 	bl	8000cc8 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800284a:	429a      	cmp	r2, r3
 800284c:	d241      	bcs.n	80028d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	e853 3f00 	ldrex	r3, [r3]
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800286e:	637a      	str	r2, [r7, #52]	; 0x34
 8002870:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002872:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e5      	bne.n	800284e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	613b      	str	r3, [r7, #16]
   return(result);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	63bb      	str	r3, [r7, #56]	; 0x38
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3314      	adds	r3, #20
 80028a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028a2:	623a      	str	r2, [r7, #32]
 80028a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a6:	69f9      	ldr	r1, [r7, #28]
 80028a8:	6a3a      	ldr	r2, [r7, #32]
 80028aa:	e841 2300 	strex	r3, r2, [r1]
 80028ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1e5      	bne.n	8002882 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e00f      	b.n	80028f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	429a      	cmp	r2, r3
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d09f      	beq.n	8002830 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3740      	adds	r7, #64	; 0x40
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002900:	b0c0      	sub	sp, #256	; 0x100
 8002902:	af00      	add	r7, sp, #0
 8002904:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002918:	68d9      	ldr	r1, [r3, #12]
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	ea40 0301 	orr.w	r3, r0, r1
 8002924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	431a      	orrs	r2, r3
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	431a      	orrs	r2, r3
 800293c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002954:	f021 010c 	bic.w	r1, r1, #12
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002962:	430b      	orrs	r3, r1
 8002964:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002976:	6999      	ldr	r1, [r3, #24]
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	ea40 0301 	orr.w	r3, r0, r1
 8002982:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4b8f      	ldr	r3, [pc, #572]	; (8002bc8 <UART_SetConfig+0x2cc>)
 800298c:	429a      	cmp	r2, r3
 800298e:	d005      	beq.n	800299c <UART_SetConfig+0xa0>
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b8d      	ldr	r3, [pc, #564]	; (8002bcc <UART_SetConfig+0x2d0>)
 8002998:	429a      	cmp	r2, r3
 800299a:	d104      	bne.n	80029a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800299c:	f7ff f8a4 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 80029a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029a4:	e003      	b.n	80029ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029a6:	f7ff f88b 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 80029aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b8:	f040 810c 	bne.w	8002bd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029c0:	2200      	movs	r2, #0
 80029c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029ce:	4622      	mov	r2, r4
 80029d0:	462b      	mov	r3, r5
 80029d2:	1891      	adds	r1, r2, r2
 80029d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80029d6:	415b      	adcs	r3, r3
 80029d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029de:	4621      	mov	r1, r4
 80029e0:	eb12 0801 	adds.w	r8, r2, r1
 80029e4:	4629      	mov	r1, r5
 80029e6:	eb43 0901 	adc.w	r9, r3, r1
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029fe:	4690      	mov	r8, r2
 8002a00:	4699      	mov	r9, r3
 8002a02:	4623      	mov	r3, r4
 8002a04:	eb18 0303 	adds.w	r3, r8, r3
 8002a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	eb49 0303 	adc.w	r3, r9, r3
 8002a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	18db      	adds	r3, r3, r3
 8002a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a30:	4613      	mov	r3, r2
 8002a32:	eb42 0303 	adc.w	r3, r2, r3
 8002a36:	657b      	str	r3, [r7, #84]	; 0x54
 8002a38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a40:	f7fd fc1e 	bl	8000280 <__aeabi_uldivmod>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4b61      	ldr	r3, [pc, #388]	; (8002bd0 <UART_SetConfig+0x2d4>)
 8002a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	011c      	lsls	r4, r3, #4
 8002a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a64:	4642      	mov	r2, r8
 8002a66:	464b      	mov	r3, r9
 8002a68:	1891      	adds	r1, r2, r2
 8002a6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a6c:	415b      	adcs	r3, r3
 8002a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a74:	4641      	mov	r1, r8
 8002a76:	eb12 0a01 	adds.w	sl, r2, r1
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	eb43 0b01 	adc.w	fp, r3, r1
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a94:	4692      	mov	sl, r2
 8002a96:	469b      	mov	fp, r3
 8002a98:	4643      	mov	r3, r8
 8002a9a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002aa2:	464b      	mov	r3, r9
 8002aa4:	eb4b 0303 	adc.w	r3, fp, r3
 8002aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ab8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002abc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	18db      	adds	r3, r3, r3
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	eb42 0303 	adc.w	r3, r2, r3
 8002acc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ad2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ad6:	f7fd fbd3 	bl	8000280 <__aeabi_uldivmod>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <UART_SetConfig+0x2d4>)
 8002ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	2264      	movs	r2, #100	; 0x64
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	1acb      	subs	r3, r1, r3
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002af6:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <UART_SetConfig+0x2d4>)
 8002af8:	fba3 2302 	umull	r2, r3, r3, r2
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b04:	441c      	add	r4, r3
 8002b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b18:	4642      	mov	r2, r8
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	1891      	adds	r1, r2, r2
 8002b1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b20:	415b      	adcs	r3, r3
 8002b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b28:	4641      	mov	r1, r8
 8002b2a:	1851      	adds	r1, r2, r1
 8002b2c:	6339      	str	r1, [r7, #48]	; 0x30
 8002b2e:	4649      	mov	r1, r9
 8002b30:	414b      	adcs	r3, r1
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b40:	4659      	mov	r1, fp
 8002b42:	00cb      	lsls	r3, r1, #3
 8002b44:	4651      	mov	r1, sl
 8002b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	00ca      	lsls	r2, r1, #3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	4642      	mov	r2, r8
 8002b56:	189b      	adds	r3, r3, r2
 8002b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b5c:	464b      	mov	r3, r9
 8002b5e:	460a      	mov	r2, r1
 8002b60:	eb42 0303 	adc.w	r3, r2, r3
 8002b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	18db      	adds	r3, r3, r3
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b82:	4613      	mov	r3, r2
 8002b84:	eb42 0303 	adc.w	r3, r2, r3
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b92:	f7fd fb75 	bl	8000280 <__aeabi_uldivmod>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <UART_SetConfig+0x2d4>)
 8002b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	2164      	movs	r1, #100	; 0x64
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	3332      	adds	r3, #50	; 0x32
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <UART_SetConfig+0x2d4>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	f003 0207 	and.w	r2, r3, #7
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4422      	add	r2, r4
 8002bc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bc4:	e105      	b.n	8002dd2 <UART_SetConfig+0x4d6>
 8002bc6:	bf00      	nop
 8002bc8:	40011000 	.word	0x40011000
 8002bcc:	40011400 	.word	0x40011400
 8002bd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002be2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002be6:	4642      	mov	r2, r8
 8002be8:	464b      	mov	r3, r9
 8002bea:	1891      	adds	r1, r2, r2
 8002bec:	6239      	str	r1, [r7, #32]
 8002bee:	415b      	adcs	r3, r3
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bf6:	4641      	mov	r1, r8
 8002bf8:	1854      	adds	r4, r2, r1
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	eb43 0501 	adc.w	r5, r3, r1
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	00eb      	lsls	r3, r5, #3
 8002c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c0e:	00e2      	lsls	r2, r4, #3
 8002c10:	4614      	mov	r4, r2
 8002c12:	461d      	mov	r5, r3
 8002c14:	4643      	mov	r3, r8
 8002c16:	18e3      	adds	r3, r4, r3
 8002c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c1c:	464b      	mov	r3, r9
 8002c1e:	eb45 0303 	adc.w	r3, r5, r3
 8002c22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c42:	4629      	mov	r1, r5
 8002c44:	008b      	lsls	r3, r1, #2
 8002c46:	4621      	mov	r1, r4
 8002c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	008a      	lsls	r2, r1, #2
 8002c50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c54:	f7fd fb14 	bl	8000280 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4b60      	ldr	r3, [pc, #384]	; (8002de0 <UART_SetConfig+0x4e4>)
 8002c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	011c      	lsls	r4, r3, #4
 8002c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c78:	4642      	mov	r2, r8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	1891      	adds	r1, r2, r2
 8002c7e:	61b9      	str	r1, [r7, #24]
 8002c80:	415b      	adcs	r3, r3
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c88:	4641      	mov	r1, r8
 8002c8a:	1851      	adds	r1, r2, r1
 8002c8c:	6139      	str	r1, [r7, #16]
 8002c8e:	4649      	mov	r1, r9
 8002c90:	414b      	adcs	r3, r1
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ca0:	4659      	mov	r1, fp
 8002ca2:	00cb      	lsls	r3, r1, #3
 8002ca4:	4651      	mov	r1, sl
 8002ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002caa:	4651      	mov	r1, sl
 8002cac:	00ca      	lsls	r2, r1, #3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	189b      	adds	r3, r3, r2
 8002cb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cbc:	464b      	mov	r3, r9
 8002cbe:	460a      	mov	r2, r1
 8002cc0:	eb42 0303 	adc.w	r3, r2, r3
 8002cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	008b      	lsls	r3, r1, #2
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cea:	4641      	mov	r1, r8
 8002cec:	008a      	lsls	r2, r1, #2
 8002cee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cf2:	f7fd fac5 	bl	8000280 <__aeabi_uldivmod>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <UART_SetConfig+0x4e4>)
 8002cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	2164      	movs	r1, #100	; 0x64
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	3332      	adds	r3, #50	; 0x32
 8002d0e:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <UART_SetConfig+0x4e4>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1a:	441c      	add	r4, r3
 8002d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d20:	2200      	movs	r2, #0
 8002d22:	673b      	str	r3, [r7, #112]	; 0x70
 8002d24:	677a      	str	r2, [r7, #116]	; 0x74
 8002d26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d2a:	4642      	mov	r2, r8
 8002d2c:	464b      	mov	r3, r9
 8002d2e:	1891      	adds	r1, r2, r2
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	415b      	adcs	r3, r3
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	1851      	adds	r1, r2, r1
 8002d3e:	6039      	str	r1, [r7, #0]
 8002d40:	4649      	mov	r1, r9
 8002d42:	414b      	adcs	r3, r1
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d52:	4659      	mov	r1, fp
 8002d54:	00cb      	lsls	r3, r1, #3
 8002d56:	4651      	mov	r1, sl
 8002d58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	00ca      	lsls	r2, r1, #3
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	4603      	mov	r3, r0
 8002d66:	4642      	mov	r2, r8
 8002d68:	189b      	adds	r3, r3, r2
 8002d6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d6c:	464b      	mov	r3, r9
 8002d6e:	460a      	mov	r2, r1
 8002d70:	eb42 0303 	adc.w	r3, r2, r3
 8002d74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8002d80:	667a      	str	r2, [r7, #100]	; 0x64
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d8e:	4649      	mov	r1, r9
 8002d90:	008b      	lsls	r3, r1, #2
 8002d92:	4641      	mov	r1, r8
 8002d94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d98:	4641      	mov	r1, r8
 8002d9a:	008a      	lsls	r2, r1, #2
 8002d9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002da0:	f7fd fa6e 	bl	8000280 <__aeabi_uldivmod>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <UART_SetConfig+0x4e4>)
 8002daa:	fba3 1302 	umull	r1, r3, r3, r2
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2164      	movs	r1, #100	; 0x64
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	3332      	adds	r3, #50	; 0x32
 8002dbc:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <UART_SetConfig+0x4e4>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	f003 020f 	and.w	r2, r3, #15
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4422      	add	r2, r4
 8002dd0:	609a      	str	r2, [r3, #8]
}
 8002dd2:	bf00      	nop
 8002dd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dde:	bf00      	nop
 8002de0:	51eb851f 	.word	0x51eb851f

08002de4 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <NRF24_DelayMicroSeconds+0x3c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <NRF24_DelayMicroSeconds+0x40>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	0c9a      	lsrs	r2, r3, #18
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8002e04:	bf00      	nop
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1e5a      	subs	r2, r3, #1
 8002e0a:	60fa      	str	r2, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1fa      	bne.n	8002e06 <NRF24_DelayMicroSeconds+0x22>
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000028 	.word	0x20000028
 8002e24:	165e9f81 	.word	0x165e9f81

08002e28 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <NRF24_csn+0x20>
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <NRF24_csn+0x38>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <NRF24_csn+0x3c>)
 8002e3c:	8811      	ldrh	r1, [r2, #0]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe f9f3 	bl	800122c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8002e46:	e007      	b.n	8002e58 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <NRF24_csn+0x38>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <NRF24_csn+0x3c>)
 8002e4e:	8811      	ldrh	r1, [r2, #0]
 8002e50:	2200      	movs	r2, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe f9ea 	bl	800122c <HAL_GPIO_WritePin>
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000184 	.word	0x20000184
 8002e64:	20000188 	.word	0x20000188

08002e68 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <NRF24_ce+0x20>
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <NRF24_ce+0x38>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <NRF24_ce+0x3c>)
 8002e7c:	8811      	ldrh	r1, [r2, #0]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe f9d3 	bl	800122c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8002e86:	e007      	b.n	8002e98 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <NRF24_ce+0x38>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <NRF24_ce+0x3c>)
 8002e8e:	8811      	ldrh	r1, [r2, #0]
 8002e90:	2200      	movs	r2, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe f9ca 	bl	800122c <HAL_GPIO_WritePin>
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000184 	.word	0x20000184
 8002ea4:	2000018a 	.word	0x2000018a

08002ea8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7ff ffb8 	bl	8002e28 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002ebc:	f107 010c 	add.w	r1, r7, #12
 8002ec0:	2364      	movs	r3, #100	; 0x64
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	480a      	ldr	r0, [pc, #40]	; (8002ef0 <NRF24_read_register+0x48>)
 8002ec6:	f7fe feac 	bl	8001c22 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8002eca:	f107 030c 	add.w	r3, r7, #12
 8002ece:	1c59      	adds	r1, r3, #1
 8002ed0:	2364      	movs	r3, #100	; 0x64
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4806      	ldr	r0, [pc, #24]	; (8002ef0 <NRF24_read_register+0x48>)
 8002ed6:	f7fe ffe0 	bl	8001e9a <HAL_SPI_Receive>
	retData = spiBuf[1];
 8002eda:	7b7b      	ldrb	r3, [r7, #13]
 8002edc:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7ff ffa2 	bl	8002e28 <NRF24_csn>
	return retData;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	2000018c 	.word	0x2000018c

08002ef4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	6039      	str	r1, [r7, #0]
 8002efe:	71fb      	strb	r3, [r7, #7]
 8002f00:	4613      	mov	r3, r2
 8002f02:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7ff ff8f 	bl	8002e28 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002f0e:	f107 010c 	add.w	r1, r7, #12
 8002f12:	2364      	movs	r3, #100	; 0x64
 8002f14:	2201      	movs	r2, #1
 8002f16:	4808      	ldr	r0, [pc, #32]	; (8002f38 <NRF24_read_registerN+0x44>)
 8002f18:	f7fe fe83 	bl	8001c22 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8002f1c:	79bb      	ldrb	r3, [r7, #6]
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	2364      	movs	r3, #100	; 0x64
 8002f22:	6839      	ldr	r1, [r7, #0]
 8002f24:	4804      	ldr	r0, [pc, #16]	; (8002f38 <NRF24_read_registerN+0x44>)
 8002f26:	f7fe ffb8 	bl	8001e9a <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	f7ff ff7c 	bl	8002e28 <NRF24_csn>
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	2000018c 	.word	0x2000018c

08002f3c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	460a      	mov	r2, r1
 8002f46:	71fb      	strb	r3, [r7, #7]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7ff ff6b 	bl	8002e28 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	f043 0320 	orr.w	r3, r3, #32
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8002f5c:	79bb      	ldrb	r3, [r7, #6]
 8002f5e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8002f60:	f107 010c 	add.w	r1, r7, #12
 8002f64:	2364      	movs	r3, #100	; 0x64
 8002f66:	2202      	movs	r2, #2
 8002f68:	4804      	ldr	r0, [pc, #16]	; (8002f7c <NRF24_write_register+0x40>)
 8002f6a:	f7fe fe5a 	bl	8001c22 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f7ff ff5a 	bl	8002e28 <NRF24_csn>
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	2000018c 	.word	0x2000018c

08002f80 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7ff ff49 	bl	8002e28 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f043 0320 	orr.w	r3, r3, #32
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002fa0:	f107 010c 	add.w	r1, r7, #12
 8002fa4:	2364      	movs	r3, #100	; 0x64
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4808      	ldr	r0, [pc, #32]	; (8002fcc <NRF24_write_registerN+0x4c>)
 8002faa:	f7fe fe3a 	bl	8001c22 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8002fae:	79bb      	ldrb	r3, [r7, #6]
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	2364      	movs	r3, #100	; 0x64
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	4805      	ldr	r0, [pc, #20]	; (8002fcc <NRF24_write_registerN+0x4c>)
 8002fb8:	f7fe fe33 	bl	8001c22 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	f7ff ff33 	bl	8002e28 <NRF24_csn>
}
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2000018c 	.word	0x2000018c

08002fd0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7ff ff23 	bl	8002e28 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8002fe2:	23a0      	movs	r3, #160	; 0xa0
 8002fe4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8002fe6:	f107 010f 	add.w	r1, r7, #15
 8002fea:	2364      	movs	r3, #100	; 0x64
 8002fec:	2201      	movs	r2, #1
 8002fee:	4808      	ldr	r0, [pc, #32]	; (8003010 <NRF24_write_payload+0x40>)
 8002ff0:	f7fe fe17 	bl	8001c22 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	2364      	movs	r3, #100	; 0x64
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4804      	ldr	r0, [pc, #16]	; (8003010 <NRF24_write_payload+0x40>)
 8002ffe:	f7fe fe10 	bl	8001c22 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003002:	2001      	movs	r0, #1
 8003004:	f7ff ff10 	bl	8002e28 <NRF24_csn>
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	2000018c 	.word	0x2000018c

08003014 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8003020:	f000 fa12 	bl	8003448 <NRF24_getPayloadSize>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	4293      	cmp	r3, r2
 800302c:	d303      	bcc.n	8003036 <NRF24_read_payload+0x22>
 800302e:	f000 fa0b 	bl	8003448 <NRF24_getPayloadSize>
 8003032:	4603      	mov	r3, r0
 8003034:	e000      	b.n	8003038 <NRF24_read_payload+0x24>
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800303a:	2000      	movs	r0, #0
 800303c:	f7ff fef4 	bl	8002e28 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8003040:	2361      	movs	r3, #97	; 0x61
 8003042:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8003044:	f107 010e 	add.w	r1, r7, #14
 8003048:	2364      	movs	r3, #100	; 0x64
 800304a:	2201      	movs	r2, #1
 800304c:	4808      	ldr	r0, [pc, #32]	; (8003070 <NRF24_read_payload+0x5c>)
 800304e:	f7fe fde8 	bl	8001c22 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	b29a      	uxth	r2, r3
 8003056:	2364      	movs	r3, #100	; 0x64
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4805      	ldr	r0, [pc, #20]	; (8003070 <NRF24_read_payload+0x5c>)
 800305c:	f7fe ff1d 	bl	8001e9a <HAL_SPI_Receive>
	NRF24_csn(1);
 8003060:	2001      	movs	r0, #1
 8003062:	f7ff fee1 	bl	8002e28 <NRF24_csn>
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000018c 	.word	0x2000018c

08003074 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8003078:	21ff      	movs	r1, #255	; 0xff
 800307a:	20e1      	movs	r0, #225	; 0xe1
 800307c:	f7ff ff5e 	bl	8002f3c <NRF24_write_register>
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}

08003084 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8003088:	21ff      	movs	r1, #255	; 0xff
 800308a:	20e2      	movs	r0, #226	; 0xe2
 800308c:	f7ff ff56 	bl	8002f3c <NRF24_write_register>
}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}

08003094 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800309a:	2007      	movs	r0, #7
 800309c:	f7ff ff04 	bl	8002ea8 <NRF24_read_register>
 80030a0:	4603      	mov	r3, r0
 80030a2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80030a4:	79fb      	ldrb	r3, [r7, #7]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80030b0:	b082      	sub	sp, #8
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]
 80030c0:	4613      	mov	r3, r2
 80030c2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80030c4:	4b66      	ldr	r3, [pc, #408]	; (8003260 <NRF24_begin+0x1b0>)
 80030c6:	4618      	mov	r0, r3
 80030c8:	f107 031c 	add.w	r3, r7, #28
 80030cc:	2258      	movs	r2, #88	; 0x58
 80030ce:	4619      	mov	r1, r3
 80030d0:	f001 f830 	bl	8004134 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80030d4:	4a63      	ldr	r2, [pc, #396]	; (8003264 <NRF24_begin+0x1b4>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80030da:	4a63      	ldr	r2, [pc, #396]	; (8003268 <NRF24_begin+0x1b8>)
 80030dc:	887b      	ldrh	r3, [r7, #2]
 80030de:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;  
 80030e0:	4a62      	ldr	r2, [pc, #392]	; (800326c <NRF24_begin+0x1bc>)
 80030e2:	883b      	ldrh	r3, [r7, #0]
 80030e4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80030e6:	2001      	movs	r0, #1
 80030e8:	f7ff fe9e 	bl	8002e28 <NRF24_csn>
	NRF24_ce(0);
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7ff febb 	bl	8002e68 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80030f2:	2005      	movs	r0, #5
 80030f4:	f7fd fdf4 	bl	8000ce0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08); //0x08
 80030f8:	2108      	movs	r1, #8
 80030fa:	2000      	movs	r0, #0
 80030fc:	f7ff ff1e 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f); //0x3f
 8003100:	213f      	movs	r1, #63	; 0x3f
 8003102:	2001      	movs	r0, #1
 8003104:	f7ff ff1a 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03); //0x03
 8003108:	2103      	movs	r1, #3
 800310a:	2002      	movs	r0, #2
 800310c:	f7ff ff16 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03); //0x03
 8003110:	2103      	movs	r1, #3
 8003112:	2003      	movs	r0, #3
 8003114:	f7ff ff12 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03); //0x03
 8003118:	2103      	movs	r1, #3
 800311a:	2004      	movs	r0, #4
 800311c:	f7ff ff0e 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02); //0x02
 8003120:	2102      	movs	r1, #2
 8003122:	2005      	movs	r0, #5
 8003124:	f7ff ff0a 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f); //0x0f
 8003128:	210f      	movs	r1, #15
 800312a:	2006      	movs	r0, #6
 800312c:	f7ff ff06 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e); //0x0e
 8003130:	210e      	movs	r1, #14
 8003132:	2007      	movs	r0, #7
 8003134:	f7ff ff02 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00); //0x00
 8003138:	2100      	movs	r1, #0
 800313a:	2008      	movs	r0, #8
 800313c:	f7ff fefe 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00); //0x00
 8003140:	2100      	movs	r1, #0
 8003142:	2009      	movs	r0, #9
 8003144:	f7ff fefa 	bl	8002f3c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8003148:	23e7      	movs	r3, #231	; 0xe7
 800314a:	733b      	strb	r3, [r7, #12]
 800314c:	23e7      	movs	r3, #231	; 0xe7
 800314e:	72fb      	strb	r3, [r7, #11]
 8003150:	23e7      	movs	r3, #231	; 0xe7
 8003152:	72bb      	strb	r3, [r7, #10]
 8003154:	23e7      	movs	r3, #231	; 0xe7
 8003156:	727b      	strb	r3, [r7, #9]
 8003158:	23e7      	movs	r3, #231	; 0xe7
 800315a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800315c:	f107 0308 	add.w	r3, r7, #8
 8003160:	2205      	movs	r2, #5
 8003162:	4619      	mov	r1, r3
 8003164:	200a      	movs	r0, #10
 8003166:	f7ff ff0b 	bl	8002f80 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800316a:	23c2      	movs	r3, #194	; 0xc2
 800316c:	733b      	strb	r3, [r7, #12]
 800316e:	23c2      	movs	r3, #194	; 0xc2
 8003170:	72fb      	strb	r3, [r7, #11]
 8003172:	23c2      	movs	r3, #194	; 0xc2
 8003174:	72bb      	strb	r3, [r7, #10]
 8003176:	23c2      	movs	r3, #194	; 0xc2
 8003178:	727b      	strb	r3, [r7, #9]
 800317a:	23c2      	movs	r3, #194	; 0xc2
 800317c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800317e:	f107 0308 	add.w	r3, r7, #8
 8003182:	2205      	movs	r2, #5
 8003184:	4619      	mov	r1, r3
 8003186:	200b      	movs	r0, #11
 8003188:	f7ff fefa 	bl	8002f80 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800318c:	21c3      	movs	r1, #195	; 0xc3
 800318e:	200c      	movs	r0, #12
 8003190:	f7ff fed4 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8003194:	21c4      	movs	r1, #196	; 0xc4
 8003196:	200d      	movs	r0, #13
 8003198:	f7ff fed0 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800319c:	21c5      	movs	r1, #197	; 0xc5
 800319e:	200e      	movs	r0, #14
 80031a0:	f7ff fecc 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80031a4:	21c6      	movs	r1, #198	; 0xc6
 80031a6:	200f      	movs	r0, #15
 80031a8:	f7ff fec8 	bl	8002f3c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80031ac:	23e7      	movs	r3, #231	; 0xe7
 80031ae:	733b      	strb	r3, [r7, #12]
 80031b0:	23e7      	movs	r3, #231	; 0xe7
 80031b2:	72fb      	strb	r3, [r7, #11]
 80031b4:	23e7      	movs	r3, #231	; 0xe7
 80031b6:	72bb      	strb	r3, [r7, #10]
 80031b8:	23e7      	movs	r3, #231	; 0xe7
 80031ba:	727b      	strb	r3, [r7, #9]
 80031bc:	23e7      	movs	r3, #231	; 0xe7
 80031be:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80031c0:	f107 0308 	add.w	r3, r7, #8
 80031c4:	2205      	movs	r2, #5
 80031c6:	4619      	mov	r1, r3
 80031c8:	2010      	movs	r0, #16
 80031ca:	f7ff fed9 	bl	8002f80 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80031ce:	2100      	movs	r1, #0
 80031d0:	2011      	movs	r0, #17
 80031d2:	f7ff feb3 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80031d6:	2100      	movs	r1, #0
 80031d8:	2012      	movs	r0, #18
 80031da:	f7ff feaf 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80031de:	2100      	movs	r1, #0
 80031e0:	2013      	movs	r0, #19
 80031e2:	f7ff feab 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80031e6:	2100      	movs	r1, #0
 80031e8:	2014      	movs	r0, #20
 80031ea:	f7ff fea7 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80031ee:	2100      	movs	r1, #0
 80031f0:	2015      	movs	r0, #21
 80031f2:	f7ff fea3 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80031f6:	2100      	movs	r1, #0
 80031f8:	2016      	movs	r0, #22
 80031fa:	f7ff fe9f 	bl	8002f3c <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80031fe:	f000 fb15 	bl	800382c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8003202:	2100      	movs	r1, #0
 8003204:	201c      	movs	r0, #28
 8003206:	f7ff fe99 	bl	8002f3c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800320a:	2100      	movs	r1, #0
 800320c:	201d      	movs	r0, #29
 800320e:	f7ff fe95 	bl	8002f3c <NRF24_write_register>
	printRadioSettings();
 8003212:	f000 fb25 	bl	8003860 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8003216:	210f      	movs	r1, #15
 8003218:	200f      	movs	r0, #15
 800321a:	f000 f8cd 	bl	80033b8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m18dB);
 800321e:	2000      	movs	r0, #0
 8003220:	f000 f9b3 	bl	800358a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8003224:	2001      	movs	r0, #1
 8003226:	f000 f9e9 	bl	80035fc <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800322a:	2001      	movs	r0, #1
 800322c:	f000 fa2c 	bl	8003688 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8003230:	f000 f97e 	bl	8003530 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8003234:	2020      	movs	r0, #32
 8003236:	f000 f8ef 	bl	8003418 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 800323a:	f000 faee 	bl	800381a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(52);
 800323e:	2034      	movs	r0, #52	; 0x34
 8003240:	f000 f8d5 	bl	80033ee <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8003244:	f7ff ff16 	bl	8003074 <NRF24_flush_tx>
	NRF24_flush_rx();
 8003248:	f7ff ff1c 	bl	8003084 <NRF24_flush_rx>
	
	NRF24_powerDown();
 800324c:	f000 fa44 	bl	80036d8 <NRF24_powerDown>
	
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800325a:	b002      	add	sp, #8
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	2000018c 	.word	0x2000018c
 8003264:	20000184 	.word	0x20000184
 8003268:	20000188 	.word	0x20000188
 800326c:	2000018a 	.word	0x2000018a

08003270 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8003274:	2000      	movs	r0, #0
 8003276:	f7ff fdf7 	bl	8002e68 <NRF24_ce>
	NRF24_flush_tx();
 800327a:	f7ff fefb 	bl	8003074 <NRF24_flush_tx>
	NRF24_flush_rx();
 800327e:	f7ff ff01 	bl	8003084 <NRF24_flush_rx>
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8003294:	f000 fac1 	bl	800381a <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	4619      	mov	r1, r3
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fa5a 	bl	8003756 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80032a2:	f7fd fd11 	bl	8000cc8 <HAL_GetTick>
 80032a6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80032a8:	230a      	movs	r3, #10
 80032aa:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80032ac:	f107 030d 	add.w	r3, r7, #13
 80032b0:	2201      	movs	r2, #1
 80032b2:	4619      	mov	r1, r3
 80032b4:	2008      	movs	r0, #8
 80032b6:	f7ff fe1d 	bl	8002ef4 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80032ba:	f7ff feeb 	bl	8003094 <NRF24_get_status>
 80032be:	4603      	mov	r3, r0
 80032c0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <NRF24_write+0x54>
 80032cc:	f7fd fcfc 	bl	8000cc8 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d8e7      	bhi.n	80032ac <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80032dc:	f107 010b 	add.w	r1, r7, #11
 80032e0:	f107 030c 	add.w	r3, r7, #12
 80032e4:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <NRF24_write+0x90>)
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fa64 	bl	80037b4 <NRF24_whatHappened>
	retStatus = tx_ok;
 80032ec:	7b3b      	ldrb	r3, [r7, #12]
 80032ee:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 80032f0:	4b09      	ldr	r3, [pc, #36]	; (8003318 <NRF24_write+0x90>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 80032f8:	f000 f8b2 	bl	8003460 <NRF24_getDynamicPayloadSize>
 80032fc:	4603      	mov	r3, r0
 80032fe:	461a      	mov	r2, r3
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <NRF24_write+0x94>)
 8003302:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8003304:	f000 f80c 	bl	8003320 <NRF24_available>
	NRF24_flush_tx();
 8003308:	f7ff feb4 	bl	8003074 <NRF24_flush_tx>
	return retStatus;
 800330c:	7bbb      	ldrb	r3, [r7, #14]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	2000017c 	.word	0x2000017c
 800331c:	2000017d 	.word	0x2000017d

08003320 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8003324:	2000      	movs	r0, #0
 8003326:	f000 f9e6 	bl	80036f6 <NRF24_availablePipe>
 800332a:	4603      	mov	r3, r0
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}

08003330 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	4619      	mov	r1, r3
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff fe67 	bl	8003014 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8003346:	2017      	movs	r0, #23
 8003348:	f7ff fdae 	bl	8002ea8 <NRF24_read_register>
 800334c:	4603      	mov	r3, r0
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8003354:	f7ff fe96 	bl	8003084 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8003358:	f000 f882 	bl	8003460 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf14      	ite	ne
 8003362:	2301      	movne	r3, #1
 8003364:	2300      	moveq	r3, #0
 8003366:	b2db      	uxtb	r3, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800337a:	463b      	mov	r3, r7
 800337c:	2205      	movs	r2, #5
 800337e:	4619      	mov	r1, r3
 8003380:	200a      	movs	r0, #10
 8003382:	f7ff fdfd 	bl	8002f80 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8003386:	463b      	mov	r3, r7
 8003388:	2205      	movs	r2, #5
 800338a:	4619      	mov	r1, r3
 800338c:	2010      	movs	r0, #16
 800338e:	f7ff fdf7 	bl	8002f80 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8003392:	2320      	movs	r3, #32
 8003394:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <NRF24_openWritingPipe+0x44>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	4293      	cmp	r3, r2
 800339e:	bf28      	it	cs
 80033a0:	4613      	movcs	r3, r2
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	4619      	mov	r1, r3
 80033a6:	2011      	movs	r0, #17
 80033a8:	f7ff fdc8 	bl	8002f3c <NRF24_write_register>
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	2000017e 	.word	0x2000017e

080033b8 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	460a      	mov	r2, r1
 80033c2:	71fb      	strb	r3, [r7, #7]
 80033c4:	4613      	mov	r3, r2
 80033c6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	b25a      	sxtb	r2, r3
 80033ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	b25b      	sxtb	r3, r3
 80033d8:	4313      	orrs	r3, r2
 80033da:	b25b      	sxtb	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	4619      	mov	r1, r3
 80033e0:	2004      	movs	r0, #4
 80033e2:	f7ff fdab 	bl	8002f3c <NRF24_write_register>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	4603      	mov	r3, r0
 80033f6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80033f8:	237f      	movs	r3, #127	; 0x7f
 80033fa:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	4293      	cmp	r3, r2
 8003402:	bf28      	it	cs
 8003404:	4613      	movcs	r3, r2
 8003406:	b2db      	uxtb	r3, r3
 8003408:	4619      	mov	r1, r3
 800340a:	2005      	movs	r0, #5
 800340c:	f7ff fd96 	bl	8002f3c <NRF24_write_register>
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8003422:	2320      	movs	r3, #32
 8003424:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8003426:	7bfa      	ldrb	r2, [r7, #15]
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	4293      	cmp	r3, r2
 800342c:	bf28      	it	cs
 800342e:	4613      	movcs	r3, r2
 8003430:	b2da      	uxtb	r2, r3
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <NRF24_setPayloadSize+0x2c>)
 8003434:	701a      	strb	r2, [r3, #0]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	2000017e 	.word	0x2000017e

08003448 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
	return payload_size;
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <NRF24_getPayloadSize+0x14>)
 800344e:	781b      	ldrb	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	2000017e 	.word	0x2000017e

08003460 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8003464:	2060      	movs	r0, #96	; 0x60
 8003466:	f7ff fd1f 	bl	8002ea8 <NRF24_read_register>
 800346a:	4603      	mov	r3, r0
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}

08003470 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8003474:	201d      	movs	r0, #29
 8003476:	f7ff fd17 	bl	8002ea8 <NRF24_read_register>
 800347a:	4603      	mov	r3, r0
 800347c:	f043 0306 	orr.w	r3, r3, #6
 8003480:	b2db      	uxtb	r3, r3
 8003482:	4619      	mov	r1, r3
 8003484:	201d      	movs	r0, #29
 8003486:	f7ff fd59 	bl	8002f3c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800348a:	201d      	movs	r0, #29
 800348c:	f7ff fd0c 	bl	8002ea8 <NRF24_read_register>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8003496:	f000 f9c9 	bl	800382c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800349a:	201d      	movs	r0, #29
 800349c:	f7ff fd04 	bl	8002ea8 <NRF24_read_register>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f043 0306 	orr.w	r3, r3, #6
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4619      	mov	r1, r3
 80034aa:	201d      	movs	r0, #29
 80034ac:	f7ff fd46 	bl	8002f3c <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80034b0:	201c      	movs	r0, #28
 80034b2:	f7ff fcf9 	bl	8002ea8 <NRF24_read_register>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f043 0303 	orr.w	r3, r3, #3
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	4619      	mov	r1, r3
 80034c0:	201c      	movs	r0, #28
 80034c2:	f7ff fd3b 	bl	8002f3c <NRF24_write_register>
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80034d0:	201d      	movs	r0, #29
 80034d2:	f7ff fce9 	bl	8002ea8 <NRF24_read_register>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	4619      	mov	r1, r3
 80034e0:	201d      	movs	r0, #29
 80034e2:	f7ff fd2b 	bl	8002f3c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80034e6:	201d      	movs	r0, #29
 80034e8:	f7ff fcde 	bl	8002ea8 <NRF24_read_register>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10c      	bne.n	800350c <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80034f2:	f000 f99b 	bl	800382c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80034f6:	201d      	movs	r0, #29
 80034f8:	f7ff fcd6 	bl	8002ea8 <NRF24_read_register>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f043 0304 	orr.w	r3, r3, #4
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	201d      	movs	r0, #29
 8003508:	f7ff fd18 	bl	8002f3c <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 800350c:	201c      	movs	r0, #28
 800350e:	f7ff fccb 	bl	8002ea8 <NRF24_read_register>
 8003512:	4603      	mov	r3, r0
 8003514:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4619      	mov	r1, r3
 800351c:	201c      	movs	r0, #28
 800351e:	f7ff fd0d 	bl	8002f3c <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8003522:	4b02      	ldr	r3, [pc, #8]	; (800352c <NRF24_enableDynamicPayloads+0x60>)
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
	
}
 8003528:	bf00      	nop
 800352a:	bd80      	pop	{r7, pc}
 800352c:	2000017f 	.word	0x2000017f

08003530 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8003534:	201d      	movs	r0, #29
 8003536:	f7ff fcb7 	bl	8002ea8 <NRF24_read_register>
 800353a:	4603      	mov	r3, r0
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	b2db      	uxtb	r3, r3
 8003542:	4619      	mov	r1, r3
 8003544:	201d      	movs	r0, #29
 8003546:	f7ff fcf9 	bl	8002f3c <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800354a:	2100      	movs	r1, #0
 800354c:	201c      	movs	r0, #28
 800354e:	f7ff fcf5 	bl	8002f3c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8003552:	4b02      	ldr	r3, [pc, #8]	; (800355c <NRF24_disableDynamicPayloads+0x2c>)
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}
 800355c:	2000017f 	.word	0x2000017f

08003560 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8003570:	213f      	movs	r1, #63	; 0x3f
 8003572:	2001      	movs	r0, #1
 8003574:	f7ff fce2 	bl	8002f3c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8003578:	e003      	b.n	8003582 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800357a:	2100      	movs	r1, #0
 800357c:	2001      	movs	r0, #1
 800357e:	f7ff fcdd 	bl	8002f3c <NRF24_write_register>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	4603      	mov	r3, r0
 8003592:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8003594:	2006      	movs	r0, #6
 8003596:	f7ff fc87 	bl	8002ea8 <NRF24_read_register>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	f023 0306 	bic.w	r3, r3, #6
 80035a4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d104      	bne.n	80035b6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	f043 0306 	orr.w	r3, r3, #6
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	e019      	b.n	80035ea <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d104      	bne.n	80035c6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	f043 0304 	orr.w	r3, r3, #4
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	e011      	b.n	80035ea <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d104      	bne.n	80035d6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	f043 0302 	orr.w	r3, r3, #2
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e009      	b.n	80035ea <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d006      	beq.n	80035ea <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d103      	bne.n	80035ea <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	f043 0306 	orr.w	r3, r3, #6
 80035e8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	4619      	mov	r1, r3
 80035ee:	2006      	movs	r0, #6
 80035f0:	f7ff fca4 	bl	8002f3c <NRF24_write_register>
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800360a:	2006      	movs	r0, #6
 800360c:	f7ff fc4c 	bl	8002ea8 <NRF24_read_register>
 8003610:	4603      	mov	r3, r0
 8003612:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8003614:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <NRF24_setDataRate+0x88>)
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800361a:	7bbb      	ldrb	r3, [r7, #14]
 800361c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003620:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d107      	bne.n	8003638 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8003628:	4b16      	ldr	r3, [pc, #88]	; (8003684 <NRF24_setDataRate+0x88>)
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800362e:	7bbb      	ldrb	r3, [r7, #14]
 8003630:	f043 0320 	orr.w	r3, r3, #32
 8003634:	73bb      	strb	r3, [r7, #14]
 8003636:	e00d      	b.n	8003654 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <NRF24_setDataRate+0x88>)
 8003640:	2201      	movs	r2, #1
 8003642:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8003644:	7bbb      	ldrb	r3, [r7, #14]
 8003646:	f043 0308 	orr.w	r3, r3, #8
 800364a:	73bb      	strb	r3, [r7, #14]
 800364c:	e002      	b.n	8003654 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <NRF24_setDataRate+0x88>)
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8003654:	7bbb      	ldrb	r3, [r7, #14]
 8003656:	4619      	mov	r1, r3
 8003658:	2006      	movs	r0, #6
 800365a:	f7ff fc6f 	bl	8002f3c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800365e:	2006      	movs	r0, #6
 8003660:	f7ff fc22 	bl	8002ea8 <NRF24_read_register>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	7bbb      	ldrb	r3, [r7, #14]
 800366a:	4293      	cmp	r3, r2
 800366c:	d102      	bne.n	8003674 <NRF24_setDataRate+0x78>
  {
    result = true;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
 8003672:	e002      	b.n	800367a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <NRF24_setDataRate+0x88>)
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800367a:	7bfb      	ldrb	r3, [r7, #15]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000180 	.word	0x20000180

08003688 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8003692:	2000      	movs	r0, #0
 8003694:	f7ff fc08 	bl	8002ea8 <NRF24_read_register>
 8003698:	4603      	mov	r3, r0
 800369a:	f023 030c 	bic.w	r3, r3, #12
 800369e:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d00f      	beq.n	80036c6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d104      	bne.n	80036b6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	f043 0308 	orr.w	r3, r3, #8
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	e007      	b.n	80036c6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	f043 0308 	orr.w	r3, r3, #8
 80036bc:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	f043 0304 	orr.w	r3, r3, #4
 80036c4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	4619      	mov	r1, r3
 80036ca:	2000      	movs	r0, #0
 80036cc:	f7ff fc36 	bl	8002f3c <NRF24_write_register>
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80036dc:	2000      	movs	r0, #0
 80036de:	f7ff fbe3 	bl	8002ea8 <NRF24_read_register>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f023 0302 	bic.w	r3, r3, #2
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	4619      	mov	r1, r3
 80036ec:	2000      	movs	r0, #0
 80036ee:	f7ff fc25 	bl	8002f3c <NRF24_write_register>
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80036fe:	f7ff fcc9 	bl	8003094 <NRF24_get_status>
 8003702:	4603      	mov	r3, r0
 8003704:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf14      	ite	ne
 8003710:	2301      	movne	r3, #1
 8003712:	2300      	moveq	r3, #0
 8003714:	73bb      	strb	r3, [r7, #14]

  if (result)
 8003716:	7bbb      	ldrb	r3, [r7, #14]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d017      	beq.n	800374c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	b2da      	uxtb	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8003732:	2140      	movs	r1, #64	; 0x40
 8003734:	2007      	movs	r0, #7
 8003736:	f7ff fc01 	bl	8002f3c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8003744:	2120      	movs	r1, #32
 8003746:	2007      	movs	r0, #7
 8003748:	f7ff fbf8 	bl	8002f3c <NRF24_write_register>
    }
  }
  return result;
 800374c:	7bbb      	ldrb	r3, [r7, #14]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8003762:	2000      	movs	r0, #0
 8003764:	f7ff fb80 	bl	8002e68 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8003768:	2000      	movs	r0, #0
 800376a:	f7ff fb9d 	bl	8002ea8 <NRF24_read_register>
 800376e:	4603      	mov	r3, r0
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	4619      	mov	r1, r3
 800377e:	2000      	movs	r0, #0
 8003780:	f7ff fbdc 	bl	8002f3c <NRF24_write_register>
  NRF24_ce(1);
 8003784:	2001      	movs	r0, #1
 8003786:	f7ff fb6f 	bl	8002e68 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 800378a:	2096      	movs	r0, #150	; 0x96
 800378c:	f7ff fb2a 	bl	8002de4 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	4619      	mov	r1, r3
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff fc1b 	bl	8002fd0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 800379a:	2001      	movs	r0, #1
 800379c:	f7ff fb64 	bl	8002e68 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 80037a0:	200f      	movs	r0, #15
 80037a2:	f7ff fb1f 	bl	8002de4 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 80037a6:	2000      	movs	r0, #0
 80037a8:	f7ff fb5e 	bl	8002e68 <NRF24_ce>
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80037c0:	f7ff fc68 	bl	8003094 <NRF24_get_status>
 80037c4:	4603      	mov	r3, r0
 80037c6:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80037ce:	2170      	movs	r1, #112	; 0x70
 80037d0:	2007      	movs	r0, #7
 80037d2:	f7ff fbb3 	bl	8002f3c <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf14      	ite	ne
 80037e0:	2301      	movne	r3, #1
 80037e2:	2300      	moveq	r3, #0
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf14      	ite	ne
 8003808:	2301      	movne	r3, #1
 800380a:	2300      	moveq	r3, #0
 800380c:	b2da      	uxtb	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	701a      	strb	r2, [r3, #0]
}
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800381e:	2170      	movs	r1, #112	; 0x70
 8003820:	2007      	movs	r0, #7
 8003822:	f7ff fb8b 	bl	8002f3c <NRF24_write_register>
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8003832:	2000      	movs	r0, #0
 8003834:	f7ff faf8 	bl	8002e28 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8003838:	2350      	movs	r3, #80	; 0x50
 800383a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800383c:	2373      	movs	r3, #115	; 0x73
 800383e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8003840:	1d39      	adds	r1, r7, #4
 8003842:	2364      	movs	r3, #100	; 0x64
 8003844:	2202      	movs	r2, #2
 8003846:	4805      	ldr	r0, [pc, #20]	; (800385c <NRF24_ACTIVATE_cmd+0x30>)
 8003848:	f7fe f9eb 	bl	8001c22 <HAL_SPI_Transmit>
	NRF24_csn(1);
 800384c:	2001      	movs	r0, #1
 800384e:	f7ff faeb 	bl	8002e28 <NRF24_csn>
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	2000018c 	.word	0x2000018c

08003860 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003862:	b0a1      	sub	sp, #132	; 0x84
 8003864:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8003866:	f107 0308 	add.w	r3, r7, #8
 800386a:	49c3      	ldr	r1, [pc, #780]	; (8003b78 <printRadioSettings+0x318>)
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fc77 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003872:	f107 0308 	add.w	r3, r7, #8
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc fcaa 	bl	80001d0 <strlen>
 800387c:	4603      	mov	r3, r0
 800387e:	b29a      	uxth	r2, r3
 8003880:	f107 0108 	add.w	r1, r7, #8
 8003884:	230a      	movs	r3, #10
 8003886:	48bd      	ldr	r0, [pc, #756]	; (8003b7c <printRadioSettings+0x31c>)
 8003888:	f7fe ff37 	bl	80026fa <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800388c:	2000      	movs	r0, #0
 800388e:	f7ff fb0b 	bl	8002ea8 <NRF24_read_register>
 8003892:	4603      	mov	r3, r0
 8003894:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8003898:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80038a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d006      	beq.n	80038be <printRadioSettings+0x5e>
 80038b0:	f107 0308 	add.w	r3, r7, #8
 80038b4:	49b2      	ldr	r1, [pc, #712]	; (8003b80 <printRadioSettings+0x320>)
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fc52 	bl	8004160 <siprintf>
 80038bc:	e00c      	b.n	80038d8 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80038be:	f107 0308 	add.w	r3, r7, #8
 80038c2:	49b0      	ldr	r1, [pc, #704]	; (8003b84 <printRadioSettings+0x324>)
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fc4b 	bl	8004160 <siprintf>
 80038ca:	e005      	b.n	80038d8 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80038cc:	f107 0308 	add.w	r3, r7, #8
 80038d0:	49ad      	ldr	r1, [pc, #692]	; (8003b88 <printRadioSettings+0x328>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fc44 	bl	8004160 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80038d8:	f107 0308 	add.w	r3, r7, #8
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fc fc77 	bl	80001d0 <strlen>
 80038e2:	4603      	mov	r3, r0
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	f107 0108 	add.w	r1, r7, #8
 80038ea:	230a      	movs	r3, #10
 80038ec:	48a3      	ldr	r0, [pc, #652]	; (8003b7c <printRadioSettings+0x31c>)
 80038ee:	f7fe ff04 	bl	80026fa <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80038f2:	2001      	movs	r0, #1
 80038f4:	f7ff fad8 	bl	8002ea8 <NRF24_read_register>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80038fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003902:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003906:	2b00      	cmp	r3, #0
 8003908:	bfcc      	ite	gt
 800390a:	2301      	movgt	r3, #1
 800390c:	2300      	movle	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003912:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003916:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800391a:	2b00      	cmp	r3, #0
 800391c:	bfcc      	ite	gt
 800391e:	2301      	movgt	r3, #1
 8003920:	2300      	movle	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003926:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800392a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800392e:	2b00      	cmp	r3, #0
 8003930:	bfcc      	ite	gt
 8003932:	2301      	movgt	r3, #1
 8003934:	2300      	movle	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800393a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800393e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003942:	2b00      	cmp	r3, #0
 8003944:	bfcc      	ite	gt
 8003946:	2301      	movgt	r3, #1
 8003948:	2300      	movle	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800394e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003952:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003956:	2b00      	cmp	r3, #0
 8003958:	bfcc      	ite	gt
 800395a:	2301      	movgt	r3, #1
 800395c:	2300      	movle	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003962:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003966:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800396a:	2b00      	cmp	r3, #0
 800396c:	bfcc      	ite	gt
 800396e:	2301      	movgt	r3, #1
 8003970:	2300      	movle	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f107 0008 	add.w	r0, r7, #8
 8003978:	9303      	str	r3, [sp, #12]
 800397a:	9402      	str	r4, [sp, #8]
 800397c:	9101      	str	r1, [sp, #4]
 800397e:	9200      	str	r2, [sp, #0]
 8003980:	4633      	mov	r3, r6
 8003982:	462a      	mov	r2, r5
 8003984:	4981      	ldr	r1, [pc, #516]	; (8003b8c <printRadioSettings+0x32c>)
 8003986:	f000 fbeb 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800398a:	f107 0308 	add.w	r3, r7, #8
 800398e:	4618      	mov	r0, r3
 8003990:	f7fc fc1e 	bl	80001d0 <strlen>
 8003994:	4603      	mov	r3, r0
 8003996:	b29a      	uxth	r2, r3
 8003998:	f107 0108 	add.w	r1, r7, #8
 800399c:	230a      	movs	r3, #10
 800399e:	4877      	ldr	r0, [pc, #476]	; (8003b7c <printRadioSettings+0x31c>)
 80039a0:	f7fe feab 	bl	80026fa <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80039a4:	2002      	movs	r0, #2
 80039a6:	f7ff fa7f 	bl	8002ea8 <NRF24_read_register>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80039b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80039b4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bfcc      	ite	gt
 80039bc:	2301      	movgt	r3, #1
 80039be:	2300      	movle	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80039c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80039c8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bfcc      	ite	gt
 80039d0:	2301      	movgt	r3, #1
 80039d2:	2300      	movle	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80039d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80039dc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bfcc      	ite	gt
 80039e4:	2301      	movgt	r3, #1
 80039e6:	2300      	movle	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80039ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80039f0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bfcc      	ite	gt
 80039f8:	2301      	movgt	r3, #1
 80039fa:	2300      	movle	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003a00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003a04:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bfcc      	ite	gt
 8003a0c:	2301      	movgt	r3, #1
 8003a0e:	2300      	movle	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003a14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003a18:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bfcc      	ite	gt
 8003a20:	2301      	movgt	r3, #1
 8003a22:	2300      	movle	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f107 0008 	add.w	r0, r7, #8
 8003a2a:	9303      	str	r3, [sp, #12]
 8003a2c:	9402      	str	r4, [sp, #8]
 8003a2e:	9101      	str	r1, [sp, #4]
 8003a30:	9200      	str	r2, [sp, #0]
 8003a32:	4633      	mov	r3, r6
 8003a34:	462a      	mov	r2, r5
 8003a36:	4956      	ldr	r1, [pc, #344]	; (8003b90 <printRadioSettings+0x330>)
 8003a38:	f000 fb92 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003a3c:	f107 0308 	add.w	r3, r7, #8
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fbc5 	bl	80001d0 <strlen>
 8003a46:	4603      	mov	r3, r0
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	f107 0108 	add.w	r1, r7, #8
 8003a4e:	230a      	movs	r3, #10
 8003a50:	484a      	ldr	r0, [pc, #296]	; (8003b7c <printRadioSettings+0x31c>)
 8003a52:	f7fe fe52 	bl	80026fa <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8003a56:	2003      	movs	r0, #3
 8003a58:	f7ff fa26 	bl	8002ea8 <NRF24_read_register>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8003a66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8003a70:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003a74:	f107 0308 	add.w	r3, r7, #8
 8003a78:	4946      	ldr	r1, [pc, #280]	; (8003b94 <printRadioSettings+0x334>)
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fb70 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003a80:	f107 0308 	add.w	r3, r7, #8
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fc fba3 	bl	80001d0 <strlen>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	f107 0108 	add.w	r1, r7, #8
 8003a92:	230a      	movs	r3, #10
 8003a94:	4839      	ldr	r0, [pc, #228]	; (8003b7c <printRadioSettings+0x31c>)
 8003a96:	f7fe fe30 	bl	80026fa <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8003a9a:	2005      	movs	r0, #5
 8003a9c:	f7ff fa04 	bl	8002ea8 <NRF24_read_register>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8003aa6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003aae:	f107 0308 	add.w	r3, r7, #8
 8003ab2:	4939      	ldr	r1, [pc, #228]	; (8003b98 <printRadioSettings+0x338>)
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fb53 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003aba:	f107 0308 	add.w	r3, r7, #8
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fc fb86 	bl	80001d0 <strlen>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	f107 0108 	add.w	r1, r7, #8
 8003acc:	230a      	movs	r3, #10
 8003ace:	482b      	ldr	r0, [pc, #172]	; (8003b7c <printRadioSettings+0x31c>)
 8003ad0:	f7fe fe13 	bl	80026fa <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8003ad4:	2006      	movs	r0, #6
 8003ad6:	f7ff f9e7 	bl	8002ea8 <NRF24_read_register>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8003ae0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d006      	beq.n	8003afa <printRadioSettings+0x29a>
 8003aec:	f107 0308 	add.w	r3, r7, #8
 8003af0:	492a      	ldr	r1, [pc, #168]	; (8003b9c <printRadioSettings+0x33c>)
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fb34 	bl	8004160 <siprintf>
 8003af8:	e005      	b.n	8003b06 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8003afa:	f107 0308 	add.w	r3, r7, #8
 8003afe:	4928      	ldr	r1, [pc, #160]	; (8003ba0 <printRadioSettings+0x340>)
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fb2d 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fc fb60 	bl	80001d0 <strlen>
 8003b10:	4603      	mov	r3, r0
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	f107 0108 	add.w	r1, r7, #8
 8003b18:	230a      	movs	r3, #10
 8003b1a:	4818      	ldr	r0, [pc, #96]	; (8003b7c <printRadioSettings+0x31c>)
 8003b1c:	f7fe fded 	bl	80026fa <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8003b20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b24:	f003 0306 	and.w	r3, r3, #6
 8003b28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8003b2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8003b36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <printRadioSettings+0x2ec>
 8003b3e:	f107 0308 	add.w	r3, r7, #8
 8003b42:	4918      	ldr	r1, [pc, #96]	; (8003ba4 <printRadioSettings+0x344>)
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fb0b 	bl	8004160 <siprintf>
 8003b4a:	e03b      	b.n	8003bc4 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8003b4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d106      	bne.n	8003b62 <printRadioSettings+0x302>
 8003b54:	f107 0308 	add.w	r3, r7, #8
 8003b58:	4913      	ldr	r1, [pc, #76]	; (8003ba8 <printRadioSettings+0x348>)
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fb00 	bl	8004160 <siprintf>
 8003b60:	e030      	b.n	8003bc4 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8003b62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d122      	bne.n	8003bb0 <printRadioSettings+0x350>
 8003b6a:	f107 0308 	add.w	r3, r7, #8
 8003b6e:	490f      	ldr	r1, [pc, #60]	; (8003bac <printRadioSettings+0x34c>)
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 faf5 	bl	8004160 <siprintf>
 8003b76:	e025      	b.n	8003bc4 <printRadioSettings+0x364>
 8003b78:	08004aa8 	.word	0x08004aa8
 8003b7c:	200001e4 	.word	0x200001e4
 8003b80:	08004adc 	.word	0x08004adc
 8003b84:	08004af8 	.word	0x08004af8
 8003b88:	08004b14 	.word	0x08004b14
 8003b8c:	08004b28 	.word	0x08004b28
 8003b90:	08004b6c 	.word	0x08004b6c
 8003b94:	08004bb8 	.word	0x08004bb8
 8003b98:	08004bd4 	.word	0x08004bd4
 8003b9c:	08004be8 	.word	0x08004be8
 8003ba0:	08004c00 	.word	0x08004c00
 8003ba4:	08004c18 	.word	0x08004c18
 8003ba8:	08004c2c 	.word	0x08004c2c
 8003bac:	08004c40 	.word	0x08004c40
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8003bb0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d105      	bne.n	8003bc4 <printRadioSettings+0x364>
 8003bb8:	f107 0308 	add.w	r3, r7, #8
 8003bbc:	49d7      	ldr	r1, [pc, #860]	; (8003f1c <printRadioSettings+0x6bc>)
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 face 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003bc4:	f107 0308 	add.w	r3, r7, #8
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fc fb01 	bl	80001d0 <strlen>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	f107 0108 	add.w	r1, r7, #8
 8003bd6:	230a      	movs	r3, #10
 8003bd8:	48d1      	ldr	r0, [pc, #836]	; (8003f20 <printRadioSettings+0x6c0>)
 8003bda:	f7fe fd8e 	bl	80026fa <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8003bde:	463b      	mov	r3, r7
 8003be0:	2205      	movs	r2, #5
 8003be2:	4619      	mov	r1, r3
 8003be4:	200a      	movs	r0, #10
 8003be6:	f7ff f985 	bl	8002ef4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8003bea:	793b      	ldrb	r3, [r7, #4]
 8003bec:	461c      	mov	r4, r3
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	461d      	mov	r5, r3
 8003bf2:	78bb      	ldrb	r3, [r7, #2]
 8003bf4:	787a      	ldrb	r2, [r7, #1]
 8003bf6:	7839      	ldrb	r1, [r7, #0]
 8003bf8:	f107 0008 	add.w	r0, r7, #8
 8003bfc:	9102      	str	r1, [sp, #8]
 8003bfe:	9201      	str	r2, [sp, #4]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	462b      	mov	r3, r5
 8003c04:	4622      	mov	r2, r4
 8003c06:	49c7      	ldr	r1, [pc, #796]	; (8003f24 <printRadioSettings+0x6c4>)
 8003c08:	f000 faaa 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003c0c:	f107 0308 	add.w	r3, r7, #8
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fc fadd 	bl	80001d0 <strlen>
 8003c16:	4603      	mov	r3, r0
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	f107 0108 	add.w	r1, r7, #8
 8003c1e:	230a      	movs	r3, #10
 8003c20:	48bf      	ldr	r0, [pc, #764]	; (8003f20 <printRadioSettings+0x6c0>)
 8003c22:	f7fe fd6a 	bl	80026fa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8003c26:	463b      	mov	r3, r7
 8003c28:	2205      	movs	r2, #5
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	200b      	movs	r0, #11
 8003c2e:	f7ff f961 	bl	8002ef4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8003c32:	793b      	ldrb	r3, [r7, #4]
 8003c34:	461c      	mov	r4, r3
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	461d      	mov	r5, r3
 8003c3a:	78bb      	ldrb	r3, [r7, #2]
 8003c3c:	787a      	ldrb	r2, [r7, #1]
 8003c3e:	7839      	ldrb	r1, [r7, #0]
 8003c40:	f107 0008 	add.w	r0, r7, #8
 8003c44:	9102      	str	r1, [sp, #8]
 8003c46:	9201      	str	r2, [sp, #4]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	462b      	mov	r3, r5
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	49b6      	ldr	r1, [pc, #728]	; (8003f28 <printRadioSettings+0x6c8>)
 8003c50:	f000 fa86 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003c54:	f107 0308 	add.w	r3, r7, #8
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc fab9 	bl	80001d0 <strlen>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	f107 0108 	add.w	r1, r7, #8
 8003c66:	230a      	movs	r3, #10
 8003c68:	48ad      	ldr	r0, [pc, #692]	; (8003f20 <printRadioSettings+0x6c0>)
 8003c6a:	f7fe fd46 	bl	80026fa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8003c6e:	463b      	mov	r3, r7
 8003c70:	2201      	movs	r2, #1
 8003c72:	4619      	mov	r1, r3
 8003c74:	200c      	movs	r0, #12
 8003c76:	f7ff f93d 	bl	8002ef4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8003c7a:	783b      	ldrb	r3, [r7, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f107 0308 	add.w	r3, r7, #8
 8003c82:	49aa      	ldr	r1, [pc, #680]	; (8003f2c <printRadioSettings+0x6cc>)
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fa6b 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003c8a:	f107 0308 	add.w	r3, r7, #8
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc fa9e 	bl	80001d0 <strlen>
 8003c94:	4603      	mov	r3, r0
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	f107 0108 	add.w	r1, r7, #8
 8003c9c:	230a      	movs	r3, #10
 8003c9e:	48a0      	ldr	r0, [pc, #640]	; (8003f20 <printRadioSettings+0x6c0>)
 8003ca0:	f7fe fd2b 	bl	80026fa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	4619      	mov	r1, r3
 8003caa:	200d      	movs	r0, #13
 8003cac:	f7ff f922 	bl	8002ef4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8003cb0:	783b      	ldrb	r3, [r7, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f107 0308 	add.w	r3, r7, #8
 8003cb8:	499d      	ldr	r1, [pc, #628]	; (8003f30 <printRadioSettings+0x6d0>)
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fa50 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003cc0:	f107 0308 	add.w	r3, r7, #8
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fc fa83 	bl	80001d0 <strlen>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	f107 0108 	add.w	r1, r7, #8
 8003cd2:	230a      	movs	r3, #10
 8003cd4:	4892      	ldr	r0, [pc, #584]	; (8003f20 <printRadioSettings+0x6c0>)
 8003cd6:	f7fe fd10 	bl	80026fa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8003cda:	463b      	mov	r3, r7
 8003cdc:	2201      	movs	r2, #1
 8003cde:	4619      	mov	r1, r3
 8003ce0:	200e      	movs	r0, #14
 8003ce2:	f7ff f907 	bl	8002ef4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8003ce6:	783b      	ldrb	r3, [r7, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f107 0308 	add.w	r3, r7, #8
 8003cee:	4991      	ldr	r1, [pc, #580]	; (8003f34 <printRadioSettings+0x6d4>)
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fa35 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003cf6:	f107 0308 	add.w	r3, r7, #8
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fc fa68 	bl	80001d0 <strlen>
 8003d00:	4603      	mov	r3, r0
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	f107 0108 	add.w	r1, r7, #8
 8003d08:	230a      	movs	r3, #10
 8003d0a:	4885      	ldr	r0, [pc, #532]	; (8003f20 <printRadioSettings+0x6c0>)
 8003d0c:	f7fe fcf5 	bl	80026fa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8003d10:	463b      	mov	r3, r7
 8003d12:	2201      	movs	r2, #1
 8003d14:	4619      	mov	r1, r3
 8003d16:	200f      	movs	r0, #15
 8003d18:	f7ff f8ec 	bl	8002ef4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8003d1c:	783b      	ldrb	r3, [r7, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f107 0308 	add.w	r3, r7, #8
 8003d24:	4984      	ldr	r1, [pc, #528]	; (8003f38 <printRadioSettings+0x6d8>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fa1a 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003d2c:	f107 0308 	add.w	r3, r7, #8
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fa4d 	bl	80001d0 <strlen>
 8003d36:	4603      	mov	r3, r0
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	f107 0108 	add.w	r1, r7, #8
 8003d3e:	230a      	movs	r3, #10
 8003d40:	4877      	ldr	r0, [pc, #476]	; (8003f20 <printRadioSettings+0x6c0>)
 8003d42:	f7fe fcda 	bl	80026fa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8003d46:	463b      	mov	r3, r7
 8003d48:	2205      	movs	r2, #5
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	2010      	movs	r0, #16
 8003d4e:	f7ff f8d1 	bl	8002ef4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8003d52:	793b      	ldrb	r3, [r7, #4]
 8003d54:	461c      	mov	r4, r3
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	461d      	mov	r5, r3
 8003d5a:	78bb      	ldrb	r3, [r7, #2]
 8003d5c:	787a      	ldrb	r2, [r7, #1]
 8003d5e:	7839      	ldrb	r1, [r7, #0]
 8003d60:	f107 0008 	add.w	r0, r7, #8
 8003d64:	9102      	str	r1, [sp, #8]
 8003d66:	9201      	str	r2, [sp, #4]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	4973      	ldr	r1, [pc, #460]	; (8003f3c <printRadioSettings+0x6dc>)
 8003d70:	f000 f9f6 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003d74:	f107 0308 	add.w	r3, r7, #8
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fc fa29 	bl	80001d0 <strlen>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	f107 0108 	add.w	r1, r7, #8
 8003d86:	230a      	movs	r3, #10
 8003d88:	4865      	ldr	r0, [pc, #404]	; (8003f20 <printRadioSettings+0x6c0>)
 8003d8a:	f7fe fcb6 	bl	80026fa <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8003d8e:	2011      	movs	r0, #17
 8003d90:	f7ff f88a 	bl	8002ea8 <NRF24_read_register>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003d9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003d9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003da2:	f107 0308 	add.w	r3, r7, #8
 8003da6:	4966      	ldr	r1, [pc, #408]	; (8003f40 <printRadioSettings+0x6e0>)
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f9d9 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fc fa0c 	bl	80001d0 <strlen>
 8003db8:	4603      	mov	r3, r0
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	f107 0108 	add.w	r1, r7, #8
 8003dc0:	230a      	movs	r3, #10
 8003dc2:	4857      	ldr	r0, [pc, #348]	; (8003f20 <printRadioSettings+0x6c0>)
 8003dc4:	f7fe fc99 	bl	80026fa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8003dc8:	2012      	movs	r0, #18
 8003dca:	f7ff f86d 	bl	8002ea8 <NRF24_read_register>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003dd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003dd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ddc:	f107 0308 	add.w	r3, r7, #8
 8003de0:	4958      	ldr	r1, [pc, #352]	; (8003f44 <printRadioSettings+0x6e4>)
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f9bc 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003de8:	f107 0308 	add.w	r3, r7, #8
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc f9ef 	bl	80001d0 <strlen>
 8003df2:	4603      	mov	r3, r0
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	f107 0108 	add.w	r1, r7, #8
 8003dfa:	230a      	movs	r3, #10
 8003dfc:	4848      	ldr	r0, [pc, #288]	; (8003f20 <printRadioSettings+0x6c0>)
 8003dfe:	f7fe fc7c 	bl	80026fa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8003e02:	2013      	movs	r0, #19
 8003e04:	f7ff f850 	bl	8002ea8 <NRF24_read_register>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003e0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e16:	f107 0308 	add.w	r3, r7, #8
 8003e1a:	494b      	ldr	r1, [pc, #300]	; (8003f48 <printRadioSettings+0x6e8>)
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f99f 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003e22:	f107 0308 	add.w	r3, r7, #8
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc f9d2 	bl	80001d0 <strlen>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	f107 0108 	add.w	r1, r7, #8
 8003e34:	230a      	movs	r3, #10
 8003e36:	483a      	ldr	r0, [pc, #232]	; (8003f20 <printRadioSettings+0x6c0>)
 8003e38:	f7fe fc5f 	bl	80026fa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8003e3c:	2014      	movs	r0, #20
 8003e3e:	f7ff f833 	bl	8002ea8 <NRF24_read_register>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003e48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003e4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e50:	f107 0308 	add.w	r3, r7, #8
 8003e54:	493d      	ldr	r1, [pc, #244]	; (8003f4c <printRadioSettings+0x6ec>)
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f982 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003e5c:	f107 0308 	add.w	r3, r7, #8
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fc f9b5 	bl	80001d0 <strlen>
 8003e66:	4603      	mov	r3, r0
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	f107 0108 	add.w	r1, r7, #8
 8003e6e:	230a      	movs	r3, #10
 8003e70:	482b      	ldr	r0, [pc, #172]	; (8003f20 <printRadioSettings+0x6c0>)
 8003e72:	f7fe fc42 	bl	80026fa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8003e76:	2015      	movs	r0, #21
 8003e78:	f7ff f816 	bl	8002ea8 <NRF24_read_register>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003e82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e8a:	f107 0308 	add.w	r3, r7, #8
 8003e8e:	4930      	ldr	r1, [pc, #192]	; (8003f50 <printRadioSettings+0x6f0>)
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 f965 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003e96:	f107 0308 	add.w	r3, r7, #8
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc f998 	bl	80001d0 <strlen>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	f107 0108 	add.w	r1, r7, #8
 8003ea8:	230a      	movs	r3, #10
 8003eaa:	481d      	ldr	r0, [pc, #116]	; (8003f20 <printRadioSettings+0x6c0>)
 8003eac:	f7fe fc25 	bl	80026fa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8003eb0:	2016      	movs	r0, #22
 8003eb2:	f7fe fff9 	bl	8002ea8 <NRF24_read_register>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003ebc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003ec0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ec4:	f107 0308 	add.w	r3, r7, #8
 8003ec8:	4922      	ldr	r1, [pc, #136]	; (8003f54 <printRadioSettings+0x6f4>)
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f948 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003ed0:	f107 0308 	add.w	r3, r7, #8
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fc f97b 	bl	80001d0 <strlen>
 8003eda:	4603      	mov	r3, r0
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	f107 0108 	add.w	r1, r7, #8
 8003ee2:	230a      	movs	r3, #10
 8003ee4:	480e      	ldr	r0, [pc, #56]	; (8003f20 <printRadioSettings+0x6c0>)
 8003ee6:	f7fe fc08 	bl	80026fa <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8003eea:	201c      	movs	r0, #28
 8003eec:	f7fe ffdc 	bl	8002ea8 <NRF24_read_register>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003ef6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003efa:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	bfcc      	ite	gt
 8003f02:	2301      	movgt	r3, #1
 8003f04:	2300      	movle	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f0e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bfcc      	ite	gt
 8003f16:	2301      	movgt	r3, #1
 8003f18:	2300      	movle	r3, #0
 8003f1a:	e01d      	b.n	8003f58 <printRadioSettings+0x6f8>
 8003f1c:	08004c54 	.word	0x08004c54
 8003f20:	200001e4 	.word	0x200001e4
 8003f24:	08004c68 	.word	0x08004c68
 8003f28:	08004c98 	.word	0x08004c98
 8003f2c:	08004cc8 	.word	0x08004cc8
 8003f30:	08004cf0 	.word	0x08004cf0
 8003f34:	08004d18 	.word	0x08004d18
 8003f38:	08004d40 	.word	0x08004d40
 8003f3c:	08004d68 	.word	0x08004d68
 8003f40:	08004d94 	.word	0x08004d94
 8003f44:	08004db0 	.word	0x08004db0
 8003f48:	08004dcc 	.word	0x08004dcc
 8003f4c:	08004de8 	.word	0x08004de8
 8003f50:	08004e04 	.word	0x08004e04
 8003f54:	08004e20 	.word	0x08004e20
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f60:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bfcc      	ite	gt
 8003f68:	2301      	movgt	r3, #1
 8003f6a:	2300      	movle	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f74:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bfcc      	ite	gt
 8003f7c:	2301      	movgt	r3, #1
 8003f7e:	2300      	movle	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f88:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bfcc      	ite	gt
 8003f90:	2301      	movgt	r3, #1
 8003f92:	2300      	movle	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003f98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f9c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bfcc      	ite	gt
 8003fa4:	2301      	movgt	r3, #1
 8003fa6:	2300      	movle	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f107 0008 	add.w	r0, r7, #8
 8003fae:	9303      	str	r3, [sp, #12]
 8003fb0:	9402      	str	r4, [sp, #8]
 8003fb2:	9101      	str	r1, [sp, #4]
 8003fb4:	9200      	str	r2, [sp, #0]
 8003fb6:	4633      	mov	r3, r6
 8003fb8:	462a      	mov	r2, r5
 8003fba:	4936      	ldr	r1, [pc, #216]	; (8004094 <printRadioSettings+0x834>)
 8003fbc:	f000 f8d0 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003fc0:	f107 0308 	add.w	r3, r7, #8
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc f903 	bl	80001d0 <strlen>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	f107 0108 	add.w	r1, r7, #8
 8003fd2:	230a      	movs	r3, #10
 8003fd4:	4830      	ldr	r0, [pc, #192]	; (8004098 <printRadioSettings+0x838>)
 8003fd6:	f7fe fb90 	bl	80026fa <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8003fda:	201d      	movs	r0, #29
 8003fdc:	f7fe ff64 	bl	8002ea8 <NRF24_read_register>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8003fe6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d006      	beq.n	8004000 <printRadioSettings+0x7a0>
 8003ff2:	f107 0308 	add.w	r3, r7, #8
 8003ff6:	4929      	ldr	r1, [pc, #164]	; (800409c <printRadioSettings+0x83c>)
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 f8b1 	bl	8004160 <siprintf>
 8003ffe:	e005      	b.n	800400c <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8004000:	f107 0308 	add.w	r3, r7, #8
 8004004:	4926      	ldr	r1, [pc, #152]	; (80040a0 <printRadioSettings+0x840>)
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f8aa 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	4618      	mov	r0, r3
 8004012:	f7fc f8dd 	bl	80001d0 <strlen>
 8004016:	4603      	mov	r3, r0
 8004018:	b29a      	uxth	r2, r3
 800401a:	f107 0108 	add.w	r1, r7, #8
 800401e:	230a      	movs	r3, #10
 8004020:	481d      	ldr	r0, [pc, #116]	; (8004098 <printRadioSettings+0x838>)
 8004022:	f7fe fb6a 	bl	80026fa <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8004026:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d006      	beq.n	8004040 <printRadioSettings+0x7e0>
 8004032:	f107 0308 	add.w	r3, r7, #8
 8004036:	491b      	ldr	r1, [pc, #108]	; (80040a4 <printRadioSettings+0x844>)
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f891 	bl	8004160 <siprintf>
 800403e:	e005      	b.n	800404c <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8004040:	f107 0308 	add.w	r3, r7, #8
 8004044:	4918      	ldr	r1, [pc, #96]	; (80040a8 <printRadioSettings+0x848>)
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f88a 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800404c:	f107 0308 	add.w	r3, r7, #8
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc f8bd 	bl	80001d0 <strlen>
 8004056:	4603      	mov	r3, r0
 8004058:	b29a      	uxth	r2, r3
 800405a:	f107 0108 	add.w	r1, r7, #8
 800405e:	230a      	movs	r3, #10
 8004060:	480d      	ldr	r0, [pc, #52]	; (8004098 <printRadioSettings+0x838>)
 8004062:	f7fe fb4a 	bl	80026fa <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004066:	f107 0308 	add.w	r3, r7, #8
 800406a:	4910      	ldr	r1, [pc, #64]	; (80040ac <printRadioSettings+0x84c>)
 800406c:	4618      	mov	r0, r3
 800406e:	f000 f877 	bl	8004160 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004072:	f107 0308 	add.w	r3, r7, #8
 8004076:	4618      	mov	r0, r3
 8004078:	f7fc f8aa 	bl	80001d0 <strlen>
 800407c:	4603      	mov	r3, r0
 800407e:	b29a      	uxth	r2, r3
 8004080:	f107 0108 	add.w	r1, r7, #8
 8004084:	230a      	movs	r3, #10
 8004086:	4804      	ldr	r0, [pc, #16]	; (8004098 <printRadioSettings+0x838>)
 8004088:	f7fe fb37 	bl	80026fa <HAL_UART_Transmit>
}
 800408c:	bf00      	nop
 800408e:	3774      	adds	r7, #116	; 0x74
 8004090:	46bd      	mov	sp, r7
 8004092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004094:	08004e3c 	.word	0x08004e3c
 8004098:	200001e4 	.word	0x200001e4
 800409c:	08004e88 	.word	0x08004e88
 80040a0:	08004ea0 	.word	0x08004ea0
 80040a4:	08004eb8 	.word	0x08004eb8
 80040a8:	08004ed4 	.word	0x08004ed4
 80040ac:	08004aa8 	.word	0x08004aa8

080040b0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80040b0:	b084      	sub	sp, #16
 80040b2:	b580      	push	{r7, lr}
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	f107 0c08 	add.w	ip, r7, #8
 80040ba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <nrf24_DebugUART_Init+0x2c>)
 80040c0:	4618      	mov	r0, r3
 80040c2:	f107 0308 	add.w	r3, r7, #8
 80040c6:	2244      	movs	r2, #68	; 0x44
 80040c8:	4619      	mov	r1, r3
 80040ca:	f000 f833 	bl	8004134 <memcpy>
}
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040d6:	b004      	add	sp, #16
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	200001e4 	.word	0x200001e4

080040e0 <__errno>:
 80040e0:	4b01      	ldr	r3, [pc, #4]	; (80040e8 <__errno+0x8>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000034 	.word	0x20000034

080040ec <__libc_init_array>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4d0d      	ldr	r5, [pc, #52]	; (8004124 <__libc_init_array+0x38>)
 80040f0:	4c0d      	ldr	r4, [pc, #52]	; (8004128 <__libc_init_array+0x3c>)
 80040f2:	1b64      	subs	r4, r4, r5
 80040f4:	10a4      	asrs	r4, r4, #2
 80040f6:	2600      	movs	r6, #0
 80040f8:	42a6      	cmp	r6, r4
 80040fa:	d109      	bne.n	8004110 <__libc_init_array+0x24>
 80040fc:	4d0b      	ldr	r5, [pc, #44]	; (800412c <__libc_init_array+0x40>)
 80040fe:	4c0c      	ldr	r4, [pc, #48]	; (8004130 <__libc_init_array+0x44>)
 8004100:	f000 fc8e 	bl	8004a20 <_init>
 8004104:	1b64      	subs	r4, r4, r5
 8004106:	10a4      	asrs	r4, r4, #2
 8004108:	2600      	movs	r6, #0
 800410a:	42a6      	cmp	r6, r4
 800410c:	d105      	bne.n	800411a <__libc_init_array+0x2e>
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	f855 3b04 	ldr.w	r3, [r5], #4
 8004114:	4798      	blx	r3
 8004116:	3601      	adds	r6, #1
 8004118:	e7ee      	b.n	80040f8 <__libc_init_array+0xc>
 800411a:	f855 3b04 	ldr.w	r3, [r5], #4
 800411e:	4798      	blx	r3
 8004120:	3601      	adds	r6, #1
 8004122:	e7f2      	b.n	800410a <__libc_init_array+0x1e>
 8004124:	08005040 	.word	0x08005040
 8004128:	08005040 	.word	0x08005040
 800412c:	08005040 	.word	0x08005040
 8004130:	08005044 	.word	0x08005044

08004134 <memcpy>:
 8004134:	440a      	add	r2, r1
 8004136:	4291      	cmp	r1, r2
 8004138:	f100 33ff 	add.w	r3, r0, #4294967295
 800413c:	d100      	bne.n	8004140 <memcpy+0xc>
 800413e:	4770      	bx	lr
 8004140:	b510      	push	{r4, lr}
 8004142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800414a:	4291      	cmp	r1, r2
 800414c:	d1f9      	bne.n	8004142 <memcpy+0xe>
 800414e:	bd10      	pop	{r4, pc}

08004150 <memset>:
 8004150:	4402      	add	r2, r0
 8004152:	4603      	mov	r3, r0
 8004154:	4293      	cmp	r3, r2
 8004156:	d100      	bne.n	800415a <memset+0xa>
 8004158:	4770      	bx	lr
 800415a:	f803 1b01 	strb.w	r1, [r3], #1
 800415e:	e7f9      	b.n	8004154 <memset+0x4>

08004160 <siprintf>:
 8004160:	b40e      	push	{r1, r2, r3}
 8004162:	b500      	push	{lr}
 8004164:	b09c      	sub	sp, #112	; 0x70
 8004166:	ab1d      	add	r3, sp, #116	; 0x74
 8004168:	9002      	str	r0, [sp, #8]
 800416a:	9006      	str	r0, [sp, #24]
 800416c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004170:	4809      	ldr	r0, [pc, #36]	; (8004198 <siprintf+0x38>)
 8004172:	9107      	str	r1, [sp, #28]
 8004174:	9104      	str	r1, [sp, #16]
 8004176:	4909      	ldr	r1, [pc, #36]	; (800419c <siprintf+0x3c>)
 8004178:	f853 2b04 	ldr.w	r2, [r3], #4
 800417c:	9105      	str	r1, [sp, #20]
 800417e:	6800      	ldr	r0, [r0, #0]
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	a902      	add	r1, sp, #8
 8004184:	f000 f868 	bl	8004258 <_svfiprintf_r>
 8004188:	9b02      	ldr	r3, [sp, #8]
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	b01c      	add	sp, #112	; 0x70
 8004190:	f85d eb04 	ldr.w	lr, [sp], #4
 8004194:	b003      	add	sp, #12
 8004196:	4770      	bx	lr
 8004198:	20000034 	.word	0x20000034
 800419c:	ffff0208 	.word	0xffff0208

080041a0 <__ssputs_r>:
 80041a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a4:	688e      	ldr	r6, [r1, #8]
 80041a6:	429e      	cmp	r6, r3
 80041a8:	4682      	mov	sl, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	4690      	mov	r8, r2
 80041ae:	461f      	mov	r7, r3
 80041b0:	d838      	bhi.n	8004224 <__ssputs_r+0x84>
 80041b2:	898a      	ldrh	r2, [r1, #12]
 80041b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041b8:	d032      	beq.n	8004220 <__ssputs_r+0x80>
 80041ba:	6825      	ldr	r5, [r4, #0]
 80041bc:	6909      	ldr	r1, [r1, #16]
 80041be:	eba5 0901 	sub.w	r9, r5, r1
 80041c2:	6965      	ldr	r5, [r4, #20]
 80041c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041cc:	3301      	adds	r3, #1
 80041ce:	444b      	add	r3, r9
 80041d0:	106d      	asrs	r5, r5, #1
 80041d2:	429d      	cmp	r5, r3
 80041d4:	bf38      	it	cc
 80041d6:	461d      	movcc	r5, r3
 80041d8:	0553      	lsls	r3, r2, #21
 80041da:	d531      	bpl.n	8004240 <__ssputs_r+0xa0>
 80041dc:	4629      	mov	r1, r5
 80041de:	f000 fb55 	bl	800488c <_malloc_r>
 80041e2:	4606      	mov	r6, r0
 80041e4:	b950      	cbnz	r0, 80041fc <__ssputs_r+0x5c>
 80041e6:	230c      	movs	r3, #12
 80041e8:	f8ca 3000 	str.w	r3, [sl]
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f2:	81a3      	strh	r3, [r4, #12]
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041fc:	6921      	ldr	r1, [r4, #16]
 80041fe:	464a      	mov	r2, r9
 8004200:	f7ff ff98 	bl	8004134 <memcpy>
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800420a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420e:	81a3      	strh	r3, [r4, #12]
 8004210:	6126      	str	r6, [r4, #16]
 8004212:	6165      	str	r5, [r4, #20]
 8004214:	444e      	add	r6, r9
 8004216:	eba5 0509 	sub.w	r5, r5, r9
 800421a:	6026      	str	r6, [r4, #0]
 800421c:	60a5      	str	r5, [r4, #8]
 800421e:	463e      	mov	r6, r7
 8004220:	42be      	cmp	r6, r7
 8004222:	d900      	bls.n	8004226 <__ssputs_r+0x86>
 8004224:	463e      	mov	r6, r7
 8004226:	6820      	ldr	r0, [r4, #0]
 8004228:	4632      	mov	r2, r6
 800422a:	4641      	mov	r1, r8
 800422c:	f000 faa8 	bl	8004780 <memmove>
 8004230:	68a3      	ldr	r3, [r4, #8]
 8004232:	1b9b      	subs	r3, r3, r6
 8004234:	60a3      	str	r3, [r4, #8]
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	4433      	add	r3, r6
 800423a:	6023      	str	r3, [r4, #0]
 800423c:	2000      	movs	r0, #0
 800423e:	e7db      	b.n	80041f8 <__ssputs_r+0x58>
 8004240:	462a      	mov	r2, r5
 8004242:	f000 fb97 	bl	8004974 <_realloc_r>
 8004246:	4606      	mov	r6, r0
 8004248:	2800      	cmp	r0, #0
 800424a:	d1e1      	bne.n	8004210 <__ssputs_r+0x70>
 800424c:	6921      	ldr	r1, [r4, #16]
 800424e:	4650      	mov	r0, sl
 8004250:	f000 fab0 	bl	80047b4 <_free_r>
 8004254:	e7c7      	b.n	80041e6 <__ssputs_r+0x46>
	...

08004258 <_svfiprintf_r>:
 8004258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425c:	4698      	mov	r8, r3
 800425e:	898b      	ldrh	r3, [r1, #12]
 8004260:	061b      	lsls	r3, r3, #24
 8004262:	b09d      	sub	sp, #116	; 0x74
 8004264:	4607      	mov	r7, r0
 8004266:	460d      	mov	r5, r1
 8004268:	4614      	mov	r4, r2
 800426a:	d50e      	bpl.n	800428a <_svfiprintf_r+0x32>
 800426c:	690b      	ldr	r3, [r1, #16]
 800426e:	b963      	cbnz	r3, 800428a <_svfiprintf_r+0x32>
 8004270:	2140      	movs	r1, #64	; 0x40
 8004272:	f000 fb0b 	bl	800488c <_malloc_r>
 8004276:	6028      	str	r0, [r5, #0]
 8004278:	6128      	str	r0, [r5, #16]
 800427a:	b920      	cbnz	r0, 8004286 <_svfiprintf_r+0x2e>
 800427c:	230c      	movs	r3, #12
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	f04f 30ff 	mov.w	r0, #4294967295
 8004284:	e0d1      	b.n	800442a <_svfiprintf_r+0x1d2>
 8004286:	2340      	movs	r3, #64	; 0x40
 8004288:	616b      	str	r3, [r5, #20]
 800428a:	2300      	movs	r3, #0
 800428c:	9309      	str	r3, [sp, #36]	; 0x24
 800428e:	2320      	movs	r3, #32
 8004290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004294:	f8cd 800c 	str.w	r8, [sp, #12]
 8004298:	2330      	movs	r3, #48	; 0x30
 800429a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004444 <_svfiprintf_r+0x1ec>
 800429e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042a2:	f04f 0901 	mov.w	r9, #1
 80042a6:	4623      	mov	r3, r4
 80042a8:	469a      	mov	sl, r3
 80042aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042ae:	b10a      	cbz	r2, 80042b4 <_svfiprintf_r+0x5c>
 80042b0:	2a25      	cmp	r2, #37	; 0x25
 80042b2:	d1f9      	bne.n	80042a8 <_svfiprintf_r+0x50>
 80042b4:	ebba 0b04 	subs.w	fp, sl, r4
 80042b8:	d00b      	beq.n	80042d2 <_svfiprintf_r+0x7a>
 80042ba:	465b      	mov	r3, fp
 80042bc:	4622      	mov	r2, r4
 80042be:	4629      	mov	r1, r5
 80042c0:	4638      	mov	r0, r7
 80042c2:	f7ff ff6d 	bl	80041a0 <__ssputs_r>
 80042c6:	3001      	adds	r0, #1
 80042c8:	f000 80aa 	beq.w	8004420 <_svfiprintf_r+0x1c8>
 80042cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042ce:	445a      	add	r2, fp
 80042d0:	9209      	str	r2, [sp, #36]	; 0x24
 80042d2:	f89a 3000 	ldrb.w	r3, [sl]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80a2 	beq.w	8004420 <_svfiprintf_r+0x1c8>
 80042dc:	2300      	movs	r3, #0
 80042de:	f04f 32ff 	mov.w	r2, #4294967295
 80042e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042e6:	f10a 0a01 	add.w	sl, sl, #1
 80042ea:	9304      	str	r3, [sp, #16]
 80042ec:	9307      	str	r3, [sp, #28]
 80042ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042f2:	931a      	str	r3, [sp, #104]	; 0x68
 80042f4:	4654      	mov	r4, sl
 80042f6:	2205      	movs	r2, #5
 80042f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042fc:	4851      	ldr	r0, [pc, #324]	; (8004444 <_svfiprintf_r+0x1ec>)
 80042fe:	f7fb ff6f 	bl	80001e0 <memchr>
 8004302:	9a04      	ldr	r2, [sp, #16]
 8004304:	b9d8      	cbnz	r0, 800433e <_svfiprintf_r+0xe6>
 8004306:	06d0      	lsls	r0, r2, #27
 8004308:	bf44      	itt	mi
 800430a:	2320      	movmi	r3, #32
 800430c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004310:	0711      	lsls	r1, r2, #28
 8004312:	bf44      	itt	mi
 8004314:	232b      	movmi	r3, #43	; 0x2b
 8004316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800431a:	f89a 3000 	ldrb.w	r3, [sl]
 800431e:	2b2a      	cmp	r3, #42	; 0x2a
 8004320:	d015      	beq.n	800434e <_svfiprintf_r+0xf6>
 8004322:	9a07      	ldr	r2, [sp, #28]
 8004324:	4654      	mov	r4, sl
 8004326:	2000      	movs	r0, #0
 8004328:	f04f 0c0a 	mov.w	ip, #10
 800432c:	4621      	mov	r1, r4
 800432e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004332:	3b30      	subs	r3, #48	; 0x30
 8004334:	2b09      	cmp	r3, #9
 8004336:	d94e      	bls.n	80043d6 <_svfiprintf_r+0x17e>
 8004338:	b1b0      	cbz	r0, 8004368 <_svfiprintf_r+0x110>
 800433a:	9207      	str	r2, [sp, #28]
 800433c:	e014      	b.n	8004368 <_svfiprintf_r+0x110>
 800433e:	eba0 0308 	sub.w	r3, r0, r8
 8004342:	fa09 f303 	lsl.w	r3, r9, r3
 8004346:	4313      	orrs	r3, r2
 8004348:	9304      	str	r3, [sp, #16]
 800434a:	46a2      	mov	sl, r4
 800434c:	e7d2      	b.n	80042f4 <_svfiprintf_r+0x9c>
 800434e:	9b03      	ldr	r3, [sp, #12]
 8004350:	1d19      	adds	r1, r3, #4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	9103      	str	r1, [sp, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	bfbb      	ittet	lt
 800435a:	425b      	neglt	r3, r3
 800435c:	f042 0202 	orrlt.w	r2, r2, #2
 8004360:	9307      	strge	r3, [sp, #28]
 8004362:	9307      	strlt	r3, [sp, #28]
 8004364:	bfb8      	it	lt
 8004366:	9204      	strlt	r2, [sp, #16]
 8004368:	7823      	ldrb	r3, [r4, #0]
 800436a:	2b2e      	cmp	r3, #46	; 0x2e
 800436c:	d10c      	bne.n	8004388 <_svfiprintf_r+0x130>
 800436e:	7863      	ldrb	r3, [r4, #1]
 8004370:	2b2a      	cmp	r3, #42	; 0x2a
 8004372:	d135      	bne.n	80043e0 <_svfiprintf_r+0x188>
 8004374:	9b03      	ldr	r3, [sp, #12]
 8004376:	1d1a      	adds	r2, r3, #4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	9203      	str	r2, [sp, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	bfb8      	it	lt
 8004380:	f04f 33ff 	movlt.w	r3, #4294967295
 8004384:	3402      	adds	r4, #2
 8004386:	9305      	str	r3, [sp, #20]
 8004388:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004454 <_svfiprintf_r+0x1fc>
 800438c:	7821      	ldrb	r1, [r4, #0]
 800438e:	2203      	movs	r2, #3
 8004390:	4650      	mov	r0, sl
 8004392:	f7fb ff25 	bl	80001e0 <memchr>
 8004396:	b140      	cbz	r0, 80043aa <_svfiprintf_r+0x152>
 8004398:	2340      	movs	r3, #64	; 0x40
 800439a:	eba0 000a 	sub.w	r0, r0, sl
 800439e:	fa03 f000 	lsl.w	r0, r3, r0
 80043a2:	9b04      	ldr	r3, [sp, #16]
 80043a4:	4303      	orrs	r3, r0
 80043a6:	3401      	adds	r4, #1
 80043a8:	9304      	str	r3, [sp, #16]
 80043aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ae:	4826      	ldr	r0, [pc, #152]	; (8004448 <_svfiprintf_r+0x1f0>)
 80043b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043b4:	2206      	movs	r2, #6
 80043b6:	f7fb ff13 	bl	80001e0 <memchr>
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d038      	beq.n	8004430 <_svfiprintf_r+0x1d8>
 80043be:	4b23      	ldr	r3, [pc, #140]	; (800444c <_svfiprintf_r+0x1f4>)
 80043c0:	bb1b      	cbnz	r3, 800440a <_svfiprintf_r+0x1b2>
 80043c2:	9b03      	ldr	r3, [sp, #12]
 80043c4:	3307      	adds	r3, #7
 80043c6:	f023 0307 	bic.w	r3, r3, #7
 80043ca:	3308      	adds	r3, #8
 80043cc:	9303      	str	r3, [sp, #12]
 80043ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d0:	4433      	add	r3, r6
 80043d2:	9309      	str	r3, [sp, #36]	; 0x24
 80043d4:	e767      	b.n	80042a6 <_svfiprintf_r+0x4e>
 80043d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80043da:	460c      	mov	r4, r1
 80043dc:	2001      	movs	r0, #1
 80043de:	e7a5      	b.n	800432c <_svfiprintf_r+0xd4>
 80043e0:	2300      	movs	r3, #0
 80043e2:	3401      	adds	r4, #1
 80043e4:	9305      	str	r3, [sp, #20]
 80043e6:	4619      	mov	r1, r3
 80043e8:	f04f 0c0a 	mov.w	ip, #10
 80043ec:	4620      	mov	r0, r4
 80043ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043f2:	3a30      	subs	r2, #48	; 0x30
 80043f4:	2a09      	cmp	r2, #9
 80043f6:	d903      	bls.n	8004400 <_svfiprintf_r+0x1a8>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0c5      	beq.n	8004388 <_svfiprintf_r+0x130>
 80043fc:	9105      	str	r1, [sp, #20]
 80043fe:	e7c3      	b.n	8004388 <_svfiprintf_r+0x130>
 8004400:	fb0c 2101 	mla	r1, ip, r1, r2
 8004404:	4604      	mov	r4, r0
 8004406:	2301      	movs	r3, #1
 8004408:	e7f0      	b.n	80043ec <_svfiprintf_r+0x194>
 800440a:	ab03      	add	r3, sp, #12
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	462a      	mov	r2, r5
 8004410:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <_svfiprintf_r+0x1f8>)
 8004412:	a904      	add	r1, sp, #16
 8004414:	4638      	mov	r0, r7
 8004416:	f3af 8000 	nop.w
 800441a:	1c42      	adds	r2, r0, #1
 800441c:	4606      	mov	r6, r0
 800441e:	d1d6      	bne.n	80043ce <_svfiprintf_r+0x176>
 8004420:	89ab      	ldrh	r3, [r5, #12]
 8004422:	065b      	lsls	r3, r3, #25
 8004424:	f53f af2c 	bmi.w	8004280 <_svfiprintf_r+0x28>
 8004428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800442a:	b01d      	add	sp, #116	; 0x74
 800442c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004430:	ab03      	add	r3, sp, #12
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	462a      	mov	r2, r5
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <_svfiprintf_r+0x1f8>)
 8004438:	a904      	add	r1, sp, #16
 800443a:	4638      	mov	r0, r7
 800443c:	f000 f87a 	bl	8004534 <_printf_i>
 8004440:	e7eb      	b.n	800441a <_svfiprintf_r+0x1c2>
 8004442:	bf00      	nop
 8004444:	08005004 	.word	0x08005004
 8004448:	0800500e 	.word	0x0800500e
 800444c:	00000000 	.word	0x00000000
 8004450:	080041a1 	.word	0x080041a1
 8004454:	0800500a 	.word	0x0800500a

08004458 <_printf_common>:
 8004458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800445c:	4616      	mov	r6, r2
 800445e:	4699      	mov	r9, r3
 8004460:	688a      	ldr	r2, [r1, #8]
 8004462:	690b      	ldr	r3, [r1, #16]
 8004464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004468:	4293      	cmp	r3, r2
 800446a:	bfb8      	it	lt
 800446c:	4613      	movlt	r3, r2
 800446e:	6033      	str	r3, [r6, #0]
 8004470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004474:	4607      	mov	r7, r0
 8004476:	460c      	mov	r4, r1
 8004478:	b10a      	cbz	r2, 800447e <_printf_common+0x26>
 800447a:	3301      	adds	r3, #1
 800447c:	6033      	str	r3, [r6, #0]
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	0699      	lsls	r1, r3, #26
 8004482:	bf42      	ittt	mi
 8004484:	6833      	ldrmi	r3, [r6, #0]
 8004486:	3302      	addmi	r3, #2
 8004488:	6033      	strmi	r3, [r6, #0]
 800448a:	6825      	ldr	r5, [r4, #0]
 800448c:	f015 0506 	ands.w	r5, r5, #6
 8004490:	d106      	bne.n	80044a0 <_printf_common+0x48>
 8004492:	f104 0a19 	add.w	sl, r4, #25
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	6832      	ldr	r2, [r6, #0]
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	42ab      	cmp	r3, r5
 800449e:	dc26      	bgt.n	80044ee <_printf_common+0x96>
 80044a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044a4:	1e13      	subs	r3, r2, #0
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	bf18      	it	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	0692      	lsls	r2, r2, #26
 80044ae:	d42b      	bmi.n	8004508 <_printf_common+0xb0>
 80044b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044b4:	4649      	mov	r1, r9
 80044b6:	4638      	mov	r0, r7
 80044b8:	47c0      	blx	r8
 80044ba:	3001      	adds	r0, #1
 80044bc:	d01e      	beq.n	80044fc <_printf_common+0xa4>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	68e5      	ldr	r5, [r4, #12]
 80044c2:	6832      	ldr	r2, [r6, #0]
 80044c4:	f003 0306 	and.w	r3, r3, #6
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	bf08      	it	eq
 80044cc:	1aad      	subeq	r5, r5, r2
 80044ce:	68a3      	ldr	r3, [r4, #8]
 80044d0:	6922      	ldr	r2, [r4, #16]
 80044d2:	bf0c      	ite	eq
 80044d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044d8:	2500      	movne	r5, #0
 80044da:	4293      	cmp	r3, r2
 80044dc:	bfc4      	itt	gt
 80044de:	1a9b      	subgt	r3, r3, r2
 80044e0:	18ed      	addgt	r5, r5, r3
 80044e2:	2600      	movs	r6, #0
 80044e4:	341a      	adds	r4, #26
 80044e6:	42b5      	cmp	r5, r6
 80044e8:	d11a      	bne.n	8004520 <_printf_common+0xc8>
 80044ea:	2000      	movs	r0, #0
 80044ec:	e008      	b.n	8004500 <_printf_common+0xa8>
 80044ee:	2301      	movs	r3, #1
 80044f0:	4652      	mov	r2, sl
 80044f2:	4649      	mov	r1, r9
 80044f4:	4638      	mov	r0, r7
 80044f6:	47c0      	blx	r8
 80044f8:	3001      	adds	r0, #1
 80044fa:	d103      	bne.n	8004504 <_printf_common+0xac>
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004504:	3501      	adds	r5, #1
 8004506:	e7c6      	b.n	8004496 <_printf_common+0x3e>
 8004508:	18e1      	adds	r1, r4, r3
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	2030      	movs	r0, #48	; 0x30
 800450e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004512:	4422      	add	r2, r4
 8004514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800451c:	3302      	adds	r3, #2
 800451e:	e7c7      	b.n	80044b0 <_printf_common+0x58>
 8004520:	2301      	movs	r3, #1
 8004522:	4622      	mov	r2, r4
 8004524:	4649      	mov	r1, r9
 8004526:	4638      	mov	r0, r7
 8004528:	47c0      	blx	r8
 800452a:	3001      	adds	r0, #1
 800452c:	d0e6      	beq.n	80044fc <_printf_common+0xa4>
 800452e:	3601      	adds	r6, #1
 8004530:	e7d9      	b.n	80044e6 <_printf_common+0x8e>
	...

08004534 <_printf_i>:
 8004534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004538:	7e0f      	ldrb	r7, [r1, #24]
 800453a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800453c:	2f78      	cmp	r7, #120	; 0x78
 800453e:	4691      	mov	r9, r2
 8004540:	4680      	mov	r8, r0
 8004542:	460c      	mov	r4, r1
 8004544:	469a      	mov	sl, r3
 8004546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800454a:	d807      	bhi.n	800455c <_printf_i+0x28>
 800454c:	2f62      	cmp	r7, #98	; 0x62
 800454e:	d80a      	bhi.n	8004566 <_printf_i+0x32>
 8004550:	2f00      	cmp	r7, #0
 8004552:	f000 80d8 	beq.w	8004706 <_printf_i+0x1d2>
 8004556:	2f58      	cmp	r7, #88	; 0x58
 8004558:	f000 80a3 	beq.w	80046a2 <_printf_i+0x16e>
 800455c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004564:	e03a      	b.n	80045dc <_printf_i+0xa8>
 8004566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800456a:	2b15      	cmp	r3, #21
 800456c:	d8f6      	bhi.n	800455c <_printf_i+0x28>
 800456e:	a101      	add	r1, pc, #4	; (adr r1, 8004574 <_printf_i+0x40>)
 8004570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004574:	080045cd 	.word	0x080045cd
 8004578:	080045e1 	.word	0x080045e1
 800457c:	0800455d 	.word	0x0800455d
 8004580:	0800455d 	.word	0x0800455d
 8004584:	0800455d 	.word	0x0800455d
 8004588:	0800455d 	.word	0x0800455d
 800458c:	080045e1 	.word	0x080045e1
 8004590:	0800455d 	.word	0x0800455d
 8004594:	0800455d 	.word	0x0800455d
 8004598:	0800455d 	.word	0x0800455d
 800459c:	0800455d 	.word	0x0800455d
 80045a0:	080046ed 	.word	0x080046ed
 80045a4:	08004611 	.word	0x08004611
 80045a8:	080046cf 	.word	0x080046cf
 80045ac:	0800455d 	.word	0x0800455d
 80045b0:	0800455d 	.word	0x0800455d
 80045b4:	0800470f 	.word	0x0800470f
 80045b8:	0800455d 	.word	0x0800455d
 80045bc:	08004611 	.word	0x08004611
 80045c0:	0800455d 	.word	0x0800455d
 80045c4:	0800455d 	.word	0x0800455d
 80045c8:	080046d7 	.word	0x080046d7
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	1d1a      	adds	r2, r3, #4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	602a      	str	r2, [r5, #0]
 80045d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045dc:	2301      	movs	r3, #1
 80045de:	e0a3      	b.n	8004728 <_printf_i+0x1f4>
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	6829      	ldr	r1, [r5, #0]
 80045e4:	0606      	lsls	r6, r0, #24
 80045e6:	f101 0304 	add.w	r3, r1, #4
 80045ea:	d50a      	bpl.n	8004602 <_printf_i+0xce>
 80045ec:	680e      	ldr	r6, [r1, #0]
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	2e00      	cmp	r6, #0
 80045f2:	da03      	bge.n	80045fc <_printf_i+0xc8>
 80045f4:	232d      	movs	r3, #45	; 0x2d
 80045f6:	4276      	negs	r6, r6
 80045f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fc:	485e      	ldr	r0, [pc, #376]	; (8004778 <_printf_i+0x244>)
 80045fe:	230a      	movs	r3, #10
 8004600:	e019      	b.n	8004636 <_printf_i+0x102>
 8004602:	680e      	ldr	r6, [r1, #0]
 8004604:	602b      	str	r3, [r5, #0]
 8004606:	f010 0f40 	tst.w	r0, #64	; 0x40
 800460a:	bf18      	it	ne
 800460c:	b236      	sxthne	r6, r6
 800460e:	e7ef      	b.n	80045f0 <_printf_i+0xbc>
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	6820      	ldr	r0, [r4, #0]
 8004614:	1d19      	adds	r1, r3, #4
 8004616:	6029      	str	r1, [r5, #0]
 8004618:	0601      	lsls	r1, r0, #24
 800461a:	d501      	bpl.n	8004620 <_printf_i+0xec>
 800461c:	681e      	ldr	r6, [r3, #0]
 800461e:	e002      	b.n	8004626 <_printf_i+0xf2>
 8004620:	0646      	lsls	r6, r0, #25
 8004622:	d5fb      	bpl.n	800461c <_printf_i+0xe8>
 8004624:	881e      	ldrh	r6, [r3, #0]
 8004626:	4854      	ldr	r0, [pc, #336]	; (8004778 <_printf_i+0x244>)
 8004628:	2f6f      	cmp	r7, #111	; 0x6f
 800462a:	bf0c      	ite	eq
 800462c:	2308      	moveq	r3, #8
 800462e:	230a      	movne	r3, #10
 8004630:	2100      	movs	r1, #0
 8004632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004636:	6865      	ldr	r5, [r4, #4]
 8004638:	60a5      	str	r5, [r4, #8]
 800463a:	2d00      	cmp	r5, #0
 800463c:	bfa2      	ittt	ge
 800463e:	6821      	ldrge	r1, [r4, #0]
 8004640:	f021 0104 	bicge.w	r1, r1, #4
 8004644:	6021      	strge	r1, [r4, #0]
 8004646:	b90e      	cbnz	r6, 800464c <_printf_i+0x118>
 8004648:	2d00      	cmp	r5, #0
 800464a:	d04d      	beq.n	80046e8 <_printf_i+0x1b4>
 800464c:	4615      	mov	r5, r2
 800464e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004652:	fb03 6711 	mls	r7, r3, r1, r6
 8004656:	5dc7      	ldrb	r7, [r0, r7]
 8004658:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800465c:	4637      	mov	r7, r6
 800465e:	42bb      	cmp	r3, r7
 8004660:	460e      	mov	r6, r1
 8004662:	d9f4      	bls.n	800464e <_printf_i+0x11a>
 8004664:	2b08      	cmp	r3, #8
 8004666:	d10b      	bne.n	8004680 <_printf_i+0x14c>
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	07de      	lsls	r6, r3, #31
 800466c:	d508      	bpl.n	8004680 <_printf_i+0x14c>
 800466e:	6923      	ldr	r3, [r4, #16]
 8004670:	6861      	ldr	r1, [r4, #4]
 8004672:	4299      	cmp	r1, r3
 8004674:	bfde      	ittt	le
 8004676:	2330      	movle	r3, #48	; 0x30
 8004678:	f805 3c01 	strble.w	r3, [r5, #-1]
 800467c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004680:	1b52      	subs	r2, r2, r5
 8004682:	6122      	str	r2, [r4, #16]
 8004684:	f8cd a000 	str.w	sl, [sp]
 8004688:	464b      	mov	r3, r9
 800468a:	aa03      	add	r2, sp, #12
 800468c:	4621      	mov	r1, r4
 800468e:	4640      	mov	r0, r8
 8004690:	f7ff fee2 	bl	8004458 <_printf_common>
 8004694:	3001      	adds	r0, #1
 8004696:	d14c      	bne.n	8004732 <_printf_i+0x1fe>
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	b004      	add	sp, #16
 800469e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a2:	4835      	ldr	r0, [pc, #212]	; (8004778 <_printf_i+0x244>)
 80046a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046a8:	6829      	ldr	r1, [r5, #0]
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80046b0:	6029      	str	r1, [r5, #0]
 80046b2:	061d      	lsls	r5, r3, #24
 80046b4:	d514      	bpl.n	80046e0 <_printf_i+0x1ac>
 80046b6:	07df      	lsls	r7, r3, #31
 80046b8:	bf44      	itt	mi
 80046ba:	f043 0320 	orrmi.w	r3, r3, #32
 80046be:	6023      	strmi	r3, [r4, #0]
 80046c0:	b91e      	cbnz	r6, 80046ca <_printf_i+0x196>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	f023 0320 	bic.w	r3, r3, #32
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	2310      	movs	r3, #16
 80046cc:	e7b0      	b.n	8004630 <_printf_i+0xfc>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	f043 0320 	orr.w	r3, r3, #32
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	2378      	movs	r3, #120	; 0x78
 80046d8:	4828      	ldr	r0, [pc, #160]	; (800477c <_printf_i+0x248>)
 80046da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046de:	e7e3      	b.n	80046a8 <_printf_i+0x174>
 80046e0:	0659      	lsls	r1, r3, #25
 80046e2:	bf48      	it	mi
 80046e4:	b2b6      	uxthmi	r6, r6
 80046e6:	e7e6      	b.n	80046b6 <_printf_i+0x182>
 80046e8:	4615      	mov	r5, r2
 80046ea:	e7bb      	b.n	8004664 <_printf_i+0x130>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	6826      	ldr	r6, [r4, #0]
 80046f0:	6961      	ldr	r1, [r4, #20]
 80046f2:	1d18      	adds	r0, r3, #4
 80046f4:	6028      	str	r0, [r5, #0]
 80046f6:	0635      	lsls	r5, r6, #24
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	d501      	bpl.n	8004700 <_printf_i+0x1cc>
 80046fc:	6019      	str	r1, [r3, #0]
 80046fe:	e002      	b.n	8004706 <_printf_i+0x1d2>
 8004700:	0670      	lsls	r0, r6, #25
 8004702:	d5fb      	bpl.n	80046fc <_printf_i+0x1c8>
 8004704:	8019      	strh	r1, [r3, #0]
 8004706:	2300      	movs	r3, #0
 8004708:	6123      	str	r3, [r4, #16]
 800470a:	4615      	mov	r5, r2
 800470c:	e7ba      	b.n	8004684 <_printf_i+0x150>
 800470e:	682b      	ldr	r3, [r5, #0]
 8004710:	1d1a      	adds	r2, r3, #4
 8004712:	602a      	str	r2, [r5, #0]
 8004714:	681d      	ldr	r5, [r3, #0]
 8004716:	6862      	ldr	r2, [r4, #4]
 8004718:	2100      	movs	r1, #0
 800471a:	4628      	mov	r0, r5
 800471c:	f7fb fd60 	bl	80001e0 <memchr>
 8004720:	b108      	cbz	r0, 8004726 <_printf_i+0x1f2>
 8004722:	1b40      	subs	r0, r0, r5
 8004724:	6060      	str	r0, [r4, #4]
 8004726:	6863      	ldr	r3, [r4, #4]
 8004728:	6123      	str	r3, [r4, #16]
 800472a:	2300      	movs	r3, #0
 800472c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004730:	e7a8      	b.n	8004684 <_printf_i+0x150>
 8004732:	6923      	ldr	r3, [r4, #16]
 8004734:	462a      	mov	r2, r5
 8004736:	4649      	mov	r1, r9
 8004738:	4640      	mov	r0, r8
 800473a:	47d0      	blx	sl
 800473c:	3001      	adds	r0, #1
 800473e:	d0ab      	beq.n	8004698 <_printf_i+0x164>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	079b      	lsls	r3, r3, #30
 8004744:	d413      	bmi.n	800476e <_printf_i+0x23a>
 8004746:	68e0      	ldr	r0, [r4, #12]
 8004748:	9b03      	ldr	r3, [sp, #12]
 800474a:	4298      	cmp	r0, r3
 800474c:	bfb8      	it	lt
 800474e:	4618      	movlt	r0, r3
 8004750:	e7a4      	b.n	800469c <_printf_i+0x168>
 8004752:	2301      	movs	r3, #1
 8004754:	4632      	mov	r2, r6
 8004756:	4649      	mov	r1, r9
 8004758:	4640      	mov	r0, r8
 800475a:	47d0      	blx	sl
 800475c:	3001      	adds	r0, #1
 800475e:	d09b      	beq.n	8004698 <_printf_i+0x164>
 8004760:	3501      	adds	r5, #1
 8004762:	68e3      	ldr	r3, [r4, #12]
 8004764:	9903      	ldr	r1, [sp, #12]
 8004766:	1a5b      	subs	r3, r3, r1
 8004768:	42ab      	cmp	r3, r5
 800476a:	dcf2      	bgt.n	8004752 <_printf_i+0x21e>
 800476c:	e7eb      	b.n	8004746 <_printf_i+0x212>
 800476e:	2500      	movs	r5, #0
 8004770:	f104 0619 	add.w	r6, r4, #25
 8004774:	e7f5      	b.n	8004762 <_printf_i+0x22e>
 8004776:	bf00      	nop
 8004778:	08005015 	.word	0x08005015
 800477c:	08005026 	.word	0x08005026

08004780 <memmove>:
 8004780:	4288      	cmp	r0, r1
 8004782:	b510      	push	{r4, lr}
 8004784:	eb01 0402 	add.w	r4, r1, r2
 8004788:	d902      	bls.n	8004790 <memmove+0x10>
 800478a:	4284      	cmp	r4, r0
 800478c:	4623      	mov	r3, r4
 800478e:	d807      	bhi.n	80047a0 <memmove+0x20>
 8004790:	1e43      	subs	r3, r0, #1
 8004792:	42a1      	cmp	r1, r4
 8004794:	d008      	beq.n	80047a8 <memmove+0x28>
 8004796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800479a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800479e:	e7f8      	b.n	8004792 <memmove+0x12>
 80047a0:	4402      	add	r2, r0
 80047a2:	4601      	mov	r1, r0
 80047a4:	428a      	cmp	r2, r1
 80047a6:	d100      	bne.n	80047aa <memmove+0x2a>
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047b2:	e7f7      	b.n	80047a4 <memmove+0x24>

080047b4 <_free_r>:
 80047b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047b6:	2900      	cmp	r1, #0
 80047b8:	d044      	beq.n	8004844 <_free_r+0x90>
 80047ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047be:	9001      	str	r0, [sp, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f1a1 0404 	sub.w	r4, r1, #4
 80047c6:	bfb8      	it	lt
 80047c8:	18e4      	addlt	r4, r4, r3
 80047ca:	f000 f913 	bl	80049f4 <__malloc_lock>
 80047ce:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <_free_r+0x94>)
 80047d0:	9801      	ldr	r0, [sp, #4]
 80047d2:	6813      	ldr	r3, [r2, #0]
 80047d4:	b933      	cbnz	r3, 80047e4 <_free_r+0x30>
 80047d6:	6063      	str	r3, [r4, #4]
 80047d8:	6014      	str	r4, [r2, #0]
 80047da:	b003      	add	sp, #12
 80047dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047e0:	f000 b90e 	b.w	8004a00 <__malloc_unlock>
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	d908      	bls.n	80047fa <_free_r+0x46>
 80047e8:	6825      	ldr	r5, [r4, #0]
 80047ea:	1961      	adds	r1, r4, r5
 80047ec:	428b      	cmp	r3, r1
 80047ee:	bf01      	itttt	eq
 80047f0:	6819      	ldreq	r1, [r3, #0]
 80047f2:	685b      	ldreq	r3, [r3, #4]
 80047f4:	1949      	addeq	r1, r1, r5
 80047f6:	6021      	streq	r1, [r4, #0]
 80047f8:	e7ed      	b.n	80047d6 <_free_r+0x22>
 80047fa:	461a      	mov	r2, r3
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	b10b      	cbz	r3, 8004804 <_free_r+0x50>
 8004800:	42a3      	cmp	r3, r4
 8004802:	d9fa      	bls.n	80047fa <_free_r+0x46>
 8004804:	6811      	ldr	r1, [r2, #0]
 8004806:	1855      	adds	r5, r2, r1
 8004808:	42a5      	cmp	r5, r4
 800480a:	d10b      	bne.n	8004824 <_free_r+0x70>
 800480c:	6824      	ldr	r4, [r4, #0]
 800480e:	4421      	add	r1, r4
 8004810:	1854      	adds	r4, r2, r1
 8004812:	42a3      	cmp	r3, r4
 8004814:	6011      	str	r1, [r2, #0]
 8004816:	d1e0      	bne.n	80047da <_free_r+0x26>
 8004818:	681c      	ldr	r4, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	6053      	str	r3, [r2, #4]
 800481e:	4421      	add	r1, r4
 8004820:	6011      	str	r1, [r2, #0]
 8004822:	e7da      	b.n	80047da <_free_r+0x26>
 8004824:	d902      	bls.n	800482c <_free_r+0x78>
 8004826:	230c      	movs	r3, #12
 8004828:	6003      	str	r3, [r0, #0]
 800482a:	e7d6      	b.n	80047da <_free_r+0x26>
 800482c:	6825      	ldr	r5, [r4, #0]
 800482e:	1961      	adds	r1, r4, r5
 8004830:	428b      	cmp	r3, r1
 8004832:	bf04      	itt	eq
 8004834:	6819      	ldreq	r1, [r3, #0]
 8004836:	685b      	ldreq	r3, [r3, #4]
 8004838:	6063      	str	r3, [r4, #4]
 800483a:	bf04      	itt	eq
 800483c:	1949      	addeq	r1, r1, r5
 800483e:	6021      	streq	r1, [r4, #0]
 8004840:	6054      	str	r4, [r2, #4]
 8004842:	e7ca      	b.n	80047da <_free_r+0x26>
 8004844:	b003      	add	sp, #12
 8004846:	bd30      	pop	{r4, r5, pc}
 8004848:	20000228 	.word	0x20000228

0800484c <sbrk_aligned>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	4e0e      	ldr	r6, [pc, #56]	; (8004888 <sbrk_aligned+0x3c>)
 8004850:	460c      	mov	r4, r1
 8004852:	6831      	ldr	r1, [r6, #0]
 8004854:	4605      	mov	r5, r0
 8004856:	b911      	cbnz	r1, 800485e <sbrk_aligned+0x12>
 8004858:	f000 f8bc 	bl	80049d4 <_sbrk_r>
 800485c:	6030      	str	r0, [r6, #0]
 800485e:	4621      	mov	r1, r4
 8004860:	4628      	mov	r0, r5
 8004862:	f000 f8b7 	bl	80049d4 <_sbrk_r>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	d00a      	beq.n	8004880 <sbrk_aligned+0x34>
 800486a:	1cc4      	adds	r4, r0, #3
 800486c:	f024 0403 	bic.w	r4, r4, #3
 8004870:	42a0      	cmp	r0, r4
 8004872:	d007      	beq.n	8004884 <sbrk_aligned+0x38>
 8004874:	1a21      	subs	r1, r4, r0
 8004876:	4628      	mov	r0, r5
 8004878:	f000 f8ac 	bl	80049d4 <_sbrk_r>
 800487c:	3001      	adds	r0, #1
 800487e:	d101      	bne.n	8004884 <sbrk_aligned+0x38>
 8004880:	f04f 34ff 	mov.w	r4, #4294967295
 8004884:	4620      	mov	r0, r4
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	2000022c 	.word	0x2000022c

0800488c <_malloc_r>:
 800488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004890:	1ccd      	adds	r5, r1, #3
 8004892:	f025 0503 	bic.w	r5, r5, #3
 8004896:	3508      	adds	r5, #8
 8004898:	2d0c      	cmp	r5, #12
 800489a:	bf38      	it	cc
 800489c:	250c      	movcc	r5, #12
 800489e:	2d00      	cmp	r5, #0
 80048a0:	4607      	mov	r7, r0
 80048a2:	db01      	blt.n	80048a8 <_malloc_r+0x1c>
 80048a4:	42a9      	cmp	r1, r5
 80048a6:	d905      	bls.n	80048b4 <_malloc_r+0x28>
 80048a8:	230c      	movs	r3, #12
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	2600      	movs	r6, #0
 80048ae:	4630      	mov	r0, r6
 80048b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b4:	4e2e      	ldr	r6, [pc, #184]	; (8004970 <_malloc_r+0xe4>)
 80048b6:	f000 f89d 	bl	80049f4 <__malloc_lock>
 80048ba:	6833      	ldr	r3, [r6, #0]
 80048bc:	461c      	mov	r4, r3
 80048be:	bb34      	cbnz	r4, 800490e <_malloc_r+0x82>
 80048c0:	4629      	mov	r1, r5
 80048c2:	4638      	mov	r0, r7
 80048c4:	f7ff ffc2 	bl	800484c <sbrk_aligned>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	4604      	mov	r4, r0
 80048cc:	d14d      	bne.n	800496a <_malloc_r+0xde>
 80048ce:	6834      	ldr	r4, [r6, #0]
 80048d0:	4626      	mov	r6, r4
 80048d2:	2e00      	cmp	r6, #0
 80048d4:	d140      	bne.n	8004958 <_malloc_r+0xcc>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	4631      	mov	r1, r6
 80048da:	4638      	mov	r0, r7
 80048dc:	eb04 0803 	add.w	r8, r4, r3
 80048e0:	f000 f878 	bl	80049d4 <_sbrk_r>
 80048e4:	4580      	cmp	r8, r0
 80048e6:	d13a      	bne.n	800495e <_malloc_r+0xd2>
 80048e8:	6821      	ldr	r1, [r4, #0]
 80048ea:	3503      	adds	r5, #3
 80048ec:	1a6d      	subs	r5, r5, r1
 80048ee:	f025 0503 	bic.w	r5, r5, #3
 80048f2:	3508      	adds	r5, #8
 80048f4:	2d0c      	cmp	r5, #12
 80048f6:	bf38      	it	cc
 80048f8:	250c      	movcc	r5, #12
 80048fa:	4629      	mov	r1, r5
 80048fc:	4638      	mov	r0, r7
 80048fe:	f7ff ffa5 	bl	800484c <sbrk_aligned>
 8004902:	3001      	adds	r0, #1
 8004904:	d02b      	beq.n	800495e <_malloc_r+0xd2>
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	442b      	add	r3, r5
 800490a:	6023      	str	r3, [r4, #0]
 800490c:	e00e      	b.n	800492c <_malloc_r+0xa0>
 800490e:	6822      	ldr	r2, [r4, #0]
 8004910:	1b52      	subs	r2, r2, r5
 8004912:	d41e      	bmi.n	8004952 <_malloc_r+0xc6>
 8004914:	2a0b      	cmp	r2, #11
 8004916:	d916      	bls.n	8004946 <_malloc_r+0xba>
 8004918:	1961      	adds	r1, r4, r5
 800491a:	42a3      	cmp	r3, r4
 800491c:	6025      	str	r5, [r4, #0]
 800491e:	bf18      	it	ne
 8004920:	6059      	strne	r1, [r3, #4]
 8004922:	6863      	ldr	r3, [r4, #4]
 8004924:	bf08      	it	eq
 8004926:	6031      	streq	r1, [r6, #0]
 8004928:	5162      	str	r2, [r4, r5]
 800492a:	604b      	str	r3, [r1, #4]
 800492c:	4638      	mov	r0, r7
 800492e:	f104 060b 	add.w	r6, r4, #11
 8004932:	f000 f865 	bl	8004a00 <__malloc_unlock>
 8004936:	f026 0607 	bic.w	r6, r6, #7
 800493a:	1d23      	adds	r3, r4, #4
 800493c:	1af2      	subs	r2, r6, r3
 800493e:	d0b6      	beq.n	80048ae <_malloc_r+0x22>
 8004940:	1b9b      	subs	r3, r3, r6
 8004942:	50a3      	str	r3, [r4, r2]
 8004944:	e7b3      	b.n	80048ae <_malloc_r+0x22>
 8004946:	6862      	ldr	r2, [r4, #4]
 8004948:	42a3      	cmp	r3, r4
 800494a:	bf0c      	ite	eq
 800494c:	6032      	streq	r2, [r6, #0]
 800494e:	605a      	strne	r2, [r3, #4]
 8004950:	e7ec      	b.n	800492c <_malloc_r+0xa0>
 8004952:	4623      	mov	r3, r4
 8004954:	6864      	ldr	r4, [r4, #4]
 8004956:	e7b2      	b.n	80048be <_malloc_r+0x32>
 8004958:	4634      	mov	r4, r6
 800495a:	6876      	ldr	r6, [r6, #4]
 800495c:	e7b9      	b.n	80048d2 <_malloc_r+0x46>
 800495e:	230c      	movs	r3, #12
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	4638      	mov	r0, r7
 8004964:	f000 f84c 	bl	8004a00 <__malloc_unlock>
 8004968:	e7a1      	b.n	80048ae <_malloc_r+0x22>
 800496a:	6025      	str	r5, [r4, #0]
 800496c:	e7de      	b.n	800492c <_malloc_r+0xa0>
 800496e:	bf00      	nop
 8004970:	20000228 	.word	0x20000228

08004974 <_realloc_r>:
 8004974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004978:	4680      	mov	r8, r0
 800497a:	4614      	mov	r4, r2
 800497c:	460e      	mov	r6, r1
 800497e:	b921      	cbnz	r1, 800498a <_realloc_r+0x16>
 8004980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004984:	4611      	mov	r1, r2
 8004986:	f7ff bf81 	b.w	800488c <_malloc_r>
 800498a:	b92a      	cbnz	r2, 8004998 <_realloc_r+0x24>
 800498c:	f7ff ff12 	bl	80047b4 <_free_r>
 8004990:	4625      	mov	r5, r4
 8004992:	4628      	mov	r0, r5
 8004994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004998:	f000 f838 	bl	8004a0c <_malloc_usable_size_r>
 800499c:	4284      	cmp	r4, r0
 800499e:	4607      	mov	r7, r0
 80049a0:	d802      	bhi.n	80049a8 <_realloc_r+0x34>
 80049a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049a6:	d812      	bhi.n	80049ce <_realloc_r+0x5a>
 80049a8:	4621      	mov	r1, r4
 80049aa:	4640      	mov	r0, r8
 80049ac:	f7ff ff6e 	bl	800488c <_malloc_r>
 80049b0:	4605      	mov	r5, r0
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d0ed      	beq.n	8004992 <_realloc_r+0x1e>
 80049b6:	42bc      	cmp	r4, r7
 80049b8:	4622      	mov	r2, r4
 80049ba:	4631      	mov	r1, r6
 80049bc:	bf28      	it	cs
 80049be:	463a      	movcs	r2, r7
 80049c0:	f7ff fbb8 	bl	8004134 <memcpy>
 80049c4:	4631      	mov	r1, r6
 80049c6:	4640      	mov	r0, r8
 80049c8:	f7ff fef4 	bl	80047b4 <_free_r>
 80049cc:	e7e1      	b.n	8004992 <_realloc_r+0x1e>
 80049ce:	4635      	mov	r5, r6
 80049d0:	e7df      	b.n	8004992 <_realloc_r+0x1e>
	...

080049d4 <_sbrk_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4d06      	ldr	r5, [pc, #24]	; (80049f0 <_sbrk_r+0x1c>)
 80049d8:	2300      	movs	r3, #0
 80049da:	4604      	mov	r4, r0
 80049dc:	4608      	mov	r0, r1
 80049de:	602b      	str	r3, [r5, #0]
 80049e0:	f7fc f89a 	bl	8000b18 <_sbrk>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d102      	bne.n	80049ee <_sbrk_r+0x1a>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	b103      	cbz	r3, 80049ee <_sbrk_r+0x1a>
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
 80049f0:	20000230 	.word	0x20000230

080049f4 <__malloc_lock>:
 80049f4:	4801      	ldr	r0, [pc, #4]	; (80049fc <__malloc_lock+0x8>)
 80049f6:	f000 b811 	b.w	8004a1c <__retarget_lock_acquire_recursive>
 80049fa:	bf00      	nop
 80049fc:	20000234 	.word	0x20000234

08004a00 <__malloc_unlock>:
 8004a00:	4801      	ldr	r0, [pc, #4]	; (8004a08 <__malloc_unlock+0x8>)
 8004a02:	f000 b80c 	b.w	8004a1e <__retarget_lock_release_recursive>
 8004a06:	bf00      	nop
 8004a08:	20000234 	.word	0x20000234

08004a0c <_malloc_usable_size_r>:
 8004a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a10:	1f18      	subs	r0, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bfbc      	itt	lt
 8004a16:	580b      	ldrlt	r3, [r1, r0]
 8004a18:	18c0      	addlt	r0, r0, r3
 8004a1a:	4770      	bx	lr

08004a1c <__retarget_lock_acquire_recursive>:
 8004a1c:	4770      	bx	lr

08004a1e <__retarget_lock_release_recursive>:
 8004a1e:	4770      	bx	lr

08004a20 <_init>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr

08004a2c <_fini>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr
