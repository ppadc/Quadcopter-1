
Code_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800bb50  0800bb50  0001bb50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1e0  0800c1e0  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1e0  0800c1e0  0001c1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1e8  0800c1e8  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1e8  0800c1e8  0001c1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1ec  0800c1ec  0001c1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800c1f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a4  2**0
                  CONTENTS
 10 .bss          00000424  200001a8  200001a8  000201a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200005cc  200005cc  000201a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fdb  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024e9  00000000  00000000  000351af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  00037698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001258  00000000  00000000  000389b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022901  00000000  00000000  00039c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001592d  00000000  00000000  0005c509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1b37  00000000  00000000  00071e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014396d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005de4  00000000  00000000  001439c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a8 	.word	0x200001a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb34 	.word	0x0800bb34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ac 	.word	0x200001ac
 80001cc:	0800bb34 	.word	0x0800bb34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b0a1      	sub	sp, #132	; 0x84
 8000f50:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f52:	f001 f9bb 	bl	80022cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f56:	f000 f8d9 	bl	800110c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f5a:	f000 fae1 	bl	8001520 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000f5e:	f000 f93d 	bl	80011dc <MX_I2C1_Init>
	MX_SPI1_Init();
 8000f62:	f000 f969 	bl	8001238 <MX_SPI1_Init>
	MX_TIM1_Init();
 8000f66:	f000 f99d 	bl	80012a4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000f6a:	f000 fa61 	bl	8001430 <MX_TIM2_Init>
	MX_USART6_UART_Init();
 8000f6e:	f000 faad 	bl	80014cc <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	char q[10] = "---Tx----";
 8000f72:	4a57      	ldr	r2, [pc, #348]	; (80010d0 <main+0x184>)
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f7a:	c303      	stmia	r3!, {r0, r1}
 8000f7c:	801a      	strh	r2, [r3, #0]
	char w[10] = "";
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	809a      	strh	r2, [r3, #4]
	char e[10] = "";
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart6, (uint8_t *)q, strlen(q), 10);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff f916 	bl	80001d0 <strlen>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	f107 011c 	add.w	r1, r7, #28
 8000fac:	230a      	movs	r3, #10
 8000fae:	4849      	ldr	r0, [pc, #292]	; (80010d4 <main+0x188>)
 8000fb0:	f004 ff9f 	bl	8005ef2 <HAL_UART_Transmit>
	  //Begin setup Rf24
	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi1);
 8000fb4:	4c48      	ldr	r4, [pc, #288]	; (80010d8 <main+0x18c>)
 8000fb6:	4668      	mov	r0, sp
 8000fb8:	1d23      	adds	r3, r4, #4
 8000fba:	2254      	movs	r2, #84	; 0x54
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f008 fb73 	bl	80096a8 <memcpy>
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4844      	ldr	r0, [pc, #272]	; (80010dc <main+0x190>)
 8000fca:	f005 fc6d 	bl	80068a8 <NRF24_begin>
	NRF24_stopListening();
 8000fce:	f005 fd4b 	bl	8006a68 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 8000fd2:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <main+0x194>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f005 fdc4 	bl	8006b68 <NRF24_openWritingPipe>
	NRF24_setAutoAck(true);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f005 feb9 	bl	8006d58 <NRF24_setAutoAck>
	NRF24_enableDynamicPayloads();
 8000fe6:	f005 fe6d 	bl	8006cc4 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8000fea:	f005 fe3d 	bl	8006c68 <NRF24_enableAckPayload>
	// Begin setup GY86
	while (MPU6050_Init(&hi2c1) == 1);
 8000fee:	bf00      	nop
 8000ff0:	483c      	ldr	r0, [pc, #240]	; (80010e4 <main+0x198>)
 8000ff2:	f006 fc59 	bl	80078a8 <MPU6050_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d0f9      	beq.n	8000ff0 <main+0xa4>
	MPU6050_Bypass(&hi2c1);
 8000ffc:	4839      	ldr	r0, [pc, #228]	; (80010e4 <main+0x198>)
 8000ffe:	f006 fcc8 	bl	8007992 <MPU6050_Bypass>
	HMC5883L_Init(&hi2c1);
 8001002:	4838      	ldr	r0, [pc, #224]	; (80010e4 <main+0x198>)
 8001004:	f006 fe76 	bl	8007cf4 <HMC5883L_Init>
	MPU6050_Master(&hi2c1);
 8001008:	4836      	ldr	r0, [pc, #216]	; (80010e4 <main+0x198>)
 800100a:	f006 fce8 	bl	80079de <MPU6050_Master>
	MPU6050_Addslave(&hi2c1);
 800100e:	4835      	ldr	r0, [pc, #212]	; (80010e4 <main+0x198>)
 8001010:	f006 fd0b 	bl	8007a2a <MPU6050_Addslave>
	MS5611_init(&hi2c1, &MS5611);
 8001014:	4934      	ldr	r1, [pc, #208]	; (80010e8 <main+0x19c>)
 8001016:	4833      	ldr	r0, [pc, #204]	; (80010e4 <main+0x198>)
 8001018:	f006 ff28 	bl	8007e6c <MS5611_init>
//	 Begin setup ESC
	setupESC(&htim1);
 800101c:	4833      	ldr	r0, [pc, #204]	; (80010ec <main+0x1a0>)
 800101e:	f008 fa27 	bl	8009470 <setupESC>
//	 RUN
	HAL_TIM_Base_Start_IT(&htim2);
 8001022:	4833      	ldr	r0, [pc, #204]	; (80010f0 <main+0x1a4>)
 8001024:	f003 feda 	bl	8004ddc <HAL_TIM_Base_Start_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		if(HAL_GetTick() - value >= 20)
 8001028:	f001 f9b6 	bl	8002398 <HAL_GetTick>
 800102c:	4603      	mov	r3, r0
 800102e:	4a31      	ldr	r2, [pc, #196]	; (80010f4 <main+0x1a8>)
 8001030:	8812      	ldrh	r2, [r2, #0]
 8001032:	1a9b      	subs	r3, r3, r2
 8001034:	2b13      	cmp	r3, #19
 8001036:	d9f7      	bls.n	8001028 <main+0xdc>
		{
			value = HAL_GetTick();
 8001038:	f001 f9ae 	bl	8002398 <HAL_GetTick>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <main+0x1a8>)
 8001042:	801a      	strh	r2, [r3, #0]
			floatToString(Madgwick.roll,q);
 8001044:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <main+0x1ac>)
 8001046:	edd3 7a00 	vldr	s15, [r3]
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4618      	mov	r0, r3
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	f000 fb04 	bl	8001660 <floatToString>
			floatToString(Madgwick.pitch,w);;
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <main+0x1ac>)
 800105a:	edd3 7a01 	vldr	s15, [r3, #4]
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4618      	mov	r0, r3
 8001064:	eeb0 0a67 	vmov.f32	s0, s15
 8001068:	f000 fafa 	bl	8001660 <floatToString>
			floatToString(Madgwick.yaw,e);
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <main+0x1ac>)
 800106e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4618      	mov	r0, r3
 8001076:	eeb0 0a67 	vmov.f32	s0, s15
 800107a:	f000 faf1 	bl	8001660 <floatToString>

			sprintf(TxData,"%s;%s;%s;%d;",q,w,e,enable);
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <main+0x1b0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f107 0110 	add.w	r1, r7, #16
 8001086:	f107 021c 	add.w	r2, r7, #28
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	460b      	mov	r3, r1
 8001092:	491b      	ldr	r1, [pc, #108]	; (8001100 <main+0x1b4>)
 8001094:	481b      	ldr	r0, [pc, #108]	; (8001104 <main+0x1b8>)
 8001096:	f008 fb1d 	bl	80096d4 <siprintf>
			if (NRF24_write(TxData, 32))
 800109a:	2120      	movs	r1, #32
 800109c:	4819      	ldr	r0, [pc, #100]	; (8001104 <main+0x1b8>)
 800109e:	f005 fcef 	bl	8006a80 <NRF24_write>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0bf      	beq.n	8001028 <main+0xdc>
			{
			//Receive
			NRF24_read(RxData, 32);
 80010a8:	2120      	movs	r1, #32
 80010aa:	4817      	ldr	r0, [pc, #92]	; (8001108 <main+0x1bc>)
 80010ac:	f005 fd3c 	bl	8006b28 <NRF24_read>
			if(RxData[0]=='1') enable = 1;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <main+0x1bc>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b31      	cmp	r3, #49	; 0x31
 80010b6:	d102      	bne.n	80010be <main+0x172>
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <main+0x1b0>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	601a      	str	r2, [r3, #0]
			if(RxData[0]=='0') enable = 0;
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <main+0x1bc>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b30      	cmp	r3, #48	; 0x30
 80010c4:	d1b0      	bne.n	8001028 <main+0xdc>
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <main+0x1b0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
		if(HAL_GetTick() - value >= 20)
 80010cc:	e7ac      	b.n	8001028 <main+0xdc>
 80010ce:	bf00      	nop
 80010d0:	0800bb60 	.word	0x0800bb60
 80010d4:	20000300 	.word	0x20000300
 80010d8:	20000218 	.word	0x20000218
 80010dc:	40020400 	.word	0x40020400
 80010e0:	20000060 	.word	0x20000060
 80010e4:	200001c4 	.word	0x200001c4
 80010e8:	200003d0 	.word	0x200003d0
 80010ec:	20000270 	.word	0x20000270
 80010f0:	200002b8 	.word	0x200002b8
 80010f4:	20000488 	.word	0x20000488
 80010f8:	20000424 	.word	0x20000424
 80010fc:	20000344 	.word	0x20000344
 8001100:	0800bb50 	.word	0x0800bb50
 8001104:	20000448 	.word	0x20000448
 8001108:	20000468 	.word	0x20000468

0800110c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	; 0x50
 8001110:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	2230      	movs	r2, #48	; 0x30
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f008 fad2 	bl	80096c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <SystemClock_Config+0xc8>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <SystemClock_Config+0xc8>)
 800113a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113e:	6413      	str	r3, [r2, #64]	; 0x40
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <SystemClock_Config+0xc8>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <SystemClock_Config+0xcc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <SystemClock_Config+0xcc>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <SystemClock_Config+0xcc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001168:	2302      	movs	r3, #2
 800116a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001170:	2310      	movs	r3, #16
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001174:	2302      	movs	r3, #2
 8001176:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001178:	2300      	movs	r3, #0
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800117c:	2308      	movs	r3, #8
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001180:	2348      	movs	r3, #72	; 0x48
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001188:	2304      	movs	r3, #4
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fbd3 	bl	800393c <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800119c:	f000 fe74 	bl	8001e88 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011a0:	230f      	movs	r3, #15
 80011a2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	2302      	movs	r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	2102      	movs	r1, #2
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 fe35 	bl	8003e2c <HAL_RCC_ClockConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80011c8:	f000 fe5e 	bl	8001e88 <Error_Handler>
	}
}
 80011cc:	bf00      	nop
 80011ce:	3750      	adds	r7, #80	; 0x50
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40007000 	.word	0x40007000

080011dc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C1_Init+0x50>)
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <MX_I2C1_Init+0x54>)
 80011e4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_I2C1_Init+0x50>)
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_I2C1_Init+0x58>)
 80011ea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_I2C1_Init+0x50>)
 80011fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fe:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_I2C1_Init+0x50>)
 800121a:	f001 fbcf 	bl	80029bc <HAL_I2C_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001224:	f000 fe30 	bl	8001e88 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001c4 	.word	0x200001c4
 8001230:	40005400 	.word	0x40005400
 8001234:	00061a80 	.word	0x00061a80

08001238 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_SPI1_Init+0x64>)
 800123e:	4a18      	ldr	r2, [pc, #96]	; (80012a0 <MX_SPI1_Init+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_SPI1_Init+0x64>)
 8001244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001248:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_SPI1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_SPI1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_SPI1_Init+0x64>)
 8001264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001268:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_SPI1_Init+0x64>)
 800126c:	2210      	movs	r2, #16
 800126e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_SPI1_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <MX_SPI1_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_SPI1_Init+0x64>)
 8001284:	220a      	movs	r2, #10
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_SPI1_Init+0x64>)
 800128a:	f002 ffaf 	bl	80041ec <HAL_SPI_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001294:	f000 fdf8 	bl	8001e88 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000218 	.word	0x20000218
 80012a0:	40013000 	.word	0x40013000

080012a4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b096      	sub	sp, #88	; 0x58
 80012a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]
 80012d2:	615a      	str	r2, [r3, #20]
 80012d4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2220      	movs	r2, #32
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f008 f9f1 	bl	80096c4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80012e2:	4b51      	ldr	r3, [pc, #324]	; (8001428 <MX_TIM1_Init+0x184>)
 80012e4:	4a51      	ldr	r2, [pc, #324]	; (800142c <MX_TIM1_Init+0x188>)
 80012e6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72;
 80012e8:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <MX_TIM1_Init+0x184>)
 80012ea:	2248      	movs	r2, #72	; 0x48
 80012ec:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <MX_TIM1_Init+0x184>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 20000;
 80012f4:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <MX_TIM1_Init+0x184>)
 80012f6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80012fa:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <MX_TIM1_Init+0x184>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001302:	4b49      	ldr	r3, [pc, #292]	; (8001428 <MX_TIM1_Init+0x184>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001308:	4b47      	ldr	r3, [pc, #284]	; (8001428 <MX_TIM1_Init+0x184>)
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800130e:	4846      	ldr	r0, [pc, #280]	; (8001428 <MX_TIM1_Init+0x184>)
 8001310:	f003 fd14 	bl	8004d3c <HAL_TIM_Base_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 800131a:	f000 fdb5 	bl	8001e88 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001322:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001324:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001328:	4619      	mov	r1, r3
 800132a:	483f      	ldr	r0, [pc, #252]	; (8001428 <MX_TIM1_Init+0x184>)
 800132c:	f004 f8b2 	bl	8005494 <HAL_TIM_ConfigClockSource>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 8001336:	f000 fda7 	bl	8001e88 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800133a:	483b      	ldr	r0, [pc, #236]	; (8001428 <MX_TIM1_Init+0x184>)
 800133c:	f003 fdbe 	bl	8004ebc <HAL_TIM_PWM_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 8001346:	f000 fd9f 	bl	8001e88 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001352:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001356:	4619      	mov	r1, r3
 8001358:	4833      	ldr	r0, [pc, #204]	; (8001428 <MX_TIM1_Init+0x184>)
 800135a:	f004 fc9b 	bl	8005c94 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8001364:	f000 fd90 	bl	8001e88 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001368:	2360      	movs	r3, #96	; 0x60
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 955;
 800136c:	f240 33bb 	movw	r3, #955	; 0x3bb
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	4826      	ldr	r0, [pc, #152]	; (8001428 <MX_TIM1_Init+0x184>)
 8001390:	f003 ffbe 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0xfa>
	{
		Error_Handler();
 800139a:	f000 fd75 	bl	8001e88 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	2204      	movs	r2, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4820      	ldr	r0, [pc, #128]	; (8001428 <MX_TIM1_Init+0x184>)
 80013a8:	f003 ffb2 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0x112>
	{
		Error_Handler();
 80013b2:	f000 fd69 	bl	8001e88 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	2208      	movs	r2, #8
 80013bc:	4619      	mov	r1, r3
 80013be:	481a      	ldr	r0, [pc, #104]	; (8001428 <MX_TIM1_Init+0x184>)
 80013c0:	f003 ffa6 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0x12a>
	{
		Error_Handler();
 80013ca:	f000 fd5d 	bl	8001e88 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	220c      	movs	r2, #12
 80013d4:	4619      	mov	r1, r3
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <MX_TIM1_Init+0x184>)
 80013d8:	f003 ff9a 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 80013e2:	f000 fd51 	bl	8001e88 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fe:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4619      	mov	r1, r3
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <MX_TIM1_Init+0x184>)
 800140a:	f004 fcbf 	bl	8005d8c <HAL_TIMEx_ConfigBreakDeadTime>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM1_Init+0x174>
	{
		Error_Handler();
 8001414:	f000 fd38 	bl	8001e88 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <MX_TIM1_Init+0x184>)
 800141a:	f000 fe2f 	bl	800207c <HAL_TIM_MspPostInit>
}
 800141e:	bf00      	nop
 8001420:	3758      	adds	r7, #88	; 0x58
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000270 	.word	0x20000270
 800142c:	40010000 	.word	0x40010000

08001430 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <MX_TIM2_Init+0x94>)
 800144e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001452:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <MX_TIM2_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_TIM2_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 72000000*SIMPLE_TIME;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_TIM2_Init+0x94>)
 8001462:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <MX_TIM2_Init+0x98>)
 8001464:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_TIM2_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_TIM2_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <MX_TIM2_Init+0x94>)
 8001474:	f003 fc62 	bl	8004d3c <HAL_TIM_Base_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0x52>
	{
		Error_Handler();
 800147e:	f000 fd03 	bl	8001e88 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_TIM2_Init+0x94>)
 8001490:	f004 f800 	bl	8005494 <HAL_TIM_ConfigClockSource>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0x6e>
	{
		Error_Handler();
 800149a:	f000 fcf5 	bl	8001e88 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_TIM2_Init+0x94>)
 80014ac:	f004 fbf2 	bl	8005c94 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM2_Init+0x8a>
	{
		Error_Handler();
 80014b6:	f000 fce7 	bl	8001e88 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200002b8 	.word	0x200002b8
 80014c8:	00023280 	.word	0x00023280

080014cc <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <MX_USART6_UART_Init+0x50>)
 80014d4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014dc:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 8001504:	f004 fca8 	bl	8005e58 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 800150e:	f000 fcbb 	bl	8001e88 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000300 	.word	0x20000300
 800151c:	40011400 	.word	0x40011400

08001520 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	4b45      	ldr	r3, [pc, #276]	; (8001650 <MX_GPIO_Init+0x130>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a44      	ldr	r2, [pc, #272]	; (8001650 <MX_GPIO_Init+0x130>)
 8001540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <MX_GPIO_Init+0x130>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <MX_GPIO_Init+0x130>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a3d      	ldr	r2, [pc, #244]	; (8001650 <MX_GPIO_Init+0x130>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <MX_GPIO_Init+0x130>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <MX_GPIO_Init+0x130>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a36      	ldr	r2, [pc, #216]	; (8001650 <MX_GPIO_Init+0x130>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <MX_GPIO_Init+0x130>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <MX_GPIO_Init+0x130>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <MX_GPIO_Init+0x130>)
 8001594:	f043 0310 	orr.w	r3, r3, #16
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <MX_GPIO_Init+0x130>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <MX_GPIO_Init+0x130>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a28      	ldr	r2, [pc, #160]	; (8001650 <MX_GPIO_Init+0x130>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <MX_GPIO_Init+0x130>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <MX_GPIO_Init+0x130>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <MX_GPIO_Init+0x130>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <MX_GPIO_Init+0x130>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2103      	movs	r1, #3
 80015e2:	481c      	ldr	r0, [pc, #112]	; (8001654 <MX_GPIO_Init+0x134>)
 80015e4:	f001 f9b6 	bl	8002954 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80015ee:	481a      	ldr	r0, [pc, #104]	; (8001658 <MX_GPIO_Init+0x138>)
 80015f0:	f001 f9b0 	bl	8002954 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4815      	ldr	r0, [pc, #84]	; (800165c <MX_GPIO_Init+0x13c>)
 8001608:	f001 f808 	bl	800261c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800160c:	2303      	movs	r3, #3
 800160e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_GPIO_Init+0x134>)
 8001624:	f000 fffa 	bl	800261c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001628:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800162c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_GPIO_Init+0x138>)
 8001642:	f000 ffeb 	bl	800261c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001646:	bf00      	nop
 8001648:	3730      	adds	r7, #48	; 0x30
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40020400 	.word	0x40020400
 8001658:	40020c00 	.word	0x40020c00
 800165c:	40020000 	.word	0x40020000

08001660 <floatToString>:

/* USER CODE BEGIN 4 */

// Hàm chuyển float sang string
void floatToString(float num, char *target) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	ed87 0a01 	vstr	s0, [r7, #4]
 800166a:	6038      	str	r0, [r7, #0]
  int intPart = (int)num; // phần nguyên của số float
 800166c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001674:	ee17 3a90 	vmov	r3, s15
 8001678:	61fb      	str	r3, [r7, #28]
  float fracPart = num - intPart; // phần thập phân của số float
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001684:	ed97 7a01 	vldr	s14, [r7, #4]
 8001688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168c:	edc7 7a06 	vstr	s15, [r7, #24]
  char intStr[5]; // chuỗi chứa phần nguyên
  char fracStr[5]; // chuỗi chứa phần thập phân
  sprintf(intStr,"%d", intPart); // gọi hàm chuyển phần nguyên sang string
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	4911      	ldr	r1, [pc, #68]	; (80016dc <floatToString+0x7c>)
 8001698:	4618      	mov	r0, r3
 800169a:	f008 f81b 	bl	80096d4 <siprintf>
  sprintf(fracStr,"%d",(int16_t)(fracPart*10000)); // gọi hàm chuyển phần thập phân sang string với độ chính xác là 6 chữ số sau dấu phẩy
 800169e:	edd7 7a06 	vldr	s15, [r7, #24]
 80016a2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80016e0 <floatToString+0x80>
 80016a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ae:	ee17 3a90 	vmov	r3, s15
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <floatToString+0x7c>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f008 f809 	bl	80096d4 <siprintf>
  sprintf(target, "%s.%s", intStr, fracStr); // nối hai chuỗi lại với nhau và thêm dấu chấm vào giữa
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	f107 0210 	add.w	r2, r7, #16
 80016ca:	4906      	ldr	r1, [pc, #24]	; (80016e4 <floatToString+0x84>)
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f008 f801 	bl	80096d4 <siprintf>
}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	0800bb6c 	.word	0x0800bb6c
 80016e0:	461c4000 	.word	0x461c4000
 80016e4:	0800bb70 	.word	0x0800bb70

080016e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b091      	sub	sp, #68	; 0x44
 80016ec:	af0e      	add	r7, sp, #56	; 0x38
 80016ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4bb6      	ldr	r3, [pc, #728]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 83ae 	bne.w	8001e5a <HAL_TIM_PeriodElapsedCallback+0x772>
	{
		// Read Data
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80016fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001702:	48b4      	ldr	r0, [pc, #720]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001704:	f001 f93f 	bl	8002986 <HAL_GPIO_TogglePin>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8001708:	49b3      	ldr	r1, [pc, #716]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800170a:	48b4      	ldr	r0, [pc, #720]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800170c:	f006 f9d4 	bl	8007ab8 <MPU6050_Read_All>
		MS5611_calculate(&hi2c1, &MS5611);
 8001710:	49b3      	ldr	r1, [pc, #716]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001712:	48b2      	ldr	r0, [pc, #712]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001714:	f006 fc1c 	bl	8007f50 <MS5611_calculate>
		// Filter
		Lowpass4MPU(MPU6050, &MPU6050_LP);
 8001718:	4eaf      	ldr	r6, [pc, #700]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800171a:	4bb2      	ldr	r3, [pc, #712]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800171c:	930d      	str	r3, [sp, #52]	; 0x34
 800171e:	466d      	mov	r5, sp
 8001720:	f106 0410 	add.w	r4, r6, #16
 8001724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800172c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	602b      	str	r3, [r5, #0]
 8001734:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001738:	f007 fdc6 	bl	80092c8 <Lowpass4MPU>
		Lowpass(MS5611.P, &LP_height, 0.5);
 800173c:	4ba8      	ldr	r3, [pc, #672]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001748:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800174c:	48a6      	ldr	r0, [pc, #664]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800174e:	eeb0 0a67 	vmov.f32	s0, s15
 8001752:	f007 fee5 	bl	8009520 <Lowpass>
		MPU2Angle(MPU6050_LP, &angle);
 8001756:	4ea3      	ldr	r6, [pc, #652]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001758:	4ba4      	ldr	r3, [pc, #656]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x304>)
 800175a:	930d      	str	r3, [sp, #52]	; 0x34
 800175c:	466d      	mov	r5, sp
 800175e:	f106 0410 	add.w	r4, r6, #16
 8001762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	602b      	str	r3, [r5, #0]
 8001772:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001776:	f007 fe03 	bl	8009380 <MPU2Angle>
		Madgwick_imu(&MPU6050_LP, &Q_est);
 800177a:	499d      	ldr	r1, [pc, #628]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800177c:	4899      	ldr	r0, [pc, #612]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800177e:	f007 f9c5 	bl	8008b0c <Madgwick_imu>
		// Caculator

		Quat2Angle(Q_est, &Madgwick);
 8001782:	4b9b      	ldr	r3, [pc, #620]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001784:	ed93 6a00 	vldr	s12, [r3]
 8001788:	edd3 6a01 	vldr	s13, [r3, #4]
 800178c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001790:	edd3 7a03 	vldr	s15, [r3, #12]
 8001794:	4897      	ldr	r0, [pc, #604]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001796:	eeb0 0a46 	vmov.f32	s0, s12
 800179a:	eef0 0a66 	vmov.f32	s1, s13
 800179e:	eeb0 1a47 	vmov.f32	s2, s14
 80017a2:	eef0 1a67 	vmov.f32	s3, s15
 80017a6:	f007 fbe3 	bl	8008f70 <Quat2Angle>
		OffsetAngle(&Madgwick, Offset);
 80017aa:	4b93      	ldr	r3, [pc, #588]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80017ac:	edd3 6a00 	vldr	s13, [r3]
 80017b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80017b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017b8:	eeb0 0a66 	vmov.f32	s0, s13
 80017bc:	eef0 0a47 	vmov.f32	s1, s14
 80017c0:	eeb0 1a67 	vmov.f32	s2, s15
 80017c4:	488b      	ldr	r0, [pc, #556]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80017c6:	f007 fd4b 	bl	8009260 <OffsetAngle>
		height = getAltitude(LP_height.out, 101325);
 80017ca:	4b87      	ldr	r3, [pc, #540]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feba 	bl	8000548 <__aeabi_f2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	ed9f 1b77 	vldr	d1, [pc, #476]	; 80019b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 80017dc:	ec43 2b10 	vmov	d0, r2, r3
 80017e0:	f006 ff36 	bl	8008650 <getAltitude>
 80017e4:	eeb0 7a40 	vmov.f32	s14, s0
 80017e8:	eef0 7a60 	vmov.f32	s15, s1
 80017ec:	4b83      	ldr	r3, [pc, #524]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x314>)
 80017ee:	ed83 7b00 	vstr	d7, [r3]
		// r()
		x[0] = Setpoint.roll 	- Madgwick.roll;
 80017f2:	4b83      	ldr	r3, [pc, #524]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	4b7e      	ldr	r3, [pc, #504]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001802:	ee17 0a90 	vmov	r0, s15
 8001806:	f7fe fe9f 	bl	8000548 <__aeabi_f2d>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	497d      	ldr	r1, [pc, #500]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001810:	e9c1 2300 	strd	r2, r3, [r1]
		x[1] = Setpoint.pitch 	- Madgwick.pitch;
 8001814:	4b7a      	ldr	r3, [pc, #488]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001816:	ed93 7a01 	vldr	s14, [r3, #4]
 800181a:	4b76      	ldr	r3, [pc, #472]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800181c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001824:	ee17 0a90 	vmov	r0, s15
 8001828:	f7fe fe8e 	bl	8000548 <__aeabi_f2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4974      	ldr	r1, [pc, #464]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001832:	e9c1 2302 	strd	r2, r3, [r1, #8]
		x[2] = Setpoint.yaw 	- Madgwick.yaw;
 8001836:	4b72      	ldr	r3, [pc, #456]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001838:	ed93 7a02 	vldr	s14, [r3, #8]
 800183c:	4b6d      	ldr	r3, [pc, #436]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800183e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001846:	ee17 0a90 	vmov	r0, s15
 800184a:	f7fe fe7d 	bl	8000548 <__aeabi_f2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	496c      	ldr	r1, [pc, #432]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001854:	e9c1 2304 	strd	r2, r3, [r1, #16]
		x[3] = Setpoint_dot.roll 	- MPU6050.Gx;
 8001858:	4b6b      	ldr	r3, [pc, #428]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	4b5e      	ldr	r3, [pc, #376]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001860:	edd3 7a07 	vldr	s15, [r3, #28]
 8001864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001868:	ee17 0a90 	vmov	r0, s15
 800186c:	f7fe fe6c 	bl	8000548 <__aeabi_f2d>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4963      	ldr	r1, [pc, #396]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001876:	e9c1 2306 	strd	r2, r3, [r1, #24]
		x[4] = Setpoint_dot.pitch 	- MPU6050.Gy;
 800187a:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800187c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001880:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001882:	edd3 7a08 	vldr	s15, [r3, #32]
 8001886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188a:	ee17 0a90 	vmov	r0, s15
 800188e:	f7fe fe5b 	bl	8000548 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	495b      	ldr	r1, [pc, #364]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001898:	e9c1 2308 	strd	r2, r3, [r1, #32]
		x[5] = Setpoint_dot.yaw 	- MPU6050.Gz;
 800189c:	4b5a      	ldr	r3, [pc, #360]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800189e:	ed93 7a02 	vldr	s14, [r3, #8]
 80018a2:	4b4d      	ldr	r3, [pc, #308]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80018a4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ac:	ee17 0a90 	vmov	r0, s15
 80018b0:	f7fe fe4a 	bl	8000548 <__aeabi_f2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4952      	ldr	r1, [pc, #328]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80018ba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		//
//		x[0] = 0;
//		x[1] = 0;
		x[2] = 0;
 80018be:	4951      	ldr	r1, [pc, #324]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
//		x[3] = 0;
//		x[4] = 0;
		x[5] = 0;
 80018cc:	494d      	ldr	r1, [pc, #308]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//LQR
		compute_control(x, K, u);
 80018da:	4a4c      	ldr	r2, [pc, #304]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80018dc:	494c      	ldr	r1, [pc, #304]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80018de:	4849      	ldr	r0, [pc, #292]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80018e0:	f007 fe68 	bl	80095b4 <compute_control>
		//Limit
		if(u[0] > 8.7969) u[0] = 8.7969;
 80018e4:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80018e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ea:	a335      	add	r3, pc, #212	; (adr r3, 80019c0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7ff f912 	bl	8000b18 <__aeabi_dcmpgt>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_TIM_PeriodElapsedCallback+0x21e>
 80018fa:	4944      	ldr	r1, [pc, #272]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80018fc:	a330      	add	r3, pc, #192	; (adr r3, 80019c0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	e9c1 2300 	strd	r2, r3, [r1]
		if(u[0] < -16.677)u[0] = -16.677;
 8001906:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001908:	e9d3 0100 	ldrd	r0, r1, [r3]
 800190c:	a32e      	add	r3, pc, #184	; (adr r3, 80019c8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7ff f8e3 	bl	8000adc <__aeabi_dcmplt>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x240>
 800191c:	493b      	ldr	r1, [pc, #236]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800191e:	a32a      	add	r3, pc, #168	; (adr r3, 80019c8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	e9c1 2300 	strd	r2, r3, [r1]
		if(u[1] > 11.5) u[1] = 11.5;
 8001928:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800192a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001934:	f7ff f8f0 	bl	8000b18 <__aeabi_dcmpgt>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_TIM_PeriodElapsedCallback+0x262>
 800193e:	4933      	ldr	r1, [pc, #204]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001946:	e9c1 2302 	strd	r2, r3, [r1, #8]
		if(u[1] < -11.5)u[1] = -11.5;
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800194c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001956:	f7ff f8c1 	bl	8000adc <__aeabi_dcmplt>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_TIM_PeriodElapsedCallback+0x284>
 8001960:	492a      	ldr	r1, [pc, #168]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001968:	e9c1 2302 	strd	r2, r3, [r1, #8]
		if(u[2] > 11.5) u[2] = 11.5;
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800196e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001978:	f7ff f8ce 	bl	8000b18 <__aeabi_dcmpgt>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_TIM_PeriodElapsedCallback+0x2a6>
 8001982:	4922      	ldr	r1, [pc, #136]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800198a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if(u[2] < -11.5)u[2] = -11.5;
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001990:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800199a:	f7ff f89f 	bl	8000adc <__aeabi_dcmplt>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d03b      	beq.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0x334>
 80019a4:	4919      	ldr	r1, [pc, #100]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80019ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80019b0:	e034      	b.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0x334>
 80019b2:	bf00      	nop
 80019b4:	f3af 8000 	nop.w
 80019b8:	00000000 	.word	0x00000000
 80019bc:	40f8bcd0 	.word	0x40f8bcd0
 80019c0:	46dc5d64 	.word	0x46dc5d64
 80019c4:	40219803 	.word	0x40219803
 80019c8:	df3b645a 	.word	0xdf3b645a
 80019cc:	c030ad4f 	.word	0xc030ad4f
 80019d0:	200002b8 	.word	0x200002b8
 80019d4:	40020c00 	.word	0x40020c00
 80019d8:	20000348 	.word	0x20000348
 80019dc:	200001c4 	.word	0x200001c4
 80019e0:	200003d0 	.word	0x200003d0
 80019e4:	2000038c 	.word	0x2000038c
 80019e8:	20000408 	.word	0x20000408
 80019ec:	20000418 	.word	0x20000418
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000424 	.word	0x20000424
 80019f8:	20000050 	.word	0x20000050
 80019fc:	20000410 	.word	0x20000410
 8001a00:	20000430 	.word	0x20000430
 8001a04:	20000490 	.word	0x20000490
 8001a08:	2000043c 	.word	0x2000043c
 8001a0c:	200004c0 	.word	0x200004c0
 8001a10:	20000068 	.word	0x20000068
 8001a14:	40270000 	.word	0x40270000
 8001a18:	c0270000 	.word	0xc0270000
		if(u[3] > 11.5) u[3] = 11.5;
 8001a1c:	4bba      	ldr	r3, [pc, #744]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001a1e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	4bb9      	ldr	r3, [pc, #740]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001a28:	f7ff f876 	bl	8000b18 <__aeabi_dcmpgt>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_TIM_PeriodElapsedCallback+0x356>
 8001a32:	49b5      	ldr	r1, [pc, #724]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4bb4      	ldr	r3, [pc, #720]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001a3a:	e9c1 2306 	strd	r2, r3, [r1, #24]
		if(u[3] < -11.5)u[3] = -11.5;
 8001a3e:	4bb2      	ldr	r3, [pc, #712]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001a40:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4bb1      	ldr	r3, [pc, #708]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001a4a:	f7ff f847 	bl	8000adc <__aeabi_dcmplt>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x378>
 8001a54:	49ac      	ldr	r1, [pc, #688]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4bad      	ldr	r3, [pc, #692]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001a5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		u[1] = u[1]*0.3;
 8001a60:	4ba9      	ldr	r3, [pc, #676]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001a62:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a66:	a3a4      	add	r3, pc, #656	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fdc4 	bl	80005f8 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	49a4      	ldr	r1, [pc, #656]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001a76:	e9c1 2302 	strd	r2, r3, [r1, #8]
		u[2] = u[2]*0.3;
 8001a7a:	4ba3      	ldr	r3, [pc, #652]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001a7c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a80:	a39d      	add	r3, pc, #628	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f7fe fdb7 	bl	80005f8 <__aeabi_dmul>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	499e      	ldr	r1, [pc, #632]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001a90:	e9c1 2304 	strd	r2, r3, [r1, #16]
		u[3] = u[3]*0.1;
 8001a94:	4b9c      	ldr	r3, [pc, #624]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001a96:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a9a:	a399      	add	r3, pc, #612	; (adr r3, 8001d00 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fdaa 	bl	80005f8 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4997      	ldr	r1, [pc, #604]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001aaa:	e9c1 2306 	strd	r2, r3, [r1, #24]

		//U -> T
		T1 = T_base + u[0]*0.25 + u[3]*0.25 - u[2]*0.5; // T = Khối lượng/4 + độ cao + yaw - pitch;
 8001aae:	4b96      	ldr	r3, [pc, #600]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001ab0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b96      	ldr	r3, [pc, #600]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001aba:	f7fe fd9d 	bl	80005f8 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4b94      	ldr	r3, [pc, #592]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fbde 	bl	800028c <__adddf3>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	4b8b      	ldr	r3, [pc, #556]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001ada:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	4b8c      	ldr	r3, [pc, #560]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001ae4:	f7fe fd88 	bl	80005f8 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4620      	mov	r0, r4
 8001aee:	4629      	mov	r1, r5
 8001af0:	f7fe fbcc 	bl	800028c <__adddf3>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4614      	mov	r4, r2
 8001afa:	461d      	mov	r5, r3
 8001afc:	4b82      	ldr	r3, [pc, #520]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001afe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b85      	ldr	r3, [pc, #532]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001b08:	f7fe fd76 	bl	80005f8 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4620      	mov	r0, r4
 8001b12:	4629      	mov	r1, r5
 8001b14:	f7fe fbb8 	bl	8000288 <__aeabi_dsub>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4980      	ldr	r1, [pc, #512]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001b1e:	e9c1 2300 	strd	r2, r3, [r1]
		T2 = T_base + u[0]*0.25 - u[3]*0.25 + u[1]*0.5; // T = Khối lượng/4 + độ cao - yaw + sin;
 8001b22:	4b79      	ldr	r3, [pc, #484]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001b24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b79      	ldr	r3, [pc, #484]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001b2e:	f7fe fd63 	bl	80005f8 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4b77      	ldr	r3, [pc, #476]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fba4 	bl	800028c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4614      	mov	r4, r2
 8001b4a:	461d      	mov	r5, r3
 8001b4c:	4b6e      	ldr	r3, [pc, #440]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001b4e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b6f      	ldr	r3, [pc, #444]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001b58:	f7fe fd4e 	bl	80005f8 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4620      	mov	r0, r4
 8001b62:	4629      	mov	r1, r5
 8001b64:	f7fe fb90 	bl	8000288 <__aeabi_dsub>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	461d      	mov	r5, r3
 8001b70:	4b65      	ldr	r3, [pc, #404]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001b72:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001b7c:	f7fe fd3c 	bl	80005f8 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4620      	mov	r0, r4
 8001b86:	4629      	mov	r1, r5
 8001b88:	f7fe fb80 	bl	800028c <__adddf3>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4964      	ldr	r1, [pc, #400]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8001b92:	e9c1 2300 	strd	r2, r3, [r1]
		T3 = T_base + u[0]*0.25 - u[3]*0.25 + u[2]*0.5; // T = Khối lượng/4 + độ cao - yaw + pitch;
 8001b96:	4b5c      	ldr	r3, [pc, #368]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	4b5c      	ldr	r3, [pc, #368]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001ba2:	f7fe fd29 	bl	80005f8 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	4b5a      	ldr	r3, [pc, #360]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe fb6a 	bl	800028c <__adddf3>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	461d      	mov	r5, r3
 8001bc0:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001bc2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001bcc:	f7fe fd14 	bl	80005f8 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	f7fe fb56 	bl	8000288 <__aeabi_dsub>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4614      	mov	r4, r2
 8001be2:	461d      	mov	r5, r3
 8001be4:	4b48      	ldr	r3, [pc, #288]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001be6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001bf0:	f7fe fd02 	bl	80005f8 <__aeabi_dmul>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	f7fe fb46 	bl	800028c <__adddf3>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4948      	ldr	r1, [pc, #288]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8001c06:	e9c1 2300 	strd	r2, r3, [r1]
		T4 = T_base + u[0]*0.25 - u[3]*0.25 - u[1]*0.5; // T = Khối lượng/4 + độ cao - yaw - sin;
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001c0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001c16:	f7fe fcef 	bl	80005f8 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	f7fe fb30 	bl	800028c <__adddf3>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4614      	mov	r4, r2
 8001c32:	461d      	mov	r5, r3
 8001c34:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001c36:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001c40:	f7fe fcda 	bl	80005f8 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4620      	mov	r0, r4
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	f7fe fb1c 	bl	8000288 <__aeabi_dsub>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4614      	mov	r4, r2
 8001c56:	461d      	mov	r5, r3
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001c5a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001c64:	f7fe fcc8 	bl	80005f8 <__aeabi_dmul>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	4629      	mov	r1, r5
 8001c70:	f7fe fb0a 	bl	8000288 <__aeabi_dsub>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	492c      	ldr	r1, [pc, #176]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x644>)
 8001c7a:	e9c1 2300 	strd	r2, r3, [r1]

		//T -> Duty
		M1.Duty = T1/11.5*1000;
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001c80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001c8a:	f7fe fddf 	bl	800084c <__aeabi_ddiv>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001c9c:	f7fe fcac 	bl	80005f8 <__aeabi_dmul>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe ff7e 	bl	8000ba8 <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8001cb0:	6013      	str	r3, [r2, #0]
		M2.Duty = T2/11.5*1000;
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8001cb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001cbe:	f7fe fdc5 	bl	800084c <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001cd0:	f7fe fc92 	bl	80005f8 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f7fe ff64 	bl	8000ba8 <__aeabi_d2f>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4a15      	ldr	r2, [pc, #84]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8001ce4:	6013      	str	r3, [r2, #0]
		M3.Duty = T3/11.5*1000;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8001ce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001cf2:	f7fe fdab 	bl	800084c <__aeabi_ddiv>
 8001cf6:	e021      	b.n	8001d3c <HAL_TIM_PeriodElapsedCallback+0x654>
 8001cf8:	33333333 	.word	0x33333333
 8001cfc:	3fd33333 	.word	0x3fd33333
 8001d00:	9999999a 	.word	0x9999999a
 8001d04:	3fb99999 	.word	0x3fb99999
 8001d08:	200004c0 	.word	0x200004c0
 8001d0c:	40270000 	.word	0x40270000
 8001d10:	c0270000 	.word	0xc0270000
 8001d14:	3fd00000 	.word	0x3fd00000
 8001d18:	20000128 	.word	0x20000128
 8001d1c:	3fe00000 	.word	0x3fe00000
 8001d20:	200004e0 	.word	0x200004e0
 8001d24:	200004e8 	.word	0x200004e8
 8001d28:	200004f0 	.word	0x200004f0
 8001d2c:	200004f8 	.word	0x200004f8
 8001d30:	408f4000 	.word	0x408f4000
 8001d34:	20000010 	.word	0x20000010
 8001d38:	20000020 	.word	0x20000020
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001d4a:	f7fe fc55 	bl	80005f8 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4610      	mov	r0, r2
 8001d54:	4619      	mov	r1, r3
 8001d56:	f7fe ff27 	bl	8000ba8 <__aeabi_d2f>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4a42      	ldr	r2, [pc, #264]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001d5e:	6013      	str	r3, [r2, #0]
		M4.Duty = T4/11.5*1000;
 8001d60:	4b42      	ldr	r3, [pc, #264]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x784>)
 8001d62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x788>)
 8001d6c:	f7fe fd6e 	bl	800084c <__aeabi_ddiv>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001d7e:	f7fe fc3b 	bl	80005f8 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f7fe ff0d 	bl	8000ba8 <__aeabi_d2f>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a38      	ldr	r2, [pc, #224]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001d92:	6013      	str	r3, [r2, #0]

		// Enable output PID
		if (enable)
 8001d94:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d039      	beq.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x728>
		{
			ESC_Control(&htim1, M1.Duty + M1.Duty_base, M2.Duty + M2.Duty_base,M3.Duty + M3.Duty_base, M4.Duty + M4.Duty_base); // Duty + Duty_base
 8001d9c:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001d9e:	ed93 7a00 	vldr	s14, [r3]
 8001da2:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001da4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db0:	ee17 3a90 	vmov	r3, s15
 8001db4:	b299      	uxth	r1, r3
 8001db6:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001db8:	ed93 7a00 	vldr	s14, [r3]
 8001dbc:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001dbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dca:	ee17 3a90 	vmov	r3, s15
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001dd2:	ed93 7a00 	vldr	s14, [r3]
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001dd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de4:	ee17 3a90 	vmov	r3, s15
 8001de8:	b298      	uxth	r0, r3
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001dec:	ed93 7a00 	vldr	s14, [r3]
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001df2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dfe:	ee17 3a90 	vmov	r3, s15
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	4603      	mov	r3, r0
 8001e08:	481e      	ldr	r0, [pc, #120]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8001e0a:	f007 fb64 	bl	80094d6 <ESC_Control>
		{
			ESC_Control(&htim1, M1.Duty_min, M2.Duty_min, M3.Duty_min,M4.Duty_min); // Duty_min
		}

	}
}
 8001e0e:	e024      	b.n	8001e5a <HAL_TIM_PeriodElapsedCallback+0x772>
			ESC_Control(&htim1, M1.Duty_min, M2.Duty_min, M3.Duty_min,M4.Duty_min); // Duty_min
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001e12:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e1a:	ee17 3a90 	vmov	r3, s15
 8001e1e:	b299      	uxth	r1, r3
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001e22:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e2a:	ee17 3a90 	vmov	r3, s15
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001e32:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3a:	ee17 3a90 	vmov	r3, s15
 8001e3e:	b298      	uxth	r0, r3
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001e42:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e4a:	ee17 3a90 	vmov	r3, s15
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4603      	mov	r3, r0
 8001e54:	480b      	ldr	r0, [pc, #44]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8001e56:	f007 fb3e 	bl	80094d6 <ESC_Control>
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e62:	bf00      	nop
 8001e64:	408f4000 	.word	0x408f4000
 8001e68:	20000030 	.word	0x20000030
 8001e6c:	200004f8 	.word	0x200004f8
 8001e70:	40270000 	.word	0x40270000
 8001e74:	20000040 	.word	0x20000040
 8001e78:	20000344 	.word	0x20000344
 8001e7c:	20000010 	.word	0x20000010
 8001e80:	20000020 	.word	0x20000020
 8001e84:	20000270 	.word	0x20000270

08001e88 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
}
 8001e8e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e90:	e7fe      	b.n	8001e90 <Error_Handler+0x8>
	...

08001e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_I2C_MspInit+0x84>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12c      	bne.n	8001f60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f34:	2304      	movs	r3, #4
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480c      	ldr	r0, [pc, #48]	; (8001f70 <HAL_I2C_MspInit+0x8c>)
 8001f40:	f000 fb6c 	bl	800261c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40005400 	.word	0x40005400
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020400 	.word	0x40020400

08001f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_SPI_MspInit+0x84>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d12b      	bne.n	8001fee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fce:	23e0      	movs	r3, #224	; 0xe0
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fde:	2305      	movs	r3, #5
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <HAL_SPI_MspInit+0x8c>)
 8001fea:	f000 fb17 	bl	800261c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fee:	bf00      	nop
 8001ff0:	3728      	adds	r7, #40	; 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40013000 	.word	0x40013000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020000 	.word	0x40020000

08002004 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_TIM_Base_MspInit+0x70>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_TIM_Base_MspInit+0x74>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	4a16      	ldr	r2, [pc, #88]	; (8002078 <HAL_TIM_Base_MspInit+0x74>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6453      	str	r3, [r2, #68]	; 0x44
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_TIM_Base_MspInit+0x74>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002032:	e01a      	b.n	800206a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203c:	d115      	bne.n	800206a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_TIM_Base_MspInit+0x74>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <HAL_TIM_Base_MspInit+0x74>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_TIM_Base_MspInit+0x74>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	201c      	movs	r0, #28
 8002060:	f000 faa5 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002064:	201c      	movs	r0, #28
 8002066:	f000 fabe 	bl	80025e6 <HAL_NVIC_EnableIRQ>
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40010000 	.word	0x40010000
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <HAL_TIM_MspPostInit+0x68>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d11e      	bne.n	80020dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_TIM_MspPostInit+0x6c>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <HAL_TIM_MspPostInit+0x6c>)
 80020a8:	f043 0310 	orr.w	r3, r3, #16
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_TIM_MspPostInit+0x6c>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80020ba:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80020be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	4619      	mov	r1, r3
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <HAL_TIM_MspPostInit+0x70>)
 80020d8:	f000 faa0 	bl	800261c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020dc:	bf00      	nop
 80020de:	3720      	adds	r7, #32
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a19      	ldr	r2, [pc, #100]	; (8002174 <HAL_UART_MspInit+0x84>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d12b      	bne.n	800216a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_UART_MspInit+0x88>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <HAL_UART_MspInit+0x88>)
 800211c:	f043 0320 	orr.w	r3, r3, #32
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_UART_MspInit+0x88>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_UART_MspInit+0x88>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a10      	ldr	r2, [pc, #64]	; (8002178 <HAL_UART_MspInit+0x88>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_UART_MspInit+0x88>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800214a:	23c0      	movs	r3, #192	; 0xc0
 800214c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002156:	2303      	movs	r3, #3
 8002158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800215a:	2308      	movs	r3, #8
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <HAL_UART_MspInit+0x8c>)
 8002166:	f000 fa59 	bl	800261c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800216a:	bf00      	nop
 800216c:	3728      	adds	r7, #40	; 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40011400 	.word	0x40011400
 8002178:	40023800 	.word	0x40023800
 800217c:	40020800 	.word	0x40020800

08002180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <NMI_Handler+0x4>

08002186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <HardFault_Handler+0x4>

0800218c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <MemManage_Handler+0x4>

08002192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002196:	e7fe      	b.n	8002196 <BusFault_Handler+0x4>

08002198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800219c:	e7fe      	b.n	800219c <UsageFault_Handler+0x4>

0800219e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021cc:	f000 f8d0 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <TIM2_IRQHandler+0x10>)
 80021da:	f002 ff91 	bl	8005100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200002b8 	.word	0x200002b8

080021e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <_sbrk+0x5c>)
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <_sbrk+0x60>)
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <_sbrk+0x64>)
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <_sbrk+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	d207      	bcs.n	8002228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002218:	f007 fa1c 	bl	8009654 <__errno>
 800221c:	4603      	mov	r3, r0
 800221e:	220c      	movs	r2, #12
 8002220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	e009      	b.n	800223c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <_sbrk+0x64>)
 8002238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20020000 	.word	0x20020000
 8002248:	00000400 	.word	0x00000400
 800224c:	20000500 	.word	0x20000500
 8002250:	200005d0 	.word	0x200005d0

08002254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <SystemInit+0x20>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <SystemInit+0x20>)
 8002260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800227c:	480d      	ldr	r0, [pc, #52]	; (80022b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800227e:	490e      	ldr	r1, [pc, #56]	; (80022b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002294:	4c0b      	ldr	r4, [pc, #44]	; (80022c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022a2:	f7ff ffd7 	bl	8002254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a6:	f007 f9db 	bl	8009660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022aa:	f7fe fe4f 	bl	8000f4c <main>
  bx  lr    
 80022ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 80022bc:	0800c1f0 	.word	0x0800c1f0
  ldr r2, =_sbss
 80022c0:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 80022c4:	200005cc 	.word	0x200005cc

080022c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC_IRQHandler>
	...

080022cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_Init+0x40>)
 80022d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_Init+0x40>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <HAL_Init+0x40>)
 80022ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f000 f94f 	bl	8002598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fa:	200f      	movs	r0, #15
 80022fc:	f000 f808 	bl	8002310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002300:	f7ff fdc8 	bl	8001e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023c00 	.word	0x40023c00

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x54>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_InitTick+0x58>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f967 	bl	8002602 <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f000 f92f 	bl	80025ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <HAL_InitTick+0x5c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000130 	.word	0x20000130
 8002368:	20000138 	.word	0x20000138
 800236c:	20000134 	.word	0x20000134

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000138 	.word	0x20000138
 8002394:	20000504 	.word	0x20000504

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000504 	.word	0x20000504

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffde 	bl	8002398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000138 	.word	0x20000138

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db0b      	blt.n	8002486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	4907      	ldr	r1, [pc, #28]	; (8002494 <__NVIC_EnableIRQ+0x38>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2001      	movs	r0, #1
 800247e:	fa00 f202 	lsl.w	r2, r0, r2
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000e100 	.word	0xe000e100

08002498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	db0a      	blt.n	80024c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	490c      	ldr	r1, [pc, #48]	; (80024e4 <__NVIC_SetPriority+0x4c>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	0112      	lsls	r2, r2, #4
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	440b      	add	r3, r1
 80024bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c0:	e00a      	b.n	80024d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4908      	ldr	r1, [pc, #32]	; (80024e8 <__NVIC_SetPriority+0x50>)
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	3b04      	subs	r3, #4
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	440b      	add	r3, r1
 80024d6:	761a      	strb	r2, [r3, #24]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000e100 	.word	0xe000e100
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f1c3 0307 	rsb	r3, r3, #7
 8002506:	2b04      	cmp	r3, #4
 8002508:	bf28      	it	cs
 800250a:	2304      	movcs	r3, #4
 800250c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3304      	adds	r3, #4
 8002512:	2b06      	cmp	r3, #6
 8002514:	d902      	bls.n	800251c <NVIC_EncodePriority+0x30>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3b03      	subs	r3, #3
 800251a:	e000      	b.n	800251e <NVIC_EncodePriority+0x32>
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	f04f 32ff 	mov.w	r2, #4294967295
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	401a      	ands	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43d9      	mvns	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	4313      	orrs	r3, r2
         );
}
 8002546:	4618      	mov	r0, r3
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002564:	d301      	bcc.n	800256a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002566:	2301      	movs	r3, #1
 8002568:	e00f      	b.n	800258a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <SysTick_Config+0x40>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002572:	210f      	movs	r1, #15
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f7ff ff8e 	bl	8002498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <SysTick_Config+0x40>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <SysTick_Config+0x40>)
 8002584:	2207      	movs	r2, #7
 8002586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000e010 	.word	0xe000e010

08002598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff29 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c0:	f7ff ff3e 	bl	8002440 <__NVIC_GetPriorityGrouping>
 80025c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f7ff ff8e 	bl	80024ec <NVIC_EncodePriority>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff5d 	bl	8002498 <__NVIC_SetPriority>
}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff31 	bl	800245c <__NVIC_EnableIRQ>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ffa2 	bl	8002554 <SysTick_Config>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e16b      	b.n	8002910 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	429a      	cmp	r2, r3
 8002652:	f040 815a 	bne.w	800290a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d005      	beq.n	800266e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266a:	2b02      	cmp	r3, #2
 800266c:	d130      	bne.n	80026d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 0201 	and.w	r2, r3, #1
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d017      	beq.n	800270c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d123      	bne.n	8002760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	08da      	lsrs	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3208      	adds	r2, #8
 800275a:	69b9      	ldr	r1, [r7, #24]
 800275c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0203 	and.w	r2, r3, #3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80b4 	beq.w	800290a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b60      	ldr	r3, [pc, #384]	; (8002928 <HAL_GPIO_Init+0x30c>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a5f      	ldr	r2, [pc, #380]	; (8002928 <HAL_GPIO_Init+0x30c>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b5d      	ldr	r3, [pc, #372]	; (8002928 <HAL_GPIO_Init+0x30c>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027be:	4a5b      	ldr	r2, [pc, #364]	; (800292c <HAL_GPIO_Init+0x310>)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	220f      	movs	r2, #15
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a52      	ldr	r2, [pc, #328]	; (8002930 <HAL_GPIO_Init+0x314>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d02b      	beq.n	8002842 <HAL_GPIO_Init+0x226>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a51      	ldr	r2, [pc, #324]	; (8002934 <HAL_GPIO_Init+0x318>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d025      	beq.n	800283e <HAL_GPIO_Init+0x222>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a50      	ldr	r2, [pc, #320]	; (8002938 <HAL_GPIO_Init+0x31c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01f      	beq.n	800283a <HAL_GPIO_Init+0x21e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a4f      	ldr	r2, [pc, #316]	; (800293c <HAL_GPIO_Init+0x320>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d019      	beq.n	8002836 <HAL_GPIO_Init+0x21a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4e      	ldr	r2, [pc, #312]	; (8002940 <HAL_GPIO_Init+0x324>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_GPIO_Init+0x216>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4d      	ldr	r2, [pc, #308]	; (8002944 <HAL_GPIO_Init+0x328>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00d      	beq.n	800282e <HAL_GPIO_Init+0x212>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4c      	ldr	r2, [pc, #304]	; (8002948 <HAL_GPIO_Init+0x32c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <HAL_GPIO_Init+0x20e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4b      	ldr	r2, [pc, #300]	; (800294c <HAL_GPIO_Init+0x330>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_GPIO_Init+0x20a>
 8002822:	2307      	movs	r3, #7
 8002824:	e00e      	b.n	8002844 <HAL_GPIO_Init+0x228>
 8002826:	2308      	movs	r3, #8
 8002828:	e00c      	b.n	8002844 <HAL_GPIO_Init+0x228>
 800282a:	2306      	movs	r3, #6
 800282c:	e00a      	b.n	8002844 <HAL_GPIO_Init+0x228>
 800282e:	2305      	movs	r3, #5
 8002830:	e008      	b.n	8002844 <HAL_GPIO_Init+0x228>
 8002832:	2304      	movs	r3, #4
 8002834:	e006      	b.n	8002844 <HAL_GPIO_Init+0x228>
 8002836:	2303      	movs	r3, #3
 8002838:	e004      	b.n	8002844 <HAL_GPIO_Init+0x228>
 800283a:	2302      	movs	r3, #2
 800283c:	e002      	b.n	8002844 <HAL_GPIO_Init+0x228>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_GPIO_Init+0x228>
 8002842:	2300      	movs	r3, #0
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	f002 0203 	and.w	r2, r2, #3
 800284a:	0092      	lsls	r2, r2, #2
 800284c:	4093      	lsls	r3, r2
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002854:	4935      	ldr	r1, [pc, #212]	; (800292c <HAL_GPIO_Init+0x310>)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	3302      	adds	r3, #2
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002862:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_GPIO_Init+0x334>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002886:	4a32      	ldr	r2, [pc, #200]	; (8002950 <HAL_GPIO_Init+0x334>)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800288c:	4b30      	ldr	r3, [pc, #192]	; (8002950 <HAL_GPIO_Init+0x334>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b0:	4a27      	ldr	r2, [pc, #156]	; (8002950 <HAL_GPIO_Init+0x334>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_GPIO_Init+0x334>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028da:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <HAL_GPIO_Init+0x334>)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_GPIO_Init+0x334>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002904:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_GPIO_Init+0x334>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3301      	adds	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b0f      	cmp	r3, #15
 8002914:	f67f ae90 	bls.w	8002638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3724      	adds	r7, #36	; 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	40013800 	.word	0x40013800
 8002930:	40020000 	.word	0x40020000
 8002934:	40020400 	.word	0x40020400
 8002938:	40020800 	.word	0x40020800
 800293c:	40020c00 	.word	0x40020c00
 8002940:	40021000 	.word	0x40021000
 8002944:	40021400 	.word	0x40021400
 8002948:	40021800 	.word	0x40021800
 800294c:	40021c00 	.word	0x40021c00
 8002950:	40013c00 	.word	0x40013c00

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002970:	e003      	b.n	800297a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	619a      	str	r2, [r3, #24]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002998:	887a      	ldrh	r2, [r7, #2]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4013      	ands	r3, r2
 800299e:	041a      	lsls	r2, r3, #16
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43d9      	mvns	r1, r3
 80029a4:	887b      	ldrh	r3, [r7, #2]
 80029a6:	400b      	ands	r3, r1
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	619a      	str	r2, [r3, #24]
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e12b      	b.n	8002c26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff fa7e 	bl	8001ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2224      	movs	r2, #36	; 0x24
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a20:	f001 fbbc 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8002a24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4a81      	ldr	r2, [pc, #516]	; (8002c30 <HAL_I2C_Init+0x274>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d807      	bhi.n	8002a40 <HAL_I2C_Init+0x84>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a80      	ldr	r2, [pc, #512]	; (8002c34 <HAL_I2C_Init+0x278>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	bf94      	ite	ls
 8002a38:	2301      	movls	r3, #1
 8002a3a:	2300      	movhi	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	e006      	b.n	8002a4e <HAL_I2C_Init+0x92>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4a7d      	ldr	r2, [pc, #500]	; (8002c38 <HAL_I2C_Init+0x27c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	bf94      	ite	ls
 8002a48:	2301      	movls	r3, #1
 8002a4a:	2300      	movhi	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0e7      	b.n	8002c26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4a78      	ldr	r2, [pc, #480]	; (8002c3c <HAL_I2C_Init+0x280>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0c9b      	lsrs	r3, r3, #18
 8002a60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4a6a      	ldr	r2, [pc, #424]	; (8002c30 <HAL_I2C_Init+0x274>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d802      	bhi.n	8002a90 <HAL_I2C_Init+0xd4>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	e009      	b.n	8002aa4 <HAL_I2C_Init+0xe8>
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	4a69      	ldr	r2, [pc, #420]	; (8002c40 <HAL_I2C_Init+0x284>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	099b      	lsrs	r3, r3, #6
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ab6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	495c      	ldr	r1, [pc, #368]	; (8002c30 <HAL_I2C_Init+0x274>)
 8002ac0:	428b      	cmp	r3, r1
 8002ac2:	d819      	bhi.n	8002af8 <HAL_I2C_Init+0x13c>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1e59      	subs	r1, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ad2:	1c59      	adds	r1, r3, #1
 8002ad4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ad8:	400b      	ands	r3, r1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_I2C_Init+0x138>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1e59      	subs	r1, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af2:	e051      	b.n	8002b98 <HAL_I2C_Init+0x1dc>
 8002af4:	2304      	movs	r3, #4
 8002af6:	e04f      	b.n	8002b98 <HAL_I2C_Init+0x1dc>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d111      	bne.n	8002b24 <HAL_I2C_Init+0x168>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1e58      	subs	r0, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6859      	ldr	r1, [r3, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	440b      	add	r3, r1
 8002b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2301      	moveq	r3, #1
 8002b1e:	2300      	movne	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	e012      	b.n	8002b4a <HAL_I2C_Init+0x18e>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1e58      	subs	r0, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	0099      	lsls	r1, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Init+0x196>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e022      	b.n	8002b98 <HAL_I2C_Init+0x1dc>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10e      	bne.n	8002b78 <HAL_I2C_Init+0x1bc>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1e58      	subs	r0, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6859      	ldr	r1, [r3, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	440b      	add	r3, r1
 8002b68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b76:	e00f      	b.n	8002b98 <HAL_I2C_Init+0x1dc>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1e58      	subs	r0, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	0099      	lsls	r1, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	6809      	ldr	r1, [r1, #0]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69da      	ldr	r2, [r3, #28]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6911      	ldr	r1, [r2, #16]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68d2      	ldr	r2, [r2, #12]
 8002bd2:	4311      	orrs	r1, r2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	000186a0 	.word	0x000186a0
 8002c34:	001e847f 	.word	0x001e847f
 8002c38:	003d08ff 	.word	0x003d08ff
 8002c3c:	431bde83 	.word	0x431bde83
 8002c40:	10624dd3 	.word	0x10624dd3

08002c44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	817b      	strh	r3, [r7, #10]
 8002c56:	460b      	mov	r3, r1
 8002c58:	813b      	strh	r3, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c5e:	f7ff fb9b 	bl	8002398 <HAL_GetTick>
 8002c62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	f040 80d9 	bne.w	8002e24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2319      	movs	r3, #25
 8002c78:	2201      	movs	r2, #1
 8002c7a:	496d      	ldr	r1, [pc, #436]	; (8002e30 <HAL_I2C_Mem_Write+0x1ec>)
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 fc7f 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0cc      	b.n	8002e26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_I2C_Mem_Write+0x56>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e0c5      	b.n	8002e26 <HAL_I2C_Mem_Write+0x1e2>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d007      	beq.n	8002cc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2221      	movs	r2, #33	; 0x21
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2240      	movs	r2, #64	; 0x40
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a3a      	ldr	r2, [r7, #32]
 8002cea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a4d      	ldr	r2, [pc, #308]	; (8002e34 <HAL_I2C_Mem_Write+0x1f0>)
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d02:	88f8      	ldrh	r0, [r7, #6]
 8002d04:	893a      	ldrh	r2, [r7, #8]
 8002d06:	8979      	ldrh	r1, [r7, #10]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	4603      	mov	r3, r0
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fab6 	bl	8003284 <I2C_RequestMemoryWrite>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d052      	beq.n	8002dc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e081      	b.n	8002e26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fd00 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d107      	bne.n	8002d4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e06b      	b.n	8002e26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d11b      	bne.n	8002dc4 <HAL_I2C_Mem_Write+0x180>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d017      	beq.n	8002dc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1aa      	bne.n	8002d22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fcec 	bl	80037ae <I2C_WaitOnBTFFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00d      	beq.n	8002df8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d107      	bne.n	8002df4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e016      	b.n	8002e26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e000      	b.n	8002e26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
  }
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	00100002 	.word	0x00100002
 8002e34:	ffff0000 	.word	0xffff0000

08002e38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	4608      	mov	r0, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	817b      	strh	r3, [r7, #10]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	813b      	strh	r3, [r7, #8]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e52:	f7ff faa1 	bl	8002398 <HAL_GetTick>
 8002e56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	f040 8208 	bne.w	8003276 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2319      	movs	r3, #25
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	497b      	ldr	r1, [pc, #492]	; (800305c <HAL_I2C_Mem_Read+0x224>)
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fb85 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e1fb      	b.n	8003278 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_I2C_Mem_Read+0x56>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e1f4      	b.n	8003278 <HAL_I2C_Mem_Read+0x440>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d007      	beq.n	8002eb4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ec2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2222      	movs	r2, #34	; 0x22
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2240      	movs	r2, #64	; 0x40
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a5b      	ldr	r2, [pc, #364]	; (8003060 <HAL_I2C_Mem_Read+0x228>)
 8002ef4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ef6:	88f8      	ldrh	r0, [r7, #6]
 8002ef8:	893a      	ldrh	r2, [r7, #8]
 8002efa:	8979      	ldrh	r1, [r7, #10]
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	4603      	mov	r3, r0
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fa52 	bl	80033b0 <I2C_RequestMemoryRead>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e1b0      	b.n	8003278 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d113      	bne.n	8002f46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	623b      	str	r3, [r7, #32]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	623b      	str	r3, [r7, #32]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	623b      	str	r3, [r7, #32]
 8002f32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e184      	b.n	8003250 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d11b      	bne.n	8002f86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e164      	b.n	8003250 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	e144      	b.n	8003250 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fdc:	e138      	b.n	8003250 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	f200 80f1 	bhi.w	80031ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d123      	bne.n	8003038 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fc1b 	bl	8003830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e139      	b.n	8003278 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003036:	e10b      	b.n	8003250 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	2b02      	cmp	r3, #2
 800303e:	d14e      	bne.n	80030de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003046:	2200      	movs	r2, #0
 8003048:	4906      	ldr	r1, [pc, #24]	; (8003064 <HAL_I2C_Mem_Read+0x22c>)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fa98 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e10e      	b.n	8003278 <HAL_I2C_Mem_Read+0x440>
 800305a:	bf00      	nop
 800305c:	00100002 	.word	0x00100002
 8003060:	ffff0000 	.word	0xffff0000
 8003064:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030dc:	e0b8      	b.n	8003250 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e4:	2200      	movs	r2, #0
 80030e6:	4966      	ldr	r1, [pc, #408]	; (8003280 <HAL_I2C_Mem_Read+0x448>)
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fa49 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0bf      	b.n	8003278 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003106:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003140:	2200      	movs	r2, #0
 8003142:	494f      	ldr	r1, [pc, #316]	; (8003280 <HAL_I2C_Mem_Read+0x448>)
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fa1b 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e091      	b.n	8003278 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c8:	e042      	b.n	8003250 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fb2e 	bl	8003830 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e04c      	b.n	8003278 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b04      	cmp	r3, #4
 800321c:	d118      	bne.n	8003250 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f aec2 	bne.w	8002fde <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
  }
}
 8003278:	4618      	mov	r0, r3
 800327a:	3728      	adds	r7, #40	; 0x28
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	00010004 	.word	0x00010004

08003284 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	4608      	mov	r0, r1
 800328e:	4611      	mov	r1, r2
 8003290:	461a      	mov	r2, r3
 8003292:	4603      	mov	r3, r0
 8003294:	817b      	strh	r3, [r7, #10]
 8003296:	460b      	mov	r3, r1
 8003298:	813b      	strh	r3, [r7, #8]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f960 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d4:	d103      	bne.n	80032de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e05f      	b.n	80033a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	6a3a      	ldr	r2, [r7, #32]
 80032f6:	492d      	ldr	r1, [pc, #180]	; (80033ac <I2C_RequestMemoryWrite+0x128>)
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f998 	bl	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e04c      	b.n	80033a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800331e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003320:	6a39      	ldr	r1, [r7, #32]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fa02 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00d      	beq.n	800334a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	2b04      	cmp	r3, #4
 8003334:	d107      	bne.n	8003346 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003344:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e02b      	b.n	80033a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003350:	893b      	ldrh	r3, [r7, #8]
 8003352:	b2da      	uxtb	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	611a      	str	r2, [r3, #16]
 800335a:	e021      	b.n	80033a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800335c:	893b      	ldrh	r3, [r7, #8]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	b29b      	uxth	r3, r3
 8003362:	b2da      	uxtb	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800336a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336c:	6a39      	ldr	r1, [r7, #32]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f9dc 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00d      	beq.n	8003396 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	2b04      	cmp	r3, #4
 8003380:	d107      	bne.n	8003392 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003390:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e005      	b.n	80033a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003396:	893b      	ldrh	r3, [r7, #8]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	00010002 	.word	0x00010002

080033b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	4608      	mov	r0, r1
 80033ba:	4611      	mov	r1, r2
 80033bc:	461a      	mov	r2, r3
 80033be:	4603      	mov	r3, r0
 80033c0:	817b      	strh	r3, [r7, #10]
 80033c2:	460b      	mov	r3, r1
 80033c4:	813b      	strh	r3, [r7, #8]
 80033c6:	4613      	mov	r3, r2
 80033c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f8c2 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003410:	d103      	bne.n	800341a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0aa      	b.n	8003574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800342c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	4952      	ldr	r1, [pc, #328]	; (800357c <I2C_RequestMemoryRead+0x1cc>)
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f8fa 	bl	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e097      	b.n	8003574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345c:	6a39      	ldr	r1, [r7, #32]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f964 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00d      	beq.n	8003486 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2b04      	cmp	r3, #4
 8003470:	d107      	bne.n	8003482 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e076      	b.n	8003574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d105      	bne.n	8003498 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800348c:	893b      	ldrh	r3, [r7, #8]
 800348e:	b2da      	uxtb	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	611a      	str	r2, [r3, #16]
 8003496:	e021      	b.n	80034dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003498:	893b      	ldrh	r3, [r7, #8]
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	b29b      	uxth	r3, r3
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	6a39      	ldr	r1, [r7, #32]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f93e 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00d      	beq.n	80034d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d107      	bne.n	80034ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e050      	b.n	8003574 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034d2:	893b      	ldrh	r3, [r7, #8]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034de:	6a39      	ldr	r1, [r7, #32]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f923 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d107      	bne.n	8003504 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003502:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e035      	b.n	8003574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003516:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	2200      	movs	r2, #0
 8003520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f82b 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353e:	d103      	bne.n	8003548 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e013      	b.n	8003574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800354c:	897b      	ldrh	r3, [r7, #10]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	6a3a      	ldr	r2, [r7, #32]
 8003560:	4906      	ldr	r1, [pc, #24]	; (800357c <I2C_RequestMemoryRead+0x1cc>)
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f863 	bl	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	00010002 	.word	0x00010002

08003580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003590:	e025      	b.n	80035de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d021      	beq.n	80035de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7fe fefd 	bl	8002398 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d116      	bne.n	80035de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f043 0220 	orr.w	r2, r3, #32
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e023      	b.n	8003626 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d10d      	bne.n	8003604 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	e00c      	b.n	800361e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	43da      	mvns	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4013      	ands	r3, r2
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	bf0c      	ite	eq
 8003616:	2301      	moveq	r3, #1
 8003618:	2300      	movne	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	429a      	cmp	r2, r3
 8003622:	d0b6      	beq.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800363c:	e051      	b.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364c:	d123      	bne.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003666:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f043 0204 	orr.w	r2, r3, #4
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e046      	b.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d021      	beq.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369e:	f7fe fe7b 	bl	8002398 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d116      	bne.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e020      	b.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d10c      	bne.n	8003706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	43da      	mvns	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bf14      	ite	ne
 80036fe:	2301      	movne	r3, #1
 8003700:	2300      	moveq	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	e00b      	b.n	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	43da      	mvns	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d18d      	bne.n	800363e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003738:	e02d      	b.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f8ce 	bl	80038dc <I2C_IsAcknowledgeFailed>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e02d      	b.n	80037a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d021      	beq.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7fe fe21 	bl	8002398 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d116      	bne.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e007      	b.n	80037a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a0:	2b80      	cmp	r3, #128	; 0x80
 80037a2:	d1ca      	bne.n	800373a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ba:	e02d      	b.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f88d 	bl	80038dc <I2C_IsAcknowledgeFailed>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e02d      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d021      	beq.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d4:	f7fe fde0 	bl	8002398 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d302      	bcc.n	80037ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d116      	bne.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e007      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b04      	cmp	r3, #4
 8003824:	d1ca      	bne.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800383c:	e042      	b.n	80038c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b10      	cmp	r3, #16
 800384a:	d119      	bne.n	8003880 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0210 	mvn.w	r2, #16
 8003854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e029      	b.n	80038d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003880:	f7fe fd8a 	bl	8002398 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d116      	bne.n	80038c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e007      	b.n	80038d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d1b5      	bne.n	800383e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d11b      	bne.n	800392c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	f043 0204 	orr.w	r2, r3, #4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e267      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d075      	beq.n	8003a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800395a:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b04      	cmp	r3, #4
 8003964:	d00c      	beq.n	8003980 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003966:	4b85      	ldr	r3, [pc, #532]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800396e:	2b08      	cmp	r3, #8
 8003970:	d112      	bne.n	8003998 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003972:	4b82      	ldr	r3, [pc, #520]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397e:	d10b      	bne.n	8003998 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	4b7e      	ldr	r3, [pc, #504]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d05b      	beq.n	8003a44 <HAL_RCC_OscConfig+0x108>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d157      	bne.n	8003a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e242      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d106      	bne.n	80039b0 <HAL_RCC_OscConfig+0x74>
 80039a2:	4b76      	ldr	r3, [pc, #472]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a75      	ldr	r2, [pc, #468]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e01d      	b.n	80039ec <HAL_RCC_OscConfig+0xb0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x98>
 80039ba:	4b70      	ldr	r3, [pc, #448]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6f      	ldr	r2, [pc, #444]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a6c      	ldr	r2, [pc, #432]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e00b      	b.n	80039ec <HAL_RCC_OscConfig+0xb0>
 80039d4:	4b69      	ldr	r3, [pc, #420]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a68      	ldr	r2, [pc, #416]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b66      	ldr	r3, [pc, #408]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a65      	ldr	r2, [pc, #404]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d013      	beq.n	8003a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fe fcd0 	bl	8002398 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fe fccc 	bl	8002398 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e207      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b5b      	ldr	r3, [pc, #364]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0xc0>
 8003a1a:	e014      	b.n	8003a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fcbc 	bl	8002398 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fe fcb8 	bl	8002398 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1f3      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a36:	4b51      	ldr	r3, [pc, #324]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0xe8>
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d063      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a52:	4b4a      	ldr	r3, [pc, #296]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d11c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a6a:	4b44      	ldr	r3, [pc, #272]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d116      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_RCC_OscConfig+0x152>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e1c7      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8e:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4937      	ldr	r1, [pc, #220]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	e03a      	b.n	8003b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aac:	4b34      	ldr	r3, [pc, #208]	; (8003b80 <HAL_RCC_OscConfig+0x244>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fe fc71 	bl	8002398 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aba:	f7fe fc6d 	bl	8002398 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e1a8      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003acc:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad8:	4b28      	ldr	r3, [pc, #160]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4925      	ldr	r1, [pc, #148]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
 8003aec:	e015      	b.n	8003b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aee:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <HAL_RCC_OscConfig+0x244>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fe fc50 	bl	8002398 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003afc:	f7fe fc4c 	bl	8002398 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e187      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d036      	beq.n	8003b94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d016      	beq.n	8003b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b2e:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <HAL_RCC_OscConfig+0x248>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fe fc30 	bl	8002398 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b3c:	f7fe fc2c 	bl	8002398 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e167      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x200>
 8003b5a:	e01b      	b.n	8003b94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_RCC_OscConfig+0x248>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b62:	f7fe fc19 	bl	8002398 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b68:	e00e      	b.n	8003b88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b6a:	f7fe fc15 	bl	8002398 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d907      	bls.n	8003b88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e150      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	42470000 	.word	0x42470000
 8003b84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b88:	4b88      	ldr	r3, [pc, #544]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1ea      	bne.n	8003b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8097 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba6:	4b81      	ldr	r3, [pc, #516]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10f      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	4b7d      	ldr	r3, [pc, #500]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	4a7c      	ldr	r2, [pc, #496]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc2:	4b7a      	ldr	r3, [pc, #488]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	4b77      	ldr	r3, [pc, #476]	; (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d118      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bde:	4b74      	ldr	r3, [pc, #464]	; (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a73      	ldr	r2, [pc, #460]	; (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bea:	f7fe fbd5 	bl	8002398 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf2:	f7fe fbd1 	bl	8002398 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e10c      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d106      	bne.n	8003c26 <HAL_RCC_OscConfig+0x2ea>
 8003c18:	4b64      	ldr	r3, [pc, #400]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a63      	ldr	r2, [pc, #396]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
 8003c24:	e01c      	b.n	8003c60 <HAL_RCC_OscConfig+0x324>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x30c>
 8003c2e:	4b5f      	ldr	r3, [pc, #380]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	4a5e      	ldr	r2, [pc, #376]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c34:	f043 0304 	orr.w	r3, r3, #4
 8003c38:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3a:	4b5c      	ldr	r3, [pc, #368]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	4a5b      	ldr	r2, [pc, #364]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6713      	str	r3, [r2, #112]	; 0x70
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0x324>
 8003c48:	4b58      	ldr	r3, [pc, #352]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a57      	ldr	r2, [pc, #348]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
 8003c54:	4b55      	ldr	r3, [pc, #340]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	4a54      	ldr	r2, [pc, #336]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c5a:	f023 0304 	bic.w	r3, r3, #4
 8003c5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d015      	beq.n	8003c94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fe fb96 	bl	8002398 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7fe fb92 	bl	8002398 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0cb      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	4b49      	ldr	r3, [pc, #292]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ee      	beq.n	8003c70 <HAL_RCC_OscConfig+0x334>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c94:	f7fe fb80 	bl	8002398 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fe fb7c 	bl	8002398 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0b5      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb2:	4b3e      	ldr	r3, [pc, #248]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ee      	bne.n	8003c9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc4:	4b39      	ldr	r3, [pc, #228]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	4a38      	ldr	r2, [pc, #224]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80a1 	beq.w	8003e1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cda:	4b34      	ldr	r3, [pc, #208]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d05c      	beq.n	8003da0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d141      	bne.n	8003d72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	4b31      	ldr	r3, [pc, #196]	; (8003db4 <HAL_RCC_OscConfig+0x478>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fb50 	bl	8002398 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fe fb4c 	bl	8002398 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e087      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	019b      	lsls	r3, r3, #6
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	3b01      	subs	r3, #1
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	491b      	ldr	r1, [pc, #108]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x478>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fb25 	bl	8002398 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d52:	f7fe fb21 	bl	8002398 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e05c      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x416>
 8003d70:	e054      	b.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <HAL_RCC_OscConfig+0x478>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe fb0e 	bl	8002398 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe fb0a 	bl	8002398 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e045      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x444>
 8003d9e:	e03d      	b.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d107      	bne.n	8003db8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e038      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40007000 	.word	0x40007000
 8003db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x4ec>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d028      	beq.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d121      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d11a      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003de8:	4013      	ands	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d111      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	085b      	lsrs	r3, r3, #1
 8003e00:	3b01      	subs	r3, #1
 8003e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800

08003e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0cc      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b68      	ldr	r3, [pc, #416]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d90c      	bls.n	8003e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b65      	ldr	r3, [pc, #404]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0b8      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d020      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e80:	4b59      	ldr	r3, [pc, #356]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a58      	ldr	r2, [pc, #352]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e98:	4b53      	ldr	r3, [pc, #332]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a52      	ldr	r2, [pc, #328]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea4:	4b50      	ldr	r3, [pc, #320]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	494d      	ldr	r1, [pc, #308]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d044      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eca:	4b47      	ldr	r3, [pc, #284]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d119      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e07f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d003      	beq.n	8003eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eea:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e06f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efa:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e067      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0a:	4b37      	ldr	r3, [pc, #220]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 0203 	bic.w	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4934      	ldr	r1, [pc, #208]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f1c:	f7fe fa3c 	bl	8002398 <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f24:	f7fe fa38 	bl	8002398 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e04f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 020c 	and.w	r2, r3, #12
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d1eb      	bne.n	8003f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d20c      	bcs.n	8003f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e032      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f80:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4916      	ldr	r1, [pc, #88]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	490e      	ldr	r1, [pc, #56]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fb2:	f000 f821 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	490a      	ldr	r1, [pc, #40]	; (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003fc4:	5ccb      	ldrb	r3, [r1, r3]
 8003fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fca:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe f99c 	bl	8002310 <HAL_InitTick>

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40023c00 	.word	0x40023c00
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	0800c0c4 	.word	0x0800c0c4
 8003ff0:	20000130 	.word	0x20000130
 8003ff4:	20000134 	.word	0x20000134

08003ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ffc:	b090      	sub	sp, #64	; 0x40
 8003ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
 8004004:	2300      	movs	r3, #0
 8004006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004008:	2300      	movs	r3, #0
 800400a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004010:	4b59      	ldr	r3, [pc, #356]	; (8004178 <HAL_RCC_GetSysClockFreq+0x180>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	2b08      	cmp	r3, #8
 800401a:	d00d      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x40>
 800401c:	2b08      	cmp	r3, #8
 800401e:	f200 80a1 	bhi.w	8004164 <HAL_RCC_GetSysClockFreq+0x16c>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x34>
 8004026:	2b04      	cmp	r3, #4
 8004028:	d003      	beq.n	8004032 <HAL_RCC_GetSysClockFreq+0x3a>
 800402a:	e09b      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800402c:	4b53      	ldr	r3, [pc, #332]	; (800417c <HAL_RCC_GetSysClockFreq+0x184>)
 800402e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004030:	e09b      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004032:	4b53      	ldr	r3, [pc, #332]	; (8004180 <HAL_RCC_GetSysClockFreq+0x188>)
 8004034:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004036:	e098      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004038:	4b4f      	ldr	r3, [pc, #316]	; (8004178 <HAL_RCC_GetSysClockFreq+0x180>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004042:	4b4d      	ldr	r3, [pc, #308]	; (8004178 <HAL_RCC_GetSysClockFreq+0x180>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d028      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404e:	4b4a      	ldr	r3, [pc, #296]	; (8004178 <HAL_RCC_GetSysClockFreq+0x180>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	2200      	movs	r2, #0
 8004056:	623b      	str	r3, [r7, #32]
 8004058:	627a      	str	r2, [r7, #36]	; 0x24
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004060:	2100      	movs	r1, #0
 8004062:	4b47      	ldr	r3, [pc, #284]	; (8004180 <HAL_RCC_GetSysClockFreq+0x188>)
 8004064:	fb03 f201 	mul.w	r2, r3, r1
 8004068:	2300      	movs	r3, #0
 800406a:	fb00 f303 	mul.w	r3, r0, r3
 800406e:	4413      	add	r3, r2
 8004070:	4a43      	ldr	r2, [pc, #268]	; (8004180 <HAL_RCC_GetSysClockFreq+0x188>)
 8004072:	fba0 1202 	umull	r1, r2, r0, r2
 8004076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004078:	460a      	mov	r2, r1
 800407a:	62ba      	str	r2, [r7, #40]	; 0x28
 800407c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800407e:	4413      	add	r3, r2
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004084:	2200      	movs	r2, #0
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	61fa      	str	r2, [r7, #28]
 800408a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800408e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004092:	f7fc fdd9 	bl	8000c48 <__aeabi_uldivmod>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4613      	mov	r3, r2
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409e:	e053      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a0:	4b35      	ldr	r3, [pc, #212]	; (8004178 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	2200      	movs	r2, #0
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	617a      	str	r2, [r7, #20]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040b2:	f04f 0b00 	mov.w	fp, #0
 80040b6:	4652      	mov	r2, sl
 80040b8:	465b      	mov	r3, fp
 80040ba:	f04f 0000 	mov.w	r0, #0
 80040be:	f04f 0100 	mov.w	r1, #0
 80040c2:	0159      	lsls	r1, r3, #5
 80040c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c8:	0150      	lsls	r0, r2, #5
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	ebb2 080a 	subs.w	r8, r2, sl
 80040d2:	eb63 090b 	sbc.w	r9, r3, fp
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040ea:	ebb2 0408 	subs.w	r4, r2, r8
 80040ee:	eb63 0509 	sbc.w	r5, r3, r9
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	00eb      	lsls	r3, r5, #3
 80040fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004100:	00e2      	lsls	r2, r4, #3
 8004102:	4614      	mov	r4, r2
 8004104:	461d      	mov	r5, r3
 8004106:	eb14 030a 	adds.w	r3, r4, sl
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	eb45 030b 	adc.w	r3, r5, fp
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800411e:	4629      	mov	r1, r5
 8004120:	028b      	lsls	r3, r1, #10
 8004122:	4621      	mov	r1, r4
 8004124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004128:	4621      	mov	r1, r4
 800412a:	028a      	lsls	r2, r1, #10
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004132:	2200      	movs	r2, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	60fa      	str	r2, [r7, #12]
 8004138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800413c:	f7fc fd84 	bl	8000c48 <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4613      	mov	r3, r2
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_GetSysClockFreq+0x180>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	3301      	adds	r3, #1
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004162:	e002      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCC_GetSysClockFreq+0x184>)
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800416c:	4618      	mov	r0, r3
 800416e:	3740      	adds	r7, #64	; 0x40
 8004170:	46bd      	mov	sp, r7
 8004172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800
 800417c:	00f42400 	.word	0x00f42400
 8004180:	017d7840 	.word	0x017d7840

08004184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_RCC_GetHCLKFreq+0x14>)
 800418a:	681b      	ldr	r3, [r3, #0]
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000130 	.word	0x20000130

0800419c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041a0:	f7ff fff0 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	0a9b      	lsrs	r3, r3, #10
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40023800 	.word	0x40023800
 80041c0:	0800c0d4 	.word	0x0800c0d4

080041c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041c8:	f7ff ffdc 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	0b5b      	lsrs	r3, r3, #13
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4903      	ldr	r1, [pc, #12]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40023800 	.word	0x40023800
 80041e8:	0800c0d4 	.word	0x0800c0d4

080041ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e07b      	b.n	80042f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	2b00      	cmp	r3, #0
 8004204:	d108      	bne.n	8004218 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420e:	d009      	beq.n	8004224 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	61da      	str	r2, [r3, #28]
 8004216:	e005      	b.n	8004224 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd fe98 	bl	8001f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	ea42 0103 	orr.w	r1, r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	f003 0104 	and.w	r1, r3, #4
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f003 0210 	and.w	r2, r3, #16
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b088      	sub	sp, #32
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_SPI_Transmit+0x22>
 800431c:	2302      	movs	r3, #2
 800431e:	e126      	b.n	800456e <HAL_SPI_Transmit+0x270>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004328:	f7fe f836 	bl	8002398 <HAL_GetTick>
 800432c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d002      	beq.n	8004344 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800433e:	2302      	movs	r3, #2
 8004340:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004342:	e10b      	b.n	800455c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_SPI_Transmit+0x52>
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004354:	e102      	b.n	800455c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2203      	movs	r2, #3
 800435a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	88fa      	ldrh	r2, [r7, #6]
 800436e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	88fa      	ldrh	r2, [r7, #6]
 8004374:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439c:	d10f      	bne.n	80043be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d007      	beq.n	80043dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e4:	d14b      	bne.n	800447e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_SPI_Transmit+0xf6>
 80043ee:	8afb      	ldrh	r3, [r7, #22]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d13e      	bne.n	8004472 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	881a      	ldrh	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004418:	e02b      	b.n	8004472 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b02      	cmp	r3, #2
 8004426:	d112      	bne.n	800444e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	881a      	ldrh	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	1c9a      	adds	r2, r3, #2
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	86da      	strh	r2, [r3, #54]	; 0x36
 800444c:	e011      	b.n	8004472 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800444e:	f7fd ffa3 	bl	8002398 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d803      	bhi.n	8004466 <HAL_SPI_Transmit+0x168>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d102      	bne.n	800446c <HAL_SPI_Transmit+0x16e>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d102      	bne.n	8004472 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004470:	e074      	b.n	800455c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1ce      	bne.n	800441a <HAL_SPI_Transmit+0x11c>
 800447c:	e04c      	b.n	8004518 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_SPI_Transmit+0x18e>
 8004486:	8afb      	ldrh	r3, [r7, #22]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d140      	bne.n	800450e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	7812      	ldrb	r2, [r2, #0]
 8004498:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044b2:	e02c      	b.n	800450e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d113      	bne.n	80044ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	330c      	adds	r3, #12
 80044cc:	7812      	ldrb	r2, [r2, #0]
 80044ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80044e8:	e011      	b.n	800450e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ea:	f7fd ff55 	bl	8002398 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d803      	bhi.n	8004502 <HAL_SPI_Transmit+0x204>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d102      	bne.n	8004508 <HAL_SPI_Transmit+0x20a>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800450c:	e026      	b.n	800455c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1cd      	bne.n	80044b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	6839      	ldr	r1, [r7, #0]
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fbcb 	bl	8004cb8 <SPI_EndRxTxTransaction>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10a      	bne.n	800454c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e000      	b.n	800455c <HAL_SPI_Transmit+0x25e>
  }

error:
 800455a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800456c:	7ffb      	ldrb	r3, [r7, #31]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b088      	sub	sp, #32
 800457a:	af02      	add	r7, sp, #8
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004592:	d112      	bne.n	80045ba <HAL_SPI_Receive+0x44>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10e      	bne.n	80045ba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2204      	movs	r2, #4
 80045a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045a4:	88fa      	ldrh	r2, [r7, #6]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f8f1 	bl	8004798 <HAL_SPI_TransmitReceive>
 80045b6:	4603      	mov	r3, r0
 80045b8:	e0ea      	b.n	8004790 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_SPI_Receive+0x52>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e0e3      	b.n	8004790 <HAL_SPI_Receive+0x21a>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045d0:	f7fd fee2 	bl	8002398 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d002      	beq.n	80045e8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
 80045e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045e6:	e0ca      	b.n	800477e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_SPI_Receive+0x7e>
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045f8:	e0c1      	b.n	800477e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2204      	movs	r2, #4
 80045fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004640:	d10f      	bne.n	8004662 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004650:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004660:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d007      	beq.n	8004680 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800467e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d162      	bne.n	800474e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004688:	e02e      	b.n	80046e8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d115      	bne.n	80046c4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f103 020c 	add.w	r2, r3, #12
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046c2:	e011      	b.n	80046e8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046c4:	f7fd fe68 	bl	8002398 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d803      	bhi.n	80046dc <HAL_SPI_Receive+0x166>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d102      	bne.n	80046e2 <HAL_SPI_Receive+0x16c>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d102      	bne.n	80046e8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046e6:	e04a      	b.n	800477e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1cb      	bne.n	800468a <HAL_SPI_Receive+0x114>
 80046f2:	e031      	b.n	8004758 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d113      	bne.n	800472a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	b292      	uxth	r2, r2
 800470e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	1c9a      	adds	r2, r3, #2
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004728:	e011      	b.n	800474e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472a:	f7fd fe35 	bl	8002398 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d803      	bhi.n	8004742 <HAL_SPI_Receive+0x1cc>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d102      	bne.n	8004748 <HAL_SPI_Receive+0x1d2>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800474c:	e017      	b.n	800477e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1cd      	bne.n	80046f4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	6839      	ldr	r1, [r7, #0]
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fa45 	bl	8004bec <SPI_EndRxTransaction>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	75fb      	strb	r3, [r7, #23]
 800477a:	e000      	b.n	800477e <HAL_SPI_Receive+0x208>
  }

error :
 800477c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800478e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08c      	sub	sp, #48	; 0x30
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047a6:	2301      	movs	r3, #1
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_SPI_TransmitReceive+0x26>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e18a      	b.n	8004ad4 <HAL_SPI_TransmitReceive+0x33c>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047c6:	f7fd fde7 	bl	8002398 <HAL_GetTick>
 80047ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047dc:	887b      	ldrh	r3, [r7, #2]
 80047de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d00f      	beq.n	8004808 <HAL_SPI_TransmitReceive+0x70>
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ee:	d107      	bne.n	8004800 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d103      	bne.n	8004800 <HAL_SPI_TransmitReceive+0x68>
 80047f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d003      	beq.n	8004808 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004800:	2302      	movs	r3, #2
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004806:	e15b      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_SPI_TransmitReceive+0x82>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_SPI_TransmitReceive+0x82>
 8004814:	887b      	ldrh	r3, [r7, #2]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004820:	e14e      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b04      	cmp	r3, #4
 800482c:	d003      	beq.n	8004836 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2205      	movs	r2, #5
 8004832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	887a      	ldrh	r2, [r7, #2]
 8004846:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	887a      	ldrh	r2, [r7, #2]
 800484c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	887a      	ldrh	r2, [r7, #2]
 8004858:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	887a      	ldrh	r2, [r7, #2]
 800485e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004876:	2b40      	cmp	r3, #64	; 0x40
 8004878:	d007      	beq.n	800488a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004888:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004892:	d178      	bne.n	8004986 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <HAL_SPI_TransmitReceive+0x10a>
 800489c:	8b7b      	ldrh	r3, [r7, #26]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d166      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	881a      	ldrh	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	1c9a      	adds	r2, r3, #2
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c6:	e053      	b.n	8004970 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d11b      	bne.n	800490e <HAL_SPI_TransmitReceive+0x176>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d016      	beq.n	800490e <HAL_SPI_TransmitReceive+0x176>
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d113      	bne.n	800490e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	881a      	ldrh	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	1c9a      	adds	r2, r3, #2
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b01      	cmp	r3, #1
 800491a:	d119      	bne.n	8004950 <HAL_SPI_TransmitReceive+0x1b8>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d014      	beq.n	8004950 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	b292      	uxth	r2, r2
 8004932:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	1c9a      	adds	r2, r3, #2
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800494c:	2301      	movs	r3, #1
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004950:	f7fd fd22 	bl	8002398 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800495c:	429a      	cmp	r2, r3
 800495e:	d807      	bhi.n	8004970 <HAL_SPI_TransmitReceive+0x1d8>
 8004960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d003      	beq.n	8004970 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800496e:	e0a7      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1a6      	bne.n	80048c8 <HAL_SPI_TransmitReceive+0x130>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1a1      	bne.n	80048c8 <HAL_SPI_TransmitReceive+0x130>
 8004984:	e07c      	b.n	8004a80 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_SPI_TransmitReceive+0x1fc>
 800498e:	8b7b      	ldrh	r3, [r7, #26]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d16b      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	7812      	ldrb	r2, [r2, #0]
 80049a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ba:	e057      	b.n	8004a6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d11c      	bne.n	8004a04 <HAL_SPI_TransmitReceive+0x26c>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d017      	beq.n	8004a04 <HAL_SPI_TransmitReceive+0x26c>
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d114      	bne.n	8004a04 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	7812      	ldrb	r2, [r2, #0]
 80049e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d119      	bne.n	8004a46 <HAL_SPI_TransmitReceive+0x2ae>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d014      	beq.n	8004a46 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a42:	2301      	movs	r3, #1
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a46:	f7fd fca7 	bl	8002398 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d803      	bhi.n	8004a5e <HAL_SPI_TransmitReceive+0x2c6>
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d102      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x2cc>
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a6a:	e029      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1a2      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x224>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d19d      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 f917 	bl	8004cb8 <SPI_EndRxTxTransaction>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d006      	beq.n	8004a9e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a9c:	e010      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10b      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	e000      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004abe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3730      	adds	r7, #48	; 0x30
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004aec:	f7fd fc54 	bl	8002398 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	4413      	add	r3, r2
 8004afa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004afc:	f7fd fc4c 	bl	8002398 <HAL_GetTick>
 8004b00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b02:	4b39      	ldr	r3, [pc, #228]	; (8004be8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	015b      	lsls	r3, r3, #5
 8004b08:	0d1b      	lsrs	r3, r3, #20
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b12:	e054      	b.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1a:	d050      	beq.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b1c:	f7fd fc3c 	bl	8002398 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d902      	bls.n	8004b32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d13d      	bne.n	8004bae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b4a:	d111      	bne.n	8004b70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b54:	d004      	beq.n	8004b60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5e:	d107      	bne.n	8004b70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b78:	d10f      	bne.n	8004b9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e017      	b.n	8004bde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d19b      	bne.n	8004b14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000130 	.word	0x20000130

08004bec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c00:	d111      	bne.n	8004c26 <SPI_EndRxTransaction+0x3a>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0a:	d004      	beq.n	8004c16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c14:	d107      	bne.n	8004c26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c2e:	d12a      	bne.n	8004c86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c38:	d012      	beq.n	8004c60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2200      	movs	r2, #0
 8004c42:	2180      	movs	r1, #128	; 0x80
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7ff ff49 	bl	8004adc <SPI_WaitFlagStateUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02d      	beq.n	8004cac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	f043 0220 	orr.w	r2, r3, #32
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e026      	b.n	8004cae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2200      	movs	r2, #0
 8004c68:	2101      	movs	r1, #1
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff ff36 	bl	8004adc <SPI_WaitFlagStateUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01a      	beq.n	8004cac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	f043 0220 	orr.w	r2, r3, #32
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e013      	b.n	8004cae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2101      	movs	r1, #1
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff ff23 	bl	8004adc <SPI_WaitFlagStateUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	f043 0220 	orr.w	r2, r3, #32
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e000      	b.n	8004cae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cc4:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <SPI_EndRxTxTransaction+0x7c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <SPI_EndRxTxTransaction+0x80>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	0d5b      	lsrs	r3, r3, #21
 8004cd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cd4:	fb02 f303 	mul.w	r3, r2, r3
 8004cd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce2:	d112      	bne.n	8004d0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2200      	movs	r2, #0
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff fef4 	bl	8004adc <SPI_WaitFlagStateUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d016      	beq.n	8004d28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e00f      	b.n	8004d2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d20:	2b80      	cmp	r3, #128	; 0x80
 8004d22:	d0f2      	beq.n	8004d0a <SPI_EndRxTxTransaction+0x52>
 8004d24:	e000      	b.n	8004d28 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d26:	bf00      	nop
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000130 	.word	0x20000130
 8004d38:	165e9f81 	.word	0x165e9f81

08004d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e041      	b.n	8004dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fd f94e 	bl	8002004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3304      	adds	r3, #4
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	f000 fc7a 	bl	8005674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d001      	beq.n	8004df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e04e      	b.n	8004e92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a23      	ldr	r2, [pc, #140]	; (8004ea0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d022      	beq.n	8004e5c <HAL_TIM_Base_Start_IT+0x80>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1e:	d01d      	beq.n	8004e5c <HAL_TIM_Base_Start_IT+0x80>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1f      	ldr	r2, [pc, #124]	; (8004ea4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d018      	beq.n	8004e5c <HAL_TIM_Base_Start_IT+0x80>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ea8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d013      	beq.n	8004e5c <HAL_TIM_Base_Start_IT+0x80>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1c      	ldr	r2, [pc, #112]	; (8004eac <HAL_TIM_Base_Start_IT+0xd0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00e      	beq.n	8004e5c <HAL_TIM_Base_Start_IT+0x80>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1b      	ldr	r2, [pc, #108]	; (8004eb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d009      	beq.n	8004e5c <HAL_TIM_Base_Start_IT+0x80>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d004      	beq.n	8004e5c <HAL_TIM_Base_Start_IT+0x80>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d111      	bne.n	8004e80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b06      	cmp	r3, #6
 8004e6c:	d010      	beq.n	8004e90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0201 	orr.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	e007      	b.n	8004e90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40010000 	.word	0x40010000
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800
 8004eac:	40000c00 	.word	0x40000c00
 8004eb0:	40010400 	.word	0x40010400
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40001800 	.word	0x40001800

08004ebc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e041      	b.n	8004f52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f839 	bl	8004f5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4610      	mov	r0, r2
 8004efc:	f000 fbba 	bl	8005674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <HAL_TIM_PWM_Start+0x24>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	bf14      	ite	ne
 8004f8c:	2301      	movne	r3, #1
 8004f8e:	2300      	moveq	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	e022      	b.n	8004fda <HAL_TIM_PWM_Start+0x6a>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d109      	bne.n	8004fae <HAL_TIM_PWM_Start+0x3e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	bf14      	ite	ne
 8004fa6:	2301      	movne	r3, #1
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	e015      	b.n	8004fda <HAL_TIM_PWM_Start+0x6a>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d109      	bne.n	8004fc8 <HAL_TIM_PWM_Start+0x58>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	bf14      	ite	ne
 8004fc0:	2301      	movne	r3, #1
 8004fc2:	2300      	moveq	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	e008      	b.n	8004fda <HAL_TIM_PWM_Start+0x6a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	bf14      	ite	ne
 8004fd4:	2301      	movne	r3, #1
 8004fd6:	2300      	moveq	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e07c      	b.n	80050dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d104      	bne.n	8004ff2 <HAL_TIM_PWM_Start+0x82>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff0:	e013      	b.n	800501a <HAL_TIM_PWM_Start+0xaa>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d104      	bne.n	8005002 <HAL_TIM_PWM_Start+0x92>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005000:	e00b      	b.n	800501a <HAL_TIM_PWM_Start+0xaa>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b08      	cmp	r3, #8
 8005006:	d104      	bne.n	8005012 <HAL_TIM_PWM_Start+0xa2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005010:	e003      	b.n	800501a <HAL_TIM_PWM_Start+0xaa>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2201      	movs	r2, #1
 8005020:	6839      	ldr	r1, [r7, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fe10 	bl	8005c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2d      	ldr	r2, [pc, #180]	; (80050e4 <HAL_TIM_PWM_Start+0x174>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d004      	beq.n	800503c <HAL_TIM_PWM_Start+0xcc>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a2c      	ldr	r2, [pc, #176]	; (80050e8 <HAL_TIM_PWM_Start+0x178>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d101      	bne.n	8005040 <HAL_TIM_PWM_Start+0xd0>
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <HAL_TIM_PWM_Start+0xd2>
 8005040:	2300      	movs	r3, #0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005054:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <HAL_TIM_PWM_Start+0x174>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d022      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x136>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005068:	d01d      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x136>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1f      	ldr	r2, [pc, #124]	; (80050ec <HAL_TIM_PWM_Start+0x17c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d018      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x136>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <HAL_TIM_PWM_Start+0x180>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x136>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <HAL_TIM_PWM_Start+0x184>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00e      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x136>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a16      	ldr	r2, [pc, #88]	; (80050e8 <HAL_TIM_PWM_Start+0x178>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d009      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x136>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <HAL_TIM_PWM_Start+0x188>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d004      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x136>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a16      	ldr	r2, [pc, #88]	; (80050fc <HAL_TIM_PWM_Start+0x18c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d111      	bne.n	80050ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b06      	cmp	r3, #6
 80050b6:	d010      	beq.n	80050da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c8:	e007      	b.n	80050da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40010000 	.word	0x40010000
 80050e8:	40010400 	.word	0x40010400
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40000800 	.word	0x40000800
 80050f4:	40000c00 	.word	0x40000c00
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40001800 	.word	0x40001800

08005100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b02      	cmp	r3, #2
 8005114:	d122      	bne.n	800515c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b02      	cmp	r3, #2
 8005122:	d11b      	bne.n	800515c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0202 	mvn.w	r2, #2
 800512c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa77 	bl	8005636 <HAL_TIM_IC_CaptureCallback>
 8005148:	e005      	b.n	8005156 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fa69 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fa7a 	bl	800564a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b04      	cmp	r3, #4
 8005168:	d122      	bne.n	80051b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b04      	cmp	r3, #4
 8005176:	d11b      	bne.n	80051b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0204 	mvn.w	r2, #4
 8005180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fa4d 	bl	8005636 <HAL_TIM_IC_CaptureCallback>
 800519c:	e005      	b.n	80051aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fa3f 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fa50 	bl	800564a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d122      	bne.n	8005204 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d11b      	bne.n	8005204 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0208 	mvn.w	r2, #8
 80051d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2204      	movs	r2, #4
 80051da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fa23 	bl	8005636 <HAL_TIM_IC_CaptureCallback>
 80051f0:	e005      	b.n	80051fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa15 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fa26 	bl	800564a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	2b10      	cmp	r3, #16
 8005210:	d122      	bne.n	8005258 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b10      	cmp	r3, #16
 800521e:	d11b      	bne.n	8005258 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0210 	mvn.w	r2, #16
 8005228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2208      	movs	r2, #8
 800522e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9f9 	bl	8005636 <HAL_TIM_IC_CaptureCallback>
 8005244:	e005      	b.n	8005252 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f9eb 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f9fc 	bl	800564a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b01      	cmp	r3, #1
 8005264:	d10e      	bne.n	8005284 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b01      	cmp	r3, #1
 8005272:	d107      	bne.n	8005284 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0201 	mvn.w	r2, #1
 800527c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fc fa32 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b80      	cmp	r3, #128	; 0x80
 8005290:	d10e      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529c:	2b80      	cmp	r3, #128	; 0x80
 800529e:	d107      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fdca 	bl	8005e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	d10e      	bne.n	80052dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d107      	bne.n	80052dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f9c1 	bl	800565e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d10e      	bne.n	8005308 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d107      	bne.n	8005308 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0220 	mvn.w	r2, #32
 8005300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fd94 	bl	8005e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005308:	bf00      	nop
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800532a:	2302      	movs	r3, #2
 800532c:	e0ae      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b0c      	cmp	r3, #12
 800533a:	f200 809f 	bhi.w	800547c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005379 	.word	0x08005379
 8005348:	0800547d 	.word	0x0800547d
 800534c:	0800547d 	.word	0x0800547d
 8005350:	0800547d 	.word	0x0800547d
 8005354:	080053b9 	.word	0x080053b9
 8005358:	0800547d 	.word	0x0800547d
 800535c:	0800547d 	.word	0x0800547d
 8005360:	0800547d 	.word	0x0800547d
 8005364:	080053fb 	.word	0x080053fb
 8005368:	0800547d 	.word	0x0800547d
 800536c:	0800547d 	.word	0x0800547d
 8005370:	0800547d 	.word	0x0800547d
 8005374:	0800543b 	.word	0x0800543b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fa18 	bl	80057b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0208 	orr.w	r2, r2, #8
 8005392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0204 	bic.w	r2, r2, #4
 80053a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6999      	ldr	r1, [r3, #24]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	619a      	str	r2, [r3, #24]
      break;
 80053b6:	e064      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fa68 	bl	8005894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6999      	ldr	r1, [r3, #24]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	021a      	lsls	r2, r3, #8
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	619a      	str	r2, [r3, #24]
      break;
 80053f8:	e043      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fabd 	bl	8005980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0208 	orr.w	r2, r2, #8
 8005414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0204 	bic.w	r2, r2, #4
 8005424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69d9      	ldr	r1, [r3, #28]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	61da      	str	r2, [r3, #28]
      break;
 8005438:	e023      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fb11 	bl	8005a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69d9      	ldr	r1, [r3, #28]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	021a      	lsls	r2, r3, #8
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	61da      	str	r2, [r3, #28]
      break;
 800547a:	e002      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
      break;
 8005480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800548a:	7dfb      	ldrb	r3, [r7, #23]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIM_ConfigClockSource+0x1c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e0b4      	b.n	800561a <HAL_TIM_ConfigClockSource+0x186>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e8:	d03e      	beq.n	8005568 <HAL_TIM_ConfigClockSource+0xd4>
 80054ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ee:	f200 8087 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f6:	f000 8086 	beq.w	8005606 <HAL_TIM_ConfigClockSource+0x172>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d87f      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005500:	2b70      	cmp	r3, #112	; 0x70
 8005502:	d01a      	beq.n	800553a <HAL_TIM_ConfigClockSource+0xa6>
 8005504:	2b70      	cmp	r3, #112	; 0x70
 8005506:	d87b      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005508:	2b60      	cmp	r3, #96	; 0x60
 800550a:	d050      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x11a>
 800550c:	2b60      	cmp	r3, #96	; 0x60
 800550e:	d877      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005510:	2b50      	cmp	r3, #80	; 0x50
 8005512:	d03c      	beq.n	800558e <HAL_TIM_ConfigClockSource+0xfa>
 8005514:	2b50      	cmp	r3, #80	; 0x50
 8005516:	d873      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d058      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x13a>
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d86f      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b30      	cmp	r3, #48	; 0x30
 8005522:	d064      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 8005524:	2b30      	cmp	r3, #48	; 0x30
 8005526:	d86b      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005528:	2b20      	cmp	r3, #32
 800552a:	d060      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 800552c:	2b20      	cmp	r3, #32
 800552e:	d867      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d05c      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 8005534:	2b10      	cmp	r3, #16
 8005536:	d05a      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 8005538:	e062      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6899      	ldr	r1, [r3, #8]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f000 fb5d 	bl	8005c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800555c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	609a      	str	r2, [r3, #8]
      break;
 8005566:	e04f      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6899      	ldr	r1, [r3, #8]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f000 fb46 	bl	8005c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800558a:	609a      	str	r2, [r3, #8]
      break;
 800558c:	e03c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	461a      	mov	r2, r3
 800559c:	f000 faba 	bl	8005b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2150      	movs	r1, #80	; 0x50
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fb13 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 80055ac:	e02c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 fad9 	bl	8005b72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2160      	movs	r1, #96	; 0x60
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fb03 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e01c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 fa9a 	bl	8005b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2140      	movs	r1, #64	; 0x40
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 faf3 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e00c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f000 faea 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 80055fe:	e003      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
      break;
 8005604:	e000      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a40      	ldr	r2, [pc, #256]	; (8005788 <TIM_Base_SetConfig+0x114>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005692:	d00f      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3d      	ldr	r2, [pc, #244]	; (800578c <TIM_Base_SetConfig+0x118>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00b      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3c      	ldr	r2, [pc, #240]	; (8005790 <TIM_Base_SetConfig+0x11c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a3b      	ldr	r2, [pc, #236]	; (8005794 <TIM_Base_SetConfig+0x120>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3a      	ldr	r2, [pc, #232]	; (8005798 <TIM_Base_SetConfig+0x124>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d108      	bne.n	80056c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2f      	ldr	r2, [pc, #188]	; (8005788 <TIM_Base_SetConfig+0x114>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d02b      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d4:	d027      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2c      	ldr	r2, [pc, #176]	; (800578c <TIM_Base_SetConfig+0x118>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d023      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2b      	ldr	r2, [pc, #172]	; (8005790 <TIM_Base_SetConfig+0x11c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01f      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2a      	ldr	r2, [pc, #168]	; (8005794 <TIM_Base_SetConfig+0x120>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01b      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a29      	ldr	r2, [pc, #164]	; (8005798 <TIM_Base_SetConfig+0x124>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d017      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a28      	ldr	r2, [pc, #160]	; (800579c <TIM_Base_SetConfig+0x128>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a27      	ldr	r2, [pc, #156]	; (80057a0 <TIM_Base_SetConfig+0x12c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00f      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a26      	ldr	r2, [pc, #152]	; (80057a4 <TIM_Base_SetConfig+0x130>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00b      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a25      	ldr	r2, [pc, #148]	; (80057a8 <TIM_Base_SetConfig+0x134>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a24      	ldr	r2, [pc, #144]	; (80057ac <TIM_Base_SetConfig+0x138>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a23      	ldr	r2, [pc, #140]	; (80057b0 <TIM_Base_SetConfig+0x13c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d108      	bne.n	8005738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a0a      	ldr	r2, [pc, #40]	; (8005788 <TIM_Base_SetConfig+0x114>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_Base_SetConfig+0xf8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a0c      	ldr	r2, [pc, #48]	; (8005798 <TIM_Base_SetConfig+0x124>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d103      	bne.n	8005774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	615a      	str	r2, [r3, #20]
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40010000 	.word	0x40010000
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40000c00 	.word	0x40000c00
 8005798:	40010400 	.word	0x40010400
 800579c:	40014000 	.word	0x40014000
 80057a0:	40014400 	.word	0x40014400
 80057a4:	40014800 	.word	0x40014800
 80057a8:	40001800 	.word	0x40001800
 80057ac:	40001c00 	.word	0x40001c00
 80057b0:	40002000 	.word	0x40002000

080057b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f023 0201 	bic.w	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0303 	bic.w	r3, r3, #3
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 0302 	bic.w	r3, r3, #2
 80057fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a20      	ldr	r2, [pc, #128]	; (800588c <TIM_OC1_SetConfig+0xd8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC1_SetConfig+0x64>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a1f      	ldr	r2, [pc, #124]	; (8005890 <TIM_OC1_SetConfig+0xdc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d10c      	bne.n	8005832 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f023 0308 	bic.w	r3, r3, #8
 800581e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f023 0304 	bic.w	r3, r3, #4
 8005830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a15      	ldr	r2, [pc, #84]	; (800588c <TIM_OC1_SetConfig+0xd8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d003      	beq.n	8005842 <TIM_OC1_SetConfig+0x8e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a14      	ldr	r2, [pc, #80]	; (8005890 <TIM_OC1_SetConfig+0xdc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d111      	bne.n	8005866 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	621a      	str	r2, [r3, #32]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	40010000 	.word	0x40010000
 8005890:	40010400 	.word	0x40010400

08005894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f023 0210 	bic.w	r2, r3, #16
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 0320 	bic.w	r3, r3, #32
 80058de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a22      	ldr	r2, [pc, #136]	; (8005978 <TIM_OC2_SetConfig+0xe4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_OC2_SetConfig+0x68>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a21      	ldr	r2, [pc, #132]	; (800597c <TIM_OC2_SetConfig+0xe8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d10d      	bne.n	8005918 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005916:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a17      	ldr	r2, [pc, #92]	; (8005978 <TIM_OC2_SetConfig+0xe4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_OC2_SetConfig+0x94>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a16      	ldr	r2, [pc, #88]	; (800597c <TIM_OC2_SetConfig+0xe8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d113      	bne.n	8005950 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800592e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000
 800597c:	40010400 	.word	0x40010400

08005980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a21      	ldr	r2, [pc, #132]	; (8005a60 <TIM_OC3_SetConfig+0xe0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_OC3_SetConfig+0x66>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a20      	ldr	r2, [pc, #128]	; (8005a64 <TIM_OC3_SetConfig+0xe4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d10d      	bne.n	8005a02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <TIM_OC3_SetConfig+0xe0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_OC3_SetConfig+0x92>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <TIM_OC3_SetConfig+0xe4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d113      	bne.n	8005a3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	621a      	str	r2, [r3, #32]
}
 8005a54:	bf00      	nop
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40010400 	.word	0x40010400

08005a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	031b      	lsls	r3, r3, #12
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a12      	ldr	r2, [pc, #72]	; (8005b0c <TIM_OC4_SetConfig+0xa4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_OC4_SetConfig+0x68>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <TIM_OC4_SetConfig+0xa8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d109      	bne.n	8005ae4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	019b      	lsls	r3, r3, #6
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40010400 	.word	0x40010400

08005b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f023 030a 	bic.w	r3, r3, #10
 8005b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	621a      	str	r2, [r3, #32]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b087      	sub	sp, #28
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0210 	bic.w	r2, r3, #16
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	031b      	lsls	r3, r3, #12
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f043 0307 	orr.w	r3, r3, #7
 8005bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	609a      	str	r2, [r3, #8]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	021a      	lsls	r2, r3, #8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	609a      	str	r2, [r3, #8]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a1a      	ldr	r2, [r3, #32]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	401a      	ands	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a1a      	ldr	r2, [r3, #32]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 031f 	and.w	r3, r3, #31
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c80:	431a      	orrs	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e05a      	b.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a21      	ldr	r2, [pc, #132]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d022      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf8:	d01d      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d018      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1b      	ldr	r2, [pc, #108]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1a      	ldr	r2, [pc, #104]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00e      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a18      	ldr	r2, [pc, #96]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d009      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a17      	ldr	r2, [pc, #92]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d10c      	bne.n	8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40010400 	.word	0x40010400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40001800 	.word	0x40001800

08005d8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e03d      	b.n	8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e03f      	b.n	8005eea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fc f936 	bl	80020f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2224      	movs	r2, #36	; 0x24
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f929 	bl	80060f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695a      	ldr	r2, [r3, #20]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ec0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ed0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b08a      	sub	sp, #40	; 0x28
 8005ef6:	af02      	add	r7, sp, #8
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	4613      	mov	r3, r2
 8005f00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d17c      	bne.n	800600c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <HAL_UART_Transmit+0x2c>
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e075      	b.n	800600e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_UART_Transmit+0x3e>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e06e      	b.n	800600e <HAL_UART_Transmit+0x11c>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2221      	movs	r2, #33	; 0x21
 8005f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f46:	f7fc fa27 	bl	8002398 <HAL_GetTick>
 8005f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	88fa      	ldrh	r2, [r7, #6]
 8005f50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	88fa      	ldrh	r2, [r7, #6]
 8005f56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f60:	d108      	bne.n	8005f74 <HAL_UART_Transmit+0x82>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d104      	bne.n	8005f74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	e003      	b.n	8005f7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f84:	e02a      	b.n	8005fdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2180      	movs	r1, #128	; 0x80
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f840 	bl	8006016 <UART_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e036      	b.n	800600e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10b      	bne.n	8005fbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	3302      	adds	r3, #2
 8005fba:	61bb      	str	r3, [r7, #24]
 8005fbc:	e007      	b.n	8005fce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	781a      	ldrb	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1cf      	bne.n	8005f86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2200      	movs	r2, #0
 8005fee:	2140      	movs	r1, #64	; 0x40
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f810 	bl	8006016 <UART_WaitOnFlagUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e006      	b.n	800600e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e000      	b.n	800600e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800600c:	2302      	movs	r3, #2
  }
}
 800600e:	4618      	mov	r0, r3
 8006010:	3720      	adds	r7, #32
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b090      	sub	sp, #64	; 0x40
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	603b      	str	r3, [r7, #0]
 8006022:	4613      	mov	r3, r2
 8006024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006026:	e050      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	d04c      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006032:	2b00      	cmp	r3, #0
 8006034:	d007      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0x30>
 8006036:	f7fc f9af 	bl	8002398 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006042:	429a      	cmp	r2, r3
 8006044:	d241      	bcs.n	80060ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	330c      	adds	r3, #12
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	330c      	adds	r3, #12
 8006064:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006066:	637a      	str	r2, [r7, #52]	; 0x34
 8006068:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800606c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e5      	bne.n	8006046 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3314      	adds	r3, #20
 8006080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	613b      	str	r3, [r7, #16]
   return(result);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	63bb      	str	r3, [r7, #56]	; 0x38
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3314      	adds	r3, #20
 8006098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800609a:	623a      	str	r2, [r7, #32]
 800609c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	69f9      	ldr	r1, [r7, #28]
 80060a0:	6a3a      	ldr	r2, [r7, #32]
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e5      	bne.n	800607a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e00f      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4013      	ands	r3, r2
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d09f      	beq.n	8006028 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3740      	adds	r7, #64	; 0x40
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060f8:	b0c0      	sub	sp, #256	; 0x100
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006110:	68d9      	ldr	r1, [r3, #12]
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	ea40 0301 	orr.w	r3, r0, r1
 800611c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800611e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	431a      	orrs	r2, r3
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	431a      	orrs	r2, r3
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800614c:	f021 010c 	bic.w	r1, r1, #12
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800615a:	430b      	orrs	r3, r1
 800615c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800616a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616e:	6999      	ldr	r1, [r3, #24]
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	ea40 0301 	orr.w	r3, r0, r1
 800617a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4b8f      	ldr	r3, [pc, #572]	; (80063c0 <UART_SetConfig+0x2cc>)
 8006184:	429a      	cmp	r2, r3
 8006186:	d005      	beq.n	8006194 <UART_SetConfig+0xa0>
 8006188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	4b8d      	ldr	r3, [pc, #564]	; (80063c4 <UART_SetConfig+0x2d0>)
 8006190:	429a      	cmp	r2, r3
 8006192:	d104      	bne.n	800619e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006194:	f7fe f816 	bl	80041c4 <HAL_RCC_GetPCLK2Freq>
 8006198:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800619c:	e003      	b.n	80061a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800619e:	f7fd fffd 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 80061a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b0:	f040 810c 	bne.w	80063cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061c6:	4622      	mov	r2, r4
 80061c8:	462b      	mov	r3, r5
 80061ca:	1891      	adds	r1, r2, r2
 80061cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80061ce:	415b      	adcs	r3, r3
 80061d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061d6:	4621      	mov	r1, r4
 80061d8:	eb12 0801 	adds.w	r8, r2, r1
 80061dc:	4629      	mov	r1, r5
 80061de:	eb43 0901 	adc.w	r9, r3, r1
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061f6:	4690      	mov	r8, r2
 80061f8:	4699      	mov	r9, r3
 80061fa:	4623      	mov	r3, r4
 80061fc:	eb18 0303 	adds.w	r3, r8, r3
 8006200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006204:	462b      	mov	r3, r5
 8006206:	eb49 0303 	adc.w	r3, r9, r3
 800620a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800620e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800621a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800621e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006222:	460b      	mov	r3, r1
 8006224:	18db      	adds	r3, r3, r3
 8006226:	653b      	str	r3, [r7, #80]	; 0x50
 8006228:	4613      	mov	r3, r2
 800622a:	eb42 0303 	adc.w	r3, r2, r3
 800622e:	657b      	str	r3, [r7, #84]	; 0x54
 8006230:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006234:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006238:	f7fa fd06 	bl	8000c48 <__aeabi_uldivmod>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4b61      	ldr	r3, [pc, #388]	; (80063c8 <UART_SetConfig+0x2d4>)
 8006242:	fba3 2302 	umull	r2, r3, r3, r2
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	011c      	lsls	r4, r3, #4
 800624a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800624e:	2200      	movs	r2, #0
 8006250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006254:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006258:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800625c:	4642      	mov	r2, r8
 800625e:	464b      	mov	r3, r9
 8006260:	1891      	adds	r1, r2, r2
 8006262:	64b9      	str	r1, [r7, #72]	; 0x48
 8006264:	415b      	adcs	r3, r3
 8006266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006268:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800626c:	4641      	mov	r1, r8
 800626e:	eb12 0a01 	adds.w	sl, r2, r1
 8006272:	4649      	mov	r1, r9
 8006274:	eb43 0b01 	adc.w	fp, r3, r1
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006284:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006288:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800628c:	4692      	mov	sl, r2
 800628e:	469b      	mov	fp, r3
 8006290:	4643      	mov	r3, r8
 8006292:	eb1a 0303 	adds.w	r3, sl, r3
 8006296:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800629a:	464b      	mov	r3, r9
 800629c:	eb4b 0303 	adc.w	r3, fp, r3
 80062a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062b8:	460b      	mov	r3, r1
 80062ba:	18db      	adds	r3, r3, r3
 80062bc:	643b      	str	r3, [r7, #64]	; 0x40
 80062be:	4613      	mov	r3, r2
 80062c0:	eb42 0303 	adc.w	r3, r2, r3
 80062c4:	647b      	str	r3, [r7, #68]	; 0x44
 80062c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062ce:	f7fa fcbb 	bl	8000c48 <__aeabi_uldivmod>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4611      	mov	r1, r2
 80062d8:	4b3b      	ldr	r3, [pc, #236]	; (80063c8 <UART_SetConfig+0x2d4>)
 80062da:	fba3 2301 	umull	r2, r3, r3, r1
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	2264      	movs	r2, #100	; 0x64
 80062e2:	fb02 f303 	mul.w	r3, r2, r3
 80062e6:	1acb      	subs	r3, r1, r3
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062ee:	4b36      	ldr	r3, [pc, #216]	; (80063c8 <UART_SetConfig+0x2d4>)
 80062f0:	fba3 2302 	umull	r2, r3, r3, r2
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062fc:	441c      	add	r4, r3
 80062fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006302:	2200      	movs	r2, #0
 8006304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006308:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800630c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006310:	4642      	mov	r2, r8
 8006312:	464b      	mov	r3, r9
 8006314:	1891      	adds	r1, r2, r2
 8006316:	63b9      	str	r1, [r7, #56]	; 0x38
 8006318:	415b      	adcs	r3, r3
 800631a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800631c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006320:	4641      	mov	r1, r8
 8006322:	1851      	adds	r1, r2, r1
 8006324:	6339      	str	r1, [r7, #48]	; 0x30
 8006326:	4649      	mov	r1, r9
 8006328:	414b      	adcs	r3, r1
 800632a:	637b      	str	r3, [r7, #52]	; 0x34
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006338:	4659      	mov	r1, fp
 800633a:	00cb      	lsls	r3, r1, #3
 800633c:	4651      	mov	r1, sl
 800633e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006342:	4651      	mov	r1, sl
 8006344:	00ca      	lsls	r2, r1, #3
 8006346:	4610      	mov	r0, r2
 8006348:	4619      	mov	r1, r3
 800634a:	4603      	mov	r3, r0
 800634c:	4642      	mov	r2, r8
 800634e:	189b      	adds	r3, r3, r2
 8006350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006354:	464b      	mov	r3, r9
 8006356:	460a      	mov	r2, r1
 8006358:	eb42 0303 	adc.w	r3, r2, r3
 800635c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800636c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006370:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006374:	460b      	mov	r3, r1
 8006376:	18db      	adds	r3, r3, r3
 8006378:	62bb      	str	r3, [r7, #40]	; 0x28
 800637a:	4613      	mov	r3, r2
 800637c:	eb42 0303 	adc.w	r3, r2, r3
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006386:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800638a:	f7fa fc5d 	bl	8000c48 <__aeabi_uldivmod>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <UART_SetConfig+0x2d4>)
 8006394:	fba3 1302 	umull	r1, r3, r3, r2
 8006398:	095b      	lsrs	r3, r3, #5
 800639a:	2164      	movs	r1, #100	; 0x64
 800639c:	fb01 f303 	mul.w	r3, r1, r3
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	3332      	adds	r3, #50	; 0x32
 80063a6:	4a08      	ldr	r2, [pc, #32]	; (80063c8 <UART_SetConfig+0x2d4>)
 80063a8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ac:	095b      	lsrs	r3, r3, #5
 80063ae:	f003 0207 	and.w	r2, r3, #7
 80063b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4422      	add	r2, r4
 80063ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063bc:	e105      	b.n	80065ca <UART_SetConfig+0x4d6>
 80063be:	bf00      	nop
 80063c0:	40011000 	.word	0x40011000
 80063c4:	40011400 	.word	0x40011400
 80063c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063de:	4642      	mov	r2, r8
 80063e0:	464b      	mov	r3, r9
 80063e2:	1891      	adds	r1, r2, r2
 80063e4:	6239      	str	r1, [r7, #32]
 80063e6:	415b      	adcs	r3, r3
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ee:	4641      	mov	r1, r8
 80063f0:	1854      	adds	r4, r2, r1
 80063f2:	4649      	mov	r1, r9
 80063f4:	eb43 0501 	adc.w	r5, r3, r1
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	00eb      	lsls	r3, r5, #3
 8006402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006406:	00e2      	lsls	r2, r4, #3
 8006408:	4614      	mov	r4, r2
 800640a:	461d      	mov	r5, r3
 800640c:	4643      	mov	r3, r8
 800640e:	18e3      	adds	r3, r4, r3
 8006410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006414:	464b      	mov	r3, r9
 8006416:	eb45 0303 	adc.w	r3, r5, r3
 800641a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800641e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800642a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800643a:	4629      	mov	r1, r5
 800643c:	008b      	lsls	r3, r1, #2
 800643e:	4621      	mov	r1, r4
 8006440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006444:	4621      	mov	r1, r4
 8006446:	008a      	lsls	r2, r1, #2
 8006448:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800644c:	f7fa fbfc 	bl	8000c48 <__aeabi_uldivmod>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4b60      	ldr	r3, [pc, #384]	; (80065d8 <UART_SetConfig+0x4e4>)
 8006456:	fba3 2302 	umull	r2, r3, r3, r2
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	011c      	lsls	r4, r3, #4
 800645e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006462:	2200      	movs	r2, #0
 8006464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006468:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800646c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006470:	4642      	mov	r2, r8
 8006472:	464b      	mov	r3, r9
 8006474:	1891      	adds	r1, r2, r2
 8006476:	61b9      	str	r1, [r7, #24]
 8006478:	415b      	adcs	r3, r3
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006480:	4641      	mov	r1, r8
 8006482:	1851      	adds	r1, r2, r1
 8006484:	6139      	str	r1, [r7, #16]
 8006486:	4649      	mov	r1, r9
 8006488:	414b      	adcs	r3, r1
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006498:	4659      	mov	r1, fp
 800649a:	00cb      	lsls	r3, r1, #3
 800649c:	4651      	mov	r1, sl
 800649e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064a2:	4651      	mov	r1, sl
 80064a4:	00ca      	lsls	r2, r1, #3
 80064a6:	4610      	mov	r0, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	4603      	mov	r3, r0
 80064ac:	4642      	mov	r2, r8
 80064ae:	189b      	adds	r3, r3, r2
 80064b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064b4:	464b      	mov	r3, r9
 80064b6:	460a      	mov	r2, r1
 80064b8:	eb42 0303 	adc.w	r3, r2, r3
 80064bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80064ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064d8:	4649      	mov	r1, r9
 80064da:	008b      	lsls	r3, r1, #2
 80064dc:	4641      	mov	r1, r8
 80064de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064e2:	4641      	mov	r1, r8
 80064e4:	008a      	lsls	r2, r1, #2
 80064e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064ea:	f7fa fbad 	bl	8000c48 <__aeabi_uldivmod>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4b39      	ldr	r3, [pc, #228]	; (80065d8 <UART_SetConfig+0x4e4>)
 80064f4:	fba3 1302 	umull	r1, r3, r3, r2
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	2164      	movs	r1, #100	; 0x64
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	3332      	adds	r3, #50	; 0x32
 8006506:	4a34      	ldr	r2, [pc, #208]	; (80065d8 <UART_SetConfig+0x4e4>)
 8006508:	fba2 2303 	umull	r2, r3, r2, r3
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006512:	441c      	add	r4, r3
 8006514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006518:	2200      	movs	r2, #0
 800651a:	673b      	str	r3, [r7, #112]	; 0x70
 800651c:	677a      	str	r2, [r7, #116]	; 0x74
 800651e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006522:	4642      	mov	r2, r8
 8006524:	464b      	mov	r3, r9
 8006526:	1891      	adds	r1, r2, r2
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	415b      	adcs	r3, r3
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006532:	4641      	mov	r1, r8
 8006534:	1851      	adds	r1, r2, r1
 8006536:	6039      	str	r1, [r7, #0]
 8006538:	4649      	mov	r1, r9
 800653a:	414b      	adcs	r3, r1
 800653c:	607b      	str	r3, [r7, #4]
 800653e:	f04f 0200 	mov.w	r2, #0
 8006542:	f04f 0300 	mov.w	r3, #0
 8006546:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800654a:	4659      	mov	r1, fp
 800654c:	00cb      	lsls	r3, r1, #3
 800654e:	4651      	mov	r1, sl
 8006550:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006554:	4651      	mov	r1, sl
 8006556:	00ca      	lsls	r2, r1, #3
 8006558:	4610      	mov	r0, r2
 800655a:	4619      	mov	r1, r3
 800655c:	4603      	mov	r3, r0
 800655e:	4642      	mov	r2, r8
 8006560:	189b      	adds	r3, r3, r2
 8006562:	66bb      	str	r3, [r7, #104]	; 0x68
 8006564:	464b      	mov	r3, r9
 8006566:	460a      	mov	r2, r1
 8006568:	eb42 0303 	adc.w	r3, r2, r3
 800656c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	663b      	str	r3, [r7, #96]	; 0x60
 8006578:	667a      	str	r2, [r7, #100]	; 0x64
 800657a:	f04f 0200 	mov.w	r2, #0
 800657e:	f04f 0300 	mov.w	r3, #0
 8006582:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006586:	4649      	mov	r1, r9
 8006588:	008b      	lsls	r3, r1, #2
 800658a:	4641      	mov	r1, r8
 800658c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006590:	4641      	mov	r1, r8
 8006592:	008a      	lsls	r2, r1, #2
 8006594:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006598:	f7fa fb56 	bl	8000c48 <__aeabi_uldivmod>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <UART_SetConfig+0x4e4>)
 80065a2:	fba3 1302 	umull	r1, r3, r3, r2
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	2164      	movs	r1, #100	; 0x64
 80065aa:	fb01 f303 	mul.w	r3, r1, r3
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	3332      	adds	r3, #50	; 0x32
 80065b4:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <UART_SetConfig+0x4e4>)
 80065b6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4422      	add	r2, r4
 80065c8:	609a      	str	r2, [r3, #8]
}
 80065ca:	bf00      	nop
 80065cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065d0:	46bd      	mov	sp, r7
 80065d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065d6:	bf00      	nop
 80065d8:	51eb851f 	.word	0x51eb851f

080065dc <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80065e8:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <NRF24_DelayMicroSeconds+0x3c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a0b      	ldr	r2, [pc, #44]	; (800661c <NRF24_DelayMicroSeconds+0x40>)
 80065ee:	fba2 2303 	umull	r2, r3, r2, r3
 80065f2:	0c9a      	lsrs	r2, r3, #18
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	fb02 f303 	mul.w	r3, r2, r3
 80065fa:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80065fc:	bf00      	nop
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1e5a      	subs	r2, r3, #1
 8006602:	60fa      	str	r2, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1fa      	bne.n	80065fe <NRF24_DelayMicroSeconds+0x22>
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	20000130 	.word	0x20000130
 800661c:	165e9f81 	.word	0x165e9f81

08006620 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d008      	beq.n	8006640 <NRF24_csn+0x20>
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <NRF24_csn+0x38>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a0a      	ldr	r2, [pc, #40]	; (800665c <NRF24_csn+0x3c>)
 8006634:	8811      	ldrh	r1, [r2, #0]
 8006636:	2201      	movs	r2, #1
 8006638:	4618      	mov	r0, r3
 800663a:	f7fc f98b 	bl	8002954 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800663e:	e007      	b.n	8006650 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8006640:	4b05      	ldr	r3, [pc, #20]	; (8006658 <NRF24_csn+0x38>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a05      	ldr	r2, [pc, #20]	; (800665c <NRF24_csn+0x3c>)
 8006646:	8811      	ldrh	r1, [r2, #0]
 8006648:	2200      	movs	r2, #0
 800664a:	4618      	mov	r0, r3
 800664c:	f7fc f982 	bl	8002954 <HAL_GPIO_WritePin>
}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000510 	.word	0x20000510
 800665c:	20000514 	.word	0x20000514

08006660 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d008      	beq.n	8006680 <NRF24_ce+0x20>
 800666e:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <NRF24_ce+0x38>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a0a      	ldr	r2, [pc, #40]	; (800669c <NRF24_ce+0x3c>)
 8006674:	8811      	ldrh	r1, [r2, #0]
 8006676:	2201      	movs	r2, #1
 8006678:	4618      	mov	r0, r3
 800667a:	f7fc f96b 	bl	8002954 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800667e:	e007      	b.n	8006690 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8006680:	4b05      	ldr	r3, [pc, #20]	; (8006698 <NRF24_ce+0x38>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a05      	ldr	r2, [pc, #20]	; (800669c <NRF24_ce+0x3c>)
 8006686:	8811      	ldrh	r1, [r2, #0]
 8006688:	2200      	movs	r2, #0
 800668a:	4618      	mov	r0, r3
 800668c:	f7fc f962 	bl	8002954 <HAL_GPIO_WritePin>
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20000510 	.word	0x20000510
 800669c:	20000516 	.word	0x20000516

080066a0 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80066aa:	2000      	movs	r0, #0
 80066ac:	f7ff ffb8 	bl	8006620 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80066b4:	f107 010c 	add.w	r1, r7, #12
 80066b8:	2364      	movs	r3, #100	; 0x64
 80066ba:	2201      	movs	r2, #1
 80066bc:	480a      	ldr	r0, [pc, #40]	; (80066e8 <NRF24_read_register+0x48>)
 80066be:	f7fd fe1e 	bl	80042fe <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80066c2:	f107 030c 	add.w	r3, r7, #12
 80066c6:	1c59      	adds	r1, r3, #1
 80066c8:	2364      	movs	r3, #100	; 0x64
 80066ca:	2201      	movs	r2, #1
 80066cc:	4806      	ldr	r0, [pc, #24]	; (80066e8 <NRF24_read_register+0x48>)
 80066ce:	f7fd ff52 	bl	8004576 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80066d2:	7b7b      	ldrb	r3, [r7, #13]
 80066d4:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80066d6:	2001      	movs	r0, #1
 80066d8:	f7ff ffa2 	bl	8006620 <NRF24_csn>
	return retData;
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000518 	.word	0x20000518

080066ec <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	4603      	mov	r3, r0
 80066f4:	6039      	str	r1, [r7, #0]
 80066f6:	71fb      	strb	r3, [r7, #7]
 80066f8:	4613      	mov	r3, r2
 80066fa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80066fc:	2000      	movs	r0, #0
 80066fe:	f7ff ff8f 	bl	8006620 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8006706:	f107 010c 	add.w	r1, r7, #12
 800670a:	2364      	movs	r3, #100	; 0x64
 800670c:	2201      	movs	r2, #1
 800670e:	4808      	ldr	r0, [pc, #32]	; (8006730 <NRF24_read_registerN+0x44>)
 8006710:	f7fd fdf5 	bl	80042fe <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8006714:	79bb      	ldrb	r3, [r7, #6]
 8006716:	b29a      	uxth	r2, r3
 8006718:	2364      	movs	r3, #100	; 0x64
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	4804      	ldr	r0, [pc, #16]	; (8006730 <NRF24_read_registerN+0x44>)
 800671e:	f7fd ff2a 	bl	8004576 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8006722:	2001      	movs	r0, #1
 8006724:	f7ff ff7c 	bl	8006620 <NRF24_csn>
}
 8006728:	bf00      	nop
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20000518 	.word	0x20000518

08006734 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	4603      	mov	r3, r0
 800673c:	460a      	mov	r2, r1
 800673e:	71fb      	strb	r3, [r7, #7]
 8006740:	4613      	mov	r3, r2
 8006742:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8006744:	2000      	movs	r0, #0
 8006746:	f7ff ff6b 	bl	8006620 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	f043 0320 	orr.w	r3, r3, #32
 8006750:	b2db      	uxtb	r3, r3
 8006752:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8006754:	79bb      	ldrb	r3, [r7, #6]
 8006756:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8006758:	f107 010c 	add.w	r1, r7, #12
 800675c:	2364      	movs	r3, #100	; 0x64
 800675e:	2202      	movs	r2, #2
 8006760:	4804      	ldr	r0, [pc, #16]	; (8006774 <NRF24_write_register+0x40>)
 8006762:	f7fd fdcc 	bl	80042fe <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8006766:	2001      	movs	r0, #1
 8006768:	f7ff ff5a 	bl	8006620 <NRF24_csn>
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20000518 	.word	0x20000518

08006778 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	6039      	str	r1, [r7, #0]
 8006782:	71fb      	strb	r3, [r7, #7]
 8006784:	4613      	mov	r3, r2
 8006786:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8006788:	2000      	movs	r0, #0
 800678a:	f7ff ff49 	bl	8006620 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	f043 0320 	orr.w	r3, r3, #32
 8006794:	b2db      	uxtb	r3, r3
 8006796:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8006798:	f107 010c 	add.w	r1, r7, #12
 800679c:	2364      	movs	r3, #100	; 0x64
 800679e:	2201      	movs	r2, #1
 80067a0:	4808      	ldr	r0, [pc, #32]	; (80067c4 <NRF24_write_registerN+0x4c>)
 80067a2:	f7fd fdac 	bl	80042fe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80067a6:	79bb      	ldrb	r3, [r7, #6]
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	2364      	movs	r3, #100	; 0x64
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	4805      	ldr	r0, [pc, #20]	; (80067c4 <NRF24_write_registerN+0x4c>)
 80067b0:	f7fd fda5 	bl	80042fe <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80067b4:	2001      	movs	r0, #1
 80067b6:	f7ff ff33 	bl	8006620 <NRF24_csn>
}
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000518 	.word	0x20000518

080067c8 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80067d4:	2000      	movs	r0, #0
 80067d6:	f7ff ff23 	bl	8006620 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80067da:	23a0      	movs	r3, #160	; 0xa0
 80067dc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80067de:	f107 010f 	add.w	r1, r7, #15
 80067e2:	2364      	movs	r3, #100	; 0x64
 80067e4:	2201      	movs	r2, #1
 80067e6:	4808      	ldr	r0, [pc, #32]	; (8006808 <NRF24_write_payload+0x40>)
 80067e8:	f7fd fd89 	bl	80042fe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	2364      	movs	r3, #100	; 0x64
 80067f2:	6879      	ldr	r1, [r7, #4]
 80067f4:	4804      	ldr	r0, [pc, #16]	; (8006808 <NRF24_write_payload+0x40>)
 80067f6:	f7fd fd82 	bl	80042fe <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80067fa:	2001      	movs	r0, #1
 80067fc:	f7ff ff10 	bl	8006620 <NRF24_csn>
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20000518 	.word	0x20000518

0800680c <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8006818:	f000 fa12 	bl	8006c40 <NRF24_getPayloadSize>
 800681c:	4603      	mov	r3, r0
 800681e:	461a      	mov	r2, r3
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	4293      	cmp	r3, r2
 8006824:	d303      	bcc.n	800682e <NRF24_read_payload+0x22>
 8006826:	f000 fa0b 	bl	8006c40 <NRF24_getPayloadSize>
 800682a:	4603      	mov	r3, r0
 800682c:	e000      	b.n	8006830 <NRF24_read_payload+0x24>
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8006832:	2000      	movs	r0, #0
 8006834:	f7ff fef4 	bl	8006620 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8006838:	2361      	movs	r3, #97	; 0x61
 800683a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800683c:	f107 010e 	add.w	r1, r7, #14
 8006840:	2364      	movs	r3, #100	; 0x64
 8006842:	2201      	movs	r2, #1
 8006844:	4808      	ldr	r0, [pc, #32]	; (8006868 <NRF24_read_payload+0x5c>)
 8006846:	f7fd fd5a 	bl	80042fe <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	b29a      	uxth	r2, r3
 800684e:	2364      	movs	r3, #100	; 0x64
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4805      	ldr	r0, [pc, #20]	; (8006868 <NRF24_read_payload+0x5c>)
 8006854:	f7fd fe8f 	bl	8004576 <HAL_SPI_Receive>
	NRF24_csn(1);
 8006858:	2001      	movs	r0, #1
 800685a:	f7ff fee1 	bl	8006620 <NRF24_csn>
}
 800685e:	bf00      	nop
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20000518 	.word	0x20000518

0800686c <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8006870:	21ff      	movs	r1, #255	; 0xff
 8006872:	20e1      	movs	r0, #225	; 0xe1
 8006874:	f7ff ff5e 	bl	8006734 <NRF24_write_register>
}
 8006878:	bf00      	nop
 800687a:	bd80      	pop	{r7, pc}

0800687c <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8006880:	21ff      	movs	r1, #255	; 0xff
 8006882:	20e2      	movs	r0, #226	; 0xe2
 8006884:	f7ff ff56 	bl	8006734 <NRF24_write_register>
}
 8006888:	bf00      	nop
 800688a:	bd80      	pop	{r7, pc}

0800688c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8006892:	2007      	movs	r0, #7
 8006894:	f7ff ff04 	bl	80066a0 <NRF24_read_register>
 8006898:	4603      	mov	r3, r0
 800689a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 800689c:	79fb      	ldrb	r3, [r7, #7]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80068a8:	b082      	sub	sp, #8
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	460b      	mov	r3, r1
 80068b6:	807b      	strh	r3, [r7, #2]
 80068b8:	4613      	mov	r3, r2
 80068ba:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80068bc:	4b66      	ldr	r3, [pc, #408]	; (8006a58 <NRF24_begin+0x1b0>)
 80068be:	4618      	mov	r0, r3
 80068c0:	f107 031c 	add.w	r3, r7, #28
 80068c4:	2258      	movs	r2, #88	; 0x58
 80068c6:	4619      	mov	r1, r3
 80068c8:	f002 feee 	bl	80096a8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80068cc:	4a63      	ldr	r2, [pc, #396]	; (8006a5c <NRF24_begin+0x1b4>)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80068d2:	4a63      	ldr	r2, [pc, #396]	; (8006a60 <NRF24_begin+0x1b8>)
 80068d4:	887b      	ldrh	r3, [r7, #2]
 80068d6:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;  
 80068d8:	4a62      	ldr	r2, [pc, #392]	; (8006a64 <NRF24_begin+0x1bc>)
 80068da:	883b      	ldrh	r3, [r7, #0]
 80068dc:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80068de:	2001      	movs	r0, #1
 80068e0:	f7ff fe9e 	bl	8006620 <NRF24_csn>
	NRF24_ce(0);
 80068e4:	2000      	movs	r0, #0
 80068e6:	f7ff febb 	bl	8006660 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80068ea:	2005      	movs	r0, #5
 80068ec:	f7fb fd60 	bl	80023b0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08); //0x08
 80068f0:	2108      	movs	r1, #8
 80068f2:	2000      	movs	r0, #0
 80068f4:	f7ff ff1e 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f); //0x3f
 80068f8:	213f      	movs	r1, #63	; 0x3f
 80068fa:	2001      	movs	r0, #1
 80068fc:	f7ff ff1a 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03); //0x03
 8006900:	2103      	movs	r1, #3
 8006902:	2002      	movs	r0, #2
 8006904:	f7ff ff16 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03); //0x03
 8006908:	2103      	movs	r1, #3
 800690a:	2003      	movs	r0, #3
 800690c:	f7ff ff12 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03); //0x03
 8006910:	2103      	movs	r1, #3
 8006912:	2004      	movs	r0, #4
 8006914:	f7ff ff0e 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02); //0x02
 8006918:	2102      	movs	r1, #2
 800691a:	2005      	movs	r0, #5
 800691c:	f7ff ff0a 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f); //0x0f
 8006920:	210f      	movs	r1, #15
 8006922:	2006      	movs	r0, #6
 8006924:	f7ff ff06 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e); //0x0e
 8006928:	210e      	movs	r1, #14
 800692a:	2007      	movs	r0, #7
 800692c:	f7ff ff02 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00); //0x00
 8006930:	2100      	movs	r1, #0
 8006932:	2008      	movs	r0, #8
 8006934:	f7ff fefe 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00); //0x00
 8006938:	2100      	movs	r1, #0
 800693a:	2009      	movs	r0, #9
 800693c:	f7ff fefa 	bl	8006734 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8006940:	23e7      	movs	r3, #231	; 0xe7
 8006942:	733b      	strb	r3, [r7, #12]
 8006944:	23e7      	movs	r3, #231	; 0xe7
 8006946:	72fb      	strb	r3, [r7, #11]
 8006948:	23e7      	movs	r3, #231	; 0xe7
 800694a:	72bb      	strb	r3, [r7, #10]
 800694c:	23e7      	movs	r3, #231	; 0xe7
 800694e:	727b      	strb	r3, [r7, #9]
 8006950:	23e7      	movs	r3, #231	; 0xe7
 8006952:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8006954:	f107 0308 	add.w	r3, r7, #8
 8006958:	2205      	movs	r2, #5
 800695a:	4619      	mov	r1, r3
 800695c:	200a      	movs	r0, #10
 800695e:	f7ff ff0b 	bl	8006778 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8006962:	23c2      	movs	r3, #194	; 0xc2
 8006964:	733b      	strb	r3, [r7, #12]
 8006966:	23c2      	movs	r3, #194	; 0xc2
 8006968:	72fb      	strb	r3, [r7, #11]
 800696a:	23c2      	movs	r3, #194	; 0xc2
 800696c:	72bb      	strb	r3, [r7, #10]
 800696e:	23c2      	movs	r3, #194	; 0xc2
 8006970:	727b      	strb	r3, [r7, #9]
 8006972:	23c2      	movs	r3, #194	; 0xc2
 8006974:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8006976:	f107 0308 	add.w	r3, r7, #8
 800697a:	2205      	movs	r2, #5
 800697c:	4619      	mov	r1, r3
 800697e:	200b      	movs	r0, #11
 8006980:	f7ff fefa 	bl	8006778 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8006984:	21c3      	movs	r1, #195	; 0xc3
 8006986:	200c      	movs	r0, #12
 8006988:	f7ff fed4 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800698c:	21c4      	movs	r1, #196	; 0xc4
 800698e:	200d      	movs	r0, #13
 8006990:	f7ff fed0 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8006994:	21c5      	movs	r1, #197	; 0xc5
 8006996:	200e      	movs	r0, #14
 8006998:	f7ff fecc 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800699c:	21c6      	movs	r1, #198	; 0xc6
 800699e:	200f      	movs	r0, #15
 80069a0:	f7ff fec8 	bl	8006734 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80069a4:	23e7      	movs	r3, #231	; 0xe7
 80069a6:	733b      	strb	r3, [r7, #12]
 80069a8:	23e7      	movs	r3, #231	; 0xe7
 80069aa:	72fb      	strb	r3, [r7, #11]
 80069ac:	23e7      	movs	r3, #231	; 0xe7
 80069ae:	72bb      	strb	r3, [r7, #10]
 80069b0:	23e7      	movs	r3, #231	; 0xe7
 80069b2:	727b      	strb	r3, [r7, #9]
 80069b4:	23e7      	movs	r3, #231	; 0xe7
 80069b6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80069b8:	f107 0308 	add.w	r3, r7, #8
 80069bc:	2205      	movs	r2, #5
 80069be:	4619      	mov	r1, r3
 80069c0:	2010      	movs	r0, #16
 80069c2:	f7ff fed9 	bl	8006778 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80069c6:	2100      	movs	r1, #0
 80069c8:	2011      	movs	r0, #17
 80069ca:	f7ff feb3 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80069ce:	2100      	movs	r1, #0
 80069d0:	2012      	movs	r0, #18
 80069d2:	f7ff feaf 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80069d6:	2100      	movs	r1, #0
 80069d8:	2013      	movs	r0, #19
 80069da:	f7ff feab 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80069de:	2100      	movs	r1, #0
 80069e0:	2014      	movs	r0, #20
 80069e2:	f7ff fea7 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80069e6:	2100      	movs	r1, #0
 80069e8:	2015      	movs	r0, #21
 80069ea:	f7ff fea3 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80069ee:	2100      	movs	r1, #0
 80069f0:	2016      	movs	r0, #22
 80069f2:	f7ff fe9f 	bl	8006734 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80069f6:	f000 fb15 	bl	8007024 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80069fa:	2100      	movs	r1, #0
 80069fc:	201c      	movs	r0, #28
 80069fe:	f7ff fe99 	bl	8006734 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8006a02:	2100      	movs	r1, #0
 8006a04:	201d      	movs	r0, #29
 8006a06:	f7ff fe95 	bl	8006734 <NRF24_write_register>
	printRadioSettings();
 8006a0a:	f000 fb25 	bl	8007058 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8006a0e:	210f      	movs	r1, #15
 8006a10:	200f      	movs	r0, #15
 8006a12:	f000 f8cd 	bl	8006bb0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m18dB);
 8006a16:	2000      	movs	r0, #0
 8006a18:	f000 f9b3 	bl	8006d82 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	f000 f9e9 	bl	8006df4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8006a22:	2001      	movs	r0, #1
 8006a24:	f000 fa2c 	bl	8006e80 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8006a28:	f000 f97e 	bl	8006d28 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8006a2c:	2020      	movs	r0, #32
 8006a2e:	f000 f8ef 	bl	8006c10 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8006a32:	f000 faee 	bl	8007012 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(52);
 8006a36:	2034      	movs	r0, #52	; 0x34
 8006a38:	f000 f8d5 	bl	8006be6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8006a3c:	f7ff ff16 	bl	800686c <NRF24_flush_tx>
	NRF24_flush_rx();
 8006a40:	f7ff ff1c 	bl	800687c <NRF24_flush_rx>
	
	NRF24_powerDown();
 8006a44:	f000 fa44 	bl	8006ed0 <NRF24_powerDown>
	
}
 8006a48:	bf00      	nop
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a52:	b002      	add	sp, #8
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	20000518 	.word	0x20000518
 8006a5c:	20000510 	.word	0x20000510
 8006a60:	20000514 	.word	0x20000514
 8006a64:	20000516 	.word	0x20000516

08006a68 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	f7ff fdf7 	bl	8006660 <NRF24_ce>
	NRF24_flush_tx();
 8006a72:	f7ff fefb 	bl	800686c <NRF24_flush_tx>
	NRF24_flush_rx();
 8006a76:	f7ff ff01 	bl	800687c <NRF24_flush_rx>
}
 8006a7a:	bf00      	nop
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8006a8c:	f000 fac1 	bl	8007012 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fa5a 	bl	8006f4e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8006a9a:	f7fb fc7d 	bl	8002398 <HAL_GetTick>
 8006a9e:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8006aa0:	230a      	movs	r3, #10
 8006aa2:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8006aa4:	f107 030d 	add.w	r3, r7, #13
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	4619      	mov	r1, r3
 8006aac:	2008      	movs	r0, #8
 8006aae:	f7ff fe1d 	bl	80066ec <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8006ab2:	f7ff feeb 	bl	800688c <NRF24_get_status>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d107      	bne.n	8006ad4 <NRF24_write+0x54>
 8006ac4:	f7fb fc68 	bl	8002398 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d8e7      	bhi.n	8006aa4 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8006ad4:	f107 010b 	add.w	r1, r7, #11
 8006ad8:	f107 030c 	add.w	r3, r7, #12
 8006adc:	4a0c      	ldr	r2, [pc, #48]	; (8006b10 <NRF24_write+0x90>)
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fa64 	bl	8006fac <NRF24_whatHappened>
	retStatus = tx_ok;
 8006ae4:	7b3b      	ldrb	r3, [r7, #12]
 8006ae6:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8006ae8:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <NRF24_write+0x90>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8006af0:	f000 f8b2 	bl	8006c58 <NRF24_getDynamicPayloadSize>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <NRF24_write+0x94>)
 8006afa:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8006afc:	f000 f80c 	bl	8006b18 <NRF24_available>
	NRF24_flush_tx();
 8006b00:	f7ff feb4 	bl	800686c <NRF24_flush_tx>
	return retStatus;
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000508 	.word	0x20000508
 8006b14:	20000509 	.word	0x20000509

08006b18 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	f000 f9e6 	bl	8006eee <NRF24_availablePipe>
 8006b22:	4603      	mov	r3, r0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff fe67 	bl	800680c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8006b3e:	2017      	movs	r0, #23
 8006b40:	f7ff fdae 	bl	80066a0 <NRF24_read_register>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8006b4c:	f7ff fe96 	bl	800687c <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8006b50:	f000 f882 	bl	8006c58 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	bf14      	ite	ne
 8006b5a:	2301      	movne	r3, #1
 8006b5c:	2300      	moveq	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8006b72:	463b      	mov	r3, r7
 8006b74:	2205      	movs	r2, #5
 8006b76:	4619      	mov	r1, r3
 8006b78:	200a      	movs	r0, #10
 8006b7a:	f7ff fdfd 	bl	8006778 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8006b7e:	463b      	mov	r3, r7
 8006b80:	2205      	movs	r2, #5
 8006b82:	4619      	mov	r1, r3
 8006b84:	2010      	movs	r0, #16
 8006b86:	f7ff fdf7 	bl	8006778 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8006b8a:	2320      	movs	r3, #32
 8006b8c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8006b8e:	4b07      	ldr	r3, [pc, #28]	; (8006bac <NRF24_openWritingPipe+0x44>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	7bfa      	ldrb	r2, [r7, #15]
 8006b94:	4293      	cmp	r3, r2
 8006b96:	bf28      	it	cs
 8006b98:	4613      	movcs	r3, r2
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	2011      	movs	r0, #17
 8006ba0:	f7ff fdc8 	bl	8006734 <NRF24_write_register>
}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	2000050a 	.word	0x2000050a

08006bb0 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	460a      	mov	r2, r1
 8006bba:	71fb      	strb	r3, [r7, #7]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	b25a      	sxtb	r2, r3
 8006bc6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	b25b      	sxtb	r3, r3
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	b25b      	sxtb	r3, r3
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	2004      	movs	r0, #4
 8006bda:	f7ff fdab 	bl	8006734 <NRF24_write_register>
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	4603      	mov	r3, r0
 8006bee:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8006bf0:	237f      	movs	r3, #127	; 0x7f
 8006bf2:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8006bf4:	7bfa      	ldrb	r2, [r7, #15]
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	bf28      	it	cs
 8006bfc:	4613      	movcs	r3, r2
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	4619      	mov	r1, r3
 8006c02:	2005      	movs	r0, #5
 8006c04:	f7ff fd96 	bl	8006734 <NRF24_write_register>
}
 8006c08:	bf00      	nop
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8006c1a:	2320      	movs	r3, #32
 8006c1c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8006c1e:	7bfa      	ldrb	r2, [r7, #15]
 8006c20:	79fb      	ldrb	r3, [r7, #7]
 8006c22:	4293      	cmp	r3, r2
 8006c24:	bf28      	it	cs
 8006c26:	4613      	movcs	r3, r2
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <NRF24_setPayloadSize+0x2c>)
 8006c2c:	701a      	strb	r2, [r3, #0]
}
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	2000050a 	.word	0x2000050a

08006c40 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
	return payload_size;
 8006c44:	4b03      	ldr	r3, [pc, #12]	; (8006c54 <NRF24_getPayloadSize+0x14>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	2000050a 	.word	0x2000050a

08006c58 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8006c5c:	2060      	movs	r0, #96	; 0x60
 8006c5e:	f7ff fd1f 	bl	80066a0 <NRF24_read_register>
 8006c62:	4603      	mov	r3, r0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8006c6c:	201d      	movs	r0, #29
 8006c6e:	f7ff fd17 	bl	80066a0 <NRF24_read_register>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f043 0306 	orr.w	r3, r3, #6
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	201d      	movs	r0, #29
 8006c7e:	f7ff fd59 	bl	8006734 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8006c82:	201d      	movs	r0, #29
 8006c84:	f7ff fd0c 	bl	80066a0 <NRF24_read_register>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10c      	bne.n	8006ca8 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8006c8e:	f000 f9c9 	bl	8007024 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8006c92:	201d      	movs	r0, #29
 8006c94:	f7ff fd04 	bl	80066a0 <NRF24_read_register>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f043 0306 	orr.w	r3, r3, #6
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	201d      	movs	r0, #29
 8006ca4:	f7ff fd46 	bl	8006734 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8006ca8:	201c      	movs	r0, #28
 8006caa:	f7ff fcf9 	bl	80066a0 <NRF24_read_register>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f043 0303 	orr.w	r3, r3, #3
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	201c      	movs	r0, #28
 8006cba:	f7ff fd3b 	bl	8006734 <NRF24_write_register>
}
 8006cbe:	bf00      	nop
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8006cc8:	201d      	movs	r0, #29
 8006cca:	f7ff fce9 	bl	80066a0 <NRF24_read_register>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	f043 0304 	orr.w	r3, r3, #4
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	201d      	movs	r0, #29
 8006cda:	f7ff fd2b 	bl	8006734 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8006cde:	201d      	movs	r0, #29
 8006ce0:	f7ff fcde 	bl	80066a0 <NRF24_read_register>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10c      	bne.n	8006d04 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8006cea:	f000 f99b 	bl	8007024 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8006cee:	201d      	movs	r0, #29
 8006cf0:	f7ff fcd6 	bl	80066a0 <NRF24_read_register>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f043 0304 	orr.w	r3, r3, #4
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	201d      	movs	r0, #29
 8006d00:	f7ff fd18 	bl	8006734 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8006d04:	201c      	movs	r0, #28
 8006d06:	f7ff fccb 	bl	80066a0 <NRF24_read_register>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	4619      	mov	r1, r3
 8006d14:	201c      	movs	r0, #28
 8006d16:	f7ff fd0d 	bl	8006734 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8006d1a:	4b02      	ldr	r3, [pc, #8]	; (8006d24 <NRF24_enableDynamicPayloads+0x60>)
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	701a      	strb	r2, [r3, #0]
	
}
 8006d20:	bf00      	nop
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	2000050b 	.word	0x2000050b

08006d28 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8006d2c:	201d      	movs	r0, #29
 8006d2e:	f7ff fcb7 	bl	80066a0 <NRF24_read_register>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f023 0304 	bic.w	r3, r3, #4
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	201d      	movs	r0, #29
 8006d3e:	f7ff fcf9 	bl	8006734 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8006d42:	2100      	movs	r1, #0
 8006d44:	201c      	movs	r0, #28
 8006d46:	f7ff fcf5 	bl	8006734 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8006d4a:	4b02      	ldr	r3, [pc, #8]	; (8006d54 <NRF24_disableDynamicPayloads+0x2c>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	701a      	strb	r2, [r3, #0]
}
 8006d50:	bf00      	nop
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	2000050b 	.word	0x2000050b

08006d58 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8006d68:	213f      	movs	r1, #63	; 0x3f
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	f7ff fce2 	bl	8006734 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8006d70:	e003      	b.n	8006d7a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8006d72:	2100      	movs	r1, #0
 8006d74:	2001      	movs	r0, #1
 8006d76:	f7ff fcdd 	bl	8006734 <NRF24_write_register>
}
 8006d7a:	bf00      	nop
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	4603      	mov	r3, r0
 8006d8a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8006d8c:	2006      	movs	r0, #6
 8006d8e:	f7ff fc87 	bl	80066a0 <NRF24_read_register>
 8006d92:	4603      	mov	r3, r0
 8006d94:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	f023 0306 	bic.w	r3, r3, #6
 8006d9c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d104      	bne.n	8006dae <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	f043 0306 	orr.w	r3, r3, #6
 8006daa:	73fb      	strb	r3, [r7, #15]
 8006dac:	e019      	b.n	8006de2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d104      	bne.n	8006dbe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	f043 0304 	orr.w	r3, r3, #4
 8006dba:	73fb      	strb	r3, [r7, #15]
 8006dbc:	e011      	b.n	8006de2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d104      	bne.n	8006dce <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	f043 0302 	orr.w	r3, r3, #2
 8006dca:	73fb      	strb	r3, [r7, #15]
 8006dcc:	e009      	b.n	8006de2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d006      	beq.n	8006de2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d103      	bne.n	8006de2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	f043 0306 	orr.w	r3, r3, #6
 8006de0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	4619      	mov	r1, r3
 8006de6:	2006      	movs	r0, #6
 8006de8:	f7ff fca4 	bl	8006734 <NRF24_write_register>
}
 8006dec:	bf00      	nop
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8006e02:	2006      	movs	r0, #6
 8006e04:	f7ff fc4c 	bl	80066a0 <NRF24_read_register>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8006e0c:	4b1b      	ldr	r3, [pc, #108]	; (8006e7c <NRF24_setDataRate+0x88>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006e18:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d107      	bne.n	8006e30 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8006e20:	4b16      	ldr	r3, [pc, #88]	; (8006e7c <NRF24_setDataRate+0x88>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	f043 0320 	orr.w	r3, r3, #32
 8006e2c:	73bb      	strb	r3, [r7, #14]
 8006e2e:	e00d      	b.n	8006e4c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d107      	bne.n	8006e46 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8006e36:	4b11      	ldr	r3, [pc, #68]	; (8006e7c <NRF24_setDataRate+0x88>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	f043 0308 	orr.w	r3, r3, #8
 8006e42:	73bb      	strb	r3, [r7, #14]
 8006e44:	e002      	b.n	8006e4c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8006e46:	4b0d      	ldr	r3, [pc, #52]	; (8006e7c <NRF24_setDataRate+0x88>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	2006      	movs	r0, #6
 8006e52:	f7ff fc6f 	bl	8006734 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8006e56:	2006      	movs	r0, #6
 8006e58:	f7ff fc22 	bl	80066a0 <NRF24_read_register>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	461a      	mov	r2, r3
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d102      	bne.n	8006e6c <NRF24_setDataRate+0x78>
  {
    result = true;
 8006e66:	2301      	movs	r3, #1
 8006e68:	73fb      	strb	r3, [r7, #15]
 8006e6a:	e002      	b.n	8006e72 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8006e6c:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <NRF24_setDataRate+0x88>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	2000050c 	.word	0x2000050c

08006e80 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	f7ff fc08 	bl	80066a0 <NRF24_read_register>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f023 030c 	bic.w	r3, r3, #12
 8006e96:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d00f      	beq.n	8006ebe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	f043 0308 	orr.w	r3, r3, #8
 8006eaa:	73fb      	strb	r3, [r7, #15]
 8006eac:	e007      	b.n	8006ebe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	f043 0308 	orr.w	r3, r3, #8
 8006eb4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	f043 0304 	orr.w	r3, r3, #4
 8006ebc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	f7ff fc36 	bl	8006734 <NRF24_write_register>
}
 8006ec8:	bf00      	nop
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	f7ff fbe3 	bl	80066a0 <NRF24_read_register>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f023 0302 	bic.w	r3, r3, #2
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	f7ff fc25 	bl	8006734 <NRF24_write_register>
}
 8006eea:	bf00      	nop
 8006eec:	bd80      	pop	{r7, pc}

08006eee <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8006ef6:	f7ff fcc9 	bl	800688c <NRF24_get_status>
 8006efa:	4603      	mov	r3, r0
 8006efc:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf14      	ite	ne
 8006f08:	2301      	movne	r3, #1
 8006f0a:	2300      	moveq	r3, #0
 8006f0c:	73bb      	strb	r3, [r7, #14]

  if (result)
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d017      	beq.n	8006f44 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d007      	beq.n	8006f2a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8006f2a:	2140      	movs	r1, #64	; 0x40
 8006f2c:	2007      	movs	r0, #7
 8006f2e:	f7ff fc01 	bl	8006734 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	f003 0320 	and.w	r3, r3, #32
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8006f3c:	2120      	movs	r1, #32
 8006f3e:	2007      	movs	r0, #7
 8006f40:	f7ff fbf8 	bl	8006734 <NRF24_write_register>
    }
  }
  return result;
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	f7ff fb80 	bl	8006660 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8006f60:	2000      	movs	r0, #0
 8006f62:	f7ff fb9d 	bl	80066a0 <NRF24_read_register>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f043 0302 	orr.w	r3, r3, #2
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	f023 0301 	bic.w	r3, r3, #1
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	4619      	mov	r1, r3
 8006f76:	2000      	movs	r0, #0
 8006f78:	f7ff fbdc 	bl	8006734 <NRF24_write_register>
  NRF24_ce(1);
 8006f7c:	2001      	movs	r0, #1
 8006f7e:	f7ff fb6f 	bl	8006660 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8006f82:	2096      	movs	r0, #150	; 0x96
 8006f84:	f7ff fb2a 	bl	80065dc <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff fc1b 	bl	80067c8 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8006f92:	2001      	movs	r0, #1
 8006f94:	f7ff fb64 	bl	8006660 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8006f98:	200f      	movs	r0, #15
 8006f9a:	f7ff fb1f 	bl	80065dc <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	f7ff fb5e 	bl	8006660 <NRF24_ce>
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8006fb8:	f7ff fc68 	bl	800688c <NRF24_get_status>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8006fc6:	2170      	movs	r1, #112	; 0x70
 8006fc8:	2007      	movs	r0, #7
 8006fca:	f7ff fbb3 	bl	8006734 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	f003 0320 	and.w	r3, r3, #32
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	bf14      	ite	ne
 8006fd8:	2301      	movne	r3, #1
 8006fda:	2300      	moveq	r3, #0
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	f003 0310 	and.w	r3, r3, #16
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bf14      	ite	ne
 8006fec:	2301      	movne	r3, #1
 8006fee:	2300      	moveq	r3, #0
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bf14      	ite	ne
 8007000:	2301      	movne	r3, #1
 8007002:	2300      	moveq	r3, #0
 8007004:	b2da      	uxtb	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	701a      	strb	r2, [r3, #0]
}
 800700a:	bf00      	nop
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8007016:	2170      	movs	r1, #112	; 0x70
 8007018:	2007      	movs	r0, #7
 800701a:	f7ff fb8b 	bl	8006734 <NRF24_write_register>
}
 800701e:	bf00      	nop
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800702a:	2000      	movs	r0, #0
 800702c:	f7ff faf8 	bl	8006620 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8007030:	2350      	movs	r3, #80	; 0x50
 8007032:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8007034:	2373      	movs	r3, #115	; 0x73
 8007036:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8007038:	1d39      	adds	r1, r7, #4
 800703a:	2364      	movs	r3, #100	; 0x64
 800703c:	2202      	movs	r2, #2
 800703e:	4805      	ldr	r0, [pc, #20]	; (8007054 <NRF24_ACTIVATE_cmd+0x30>)
 8007040:	f7fd f95d 	bl	80042fe <HAL_SPI_Transmit>
	NRF24_csn(1);
 8007044:	2001      	movs	r0, #1
 8007046:	f7ff faeb 	bl	8006620 <NRF24_csn>
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000518 	.word	0x20000518

08007058 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8007058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800705a:	b0a1      	sub	sp, #132	; 0x84
 800705c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800705e:	f107 0308 	add.w	r3, r7, #8
 8007062:	49c3      	ldr	r1, [pc, #780]	; (8007370 <printRadioSettings+0x318>)
 8007064:	4618      	mov	r0, r3
 8007066:	f002 fb35 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800706a:	f107 0308 	add.w	r3, r7, #8
 800706e:	4618      	mov	r0, r3
 8007070:	f7f9 f8ae 	bl	80001d0 <strlen>
 8007074:	4603      	mov	r3, r0
 8007076:	b29a      	uxth	r2, r3
 8007078:	f107 0108 	add.w	r1, r7, #8
 800707c:	230a      	movs	r3, #10
 800707e:	48bd      	ldr	r0, [pc, #756]	; (8007374 <printRadioSettings+0x31c>)
 8007080:	f7fe ff37 	bl	8005ef2 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8007084:	2000      	movs	r0, #0
 8007086:	f7ff fb0b 	bl	80066a0 <NRF24_read_register>
 800708a:	4603      	mov	r3, r0
 800708c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8007090:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b00      	cmp	r3, #0
 800709a:	d013      	beq.n	80070c4 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800709c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d006      	beq.n	80070b6 <printRadioSettings+0x5e>
 80070a8:	f107 0308 	add.w	r3, r7, #8
 80070ac:	49b2      	ldr	r1, [pc, #712]	; (8007378 <printRadioSettings+0x320>)
 80070ae:	4618      	mov	r0, r3
 80070b0:	f002 fb10 	bl	80096d4 <siprintf>
 80070b4:	e00c      	b.n	80070d0 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80070b6:	f107 0308 	add.w	r3, r7, #8
 80070ba:	49b0      	ldr	r1, [pc, #704]	; (800737c <printRadioSettings+0x324>)
 80070bc:	4618      	mov	r0, r3
 80070be:	f002 fb09 	bl	80096d4 <siprintf>
 80070c2:	e005      	b.n	80070d0 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80070c4:	f107 0308 	add.w	r3, r7, #8
 80070c8:	49ad      	ldr	r1, [pc, #692]	; (8007380 <printRadioSettings+0x328>)
 80070ca:	4618      	mov	r0, r3
 80070cc:	f002 fb02 	bl	80096d4 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80070d0:	f107 0308 	add.w	r3, r7, #8
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7f9 f87b 	bl	80001d0 <strlen>
 80070da:	4603      	mov	r3, r0
 80070dc:	b29a      	uxth	r2, r3
 80070de:	f107 0108 	add.w	r1, r7, #8
 80070e2:	230a      	movs	r3, #10
 80070e4:	48a3      	ldr	r0, [pc, #652]	; (8007374 <printRadioSettings+0x31c>)
 80070e6:	f7fe ff04 	bl	8005ef2 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80070ea:	2001      	movs	r0, #1
 80070ec:	f7ff fad8 	bl	80066a0 <NRF24_read_register>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80070f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070fa:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bfcc      	ite	gt
 8007102:	2301      	movgt	r3, #1
 8007104:	2300      	movle	r3, #0
 8007106:	b2db      	uxtb	r3, r3
 8007108:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800710a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800710e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007112:	2b00      	cmp	r3, #0
 8007114:	bfcc      	ite	gt
 8007116:	2301      	movgt	r3, #1
 8007118:	2300      	movle	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800711e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007122:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007126:	2b00      	cmp	r3, #0
 8007128:	bfcc      	ite	gt
 800712a:	2301      	movgt	r3, #1
 800712c:	2300      	movle	r3, #0
 800712e:	b2db      	uxtb	r3, r3
 8007130:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007132:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007136:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800713a:	2b00      	cmp	r3, #0
 800713c:	bfcc      	ite	gt
 800713e:	2301      	movgt	r3, #1
 8007140:	2300      	movle	r3, #0
 8007142:	b2db      	uxtb	r3, r3
 8007144:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007146:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800714a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800714e:	2b00      	cmp	r3, #0
 8007150:	bfcc      	ite	gt
 8007152:	2301      	movgt	r3, #1
 8007154:	2300      	movle	r3, #0
 8007156:	b2db      	uxtb	r3, r3
 8007158:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800715a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800715e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007162:	2b00      	cmp	r3, #0
 8007164:	bfcc      	ite	gt
 8007166:	2301      	movgt	r3, #1
 8007168:	2300      	movle	r3, #0
 800716a:	b2db      	uxtb	r3, r3
 800716c:	f107 0008 	add.w	r0, r7, #8
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	9402      	str	r4, [sp, #8]
 8007174:	9101      	str	r1, [sp, #4]
 8007176:	9200      	str	r2, [sp, #0]
 8007178:	4633      	mov	r3, r6
 800717a:	462a      	mov	r2, r5
 800717c:	4981      	ldr	r1, [pc, #516]	; (8007384 <printRadioSettings+0x32c>)
 800717e:	f002 faa9 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007182:	f107 0308 	add.w	r3, r7, #8
 8007186:	4618      	mov	r0, r3
 8007188:	f7f9 f822 	bl	80001d0 <strlen>
 800718c:	4603      	mov	r3, r0
 800718e:	b29a      	uxth	r2, r3
 8007190:	f107 0108 	add.w	r1, r7, #8
 8007194:	230a      	movs	r3, #10
 8007196:	4877      	ldr	r0, [pc, #476]	; (8007374 <printRadioSettings+0x31c>)
 8007198:	f7fe feab 	bl	8005ef2 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800719c:	2002      	movs	r0, #2
 800719e:	f7ff fa7f 	bl	80066a0 <NRF24_read_register>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80071a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80071ac:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	bfcc      	ite	gt
 80071b4:	2301      	movgt	r3, #1
 80071b6:	2300      	movle	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80071bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80071c0:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	bfcc      	ite	gt
 80071c8:	2301      	movgt	r3, #1
 80071ca:	2300      	movle	r3, #0
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80071d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80071d4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80071d8:	2b00      	cmp	r3, #0
 80071da:	bfcc      	ite	gt
 80071dc:	2301      	movgt	r3, #1
 80071de:	2300      	movle	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80071e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80071e8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	bfcc      	ite	gt
 80071f0:	2301      	movgt	r3, #1
 80071f2:	2300      	movle	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80071f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80071fc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007200:	2b00      	cmp	r3, #0
 8007202:	bfcc      	ite	gt
 8007204:	2301      	movgt	r3, #1
 8007206:	2300      	movle	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800720c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007210:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007214:	2b00      	cmp	r3, #0
 8007216:	bfcc      	ite	gt
 8007218:	2301      	movgt	r3, #1
 800721a:	2300      	movle	r3, #0
 800721c:	b2db      	uxtb	r3, r3
 800721e:	f107 0008 	add.w	r0, r7, #8
 8007222:	9303      	str	r3, [sp, #12]
 8007224:	9402      	str	r4, [sp, #8]
 8007226:	9101      	str	r1, [sp, #4]
 8007228:	9200      	str	r2, [sp, #0]
 800722a:	4633      	mov	r3, r6
 800722c:	462a      	mov	r2, r5
 800722e:	4956      	ldr	r1, [pc, #344]	; (8007388 <printRadioSettings+0x330>)
 8007230:	f002 fa50 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007234:	f107 0308 	add.w	r3, r7, #8
 8007238:	4618      	mov	r0, r3
 800723a:	f7f8 ffc9 	bl	80001d0 <strlen>
 800723e:	4603      	mov	r3, r0
 8007240:	b29a      	uxth	r2, r3
 8007242:	f107 0108 	add.w	r1, r7, #8
 8007246:	230a      	movs	r3, #10
 8007248:	484a      	ldr	r0, [pc, #296]	; (8007374 <printRadioSettings+0x31c>)
 800724a:	f7fe fe52 	bl	8005ef2 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800724e:	2003      	movs	r0, #3
 8007250:	f7ff fa26 	bl	80066a0 <NRF24_read_register>
 8007254:	4603      	mov	r3, r0
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800725e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007262:	3302      	adds	r3, #2
 8007264:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8007268:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800726c:	f107 0308 	add.w	r3, r7, #8
 8007270:	4946      	ldr	r1, [pc, #280]	; (800738c <printRadioSettings+0x334>)
 8007272:	4618      	mov	r0, r3
 8007274:	f002 fa2e 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007278:	f107 0308 	add.w	r3, r7, #8
 800727c:	4618      	mov	r0, r3
 800727e:	f7f8 ffa7 	bl	80001d0 <strlen>
 8007282:	4603      	mov	r3, r0
 8007284:	b29a      	uxth	r2, r3
 8007286:	f107 0108 	add.w	r1, r7, #8
 800728a:	230a      	movs	r3, #10
 800728c:	4839      	ldr	r0, [pc, #228]	; (8007374 <printRadioSettings+0x31c>)
 800728e:	f7fe fe30 	bl	8005ef2 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8007292:	2005      	movs	r0, #5
 8007294:	f7ff fa04 	bl	80066a0 <NRF24_read_register>
 8007298:	4603      	mov	r3, r0
 800729a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800729e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80072a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072a6:	f107 0308 	add.w	r3, r7, #8
 80072aa:	4939      	ldr	r1, [pc, #228]	; (8007390 <printRadioSettings+0x338>)
 80072ac:	4618      	mov	r0, r3
 80072ae:	f002 fa11 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80072b2:	f107 0308 	add.w	r3, r7, #8
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7f8 ff8a 	bl	80001d0 <strlen>
 80072bc:	4603      	mov	r3, r0
 80072be:	b29a      	uxth	r2, r3
 80072c0:	f107 0108 	add.w	r1, r7, #8
 80072c4:	230a      	movs	r3, #10
 80072c6:	482b      	ldr	r0, [pc, #172]	; (8007374 <printRadioSettings+0x31c>)
 80072c8:	f7fe fe13 	bl	8005ef2 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80072cc:	2006      	movs	r0, #6
 80072ce:	f7ff f9e7 	bl	80066a0 <NRF24_read_register>
 80072d2:	4603      	mov	r3, r0
 80072d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80072d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80072dc:	f003 0308 	and.w	r3, r3, #8
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d006      	beq.n	80072f2 <printRadioSettings+0x29a>
 80072e4:	f107 0308 	add.w	r3, r7, #8
 80072e8:	492a      	ldr	r1, [pc, #168]	; (8007394 <printRadioSettings+0x33c>)
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 f9f2 	bl	80096d4 <siprintf>
 80072f0:	e005      	b.n	80072fe <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80072f2:	f107 0308 	add.w	r3, r7, #8
 80072f6:	4928      	ldr	r1, [pc, #160]	; (8007398 <printRadioSettings+0x340>)
 80072f8:	4618      	mov	r0, r3
 80072fa:	f002 f9eb 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80072fe:	f107 0308 	add.w	r3, r7, #8
 8007302:	4618      	mov	r0, r3
 8007304:	f7f8 ff64 	bl	80001d0 <strlen>
 8007308:	4603      	mov	r3, r0
 800730a:	b29a      	uxth	r2, r3
 800730c:	f107 0108 	add.w	r1, r7, #8
 8007310:	230a      	movs	r3, #10
 8007312:	4818      	ldr	r0, [pc, #96]	; (8007374 <printRadioSettings+0x31c>)
 8007314:	f7fe fded 	bl	8005ef2 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8007318:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800731c:	f003 0306 	and.w	r3, r3, #6
 8007320:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8007324:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007328:	085b      	lsrs	r3, r3, #1
 800732a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800732e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007332:	2b00      	cmp	r3, #0
 8007334:	d106      	bne.n	8007344 <printRadioSettings+0x2ec>
 8007336:	f107 0308 	add.w	r3, r7, #8
 800733a:	4918      	ldr	r1, [pc, #96]	; (800739c <printRadioSettings+0x344>)
 800733c:	4618      	mov	r0, r3
 800733e:	f002 f9c9 	bl	80096d4 <siprintf>
 8007342:	e03b      	b.n	80073bc <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8007344:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007348:	2b01      	cmp	r3, #1
 800734a:	d106      	bne.n	800735a <printRadioSettings+0x302>
 800734c:	f107 0308 	add.w	r3, r7, #8
 8007350:	4913      	ldr	r1, [pc, #76]	; (80073a0 <printRadioSettings+0x348>)
 8007352:	4618      	mov	r0, r3
 8007354:	f002 f9be 	bl	80096d4 <siprintf>
 8007358:	e030      	b.n	80073bc <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800735a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800735e:	2b02      	cmp	r3, #2
 8007360:	d122      	bne.n	80073a8 <printRadioSettings+0x350>
 8007362:	f107 0308 	add.w	r3, r7, #8
 8007366:	490f      	ldr	r1, [pc, #60]	; (80073a4 <printRadioSettings+0x34c>)
 8007368:	4618      	mov	r0, r3
 800736a:	f002 f9b3 	bl	80096d4 <siprintf>
 800736e:	e025      	b.n	80073bc <printRadioSettings+0x364>
 8007370:	0800bb78 	.word	0x0800bb78
 8007374:	20000570 	.word	0x20000570
 8007378:	0800bbac 	.word	0x0800bbac
 800737c:	0800bbc8 	.word	0x0800bbc8
 8007380:	0800bbe4 	.word	0x0800bbe4
 8007384:	0800bbf8 	.word	0x0800bbf8
 8007388:	0800bc3c 	.word	0x0800bc3c
 800738c:	0800bc88 	.word	0x0800bc88
 8007390:	0800bca4 	.word	0x0800bca4
 8007394:	0800bcb8 	.word	0x0800bcb8
 8007398:	0800bcd0 	.word	0x0800bcd0
 800739c:	0800bce8 	.word	0x0800bce8
 80073a0:	0800bcfc 	.word	0x0800bcfc
 80073a4:	0800bd10 	.word	0x0800bd10
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80073a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d105      	bne.n	80073bc <printRadioSettings+0x364>
 80073b0:	f107 0308 	add.w	r3, r7, #8
 80073b4:	49d7      	ldr	r1, [pc, #860]	; (8007714 <printRadioSettings+0x6bc>)
 80073b6:	4618      	mov	r0, r3
 80073b8:	f002 f98c 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80073bc:	f107 0308 	add.w	r3, r7, #8
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7f8 ff05 	bl	80001d0 <strlen>
 80073c6:	4603      	mov	r3, r0
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	f107 0108 	add.w	r1, r7, #8
 80073ce:	230a      	movs	r3, #10
 80073d0:	48d1      	ldr	r0, [pc, #836]	; (8007718 <printRadioSettings+0x6c0>)
 80073d2:	f7fe fd8e 	bl	8005ef2 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80073d6:	463b      	mov	r3, r7
 80073d8:	2205      	movs	r2, #5
 80073da:	4619      	mov	r1, r3
 80073dc:	200a      	movs	r0, #10
 80073de:	f7ff f985 	bl	80066ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80073e2:	793b      	ldrb	r3, [r7, #4]
 80073e4:	461c      	mov	r4, r3
 80073e6:	78fb      	ldrb	r3, [r7, #3]
 80073e8:	461d      	mov	r5, r3
 80073ea:	78bb      	ldrb	r3, [r7, #2]
 80073ec:	787a      	ldrb	r2, [r7, #1]
 80073ee:	7839      	ldrb	r1, [r7, #0]
 80073f0:	f107 0008 	add.w	r0, r7, #8
 80073f4:	9102      	str	r1, [sp, #8]
 80073f6:	9201      	str	r2, [sp, #4]
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	462b      	mov	r3, r5
 80073fc:	4622      	mov	r2, r4
 80073fe:	49c7      	ldr	r1, [pc, #796]	; (800771c <printRadioSettings+0x6c4>)
 8007400:	f002 f968 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007404:	f107 0308 	add.w	r3, r7, #8
 8007408:	4618      	mov	r0, r3
 800740a:	f7f8 fee1 	bl	80001d0 <strlen>
 800740e:	4603      	mov	r3, r0
 8007410:	b29a      	uxth	r2, r3
 8007412:	f107 0108 	add.w	r1, r7, #8
 8007416:	230a      	movs	r3, #10
 8007418:	48bf      	ldr	r0, [pc, #764]	; (8007718 <printRadioSettings+0x6c0>)
 800741a:	f7fe fd6a 	bl	8005ef2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800741e:	463b      	mov	r3, r7
 8007420:	2205      	movs	r2, #5
 8007422:	4619      	mov	r1, r3
 8007424:	200b      	movs	r0, #11
 8007426:	f7ff f961 	bl	80066ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800742a:	793b      	ldrb	r3, [r7, #4]
 800742c:	461c      	mov	r4, r3
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	461d      	mov	r5, r3
 8007432:	78bb      	ldrb	r3, [r7, #2]
 8007434:	787a      	ldrb	r2, [r7, #1]
 8007436:	7839      	ldrb	r1, [r7, #0]
 8007438:	f107 0008 	add.w	r0, r7, #8
 800743c:	9102      	str	r1, [sp, #8]
 800743e:	9201      	str	r2, [sp, #4]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	462b      	mov	r3, r5
 8007444:	4622      	mov	r2, r4
 8007446:	49b6      	ldr	r1, [pc, #728]	; (8007720 <printRadioSettings+0x6c8>)
 8007448:	f002 f944 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800744c:	f107 0308 	add.w	r3, r7, #8
 8007450:	4618      	mov	r0, r3
 8007452:	f7f8 febd 	bl	80001d0 <strlen>
 8007456:	4603      	mov	r3, r0
 8007458:	b29a      	uxth	r2, r3
 800745a:	f107 0108 	add.w	r1, r7, #8
 800745e:	230a      	movs	r3, #10
 8007460:	48ad      	ldr	r0, [pc, #692]	; (8007718 <printRadioSettings+0x6c0>)
 8007462:	f7fe fd46 	bl	8005ef2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8007466:	463b      	mov	r3, r7
 8007468:	2201      	movs	r2, #1
 800746a:	4619      	mov	r1, r3
 800746c:	200c      	movs	r0, #12
 800746e:	f7ff f93d 	bl	80066ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8007472:	783b      	ldrb	r3, [r7, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	f107 0308 	add.w	r3, r7, #8
 800747a:	49aa      	ldr	r1, [pc, #680]	; (8007724 <printRadioSettings+0x6cc>)
 800747c:	4618      	mov	r0, r3
 800747e:	f002 f929 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007482:	f107 0308 	add.w	r3, r7, #8
 8007486:	4618      	mov	r0, r3
 8007488:	f7f8 fea2 	bl	80001d0 <strlen>
 800748c:	4603      	mov	r3, r0
 800748e:	b29a      	uxth	r2, r3
 8007490:	f107 0108 	add.w	r1, r7, #8
 8007494:	230a      	movs	r3, #10
 8007496:	48a0      	ldr	r0, [pc, #640]	; (8007718 <printRadioSettings+0x6c0>)
 8007498:	f7fe fd2b 	bl	8005ef2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800749c:	463b      	mov	r3, r7
 800749e:	2201      	movs	r2, #1
 80074a0:	4619      	mov	r1, r3
 80074a2:	200d      	movs	r0, #13
 80074a4:	f7ff f922 	bl	80066ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80074a8:	783b      	ldrb	r3, [r7, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f107 0308 	add.w	r3, r7, #8
 80074b0:	499d      	ldr	r1, [pc, #628]	; (8007728 <printRadioSettings+0x6d0>)
 80074b2:	4618      	mov	r0, r3
 80074b4:	f002 f90e 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80074b8:	f107 0308 	add.w	r3, r7, #8
 80074bc:	4618      	mov	r0, r3
 80074be:	f7f8 fe87 	bl	80001d0 <strlen>
 80074c2:	4603      	mov	r3, r0
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	f107 0108 	add.w	r1, r7, #8
 80074ca:	230a      	movs	r3, #10
 80074cc:	4892      	ldr	r0, [pc, #584]	; (8007718 <printRadioSettings+0x6c0>)
 80074ce:	f7fe fd10 	bl	8005ef2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80074d2:	463b      	mov	r3, r7
 80074d4:	2201      	movs	r2, #1
 80074d6:	4619      	mov	r1, r3
 80074d8:	200e      	movs	r0, #14
 80074da:	f7ff f907 	bl	80066ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80074de:	783b      	ldrb	r3, [r7, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	f107 0308 	add.w	r3, r7, #8
 80074e6:	4991      	ldr	r1, [pc, #580]	; (800772c <printRadioSettings+0x6d4>)
 80074e8:	4618      	mov	r0, r3
 80074ea:	f002 f8f3 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80074ee:	f107 0308 	add.w	r3, r7, #8
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7f8 fe6c 	bl	80001d0 <strlen>
 80074f8:	4603      	mov	r3, r0
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	f107 0108 	add.w	r1, r7, #8
 8007500:	230a      	movs	r3, #10
 8007502:	4885      	ldr	r0, [pc, #532]	; (8007718 <printRadioSettings+0x6c0>)
 8007504:	f7fe fcf5 	bl	8005ef2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8007508:	463b      	mov	r3, r7
 800750a:	2201      	movs	r2, #1
 800750c:	4619      	mov	r1, r3
 800750e:	200f      	movs	r0, #15
 8007510:	f7ff f8ec 	bl	80066ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8007514:	783b      	ldrb	r3, [r7, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	f107 0308 	add.w	r3, r7, #8
 800751c:	4984      	ldr	r1, [pc, #528]	; (8007730 <printRadioSettings+0x6d8>)
 800751e:	4618      	mov	r0, r3
 8007520:	f002 f8d8 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007524:	f107 0308 	add.w	r3, r7, #8
 8007528:	4618      	mov	r0, r3
 800752a:	f7f8 fe51 	bl	80001d0 <strlen>
 800752e:	4603      	mov	r3, r0
 8007530:	b29a      	uxth	r2, r3
 8007532:	f107 0108 	add.w	r1, r7, #8
 8007536:	230a      	movs	r3, #10
 8007538:	4877      	ldr	r0, [pc, #476]	; (8007718 <printRadioSettings+0x6c0>)
 800753a:	f7fe fcda 	bl	8005ef2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800753e:	463b      	mov	r3, r7
 8007540:	2205      	movs	r2, #5
 8007542:	4619      	mov	r1, r3
 8007544:	2010      	movs	r0, #16
 8007546:	f7ff f8d1 	bl	80066ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800754a:	793b      	ldrb	r3, [r7, #4]
 800754c:	461c      	mov	r4, r3
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	461d      	mov	r5, r3
 8007552:	78bb      	ldrb	r3, [r7, #2]
 8007554:	787a      	ldrb	r2, [r7, #1]
 8007556:	7839      	ldrb	r1, [r7, #0]
 8007558:	f107 0008 	add.w	r0, r7, #8
 800755c:	9102      	str	r1, [sp, #8]
 800755e:	9201      	str	r2, [sp, #4]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	462b      	mov	r3, r5
 8007564:	4622      	mov	r2, r4
 8007566:	4973      	ldr	r1, [pc, #460]	; (8007734 <printRadioSettings+0x6dc>)
 8007568:	f002 f8b4 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800756c:	f107 0308 	add.w	r3, r7, #8
 8007570:	4618      	mov	r0, r3
 8007572:	f7f8 fe2d 	bl	80001d0 <strlen>
 8007576:	4603      	mov	r3, r0
 8007578:	b29a      	uxth	r2, r3
 800757a:	f107 0108 	add.w	r1, r7, #8
 800757e:	230a      	movs	r3, #10
 8007580:	4865      	ldr	r0, [pc, #404]	; (8007718 <printRadioSettings+0x6c0>)
 8007582:	f7fe fcb6 	bl	8005ef2 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8007586:	2011      	movs	r0, #17
 8007588:	f7ff f88a 	bl	80066a0 <NRF24_read_register>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007592:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800759a:	f107 0308 	add.w	r3, r7, #8
 800759e:	4966      	ldr	r1, [pc, #408]	; (8007738 <printRadioSettings+0x6e0>)
 80075a0:	4618      	mov	r0, r3
 80075a2:	f002 f897 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80075a6:	f107 0308 	add.w	r3, r7, #8
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7f8 fe10 	bl	80001d0 <strlen>
 80075b0:	4603      	mov	r3, r0
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	f107 0108 	add.w	r1, r7, #8
 80075b8:	230a      	movs	r3, #10
 80075ba:	4857      	ldr	r0, [pc, #348]	; (8007718 <printRadioSettings+0x6c0>)
 80075bc:	f7fe fc99 	bl	8005ef2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80075c0:	2012      	movs	r0, #18
 80075c2:	f7ff f86d 	bl	80066a0 <NRF24_read_register>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80075cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80075d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075d4:	f107 0308 	add.w	r3, r7, #8
 80075d8:	4958      	ldr	r1, [pc, #352]	; (800773c <printRadioSettings+0x6e4>)
 80075da:	4618      	mov	r0, r3
 80075dc:	f002 f87a 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80075e0:	f107 0308 	add.w	r3, r7, #8
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7f8 fdf3 	bl	80001d0 <strlen>
 80075ea:	4603      	mov	r3, r0
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	f107 0108 	add.w	r1, r7, #8
 80075f2:	230a      	movs	r3, #10
 80075f4:	4848      	ldr	r0, [pc, #288]	; (8007718 <printRadioSettings+0x6c0>)
 80075f6:	f7fe fc7c 	bl	8005ef2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80075fa:	2013      	movs	r0, #19
 80075fc:	f7ff f850 	bl	80066a0 <NRF24_read_register>
 8007600:	4603      	mov	r3, r0
 8007602:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007606:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800760a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800760e:	f107 0308 	add.w	r3, r7, #8
 8007612:	494b      	ldr	r1, [pc, #300]	; (8007740 <printRadioSettings+0x6e8>)
 8007614:	4618      	mov	r0, r3
 8007616:	f002 f85d 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800761a:	f107 0308 	add.w	r3, r7, #8
 800761e:	4618      	mov	r0, r3
 8007620:	f7f8 fdd6 	bl	80001d0 <strlen>
 8007624:	4603      	mov	r3, r0
 8007626:	b29a      	uxth	r2, r3
 8007628:	f107 0108 	add.w	r1, r7, #8
 800762c:	230a      	movs	r3, #10
 800762e:	483a      	ldr	r0, [pc, #232]	; (8007718 <printRadioSettings+0x6c0>)
 8007630:	f7fe fc5f 	bl	8005ef2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8007634:	2014      	movs	r0, #20
 8007636:	f7ff f833 	bl	80066a0 <NRF24_read_register>
 800763a:	4603      	mov	r3, r0
 800763c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007640:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007644:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007648:	f107 0308 	add.w	r3, r7, #8
 800764c:	493d      	ldr	r1, [pc, #244]	; (8007744 <printRadioSettings+0x6ec>)
 800764e:	4618      	mov	r0, r3
 8007650:	f002 f840 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007654:	f107 0308 	add.w	r3, r7, #8
 8007658:	4618      	mov	r0, r3
 800765a:	f7f8 fdb9 	bl	80001d0 <strlen>
 800765e:	4603      	mov	r3, r0
 8007660:	b29a      	uxth	r2, r3
 8007662:	f107 0108 	add.w	r1, r7, #8
 8007666:	230a      	movs	r3, #10
 8007668:	482b      	ldr	r0, [pc, #172]	; (8007718 <printRadioSettings+0x6c0>)
 800766a:	f7fe fc42 	bl	8005ef2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 800766e:	2015      	movs	r0, #21
 8007670:	f7ff f816 	bl	80066a0 <NRF24_read_register>
 8007674:	4603      	mov	r3, r0
 8007676:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800767a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800767e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007682:	f107 0308 	add.w	r3, r7, #8
 8007686:	4930      	ldr	r1, [pc, #192]	; (8007748 <printRadioSettings+0x6f0>)
 8007688:	4618      	mov	r0, r3
 800768a:	f002 f823 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800768e:	f107 0308 	add.w	r3, r7, #8
 8007692:	4618      	mov	r0, r3
 8007694:	f7f8 fd9c 	bl	80001d0 <strlen>
 8007698:	4603      	mov	r3, r0
 800769a:	b29a      	uxth	r2, r3
 800769c:	f107 0108 	add.w	r1, r7, #8
 80076a0:	230a      	movs	r3, #10
 80076a2:	481d      	ldr	r0, [pc, #116]	; (8007718 <printRadioSettings+0x6c0>)
 80076a4:	f7fe fc25 	bl	8005ef2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80076a8:	2016      	movs	r0, #22
 80076aa:	f7fe fff9 	bl	80066a0 <NRF24_read_register>
 80076ae:	4603      	mov	r3, r0
 80076b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80076b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076bc:	f107 0308 	add.w	r3, r7, #8
 80076c0:	4922      	ldr	r1, [pc, #136]	; (800774c <printRadioSettings+0x6f4>)
 80076c2:	4618      	mov	r0, r3
 80076c4:	f002 f806 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80076c8:	f107 0308 	add.w	r3, r7, #8
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7f8 fd7f 	bl	80001d0 <strlen>
 80076d2:	4603      	mov	r3, r0
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	f107 0108 	add.w	r1, r7, #8
 80076da:	230a      	movs	r3, #10
 80076dc:	480e      	ldr	r0, [pc, #56]	; (8007718 <printRadioSettings+0x6c0>)
 80076de:	f7fe fc08 	bl	8005ef2 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80076e2:	201c      	movs	r0, #28
 80076e4:	f7fe ffdc 	bl	80066a0 <NRF24_read_register>
 80076e8:	4603      	mov	r3, r0
 80076ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80076ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076f2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	bfcc      	ite	gt
 80076fa:	2301      	movgt	r3, #1
 80076fc:	2300      	movle	r3, #0
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007702:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007706:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800770a:	2b00      	cmp	r3, #0
 800770c:	bfcc      	ite	gt
 800770e:	2301      	movgt	r3, #1
 8007710:	2300      	movle	r3, #0
 8007712:	e01d      	b.n	8007750 <printRadioSettings+0x6f8>
 8007714:	0800bd24 	.word	0x0800bd24
 8007718:	20000570 	.word	0x20000570
 800771c:	0800bd38 	.word	0x0800bd38
 8007720:	0800bd68 	.word	0x0800bd68
 8007724:	0800bd98 	.word	0x0800bd98
 8007728:	0800bdc0 	.word	0x0800bdc0
 800772c:	0800bde8 	.word	0x0800bde8
 8007730:	0800be10 	.word	0x0800be10
 8007734:	0800be38 	.word	0x0800be38
 8007738:	0800be64 	.word	0x0800be64
 800773c:	0800be80 	.word	0x0800be80
 8007740:	0800be9c 	.word	0x0800be9c
 8007744:	0800beb8 	.word	0x0800beb8
 8007748:	0800bed4 	.word	0x0800bed4
 800774c:	0800bef0 	.word	0x0800bef0
 8007750:	b2db      	uxtb	r3, r3
 8007752:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007754:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007758:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800775c:	2b00      	cmp	r3, #0
 800775e:	bfcc      	ite	gt
 8007760:	2301      	movgt	r3, #1
 8007762:	2300      	movle	r3, #0
 8007764:	b2db      	uxtb	r3, r3
 8007766:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007768:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800776c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007770:	2b00      	cmp	r3, #0
 8007772:	bfcc      	ite	gt
 8007774:	2301      	movgt	r3, #1
 8007776:	2300      	movle	r3, #0
 8007778:	b2db      	uxtb	r3, r3
 800777a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800777c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007780:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007784:	2b00      	cmp	r3, #0
 8007786:	bfcc      	ite	gt
 8007788:	2301      	movgt	r3, #1
 800778a:	2300      	movle	r3, #0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007790:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007794:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007798:	2b00      	cmp	r3, #0
 800779a:	bfcc      	ite	gt
 800779c:	2301      	movgt	r3, #1
 800779e:	2300      	movle	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	f107 0008 	add.w	r0, r7, #8
 80077a6:	9303      	str	r3, [sp, #12]
 80077a8:	9402      	str	r4, [sp, #8]
 80077aa:	9101      	str	r1, [sp, #4]
 80077ac:	9200      	str	r2, [sp, #0]
 80077ae:	4633      	mov	r3, r6
 80077b0:	462a      	mov	r2, r5
 80077b2:	4936      	ldr	r1, [pc, #216]	; (800788c <printRadioSettings+0x834>)
 80077b4:	f001 ff8e 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80077b8:	f107 0308 	add.w	r3, r7, #8
 80077bc:	4618      	mov	r0, r3
 80077be:	f7f8 fd07 	bl	80001d0 <strlen>
 80077c2:	4603      	mov	r3, r0
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	f107 0108 	add.w	r1, r7, #8
 80077ca:	230a      	movs	r3, #10
 80077cc:	4830      	ldr	r0, [pc, #192]	; (8007890 <printRadioSettings+0x838>)
 80077ce:	f7fe fb90 	bl	8005ef2 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80077d2:	201d      	movs	r0, #29
 80077d4:	f7fe ff64 	bl	80066a0 <NRF24_read_register>
 80077d8:	4603      	mov	r3, r0
 80077da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80077de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80077e2:	f003 0304 	and.w	r3, r3, #4
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d006      	beq.n	80077f8 <printRadioSettings+0x7a0>
 80077ea:	f107 0308 	add.w	r3, r7, #8
 80077ee:	4929      	ldr	r1, [pc, #164]	; (8007894 <printRadioSettings+0x83c>)
 80077f0:	4618      	mov	r0, r3
 80077f2:	f001 ff6f 	bl	80096d4 <siprintf>
 80077f6:	e005      	b.n	8007804 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80077f8:	f107 0308 	add.w	r3, r7, #8
 80077fc:	4926      	ldr	r1, [pc, #152]	; (8007898 <printRadioSettings+0x840>)
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 ff68 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007804:	f107 0308 	add.w	r3, r7, #8
 8007808:	4618      	mov	r0, r3
 800780a:	f7f8 fce1 	bl	80001d0 <strlen>
 800780e:	4603      	mov	r3, r0
 8007810:	b29a      	uxth	r2, r3
 8007812:	f107 0108 	add.w	r1, r7, #8
 8007816:	230a      	movs	r3, #10
 8007818:	481d      	ldr	r0, [pc, #116]	; (8007890 <printRadioSettings+0x838>)
 800781a:	f7fe fb6a 	bl	8005ef2 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800781e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d006      	beq.n	8007838 <printRadioSettings+0x7e0>
 800782a:	f107 0308 	add.w	r3, r7, #8
 800782e:	491b      	ldr	r1, [pc, #108]	; (800789c <printRadioSettings+0x844>)
 8007830:	4618      	mov	r0, r3
 8007832:	f001 ff4f 	bl	80096d4 <siprintf>
 8007836:	e005      	b.n	8007844 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8007838:	f107 0308 	add.w	r3, r7, #8
 800783c:	4918      	ldr	r1, [pc, #96]	; (80078a0 <printRadioSettings+0x848>)
 800783e:	4618      	mov	r0, r3
 8007840:	f001 ff48 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007844:	f107 0308 	add.w	r3, r7, #8
 8007848:	4618      	mov	r0, r3
 800784a:	f7f8 fcc1 	bl	80001d0 <strlen>
 800784e:	4603      	mov	r3, r0
 8007850:	b29a      	uxth	r2, r3
 8007852:	f107 0108 	add.w	r1, r7, #8
 8007856:	230a      	movs	r3, #10
 8007858:	480d      	ldr	r0, [pc, #52]	; (8007890 <printRadioSettings+0x838>)
 800785a:	f7fe fb4a 	bl	8005ef2 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800785e:	f107 0308 	add.w	r3, r7, #8
 8007862:	4910      	ldr	r1, [pc, #64]	; (80078a4 <printRadioSettings+0x84c>)
 8007864:	4618      	mov	r0, r3
 8007866:	f001 ff35 	bl	80096d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800786a:	f107 0308 	add.w	r3, r7, #8
 800786e:	4618      	mov	r0, r3
 8007870:	f7f8 fcae 	bl	80001d0 <strlen>
 8007874:	4603      	mov	r3, r0
 8007876:	b29a      	uxth	r2, r3
 8007878:	f107 0108 	add.w	r1, r7, #8
 800787c:	230a      	movs	r3, #10
 800787e:	4804      	ldr	r0, [pc, #16]	; (8007890 <printRadioSettings+0x838>)
 8007880:	f7fe fb37 	bl	8005ef2 <HAL_UART_Transmit>
}
 8007884:	bf00      	nop
 8007886:	3774      	adds	r7, #116	; 0x74
 8007888:	46bd      	mov	sp, r7
 800788a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800788c:	0800bf0c 	.word	0x0800bf0c
 8007890:	20000570 	.word	0x20000570
 8007894:	0800bf58 	.word	0x0800bf58
 8007898:	0800bf70 	.word	0x0800bf70
 800789c:	0800bf88 	.word	0x0800bf88
 80078a0:	0800bfa4 	.word	0x0800bfa4
 80078a4:	0800bb78 	.word	0x0800bb78

080078a8 <MPU6050_Init>:
#include "code.h"

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af04      	add	r7, sp, #16
 80078ae:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &check, 1, TIMEOUT);
 80078b0:	2364      	movs	r3, #100	; 0x64
 80078b2:	9302      	str	r3, [sp, #8]
 80078b4:	2301      	movs	r3, #1
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	f107 030f 	add.w	r3, r7, #15
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	2301      	movs	r3, #1
 80078c0:	2275      	movs	r2, #117	; 0x75
 80078c2:	21d0      	movs	r1, #208	; 0xd0
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7fb fab7 	bl	8002e38 <HAL_I2C_Mem_Read>
	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b68      	cmp	r3, #104	; 0x68
 80078ce:	d15b      	bne.n	8007988 <MPU6050_Init+0xe0>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up, gyroscope based clock
		Data = MPU6050_WAKEUP << 6 | MPU6050_CLKSEL_PLLX;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &Data, 1, TIMEOUT);
 80078d4:	2364      	movs	r3, #100	; 0x64
 80078d6:	9302      	str	r3, [sp, #8]
 80078d8:	2301      	movs	r3, #1
 80078da:	9301      	str	r3, [sp, #4]
 80078dc:	f107 030e 	add.w	r3, r7, #14
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	2301      	movs	r3, #1
 80078e4:	226b      	movs	r2, #107	; 0x6b
 80078e6:	21d0      	movs	r1, #208	; 0xd0
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7fb f9ab 	bl	8002c44 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = MPU6050_SMPLRT_DIV_1;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_SMPLRT_DIV, 1, &Data, 1, TIMEOUT);
 80078f2:	2364      	movs	r3, #100	; 0x64
 80078f4:	9302      	str	r3, [sp, #8]
 80078f6:	2301      	movs	r3, #1
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	f107 030e 	add.w	r3, r7, #14
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	2301      	movs	r3, #1
 8007902:	2219      	movs	r2, #25
 8007904:	21d0      	movs	r1, #208	; 0xd0
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fb f99c 	bl	8002c44 <HAL_I2C_Mem_Write>

		// This register configures the external Frame Synchronization (FSYNC) pin sampling
		// the Digital Low Pass Filter (DLPF) setting for both the gyroscopes and accelerometers
		Data = MPU6050_EXT_SYNC_SET << 3 | MPU6050_DLPF_CFG;
 800790c:	2301      	movs	r3, #1
 800790e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_CONFIG, 1, &Data, 1, TIMEOUT);
 8007910:	2364      	movs	r3, #100	; 0x64
 8007912:	9302      	str	r3, [sp, #8]
 8007914:	2301      	movs	r3, #1
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	f107 030e 	add.w	r3, r7, #14
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	2301      	movs	r3, #1
 8007920:	221a      	movs	r2, #26
 8007922:	21d0      	movs	r1, #208	; 0xd0
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fb f98d 	bl	8002c44 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> +- 2000 degree/s
		Data = MPU6050_FS_SEL_2000 << 3 | 0x00;
 800792a:	2318      	movs	r3, #24
 800792c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, &Data, 1, TIMEOUT);
 800792e:	2364      	movs	r3, #100	; 0x64
 8007930:	9302      	str	r3, [sp, #8]
 8007932:	2301      	movs	r3, #1
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	f107 030e 	add.w	r3, r7, #14
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	2301      	movs	r3, #1
 800793e:	221b      	movs	r2, #27
 8007940:	21d0      	movs	r1, #208	; 0xd0
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fb f97e 	bl	8002c44 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> +- 2g
		Data = MPU6050_AFS_SEL_2 << 3 | 0x00;
 8007948:	2300      	movs	r3, #0
 800794a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1, &Data, 1, TIMEOUT);
 800794c:	2364      	movs	r3, #100	; 0x64
 800794e:	9302      	str	r3, [sp, #8]
 8007950:	2301      	movs	r3, #1
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	f107 030e 	add.w	r3, r7, #14
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	2301      	movs	r3, #1
 800795c:	221c      	movs	r2, #28
 800795e:	21d0      	movs	r1, #208	; 0xd0
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7fb f96f 	bl	8002c44 <HAL_I2C_Mem_Write>

		// sets the I2C master clock speed
		Data = MPU6050_I2C_MST_CLK_400;
 8007966:	230d      	movs	r3, #13
 8007968:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_MST_CTRL, 1, &Data, 1, TIMEOUT);
 800796a:	2364      	movs	r3, #100	; 0x64
 800796c:	9302      	str	r3, [sp, #8]
 800796e:	2301      	movs	r3, #1
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	f107 030e 	add.w	r3, r7, #14
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	2301      	movs	r3, #1
 800797a:	2224      	movs	r2, #36	; 0x24
 800797c:	21d0      	movs	r1, #208	; 0xd0
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fb f960 	bl	8002c44 <HAL_I2C_Mem_Write>
		return 0;
 8007984:	2300      	movs	r3, #0
 8007986:	e000      	b.n	800798a <MPU6050_Init+0xe2>
	}
	return 1;
 8007988:	2301      	movs	r3, #1
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <MPU6050_Bypass>:
void MPU6050_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b088      	sub	sp, #32
 8007996:	af04      	add	r7, sp, #16
 8007998:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// disable i2c master mode
	Data = 0x00;
 800799a:	2300      	movs	r3, #0
 800799c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_USER_CTRL, 1, &Data, 1, TIMEOUT);
 800799e:	2364      	movs	r3, #100	; 0x64
 80079a0:	9302      	str	r3, [sp, #8]
 80079a2:	2301      	movs	r3, #1
 80079a4:	9301      	str	r3, [sp, #4]
 80079a6:	f107 030f 	add.w	r3, r7, #15
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	2301      	movs	r3, #1
 80079ae:	226a      	movs	r2, #106	; 0x6a
 80079b0:	21d0      	movs	r1, #208	; 0xd0
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fb f946 	bl	8002c44 <HAL_I2C_Mem_Write>
	// enable i2c master bypass mode
	Data = 0x02;
 80079b8:	2302      	movs	r3, #2
 80079ba:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_INT_PIN_CFG, 1, &Data, 1, TIMEOUT);
 80079bc:	2364      	movs	r3, #100	; 0x64
 80079be:	9302      	str	r3, [sp, #8]
 80079c0:	2301      	movs	r3, #1
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	f107 030f 	add.w	r3, r7, #15
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	2301      	movs	r3, #1
 80079cc:	2237      	movs	r2, #55	; 0x37
 80079ce:	21d0      	movs	r1, #208	; 0xd0
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7fb f937 	bl	8002c44 <HAL_I2C_Mem_Write>
}
 80079d6:	bf00      	nop
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <MPU6050_Master>:
void MPU6050_Master(I2C_HandleTypeDef *I2Cx)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b088      	sub	sp, #32
 80079e2:	af04      	add	r7, sp, #16
 80079e4:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// disable i2c master bypass mode
	Data = 0x00;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_INT_PIN_CFG, 1, &Data, 1, TIMEOUT);
 80079ea:	2364      	movs	r3, #100	; 0x64
 80079ec:	9302      	str	r3, [sp, #8]
 80079ee:	2301      	movs	r3, #1
 80079f0:	9301      	str	r3, [sp, #4]
 80079f2:	f107 030f 	add.w	r3, r7, #15
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	2301      	movs	r3, #1
 80079fa:	2237      	movs	r2, #55	; 0x37
 80079fc:	21d0      	movs	r1, #208	; 0xd0
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7fb f920 	bl	8002c44 <HAL_I2C_Mem_Write>
	// enable i2c master mode
	Data = 0x20;
 8007a04:	2320      	movs	r3, #32
 8007a06:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_USER_CTRL, 1, &Data, 1, TIMEOUT);
 8007a08:	2364      	movs	r3, #100	; 0x64
 8007a0a:	9302      	str	r3, [sp, #8]
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	f107 030f 	add.w	r3, r7, #15
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	2301      	movs	r3, #1
 8007a18:	226a      	movs	r2, #106	; 0x6a
 8007a1a:	21d0      	movs	r1, #208	; 0xd0
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7fb f911 	bl	8002c44 <HAL_I2C_Mem_Write>
}
 8007a22:	bf00      	nop
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <MPU6050_Addslave>:
// configure the MPU6050 to automatically read the magnetometer
void MPU6050_Addslave(I2C_HandleTypeDef *I2Cx)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b088      	sub	sp, #32
 8007a2e:	af04      	add	r7, sp, #16
 8007a30:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// slave 0 i2c address, read mode
	Data = HMC5883L_ADDRESS | 0x80;
 8007a32:	239e      	movs	r3, #158	; 0x9e
 8007a34:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_SLV0_ADDR, 1, &Data, 1, TIMEOUT);
 8007a36:	2364      	movs	r3, #100	; 0x64
 8007a38:	9302      	str	r3, [sp, #8]
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	f107 030f 	add.w	r3, r7, #15
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2301      	movs	r3, #1
 8007a46:	2225      	movs	r2, #37	; 0x25
 8007a48:	21d0      	movs	r1, #208	; 0xd0
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7fb f8fa 	bl	8002c44 <HAL_I2C_Mem_Write>
	// slave 0 register = 0x03 (x axis)
	Data = HMC5883L_DATAX_H;
 8007a50:	2303      	movs	r3, #3
 8007a52:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_SLV0_REG, 1, &Data, 1, TIMEOUT);
 8007a54:	2364      	movs	r3, #100	; 0x64
 8007a56:	9302      	str	r3, [sp, #8]
 8007a58:	2301      	movs	r3, #1
 8007a5a:	9301      	str	r3, [sp, #4]
 8007a5c:	f107 030f 	add.w	r3, r7, #15
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	2301      	movs	r3, #1
 8007a64:	2226      	movs	r2, #38	; 0x26
 8007a66:	21d0      	movs	r1, #208	; 0xd0
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7fb f8eb 	bl	8002c44 <HAL_I2C_Mem_Write>
	// slave 0 transfer size = 6, enabled
	Data = 0x06 | 0x80;
 8007a6e:	2386      	movs	r3, #134	; 0x86
 8007a70:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_SLV0_CTRL, 1, &Data, 1, TIMEOUT);
 8007a72:	2364      	movs	r3, #100	; 0x64
 8007a74:	9302      	str	r3, [sp, #8]
 8007a76:	2301      	movs	r3, #1
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	f107 030f 	add.w	r3, r7, #15
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	2301      	movs	r3, #1
 8007a82:	2227      	movs	r2, #39	; 0x27
 8007a84:	21d0      	movs	r1, #208	; 0xd0
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fb f8dc 	bl	8002c44 <HAL_I2C_Mem_Write>
	// enable slave 0 delay
	Data = MPU6050_I2C_SLV0_DLY_EN;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_MST_DELAY_CTRL, 1, &Data, 1, TIMEOUT);
 8007a90:	2364      	movs	r3, #100	; 0x64
 8007a92:	9302      	str	r3, [sp, #8]
 8007a94:	2301      	movs	r3, #1
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	f107 030f 	add.w	r3, r7, #15
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	2267      	movs	r2, #103	; 0x67
 8007aa2:	21d0      	movs	r1, #208	; 0xd0
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7fb f8cd 	bl	8002c44 <HAL_I2C_Mem_Write>
}
 8007aaa:	bf00      	nop
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	0000      	movs	r0, r0
 8007ab4:	0000      	movs	r0, r0
	...

08007ab8 <MPU6050_Read_All>:
void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08c      	sub	sp, #48	; 0x30
 8007abc:	af04      	add	r7, sp, #16
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[20];

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, Rec_Data, 20, TIMEOUT);
 8007ac2:	2364      	movs	r3, #100	; 0x64
 8007ac4:	9302      	str	r3, [sp, #8]
 8007ac6:	2314      	movs	r3, #20
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	f107 030c 	add.w	r3, r7, #12
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	223b      	movs	r2, #59	; 0x3b
 8007ad4:	21d0      	movs	r1, #208	; 0xd0
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7fb f9ae 	bl	8002e38 <HAL_I2C_Mem_Read>

	DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8007adc:	7b3b      	ldrb	r3, [r7, #12]
 8007ade:	021b      	lsls	r3, r3, #8
 8007ae0:	b21a      	sxth	r2, r3
 8007ae2:	7b7b      	ldrb	r3, [r7, #13]
 8007ae4:	b21b      	sxth	r3, r3
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	b21a      	sxth	r2, r3
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	b21a      	sxth	r2, r3
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	b21b      	sxth	r3, r3
 8007af8:	4313      	orrs	r3, r2
 8007afa:	b21a      	sxth	r2, r3
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8007b00:	7c3b      	ldrb	r3, [r7, #16]
 8007b02:	021b      	lsls	r3, r3, #8
 8007b04:	b21a      	sxth	r2, r3
 8007b06:	7c7b      	ldrb	r3, [r7, #17]
 8007b08:	b21b      	sxth	r3, r3
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	b21a      	sxth	r2, r3
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	809a      	strh	r2, [r3, #4]

	//DataStruct->Temp_RAW = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);

	DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8007b12:	7d3b      	ldrb	r3, [r7, #20]
 8007b14:	021b      	lsls	r3, r3, #8
 8007b16:	b21a      	sxth	r2, r3
 8007b18:	7d7b      	ldrb	r3, [r7, #21]
 8007b1a:	b21b      	sxth	r3, r3
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	b21a      	sxth	r2, r3
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8007b24:	7dbb      	ldrb	r3, [r7, #22]
 8007b26:	021b      	lsls	r3, r3, #8
 8007b28:	b21a      	sxth	r2, r3
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	b21b      	sxth	r3, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	b21a      	sxth	r2, r3
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	82da      	strh	r2, [r3, #22]
	DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8007b36:	7e3b      	ldrb	r3, [r7, #24]
 8007b38:	021b      	lsls	r3, r3, #8
 8007b3a:	b21a      	sxth	r2, r3
 8007b3c:	7e7b      	ldrb	r3, [r7, #25]
 8007b3e:	b21b      	sxth	r3, r3
 8007b40:	4313      	orrs	r3, r2
 8007b42:	b21a      	sxth	r2, r3
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	831a      	strh	r2, [r3, #24]

	DataStruct->Magn_X_RAW = (int16_t)(Rec_Data[14] << 8 | Rec_Data[15]);
 8007b48:	7ebb      	ldrb	r3, [r7, #26]
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	b21a      	sxth	r2, r3
 8007b4e:	7efb      	ldrb	r3, [r7, #27]
 8007b50:	b21b      	sxth	r3, r3
 8007b52:	4313      	orrs	r3, r2
 8007b54:	b21a      	sxth	r2, r3
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	851a      	strh	r2, [r3, #40]	; 0x28
	DataStruct->Magn_Z_RAW = (int16_t)(Rec_Data[16] << 8 | Rec_Data[17]);
 8007b5a:	7f3b      	ldrb	r3, [r7, #28]
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	b21a      	sxth	r2, r3
 8007b60:	7f7b      	ldrb	r3, [r7, #29]
 8007b62:	b21b      	sxth	r3, r3
 8007b64:	4313      	orrs	r3, r2
 8007b66:	b21a      	sxth	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Magn_Y_RAW = (int16_t)(Rec_Data[18] << 8 | Rec_Data[19]);
 8007b6c:	7fbb      	ldrb	r3, [r7, #30]
 8007b6e:	021b      	lsls	r3, r3, #8
 8007b70:	b21a      	sxth	r2, r3
 8007b72:	7ffb      	ldrb	r3, [r7, #31]
 8007b74:	b21b      	sxth	r3, r3
 8007b76:	4313      	orrs	r3, r2
 8007b78:	b21a      	sxth	r2, r3
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

	DataStruct->Ax = DataStruct->Accel_X_RAW / MPU6050_ACCE_SENS_2;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b84:	ee07 3a90 	vmov	s15, r3
 8007b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b8c:	eddf 6a56 	vldr	s13, [pc, #344]	; 8007ce8 <MPU6050_Read_All+0x230>
 8007b90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / MPU6050_ACCE_SENS_2;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007ba0:	ee07 3a90 	vmov	s15, r3
 8007ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ba8:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ce8 <MPU6050_Read_All+0x230>
 8007bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Accel_Z_RAW / MPU6050_ACCE_SENS_2;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007bbc:	ee07 3a90 	vmov	s15, r3
 8007bc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007bc4:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007ce8 <MPU6050_Read_All+0x230>
 8007bc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	edc3 7a04 	vstr	s15, [r3, #16]

	//DataStruct->Temperature = DataStruct->Temp_RAW / 340.0 + 36.53;

	DataStruct->Gx = DataStruct->Gyro_X_RAW / MPU6050_GYRO_SENS_2000 * DEG_TO_RAD;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007bd8:	ee07 3a90 	vmov	s15, r3
 8007bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007be0:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8007cec <MPU6050_Read_All+0x234>
 8007be4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007be8:	ee16 0a90 	vmov	r0, s13
 8007bec:	f7f8 fcac 	bl	8000548 <__aeabi_f2d>
 8007bf0:	a33b      	add	r3, pc, #236	; (adr r3, 8007ce0 <MPU6050_Read_All+0x228>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	f7f8 fcff 	bl	80005f8 <__aeabi_dmul>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4610      	mov	r0, r2
 8007c00:	4619      	mov	r1, r3
 8007c02:	f7f8 ffd1 	bl	8000ba8 <__aeabi_d2f>
 8007c06:	4602      	mov	r2, r0
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	61da      	str	r2, [r3, #28]
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / MPU6050_GYRO_SENS_2000 * DEG_TO_RAD;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c1a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007cec <MPU6050_Read_All+0x234>
 8007c1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007c22:	ee16 0a90 	vmov	r0, s13
 8007c26:	f7f8 fc8f 	bl	8000548 <__aeabi_f2d>
 8007c2a:	a32d      	add	r3, pc, #180	; (adr r3, 8007ce0 <MPU6050_Read_All+0x228>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fce2 	bl	80005f8 <__aeabi_dmul>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	f7f8 ffb4 	bl	8000ba8 <__aeabi_d2f>
 8007c40:	4602      	mov	r2, r0
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	621a      	str	r2, [r3, #32]
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / MPU6050_GYRO_SENS_2000 * DEG_TO_RAD;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8007c4c:	ee07 3a90 	vmov	s15, r3
 8007c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c54:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8007cec <MPU6050_Read_All+0x234>
 8007c58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007c5c:	ee16 0a90 	vmov	r0, s13
 8007c60:	f7f8 fc72 	bl	8000548 <__aeabi_f2d>
 8007c64:	a31e      	add	r3, pc, #120	; (adr r3, 8007ce0 <MPU6050_Read_All+0x228>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fcc5 	bl	80005f8 <__aeabi_dmul>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	4610      	mov	r0, r2
 8007c74:	4619      	mov	r1, r3
 8007c76:	f7f8 ff97 	bl	8000ba8 <__aeabi_d2f>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	625a      	str	r2, [r3, #36]	; 0x24

	DataStruct->Mx = DataStruct->Magn_X_RAW / HMC5883L_MAGN_SENS_1P3;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c8e:	eddf 6a18 	vldr	s13, [pc, #96]	; 8007cf0 <MPU6050_Read_All+0x238>
 8007c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->My = DataStruct->Magn_Y_RAW / HMC5883L_MAGN_SENS_1P3;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8007ca2:	ee07 3a90 	vmov	s15, r3
 8007ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007caa:	eddf 6a11 	vldr	s13, [pc, #68]	; 8007cf0 <MPU6050_Read_All+0x238>
 8007cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Mz = DataStruct->Magn_Z_RAW / HMC5883L_MAGN_SENS_1P3;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cc6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8007cf0 <MPU6050_Read_All+0x238>
 8007cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8007cd4:	bf00      	nop
 8007cd6:	3720      	adds	r7, #32
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	f3af 8000 	nop.w
 8007ce0:	a252dd11 	.word	0xa252dd11
 8007ce4:	3f91df46 	.word	0x3f91df46
 8007ce8:	46800000 	.word	0x46800000
 8007cec:	41833333 	.word	0x41833333
 8007cf0:	44884000 	.word	0x44884000

08007cf4 <HMC5883L_Init>:
void HMC5883L_Init(I2C_HandleTypeDef *I2Cx)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af04      	add	r7, sp, #16
 8007cfa:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// write CONFIG_A register
	Data = HMC5883L_AVERAGING_1 << 5 | HMC5883L_RATE_75 << 2 | HMC5883L_BIAS_NORMAL;
 8007cfc:	2318      	movs	r3, #24
 8007cfe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDR, HMC5883L_CONFIG_A, 1, &Data, 1, TIMEOUT);
 8007d00:	2364      	movs	r3, #100	; 0x64
 8007d02:	9302      	str	r3, [sp, #8]
 8007d04:	2301      	movs	r3, #1
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	f107 030f 	add.w	r3, r7, #15
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	2301      	movs	r3, #1
 8007d10:	2200      	movs	r2, #0
 8007d12:	213c      	movs	r1, #60	; 0x3c
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7fa ff95 	bl	8002c44 <HAL_I2C_Mem_Write>
	// write CONFIG_B register
	Data = HMC5883L_SEL_1P3 << 5 | 0x00;
 8007d1a:	2320      	movs	r3, #32
 8007d1c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDR, HMC5883L_CONFIG_B, 1, &Data, 1, TIMEOUT);
 8007d1e:	2364      	movs	r3, #100	; 0x64
 8007d20:	9302      	str	r3, [sp, #8]
 8007d22:	2301      	movs	r3, #1
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	f107 030f 	add.w	r3, r7, #15
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	2201      	movs	r2, #1
 8007d30:	213c      	movs	r1, #60	; 0x3c
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7fa ff86 	bl	8002c44 <HAL_I2C_Mem_Write>
	// write MODE register
	Data = HMC5883L_MODE_CONTINUOUS;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDR, HMC5883L_MODE, 1, &Data, 1, TIMEOUT);
 8007d3c:	2364      	movs	r3, #100	; 0x64
 8007d3e:	9302      	str	r3, [sp, #8]
 8007d40:	2301      	movs	r3, #1
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	f107 030f 	add.w	r3, r7, #15
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	213c      	movs	r1, #60	; 0x3c
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7fa ff77 	bl	8002c44 <HAL_I2C_Mem_Write>
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <MS5611_Rest>:
void MS5611_Rest(I2C_HandleTypeDef *I2Cx)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b088      	sub	sp, #32
 8007d62:	af04      	add	r7, sp, #16
 8007d64:	6078      	str	r0, [r7, #4]
	uint8_t Data;

	Data = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MS5611_ADDR, MS5611_CMD_REST, 1, &Data, 1, TIMEOUT);
 8007d6a:	2364      	movs	r3, #100	; 0x64
 8007d6c:	9302      	str	r3, [sp, #8]
 8007d6e:	2301      	movs	r3, #1
 8007d70:	9301      	str	r3, [sp, #4]
 8007d72:	f107 030f 	add.w	r3, r7, #15
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	2301      	movs	r3, #1
 8007d7a:	221e      	movs	r2, #30
 8007d7c:	21ee      	movs	r1, #238	; 0xee
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7fa ff60 	bl	8002c44 <HAL_I2C_Mem_Write>
	HAL_Delay(4);
 8007d84:	2004      	movs	r0, #4
 8007d86:	f7fa fb13 	bl	80023b0 <HAL_Delay>
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <MS5611_PROM_read>:
uint8_t MS5611_PROM_read(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08a      	sub	sp, #40	; 0x28
 8007d98:	af04      	add	r7, sp, #16
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint8_t data[2];
	uint8_t PROM[8] = {	MS5611_PROM_READ_0,
 8007d9e:	4a32      	ldr	r2, [pc, #200]	; (8007e68 <MS5611_PROM_read+0xd4>)
 8007da0:	f107 030c 	add.w	r3, r7, #12
 8007da4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007da8:	e883 0003 	stmia.w	r3, {r0, r1}
						MS5611_PROM_READ_4,
						MS5611_PROM_READ_5,
						MS5611_PROM_READ_6,
						MS5611_PROM_READ_7};
	//Address 0 contains factory data and the setup
	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, PROM[0], 1, data, 2, TIMEOUT);
 8007dac:	7b3b      	ldrb	r3, [r7, #12]
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	2364      	movs	r3, #100	; 0x64
 8007db2:	9302      	str	r3, [sp, #8]
 8007db4:	2302      	movs	r3, #2
 8007db6:	9301      	str	r3, [sp, #4]
 8007db8:	f107 0314 	add.w	r3, r7, #20
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	21ee      	movs	r1, #238	; 0xee
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7fb f838 	bl	8002e38 <HAL_I2C_Mem_Read>
	datastruct->reserve = (uint16_t)(data[0] << 8 | data[1]);
 8007dc8:	7d3b      	ldrb	r3, [r7, #20]
 8007dca:	021b      	lsls	r3, r3, #8
 8007dcc:	b21a      	sxth	r2, r3
 8007dce:	7d7b      	ldrb	r3, [r7, #21]
 8007dd0:	b21b      	sxth	r3, r3
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	b21b      	sxth	r3, r3
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	819a      	strh	r2, [r3, #12]
	// Addresses 1-6 calibration coefficients
	for (i = 1; i < 7; i++)
 8007ddc:	2301      	movs	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]
 8007de0:	e021      	b.n	8007e26 <MS5611_PROM_read+0x92>
	{
		HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, PROM[i], 1, data, 2, TIMEOUT);
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	3318      	adds	r3, #24
 8007de6:	443b      	add	r3, r7
 8007de8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	2364      	movs	r3, #100	; 0x64
 8007df0:	9302      	str	r3, [sp, #8]
 8007df2:	2302      	movs	r3, #2
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	f107 0314 	add.w	r3, r7, #20
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	21ee      	movs	r1, #238	; 0xee
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7fb f819 	bl	8002e38 <HAL_I2C_Mem_Read>
		datastruct->C[i - 1] = (uint16_t)(data[0] << 8 | data[1]);
 8007e06:	7d3b      	ldrb	r3, [r7, #20]
 8007e08:	021b      	lsls	r3, r3, #8
 8007e0a:	b21a      	sxth	r2, r3
 8007e0c:	7d7b      	ldrb	r3, [r7, #21]
 8007e0e:	b21b      	sxth	r3, r3
 8007e10:	4313      	orrs	r3, r2
 8007e12:	b219      	sxth	r1, r3
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	1e5a      	subs	r2, r3, #1
 8007e18:	b289      	uxth	r1, r1
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 1; i < 7; i++)
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	3301      	adds	r3, #1
 8007e24:	75fb      	strb	r3, [r7, #23]
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	2b06      	cmp	r3, #6
 8007e2a:	d9da      	bls.n	8007de2 <MS5611_PROM_read+0x4e>
	}
	//Address 7 contains the serial code and CRC
	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, PROM[7], 1, data, 2, TIMEOUT);
 8007e2c:	7cfb      	ldrb	r3, [r7, #19]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	2364      	movs	r3, #100	; 0x64
 8007e32:	9302      	str	r3, [sp, #8]
 8007e34:	2302      	movs	r3, #2
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	f107 0314 	add.w	r3, r7, #20
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	2301      	movs	r3, #1
 8007e40:	21ee      	movs	r1, #238	; 0xee
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fa fff8 	bl	8002e38 <HAL_I2C_Mem_Read>
	datastruct->crc = (uint16_t)(data[0] << 8 | data[1]);
 8007e48:	7d3b      	ldrb	r3, [r7, #20]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	b21a      	sxth	r2, r3
 8007e4e:	7d7b      	ldrb	r3, [r7, #21]
 8007e50:	b21b      	sxth	r3, r3
 8007e52:	4313      	orrs	r3, r2
 8007e54:	b21b      	sxth	r3, r3
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	81da      	strh	r2, [r3, #14]

	return MS5611_OK;
 8007e5c:	2301      	movs	r3, #1
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	0800c0bc 	.word	0x0800c0bc

08007e6c <MS5611_init>:
uint8_t MS5611_init(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
	MS5611_Rest(I2Cx);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7ff ff71 	bl	8007d5e <MS5611_Rest>
	MS5611_PROM_read(I2Cx, datastruct);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff ff88 	bl	8007d94 <MS5611_PROM_read>
	return MS5611_OK;
 8007e84:	2301      	movs	r3, #1
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <MS5611_read_temp>:
uint8_t MS5611_read_temp(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b088      	sub	sp, #32
 8007e92:	af04      	add	r7, sp, #16
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
	uint8_t data[3];
	uint8_t Data;

	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, MS6511_ADC_READ, 1, data, 3, TIMEOUT);
 8007e98:	2364      	movs	r3, #100	; 0x64
 8007e9a:	9302      	str	r3, [sp, #8]
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	f107 030c 	add.w	r3, r7, #12
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	21ee      	movs	r1, #238	; 0xee
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7fa ffc3 	bl	8002e38 <HAL_I2C_Mem_Read>
	datastruct->D[1] = (data[0] << 16 | data[1] << 8 | data[2]);
 8007eb2:	7b3b      	ldrb	r3, [r7, #12]
 8007eb4:	041a      	lsls	r2, r3, #16
 8007eb6:	7b7b      	ldrb	r3, [r7, #13]
 8007eb8:	021b      	lsls	r3, r3, #8
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	7bba      	ldrb	r2, [r7, #14]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	615a      	str	r2, [r3, #20]
	Data = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(I2Cx, MS5611_ADDR, MS5611_CMD_CONVERT_D1_2048, 1, &Data, 1, TIMEOUT);// delay 4.13ms read press
 8007eca:	2364      	movs	r3, #100	; 0x64
 8007ecc:	9302      	str	r3, [sp, #8]
 8007ece:	2301      	movs	r3, #1
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	f107 030b 	add.w	r3, r7, #11
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	2301      	movs	r3, #1
 8007eda:	2246      	movs	r2, #70	; 0x46
 8007edc:	21ee      	movs	r1, #238	; 0xee
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7fa feb0 	bl	8002c44 <HAL_I2C_Mem_Write>
	return MS5611_OK;
 8007ee4:	2301      	movs	r3, #1
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <MS5611_read_press>:
uint8_t MS5611_read_press(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b088      	sub	sp, #32
 8007ef2:	af04      	add	r7, sp, #16
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
	uint8_t data[3];
	uint8_t Data;
	
	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, MS6511_ADC_READ, 1, data, 3, TIMEOUT);
 8007ef8:	2364      	movs	r3, #100	; 0x64
 8007efa:	9302      	str	r3, [sp, #8]
 8007efc:	2303      	movs	r3, #3
 8007efe:	9301      	str	r3, [sp, #4]
 8007f00:	f107 030c 	add.w	r3, r7, #12
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	2301      	movs	r3, #1
 8007f08:	2200      	movs	r2, #0
 8007f0a:	21ee      	movs	r1, #238	; 0xee
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7fa ff93 	bl	8002e38 <HAL_I2C_Mem_Read>
	datastruct->D[0] = (data[0] << 16 | data[1] << 8 | data[2]);
 8007f12:	7b3b      	ldrb	r3, [r7, #12]
 8007f14:	041a      	lsls	r2, r3, #16
 8007f16:	7b7b      	ldrb	r3, [r7, #13]
 8007f18:	021b      	lsls	r3, r3, #8
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	7bba      	ldrb	r2, [r7, #14]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	461a      	mov	r2, r3
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	611a      	str	r2, [r3, #16]
	Data = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(I2Cx, MS5611_ADDR, MS5611_CMD_CONVERT_D2_2048, 1, &Data, 1, TIMEOUT);// delay 4.13ms read temp
 8007f2a:	2364      	movs	r3, #100	; 0x64
 8007f2c:	9302      	str	r3, [sp, #8]
 8007f2e:	2301      	movs	r3, #1
 8007f30:	9301      	str	r3, [sp, #4]
 8007f32:	f107 030b 	add.w	r3, r7, #11
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	2301      	movs	r3, #1
 8007f3a:	2256      	movs	r2, #86	; 0x56
 8007f3c:	21ee      	movs	r1, #238	; 0xee
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7fa fe80 	bl	8002c44 <HAL_I2C_Mem_Write>
	return MS5611_OK;
 8007f44:	2301      	movs	r3, #1
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <MS5611_calculate>:
uint8_t MS5611_calculate(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	b0e1      	sub	sp, #388	; 0x184
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8007f5c:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
	static int time = 0;
	static int8_t mode = 0;
	int64_t dT = 0, TEMP = 0, T2 = 0, OFF = 0, OFF2 = 0, SENS2 = 0, SENS = 0, PRES = 0;
 8007f60:	f04f 0200 	mov.w	r2, #0
 8007f64:	f04f 0300 	mov.w	r3, #0
 8007f68:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	f04f 0300 	mov.w	r3, #0
 8007f80:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
 8007f84:	f04f 0200 	mov.w	r2, #0
 8007f88:	f04f 0300 	mov.w	r3, #0
 8007f8c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8007f90:	f04f 0200 	mov.w	r2, #0
 8007f94:	f04f 0300 	mov.w	r3, #0
 8007f98:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 8007f9c:	f04f 0200 	mov.w	r2, #0
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	f04f 0300 	mov.w	r3, #0
 8007fbc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	time++;
 8007fc0:	4b0d      	ldr	r3, [pc, #52]	; (8007ff8 <MS5611_calculate+0xa8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <MS5611_calculate+0xa8>)
 8007fc8:	601a      	str	r2, [r3, #0]
	if(time>2)
 8007fca:	4b0b      	ldr	r3, [pc, #44]	; (8007ff8 <MS5611_calculate+0xa8>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	f340 8334 	ble.w	800863c <MS5611_calculate+0x6ec>
	{
	time = 0;
 8007fd4:	4a08      	ldr	r2, [pc, #32]	; (8007ff8 <MS5611_calculate+0xa8>)
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	6013      	str	r3, [r2, #0]
	if (mode)
 8007fda:	4b08      	ldr	r3, [pc, #32]	; (8007ffc <MS5611_calculate+0xac>)
 8007fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00d      	beq.n	8008000 <MS5611_calculate+0xb0>
	{
		MS5611_read_temp(I2Cx,datastruct);
 8007fe4:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8007fe8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8007fec:	f7ff ff4f 	bl	8007e8e <MS5611_read_temp>
		mode = 0;
 8007ff0:	4a02      	ldr	r2, [pc, #8]	; (8007ffc <MS5611_calculate+0xac>)
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	7013      	strb	r3, [r2, #0]
 8007ff6:	e00c      	b.n	8008012 <MS5611_calculate+0xc2>
 8007ff8:	200005b4 	.word	0x200005b4
 8007ffc:	200005b8 	.word	0x200005b8
	}
	else 
	{
		MS5611_read_press(I2Cx,datastruct);
 8008000:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8008004:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8008008:	f7ff ff71 	bl	8007eee <MS5611_read_press>
		mode = 1;
 800800c:	4ad5      	ldr	r2, [pc, #852]	; (8008364 <MS5611_calculate+0x414>)
 800800e:	2301      	movs	r3, #1
 8008010:	7013      	strb	r3, [r2, #0]
	}
	if(mode == 0)
 8008012:	4bd4      	ldr	r3, [pc, #848]	; (8008364 <MS5611_calculate+0x414>)
 8008014:	f993 3000 	ldrsb.w	r3, [r3]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f040 830f 	bne.w	800863c <MS5611_calculate+0x6ec>
	{
	dT = datastruct->D[1] - ((int32_t)(datastruct->C[4]) << 8);
 800801e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008022:	695a      	ldr	r2, [r3, #20]
 8008024:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008028:	891b      	ldrh	r3, [r3, #8]
 800802a:	021b      	lsls	r3, r3, #8
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2200      	movs	r2, #0
 8008030:	663b      	str	r3, [r7, #96]	; 0x60
 8008032:	667a      	str	r2, [r7, #100]	; 0x64
 8008034:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008038:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	TEMP = 2000 + ((int32_t)(dT * (datastruct->C[5])) >> 23);
 800803c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8008040:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008044:	895b      	ldrh	r3, [r3, #10]
 8008046:	fb02 f303 	mul.w	r3, r2, r3
 800804a:	15db      	asrs	r3, r3, #23
 800804c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008050:	17da      	asrs	r2, r3, #31
 8008052:	65bb      	str	r3, [r7, #88]	; 0x58
 8008054:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008056:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800805a:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	OFF = (((int64_t)(datastruct->C[1])) << 16) + (((datastruct->C[3]) * dT) >> 7);
 800805e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008062:	885b      	ldrh	r3, [r3, #2]
 8008064:	b29b      	uxth	r3, r3
 8008066:	2200      	movs	r2, #0
 8008068:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800806c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8008070:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008074:	460b      	mov	r3, r1
 8008076:	0c1b      	lsrs	r3, r3, #16
 8008078:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800807c:	460b      	mov	r3, r1
 800807e:	041b      	lsls	r3, r3, #16
 8008080:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008084:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008088:	88db      	ldrh	r3, [r3, #6]
 800808a:	b29b      	uxth	r3, r3
 800808c:	2200      	movs	r2, #0
 800808e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008092:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8008096:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800809a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800809e:	460a      	mov	r2, r1
 80080a0:	fb02 f203 	mul.w	r2, r2, r3
 80080a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80080a8:	e9c7 014c 	strd	r0, r1, [r7, #304]	; 0x130
 80080ac:	4601      	mov	r1, r0
 80080ae:	fb01 f303 	mul.w	r3, r1, r3
 80080b2:	441a      	add	r2, r3
 80080b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80080b8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80080bc:	fba3 4501 	umull	r4, r5, r3, r1
 80080c0:	1953      	adds	r3, r2, r5
 80080c2:	461d      	mov	r5, r3
 80080c4:	f04f 0200 	mov.w	r2, #0
 80080c8:	f04f 0300 	mov.w	r3, #0
 80080cc:	09e2      	lsrs	r2, r4, #7
 80080ce:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 80080d2:	11eb      	asrs	r3, r5, #7
 80080d4:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80080d8:	4621      	mov	r1, r4
 80080da:	1889      	adds	r1, r1, r2
 80080dc:	6539      	str	r1, [r7, #80]	; 0x50
 80080de:	4629      	mov	r1, r5
 80080e0:	eb43 0101 	adc.w	r1, r3, r1
 80080e4:	6579      	str	r1, [r7, #84]	; 0x54
 80080e6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80080ea:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	SENS = (((int64_t)(datastruct->C[0])) << 15) + (((datastruct->C[2]) * dT) >> 8);
 80080ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80080fc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008100:	f04f 0000 	mov.w	r0, #0
 8008104:	f04f 0100 	mov.w	r1, #0
 8008108:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800810c:	462b      	mov	r3, r5
 800810e:	03d9      	lsls	r1, r3, #15
 8008110:	4623      	mov	r3, r4
 8008112:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 8008116:	4623      	mov	r3, r4
 8008118:	03d8      	lsls	r0, r3, #15
 800811a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800811e:	889b      	ldrh	r3, [r3, #4]
 8008120:	b29b      	uxth	r3, r3
 8008122:	2200      	movs	r2, #0
 8008124:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008128:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800812c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8008130:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	; 0xe8
 8008134:	4632      	mov	r2, r6
 8008136:	fb02 f203 	mul.w	r2, r2, r3
 800813a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800813e:	462c      	mov	r4, r5
 8008140:	fb04 f303 	mul.w	r3, r4, r3
 8008144:	441a      	add	r2, r3
 8008146:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800814a:	462c      	mov	r4, r5
 800814c:	fba3 8904 	umull	r8, r9, r3, r4
 8008150:	eb02 0309 	add.w	r3, r2, r9
 8008154:	4699      	mov	r9, r3
 8008156:	f04f 0200 	mov.w	r2, #0
 800815a:	f04f 0300 	mov.w	r3, #0
 800815e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8008162:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8008166:	ea4f 2329 	mov.w	r3, r9, asr #8
 800816a:	1884      	adds	r4, r0, r2
 800816c:	64bc      	str	r4, [r7, #72]	; 0x48
 800816e:	eb41 0303 	adc.w	r3, r1, r3
 8008172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008174:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8008178:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148

	if (TEMP < 2000)
 800817c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8008180:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8008184:	f173 0300 	sbcs.w	r3, r3, #0
 8008188:	f280 81ce 	bge.w	8008528 <MS5611_calculate+0x5d8>
	{ // temperature < 20�C
		T2 = (dT * dT) >> 31;
 800818c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8008190:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8008194:	fb03 f102 	mul.w	r1, r3, r2
 8008198:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800819c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80081a0:	fb02 f303 	mul.w	r3, r2, r3
 80081a4:	18ca      	adds	r2, r1, r3
 80081a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80081aa:	fba3 ab03 	umull	sl, fp, r3, r3
 80081ae:	eb02 030b 	add.w	r3, r2, fp
 80081b2:	469b      	mov	fp, r3
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	f04f 0300 	mov.w	r3, #0
 80081bc:	ea4f 72da 	mov.w	r2, sl, lsr #31
 80081c0:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
 80081c4:	ea4f 73eb 	mov.w	r3, fp, asr #31
 80081c8:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2;
 80081cc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80081d0:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80081d4:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80081d8:	f143 33ff 	adc.w	r3, r3, #4294967295
 80081dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081e0:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80081e4:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80081e8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80081ec:	f143 33ff 	adc.w	r3, r3, #4294967295
 80081f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081f4:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80081f8:	462b      	mov	r3, r5
 80081fa:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80081fe:	4642      	mov	r2, r8
 8008200:	fb02 f203 	mul.w	r2, r2, r3
 8008204:	464b      	mov	r3, r9
 8008206:	4621      	mov	r1, r4
 8008208:	fb01 f303 	mul.w	r3, r1, r3
 800820c:	4413      	add	r3, r2
 800820e:	4622      	mov	r2, r4
 8008210:	4641      	mov	r1, r8
 8008212:	fba2 1201 	umull	r1, r2, r2, r1
 8008216:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800821a:	460a      	mov	r2, r1
 800821c:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8008220:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8008224:	4413      	add	r3, r2
 8008226:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800822a:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800822e:	4622      	mov	r2, r4
 8008230:	462b      	mov	r3, r5
 8008232:	f04f 0000 	mov.w	r0, #0
 8008236:	f04f 0100 	mov.w	r1, #0
 800823a:	0099      	lsls	r1, r3, #2
 800823c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8008240:	0090      	lsls	r0, r2, #2
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4621      	mov	r1, r4
 8008248:	1851      	adds	r1, r2, r1
 800824a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800824e:	4629      	mov	r1, r5
 8008250:	eb43 0101 	adc.w	r1, r3, r1
 8008254:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8008258:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800825c:	460b      	mov	r3, r1
 800825e:	0fdb      	lsrs	r3, r3, #31
 8008260:	2200      	movs	r2, #0
 8008262:	643b      	str	r3, [r7, #64]	; 0x40
 8008264:	647a      	str	r2, [r7, #68]	; 0x44
 8008266:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800826a:	4623      	mov	r3, r4
 800826c:	4602      	mov	r2, r0
 800826e:	189b      	adds	r3, r3, r2
 8008270:	63bb      	str	r3, [r7, #56]	; 0x38
 8008272:	460b      	mov	r3, r1
 8008274:	462a      	mov	r2, r5
 8008276:	eb42 0303 	adc.w	r3, r2, r3
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800827c:	f04f 0200 	mov.w	r2, #0
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8008288:	4621      	mov	r1, r4
 800828a:	084a      	lsrs	r2, r1, #1
 800828c:	4629      	mov	r1, r5
 800828e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008292:	4629      	mov	r1, r5
 8008294:	104b      	asrs	r3, r1, #1
 8008296:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
		SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 4;
 800829a:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800829e:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80082a2:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80082a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80082aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80082ae:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80082b2:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80082b6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80082ba:	f143 33ff 	adc.w	r3, r3, #4294967295
 80082be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082c2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80082c6:	462b      	mov	r3, r5
 80082c8:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80082cc:	4642      	mov	r2, r8
 80082ce:	fb02 f203 	mul.w	r2, r2, r3
 80082d2:	464b      	mov	r3, r9
 80082d4:	4621      	mov	r1, r4
 80082d6:	fb01 f303 	mul.w	r3, r1, r3
 80082da:	4413      	add	r3, r2
 80082dc:	4622      	mov	r2, r4
 80082de:	4641      	mov	r1, r8
 80082e0:	fba2 1201 	umull	r1, r2, r2, r1
 80082e4:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80082e8:	460a      	mov	r2, r1
 80082ea:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80082ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80082f2:	4413      	add	r3, r2
 80082f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80082f8:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80082fc:	4622      	mov	r2, r4
 80082fe:	462b      	mov	r3, r5
 8008300:	f04f 0000 	mov.w	r0, #0
 8008304:	f04f 0100 	mov.w	r1, #0
 8008308:	0099      	lsls	r1, r3, #2
 800830a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800830e:	0090      	lsls	r0, r2, #2
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4621      	mov	r1, r4
 8008316:	1851      	adds	r1, r2, r1
 8008318:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800831c:	4629      	mov	r1, r5
 800831e:	eb43 0101 	adc.w	r1, r3, r1
 8008322:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 8008326:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800832a:	2b00      	cmp	r3, #0
 800832c:	da06      	bge.n	800833c <MS5611_calculate+0x3ec>
 800832e:	1cd1      	adds	r1, r2, #3
 8008330:	6339      	str	r1, [r7, #48]	; 0x30
 8008332:	f143 0300 	adc.w	r3, r3, #0
 8008336:	637b      	str	r3, [r7, #52]	; 0x34
 8008338:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800833c:	f04f 0000 	mov.w	r0, #0
 8008340:	f04f 0100 	mov.w	r1, #0
 8008344:	0890      	lsrs	r0, r2, #2
 8008346:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800834a:	1099      	asrs	r1, r3, #2
 800834c:	e9c7 015a 	strd	r0, r1, [r7, #360]	; 0x168

		if (TEMP < -1500)
 8008350:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8008354:	4904      	ldr	r1, [pc, #16]	; (8008368 <MS5611_calculate+0x418>)
 8008356:	428a      	cmp	r2, r1
 8008358:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 800835c:	f280 80f6 	bge.w	800854c <MS5611_calculate+0x5fc>
 8008360:	e004      	b.n	800836c <MS5611_calculate+0x41c>
 8008362:	bf00      	nop
 8008364:	200005b8 	.word	0x200005b8
 8008368:	fffffa24 	.word	0xfffffa24
		{ // temperature < -15�C
			OFF2 = OFF2 + (7 * (TEMP + 1500) * (TEMP + 1500));
 800836c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8008370:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8008374:	1851      	adds	r1, r2, r1
 8008376:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800837a:	f143 0300 	adc.w	r3, r3, #0
 800837e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008382:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8008386:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800838a:	1851      	adds	r1, r2, r1
 800838c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8008390:	f143 0300 	adc.w	r3, r3, #0
 8008394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008398:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800839c:	462b      	mov	r3, r5
 800839e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80083a2:	4642      	mov	r2, r8
 80083a4:	fb02 f203 	mul.w	r2, r2, r3
 80083a8:	464b      	mov	r3, r9
 80083aa:	4621      	mov	r1, r4
 80083ac:	fb01 f303 	mul.w	r3, r1, r3
 80083b0:	4413      	add	r3, r2
 80083b2:	4622      	mov	r2, r4
 80083b4:	4641      	mov	r1, r8
 80083b6:	fba2 1201 	umull	r1, r2, r2, r1
 80083ba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80083be:	460a      	mov	r2, r1
 80083c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80083c4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80083c8:	4413      	add	r3, r2
 80083ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80083ce:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80083d2:	4622      	mov	r2, r4
 80083d4:	462b      	mov	r3, r5
 80083d6:	f04f 0000 	mov.w	r0, #0
 80083da:	f04f 0100 	mov.w	r1, #0
 80083de:	00d9      	lsls	r1, r3, #3
 80083e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083e4:	00d0      	lsls	r0, r2, #3
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4621      	mov	r1, r4
 80083ec:	1a51      	subs	r1, r2, r1
 80083ee:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80083f2:	4629      	mov	r1, r5
 80083f4:	eb63 0301 	sbc.w	r3, r3, r1
 80083f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80083fc:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8008400:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8008404:	4621      	mov	r1, r4
 8008406:	1851      	adds	r1, r2, r1
 8008408:	62b9      	str	r1, [r7, #40]	; 0x28
 800840a:	4629      	mov	r1, r5
 800840c:	eb43 0101 	adc.w	r1, r3, r1
 8008410:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008412:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008416:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
			SENS2 = SENS2 + (11 * (TEMP + 1500) * (TEMP + 1500) / 2);
 800841a:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800841e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8008422:	1851      	adds	r1, r2, r1
 8008424:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8008428:	f143 0300 	adc.w	r3, r3, #0
 800842c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008430:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8008434:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8008438:	1851      	adds	r1, r2, r1
 800843a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800843e:	f143 0300 	adc.w	r3, r3, #0
 8008442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008446:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800844a:	462b      	mov	r3, r5
 800844c:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8008450:	4642      	mov	r2, r8
 8008452:	fb02 f203 	mul.w	r2, r2, r3
 8008456:	464b      	mov	r3, r9
 8008458:	4621      	mov	r1, r4
 800845a:	fb01 f303 	mul.w	r3, r1, r3
 800845e:	4413      	add	r3, r2
 8008460:	4622      	mov	r2, r4
 8008462:	4641      	mov	r1, r8
 8008464:	fba2 1201 	umull	r1, r2, r2, r1
 8008468:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800846c:	460a      	mov	r2, r1
 800846e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8008472:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008476:	4413      	add	r3, r2
 8008478:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800847c:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8008480:	4622      	mov	r2, r4
 8008482:	462b      	mov	r3, r5
 8008484:	1891      	adds	r1, r2, r2
 8008486:	6239      	str	r1, [r7, #32]
 8008488:	415b      	adcs	r3, r3
 800848a:	627b      	str	r3, [r7, #36]	; 0x24
 800848c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008490:	4621      	mov	r1, r4
 8008492:	1851      	adds	r1, r2, r1
 8008494:	61b9      	str	r1, [r7, #24]
 8008496:	4629      	mov	r1, r5
 8008498:	414b      	adcs	r3, r1
 800849a:	61fb      	str	r3, [r7, #28]
 800849c:	f04f 0200 	mov.w	r2, #0
 80084a0:	f04f 0300 	mov.w	r3, #0
 80084a4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80084a8:	4649      	mov	r1, r9
 80084aa:	008b      	lsls	r3, r1, #2
 80084ac:	4641      	mov	r1, r8
 80084ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084b2:	4641      	mov	r1, r8
 80084b4:	008a      	lsls	r2, r1, #2
 80084b6:	4610      	mov	r0, r2
 80084b8:	4619      	mov	r1, r3
 80084ba:	4603      	mov	r3, r0
 80084bc:	4622      	mov	r2, r4
 80084be:	1a9b      	subs	r3, r3, r2
 80084c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084c4:	460b      	mov	r3, r1
 80084c6:	462a      	mov	r2, r5
 80084c8:	eb63 0302 	sbc.w	r3, r3, r2
 80084cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80084d0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80084d4:	460b      	mov	r3, r1
 80084d6:	0fdb      	lsrs	r3, r3, #31
 80084d8:	2200      	movs	r2, #0
 80084da:	613b      	str	r3, [r7, #16]
 80084dc:	617a      	str	r2, [r7, #20]
 80084de:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80084e2:	4623      	mov	r3, r4
 80084e4:	4602      	mov	r2, r0
 80084e6:	189b      	adds	r3, r3, r2
 80084e8:	60bb      	str	r3, [r7, #8]
 80084ea:	460b      	mov	r3, r1
 80084ec:	462a      	mov	r2, r5
 80084ee:	eb42 0303 	adc.w	r3, r2, r3
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008500:	4621      	mov	r1, r4
 8008502:	084a      	lsrs	r2, r1, #1
 8008504:	4629      	mov	r1, r5
 8008506:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800850a:	4629      	mov	r1, r5
 800850c:	104b      	asrs	r3, r1, #1
 800850e:	4610      	mov	r0, r2
 8008510:	4619      	mov	r1, r3
 8008512:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8008516:	1814      	adds	r4, r2, r0
 8008518:	603c      	str	r4, [r7, #0]
 800851a:	414b      	adcs	r3, r1
 800851c:	607b      	str	r3, [r7, #4]
 800851e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008522:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
 8008526:	e011      	b.n	800854c <MS5611_calculate+0x5fc>
		}
	}
	else
	{ // temperature > 20�C
		T2 = 0;
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	f04f 0300 	mov.w	r3, #0
 8008530:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		OFF2 = 0;
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	f04f 0300 	mov.w	r3, #0
 800853c:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
		SENS2 = 0;
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	f04f 0300 	mov.w	r3, #0
 8008548:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
	}

	datastruct->dT = dT;
 800854c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8008550:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008554:	619a      	str	r2, [r3, #24]
	datastruct->OFF = OFF - OFF2;
 8008556:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800855a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800855e:	1a84      	subs	r4, r0, r2
 8008560:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8008564:	eb61 0303 	sbc.w	r3, r1, r3
 8008568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800856c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008570:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008574:	e9c3 1208 	strd	r1, r2, [r3, #32]
	datastruct->TEMP = TEMP - T2;
 8008578:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800857c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	461a      	mov	r2, r3
 8008584:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008588:	631a      	str	r2, [r3, #48]	; 0x30
	datastruct->SENS = SENS - SENS2;
 800858a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800858e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8008592:	1a84      	subs	r4, r0, r2
 8008594:	67bc      	str	r4, [r7, #120]	; 0x78
 8008596:	eb61 0303 	sbc.w	r3, r1, r3
 800859a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800859c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80085a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80085a4:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

	PRES = ((((int32_t)(datastruct->D[0]) * (datastruct->SENS)) >> 21) - (datastruct->OFF)) >> 15;
 80085a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	17da      	asrs	r2, r3, #31
 80085b0:	673b      	str	r3, [r7, #112]	; 0x70
 80085b2:	677a      	str	r2, [r7, #116]	; 0x74
 80085b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80085b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80085bc:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80085c0:	4629      	mov	r1, r5
 80085c2:	fb02 f001 	mul.w	r0, r2, r1
 80085c6:	4621      	mov	r1, r4
 80085c8:	fb01 f103 	mul.w	r1, r1, r3
 80085cc:	4401      	add	r1, r0
 80085ce:	4620      	mov	r0, r4
 80085d0:	fba0 2302 	umull	r2, r3, r0, r2
 80085d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80085d8:	4613      	mov	r3, r2
 80085da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80085de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085e2:	18cb      	adds	r3, r1, r3
 80085e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80085e8:	f04f 0200 	mov.w	r2, #0
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80085f4:	4621      	mov	r1, r4
 80085f6:	0d4a      	lsrs	r2, r1, #21
 80085f8:	4629      	mov	r1, r5
 80085fa:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80085fe:	4629      	mov	r1, r5
 8008600:	154b      	asrs	r3, r1, #21
 8008602:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8008606:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800860a:	1a14      	subs	r4, r2, r0
 800860c:	66bc      	str	r4, [r7, #104]	; 0x68
 800860e:	eb63 0301 	sbc.w	r3, r3, r1
 8008612:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008614:	f04f 0200 	mov.w	r2, #0
 8008618:	f04f 0300 	mov.w	r3, #0
 800861c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8008620:	4621      	mov	r1, r4
 8008622:	0bca      	lsrs	r2, r1, #15
 8008624:	4629      	mov	r1, r5
 8008626:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800862a:	4629      	mov	r1, r5
 800862c:	13cb      	asrs	r3, r1, #15
 800862e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	datastruct->P = PRES;
 8008632:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008636:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800863a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	}
	return MS5611_OK;
 800863c:	2301      	movs	r3, #1
}
 800863e:	4618      	mov	r0, r3
 8008640:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8008644:	46bd      	mov	sp, r7
 8008646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864a:	bf00      	nop
 800864c:	0000      	movs	r0, r0
	...

08008650 <getAltitude>:
double getAltitude(double pressure, double referencePressure)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	ed87 0b02 	vstr	d0, [r7, #8]
 800865a:	ed87 1b00 	vstr	d1, [r7]
    return (44330.0f * (1.0f - pow((double)pressure / (double)referencePressure, 0.1902949f)));
 800865e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008662:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008666:	f7f8 f8f1 	bl	800084c <__aeabi_ddiv>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	ec43 2b17 	vmov	d7, r2, r3
 8008672:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80086b8 <getAltitude+0x68>
 8008676:	eeb0 0a47 	vmov.f32	s0, s14
 800867a:	eef0 0a67 	vmov.f32	s1, s15
 800867e:	f001 fd07 	bl	800a090 <pow>
 8008682:	ec53 2b10 	vmov	r2, r3, d0
 8008686:	f04f 0000 	mov.w	r0, #0
 800868a:	490f      	ldr	r1, [pc, #60]	; (80086c8 <getAltitude+0x78>)
 800868c:	f7f7 fdfc 	bl	8000288 <__aeabi_dsub>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4610      	mov	r0, r2
 8008696:	4619      	mov	r1, r3
 8008698:	a309      	add	r3, pc, #36	; (adr r3, 80086c0 <getAltitude+0x70>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f7 ffab 	bl	80005f8 <__aeabi_dmul>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80086aa:	eeb0 0a47 	vmov.f32	s0, s14
 80086ae:	eef0 0a67 	vmov.f32	s1, s15
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	60000000 	.word	0x60000000
 80086bc:	3fc85b95 	.word	0x3fc85b95
 80086c0:	00000000 	.word	0x00000000
 80086c4:	40e5a540 	.word	0x40e5a540
 80086c8:	3ff00000 	.word	0x3ff00000

080086cc <quat_mult>:
// Multiply two quaternions and return a copy of the result, prod = L * R
Quaternion_t quat_mult(Quaternion_t L, Quaternion_t R)
{
 80086cc:	b490      	push	{r4, r7}
 80086ce:	b094      	sub	sp, #80	; 0x50
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	eeb0 4a40 	vmov.f32	s8, s0
 80086d6:	eef0 4a60 	vmov.f32	s9, s1
 80086da:	eeb0 5a41 	vmov.f32	s10, s2
 80086de:	eef0 5a61 	vmov.f32	s11, s3
 80086e2:	eeb0 6a42 	vmov.f32	s12, s4
 80086e6:	eef0 6a62 	vmov.f32	s13, s5
 80086ea:	eeb0 7a43 	vmov.f32	s14, s6
 80086ee:	eef0 7a63 	vmov.f32	s15, s7
 80086f2:	ed87 4a08 	vstr	s8, [r7, #32]
 80086f6:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 80086fa:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 80086fe:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8008702:	ed87 6a04 	vstr	s12, [r7, #16]
 8008706:	edc7 6a05 	vstr	s13, [r7, #20]
 800870a:	ed87 7a06 	vstr	s14, [r7, #24]
 800870e:	edc7 7a07 	vstr	s15, [r7, #28]
	Quaternion_t product;
	product.q1 = (L.q1 * R.q1) - (L.q2 * R.q2) - (L.q3 * R.q3) - (L.q4 * R.q4);
 8008712:	ed97 7a08 	vldr	s14, [r7, #32]
 8008716:	edd7 7a04 	vldr	s15, [r7, #16]
 800871a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800871e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008722:	edd7 7a05 	vldr	s15, [r7, #20]
 8008726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800872a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800872e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008732:	edd7 7a06 	vldr	s15, [r7, #24]
 8008736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800873a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800873e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008742:	edd7 7a07 	vldr	s15, [r7, #28]
 8008746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800874a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800874e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
 8008752:	ed97 7a08 	vldr	s14, [r7, #32]
 8008756:	edd7 7a05 	vldr	s15, [r7, #20]
 800875a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800875e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008762:	edd7 7a04 	vldr	s15, [r7, #16]
 8008766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800876a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800876e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008772:	edd7 7a07 	vldr	s15, [r7, #28]
 8008776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800877a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800877e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008782:	edd7 7a06 	vldr	s15, [r7, #24]
 8008786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800878a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800878e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
 8008792:	ed97 7a08 	vldr	s14, [r7, #32]
 8008796:	edd7 7a06 	vldr	s15, [r7, #24]
 800879a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800879e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80087a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80087a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80087ae:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80087b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80087b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087be:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80087c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80087c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087ce:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
 80087d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80087d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80087da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087de:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80087e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80087e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087ee:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80087f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80087f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80087fe:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008802:	edd7 7a04 	vldr	s15, [r7, #16]
 8008806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800880a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800880e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	return product;
 8008812:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8008816:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800881a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800881c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008820:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008828:	ee06 0a10 	vmov	s12, r0
 800882c:	ee06 1a90 	vmov	s13, r1
 8008830:	ee07 2a10 	vmov	s14, r2
 8008834:	ee07 3a90 	vmov	s15, r3
}
 8008838:	eeb0 0a46 	vmov.f32	s0, s12
 800883c:	eef0 0a66 	vmov.f32	s1, s13
 8008840:	eeb0 1a47 	vmov.f32	s2, s14
 8008844:	eef0 1a67 	vmov.f32	s3, s15
 8008848:	3750      	adds	r7, #80	; 0x50
 800884a:	46bd      	mov	sp, r7
 800884c:	bc90      	pop	{r4, r7}
 800884e:	4770      	bx	lr

08008850 <quat_scalar>:
// Multiply a reference of a quaternion by a scalar, q = s*q
void quat_scalar(Quaternion_t *q, float scalar)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	ed87 0a00 	vstr	s0, [r7]
	q->q1 *= scalar;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	ed93 7a00 	vldr	s14, [r3]
 8008862:	edd7 7a00 	vldr	s15, [r7]
 8008866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	edc3 7a00 	vstr	s15, [r3]
	q->q2 *= scalar;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	ed93 7a01 	vldr	s14, [r3, #4]
 8008876:	edd7 7a00 	vldr	s15, [r7]
 800887a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	edc3 7a01 	vstr	s15, [r3, #4]
	q->q3 *= scalar;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	ed93 7a02 	vldr	s14, [r3, #8]
 800888a:	edd7 7a00 	vldr	s15, [r7]
 800888e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	edc3 7a02 	vstr	s15, [r3, #8]
	q->q4 *= scalar;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	ed93 7a03 	vldr	s14, [r3, #12]
 800889e:	edd7 7a00 	vldr	s15, [r7]
 80088a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <quat_add>:
// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
void quat_add(Quaternion_t *Sum, Quaternion_t L, Quaternion_t R)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b08b      	sub	sp, #44	; 0x2c
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6278      	str	r0, [r7, #36]	; 0x24
 80088c0:	eeb0 4a40 	vmov.f32	s8, s0
 80088c4:	eef0 4a60 	vmov.f32	s9, s1
 80088c8:	eeb0 5a41 	vmov.f32	s10, s2
 80088cc:	eef0 5a61 	vmov.f32	s11, s3
 80088d0:	eeb0 6a42 	vmov.f32	s12, s4
 80088d4:	eef0 6a62 	vmov.f32	s13, s5
 80088d8:	eeb0 7a43 	vmov.f32	s14, s6
 80088dc:	eef0 7a63 	vmov.f32	s15, s7
 80088e0:	ed87 4a05 	vstr	s8, [r7, #20]
 80088e4:	edc7 4a06 	vstr	s9, [r7, #24]
 80088e8:	ed87 5a07 	vstr	s10, [r7, #28]
 80088ec:	edc7 5a08 	vstr	s11, [r7, #32]
 80088f0:	ed87 6a01 	vstr	s12, [r7, #4]
 80088f4:	edc7 6a02 	vstr	s13, [r7, #8]
 80088f8:	ed87 7a03 	vstr	s14, [r7, #12]
 80088fc:	edc7 7a04 	vstr	s15, [r7, #16]
	Sum->q1 = L.q1 + R.q1;
 8008900:	ed97 7a05 	vldr	s14, [r7, #20]
 8008904:	edd7 7a01 	vldr	s15, [r7, #4]
 8008908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	edc3 7a00 	vstr	s15, [r3]
	Sum->q2 = L.q2 + R.q2;
 8008912:	ed97 7a06 	vldr	s14, [r7, #24]
 8008916:	edd7 7a02 	vldr	s15, [r7, #8]
 800891a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	edc3 7a01 	vstr	s15, [r3, #4]
	Sum->q3 = L.q3 + R.q3;
 8008924:	ed97 7a07 	vldr	s14, [r7, #28]
 8008928:	edd7 7a03 	vldr	s15, [r7, #12]
 800892c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	edc3 7a02 	vstr	s15, [r3, #8]
	Sum->q4 = L.q4 + R.q4;
 8008936:	ed97 7a08 	vldr	s14, [r7, #32]
 800893a:	edd7 7a04 	vldr	s15, [r7, #16]
 800893e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8008948:	bf00      	nop
 800894a:	372c      	adds	r7, #44	; 0x2c
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <quat_sub>:
// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
void quat_sub(Quaternion_t *Sum, Quaternion_t L, Quaternion_t R)
{
 8008954:	b480      	push	{r7}
 8008956:	b08b      	sub	sp, #44	; 0x2c
 8008958:	af00      	add	r7, sp, #0
 800895a:	6278      	str	r0, [r7, #36]	; 0x24
 800895c:	eeb0 4a40 	vmov.f32	s8, s0
 8008960:	eef0 4a60 	vmov.f32	s9, s1
 8008964:	eeb0 5a41 	vmov.f32	s10, s2
 8008968:	eef0 5a61 	vmov.f32	s11, s3
 800896c:	eeb0 6a42 	vmov.f32	s12, s4
 8008970:	eef0 6a62 	vmov.f32	s13, s5
 8008974:	eeb0 7a43 	vmov.f32	s14, s6
 8008978:	eef0 7a63 	vmov.f32	s15, s7
 800897c:	ed87 4a05 	vstr	s8, [r7, #20]
 8008980:	edc7 4a06 	vstr	s9, [r7, #24]
 8008984:	ed87 5a07 	vstr	s10, [r7, #28]
 8008988:	edc7 5a08 	vstr	s11, [r7, #32]
 800898c:	ed87 6a01 	vstr	s12, [r7, #4]
 8008990:	edc7 6a02 	vstr	s13, [r7, #8]
 8008994:	ed87 7a03 	vstr	s14, [r7, #12]
 8008998:	edc7 7a04 	vstr	s15, [r7, #16]
	Sum->q1 = L.q1 - R.q1;
 800899c:	ed97 7a05 	vldr	s14, [r7, #20]
 80089a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80089a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	edc3 7a00 	vstr	s15, [r3]
	Sum->q2 = L.q2 - R.q2;
 80089ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80089b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80089b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	edc3 7a01 	vstr	s15, [r3, #4]
	Sum->q3 = L.q3 - R.q3;
 80089c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80089c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80089c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	edc3 7a02 	vstr	s15, [r3, #8]
	Sum->q4 = L.q4 - R.q4;
 80089d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80089d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80089da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80089e4:	bf00      	nop
 80089e6:	372c      	adds	r7, #44	; 0x2c
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <quat_Norm>:
	q.q4 = -q.q4;
	return q;
}
// norm of a quaternion is the same as a complex number
float quat_Norm(Quaternion_t q)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	eeb0 6a40 	vmov.f32	s12, s0
 80089fa:	eef0 6a60 	vmov.f32	s13, s1
 80089fe:	eeb0 7a41 	vmov.f32	s14, s2
 8008a02:	eef0 7a61 	vmov.f32	s15, s3
 8008a06:	ed87 6a00 	vstr	s12, [r7]
 8008a0a:	edc7 6a01 	vstr	s13, [r7, #4]
 8008a0e:	ed87 7a02 	vstr	s14, [r7, #8]
 8008a12:	edc7 7a03 	vstr	s15, [r7, #12]
	return sqrt(q.q1 * q.q1 + q.q2 * q.q2 + q.q3 * q.q3 + q.q4 * q.q4);
 8008a16:	ed97 7a00 	vldr	s14, [r7]
 8008a1a:	edd7 7a00 	vldr	s15, [r7]
 8008a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a22:	edd7 6a01 	vldr	s13, [r7, #4]
 8008a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8008a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a32:	edd7 6a02 	vldr	s13, [r7, #8]
 8008a36:	edd7 7a02 	vldr	s15, [r7, #8]
 8008a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a42:	edd7 6a03 	vldr	s13, [r7, #12]
 8008a46:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a52:	ee17 0a90 	vmov	r0, s15
 8008a56:	f7f7 fd77 	bl	8000548 <__aeabi_f2d>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	ec43 2b10 	vmov	d0, r2, r3
 8008a62:	f001 fb85 	bl	800a170 <sqrt>
 8008a66:	ec53 2b10 	vmov	r2, r3, d0
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	f7f8 f89b 	bl	8000ba8 <__aeabi_d2f>
 8008a72:	4603      	mov	r3, r0
 8008a74:	ee07 3a90 	vmov	s15, r3
}
 8008a78:	eeb0 0a67 	vmov.f32	s0, s15
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <quat_Normalization>:
// Normalizes pointer q by calling quat_Norm(q),
void quat_Normalization(Quaternion_t *q)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
	float norm = quat_Norm(*q);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	ed93 6a00 	vldr	s12, [r3]
 8008a90:	edd3 6a01 	vldr	s13, [r3, #4]
 8008a94:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a98:	edd3 7a03 	vldr	s15, [r3, #12]
 8008a9c:	eeb0 0a46 	vmov.f32	s0, s12
 8008aa0:	eef0 0a66 	vmov.f32	s1, s13
 8008aa4:	eeb0 1a47 	vmov.f32	s2, s14
 8008aa8:	eef0 1a67 	vmov.f32	s3, s15
 8008aac:	f7ff ffa0 	bl	80089f0 <quat_Norm>
 8008ab0:	ed87 0a03 	vstr	s0, [r7, #12]
	q->q1 /= norm;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	edd3 6a00 	vldr	s13, [r3]
 8008aba:	ed97 7a03 	vldr	s14, [r7, #12]
 8008abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	edc3 7a00 	vstr	s15, [r3]
	q->q2 /= norm;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	edd3 6a01 	vldr	s13, [r3, #4]
 8008ace:	ed97 7a03 	vldr	s14, [r7, #12]
 8008ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	edc3 7a01 	vstr	s15, [r3, #4]
	q->q3 /= norm;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	edd3 6a02 	vldr	s13, [r3, #8]
 8008ae2:	ed97 7a03 	vldr	s14, [r7, #12]
 8008ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	edc3 7a02 	vstr	s15, [r3, #8]
	q->q4 /= norm;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	edd3 6a03 	vldr	s13, [r3, #12]
 8008af6:	ed97 7a03 	vldr	s14, [r7, #12]
 8008afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8008b04:	bf00      	nop
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <Madgwick_imu>:
	quat_add(q_est, q_est_prev, q_est_dot); // Integrate orientation rate to find position
	quat_Normalization(q_est);				 // normalize the orientation of the estimate
											 //(shown in diagram, plus always use unit quaternions for orientation)
}
void Madgwick_imu(MPU6050_t *DataStruct,Quaternion_t *q_est)
{
 8008b0c:	b5b0      	push	{r4, r5, r7, lr}
 8008b0e:	b0ac      	sub	sp, #176	; 0xb0
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
	float ax = DataStruct->Ax;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float ay = DataStruct->Ay;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float az = DataStruct->Az;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float gx = DataStruct->Gx;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	float gy = DataStruct->Gy;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float gz = DataStruct->Gz;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	// Variables and constants
	float F_g[3] = {0};	   // eq(15/21/25) objective function for gravity
 8008b46:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	605a      	str	r2, [r3, #4]
 8008b50:	609a      	str	r2, [r3, #8]
	float J_g[3][4] = {0}; // jacobian matrix for gravity
 8008b52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008b56:	2230      	movs	r2, #48	; 0x30
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fdb2 	bl	80096c4 <memset>
	Quaternion_t q_est_prev = *q_est;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8008b66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Quaternion_t q_est_dot = {0}; // eq 42 and 43
 8008b6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	605a      	str	r2, [r3, #4]
 8008b76:	609a      	str	r2, [r3, #8]
 8008b78:	60da      	str	r2, [r3, #12]
	Quaternion_t gradient = {0};
 8008b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b7e:	2200      	movs	r2, #0
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	605a      	str	r2, [r3, #4]
 8008b84:	609a      	str	r2, [r3, #8]
 8008b86:	60da      	str	r2, [r3, #12]
	// const Quaternion_t q_g_ref = {0, 0, 0, 1};// eq (23) not needed because I used eq 25 instead of eq 21

	Quaternion_t q_a = {0, ax, ay, az}; // eq (24) raw acceleration values, needs to be normalized
 8008b88:	f04f 0300 	mov.w	r3, #0
 8008b8c:	61fb      	str	r3, [r7, #28]
 8008b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b92:	623b      	str	r3, [r7, #32]
 8008b94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b98:	627b      	str	r3, [r7, #36]	; 0x24
 8008b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (quat_Norm(q_a) == 0)
 8008ba0:	ed97 6a07 	vldr	s12, [r7, #28]
 8008ba4:	edd7 6a08 	vldr	s13, [r7, #32]
 8008ba8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008bac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008bb0:	eeb0 0a46 	vmov.f32	s0, s12
 8008bb4:	eef0 0a66 	vmov.f32	s1, s13
 8008bb8:	eeb0 1a47 	vmov.f32	s2, s14
 8008bbc:	eef0 1a67 	vmov.f32	s3, s15
 8008bc0:	f7ff ff16 	bl	80089f0 <quat_Norm>
 8008bc4:	eef0 7a40 	vmov.f32	s15, s0
 8008bc8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd0:	f000 81c4 	beq.w	8008f5c <Madgwick_imu+0x450>
		return;
	quat_Normalization(&q_a); // normalize the acceleration quaternion to be a unit quaternion
 8008bd4:	f107 031c 	add.w	r3, r7, #28
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff ff52 	bl	8008a82 <quat_Normalization>

	Quaternion_t q_w = {0, gx, gy, gz}; // equation (10), places gyroscope readings in a quaternion
 8008bde:	f04f 0300 	mov.w	r3, #0
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bf4:	61bb      	str	r3, [r7, #24]

	quat_scalar(&q_w, 0.5);			  // equation (12) dq/dt = (1/2)q*w
 8008bf6:	f107 030c 	add.w	r3, r7, #12
 8008bfa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fe26 	bl	8008850 <quat_scalar>
	q_w = quat_mult(q_est_prev, q_w); // equation (12)
 8008c04:	ed97 4a03 	vldr	s8, [r7, #12]
 8008c08:	edd7 4a04 	vldr	s9, [r7, #16]
 8008c0c:	ed97 5a05 	vldr	s10, [r7, #20]
 8008c10:	edd7 5a06 	vldr	s11, [r7, #24]
 8008c14:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8008c18:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8008c1c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008c20:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008c24:	eeb0 2a44 	vmov.f32	s4, s8
 8008c28:	eef0 2a64 	vmov.f32	s5, s9
 8008c2c:	eeb0 3a45 	vmov.f32	s6, s10
 8008c30:	eef0 3a65 	vmov.f32	s7, s11
 8008c34:	eeb0 0a46 	vmov.f32	s0, s12
 8008c38:	eef0 0a66 	vmov.f32	s1, s13
 8008c3c:	eeb0 1a47 	vmov.f32	s2, s14
 8008c40:	eef0 1a67 	vmov.f32	s3, s15
 8008c44:	f7ff fd42 	bl	80086cc <quat_mult>
 8008c48:	eeb0 6a40 	vmov.f32	s12, s0
 8008c4c:	eef0 6a60 	vmov.f32	s13, s1
 8008c50:	eeb0 7a41 	vmov.f32	s14, s2
 8008c54:	eef0 7a61 	vmov.f32	s15, s3
 8008c58:	ed87 6a03 	vstr	s12, [r7, #12]
 8008c5c:	edc7 6a04 	vstr	s13, [r7, #16]
 8008c60:	ed87 7a05 	vstr	s14, [r7, #20]
 8008c64:	edc7 7a06 	vstr	s15, [r7, #24]

	// quat_scalar(&q_w, deltaT);             // eq (13) integrates the angles velocity to position
	// quat_add(&q_w, q_w, q_est_prev);       // addition part of equation (13)

	// Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
	F_g[0] = 2 * (q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 8008c68:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008c6c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008c70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c74:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8008c78:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c84:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008c88:	edd7 7a08 	vldr	s15, [r7, #32]
 8008c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c90:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	F_g[1] = 2 * (q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3 * q_est_prev.q4) - q_a.q3;
 8008c94:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008c98:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008c9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ca0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8008ca4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cb0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008cb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cbc:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	F_g[2] = 2 * (0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 8008cc0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008cc4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ccc:	ee17 0a90 	vmov	r0, s15
 8008cd0:	f7f7 fc3a 	bl	8000548 <__aeabi_f2d>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	f04f 0000 	mov.w	r0, #0
 8008cdc:	49a1      	ldr	r1, [pc, #644]	; (8008f64 <Madgwick_imu+0x458>)
 8008cde:	f7f7 fad3 	bl	8000288 <__aeabi_dsub>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4614      	mov	r4, r2
 8008ce8:	461d      	mov	r5, r3
 8008cea:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008cee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf6:	ee17 0a90 	vmov	r0, s15
 8008cfa:	f7f7 fc25 	bl	8000548 <__aeabi_f2d>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4620      	mov	r0, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	f7f7 fabf 	bl	8000288 <__aeabi_dsub>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4610      	mov	r0, r2
 8008d10:	4619      	mov	r1, r3
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	f7f7 fab9 	bl	800028c <__adddf3>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4614      	mov	r4, r2
 8008d20:	461d      	mov	r5, r3
 8008d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7f7 fc0f 	bl	8000548 <__aeabi_f2d>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4620      	mov	r0, r4
 8008d30:	4629      	mov	r1, r5
 8008d32:	f7f7 faa9 	bl	8000288 <__aeabi_dsub>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	f7f7 ff33 	bl	8000ba8 <__aeabi_d2f>
 8008d42:	4603      	mov	r3, r0
 8008d44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	// Compute the Jacobian matrix, equation (26), for gravity
	J_g[0][0] = -2 * q_est_prev.q3;
 8008d48:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008d4c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8008d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d54:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	J_g[0][1] = 2 * q_est_prev.q4;
 8008d58:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008d5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008d60:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	J_g[0][2] = -2 * q_est_prev.q1;
 8008d64:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008d68:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8008d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d70:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	J_g[0][3] = 2 * q_est_prev.q2;
 8008d74:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008d78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008d7c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	J_g[1][0] = 2 * q_est_prev.q2;
 8008d80:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008d84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008d88:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	J_g[1][1] = 2 * q_est_prev.q1;
 8008d8c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008d90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008d94:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	J_g[1][2] = 2 * q_est_prev.q4;
 8008d98:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008d9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008da0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	J_g[1][3] = 2 * q_est_prev.q3;
 8008da4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008da8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008dac:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	J_g[2][0] = 0;
 8008db0:	f04f 0300 	mov.w	r3, #0
 8008db4:	67fb      	str	r3, [r7, #124]	; 0x7c
	J_g[2][1] = -4 * q_est_prev.q2;
 8008db6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008dba:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8008dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dc2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	J_g[2][2] = -4 * q_est_prev.q3;
 8008dc6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008dca:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8008dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dd2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	J_g[2][3] = 0;
 8008dd6:	f04f 0300 	mov.w	r3, #0
 8008dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	// now computer the gradient, equation (20), gradient = J_g'*F_g
	gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8008dde:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008de2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008dea:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8008dee:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008dfa:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8008dfe:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e0a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8008e0e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008e12:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e1a:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8008e1e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e2a:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8008e2e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e3a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8008e3e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8008e42:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008e46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e4a:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8008e4e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e5a:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8008e5e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e6a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	gradient.q4 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 8008e6e:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8008e72:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008e76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e7a:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8008e7e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008e82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e8a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8008e8e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e9a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Normalize the gradient, equation (44)
	quat_Normalization(&gradient);
 8008e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff fded 	bl	8008a82 <quat_Normalization>
	// Combining
	quat_scalar(&gradient, BETA);		 // multiply normalized gradient by beta
 8008ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008eac:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8008f68 <Madgwick_imu+0x45c>
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7ff fccd 	bl	8008850 <quat_scalar>
	quat_sub(&q_est_dot, q_w, gradient); // subtract above from q_w, the integrated gyro quaternion
 8008eb6:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8008eba:	edd7 4a0c 	vldr	s9, [r7, #48]	; 0x30
 8008ebe:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 8008ec2:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 8008ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eca:	edd7 6a04 	vldr	s13, [r7, #16]
 8008ece:	ed97 7a05 	vldr	s14, [r7, #20]
 8008ed2:	edd7 7a06 	vldr	s15, [r7, #24]
 8008ed6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008eda:	eeb0 2a44 	vmov.f32	s4, s8
 8008ede:	eef0 2a64 	vmov.f32	s5, s9
 8008ee2:	eeb0 3a45 	vmov.f32	s6, s10
 8008ee6:	eef0 3a65 	vmov.f32	s7, s11
 8008eea:	eeb0 0a46 	vmov.f32	s0, s12
 8008eee:	eef0 0a66 	vmov.f32	s1, s13
 8008ef2:	eeb0 1a47 	vmov.f32	s2, s14
 8008ef6:	eef0 1a67 	vmov.f32	s3, s15
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7ff fd2a 	bl	8008954 <quat_sub>
	quat_scalar(&q_est_dot, DELTA_T);
 8008f00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008f04:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008f6c <Madgwick_imu+0x460>
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7ff fca1 	bl	8008850 <quat_scalar>
	quat_add(q_est, q_est_prev, q_est_dot); // Integrate orientation rate to find position
 8008f0e:	ed97 4a0f 	vldr	s8, [r7, #60]	; 0x3c
 8008f12:	edd7 4a10 	vldr	s9, [r7, #64]	; 0x40
 8008f16:	ed97 5a11 	vldr	s10, [r7, #68]	; 0x44
 8008f1a:	edd7 5a12 	vldr	s11, [r7, #72]	; 0x48
 8008f1e:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8008f22:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8008f26:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008f2a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008f2e:	eeb0 2a44 	vmov.f32	s4, s8
 8008f32:	eef0 2a64 	vmov.f32	s5, s9
 8008f36:	eeb0 3a45 	vmov.f32	s6, s10
 8008f3a:	eef0 3a65 	vmov.f32	s7, s11
 8008f3e:	eeb0 0a46 	vmov.f32	s0, s12
 8008f42:	eef0 0a66 	vmov.f32	s1, s13
 8008f46:	eeb0 1a47 	vmov.f32	s2, s14
 8008f4a:	eef0 1a67 	vmov.f32	s3, s15
 8008f4e:	6838      	ldr	r0, [r7, #0]
 8008f50:	f7ff fcb2 	bl	80088b8 <quat_add>
	quat_Normalization(q_est);				 // normalize the orientation of the estimate
 8008f54:	6838      	ldr	r0, [r7, #0]
 8008f56:	f7ff fd94 	bl	8008a82 <quat_Normalization>
 8008f5a:	e000      	b.n	8008f5e <Madgwick_imu+0x452>
		return;
 8008f5c:	bf00      	nop
											 //(shown in diagram, plus always use unit quaternions for orientation)
}
 8008f5e:	37b0      	adds	r7, #176	; 0xb0
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bdb0      	pop	{r4, r5, r7, pc}
 8008f64:	3fe00000 	.word	0x3fe00000
 8008f68:	3d27ef9e 	.word	0x3d27ef9e
 8008f6c:	3b03126f 	.word	0x3b03126f

08008f70 <Quat2Angle>:
void Quat2Angle(Quaternion_t q, Euler_t *Angle)
{
 8008f70:	b5b0      	push	{r4, r5, r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	eeb0 6a40 	vmov.f32	s12, s0
 8008f7a:	eef0 6a60 	vmov.f32	s13, s1
 8008f7e:	eeb0 7a41 	vmov.f32	s14, s2
 8008f82:	eef0 7a61 	vmov.f32	s15, s3
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	ed87 6a02 	vstr	s12, [r7, #8]
 8008f8c:	edc7 6a03 	vstr	s13, [r7, #12]
 8008f90:	ed87 7a04 	vstr	s14, [r7, #16]
 8008f94:	edc7 7a05 	vstr	s15, [r7, #20]
	Angle->roll		= atan2(2*(q.q1*q.q2 + q.q3*q.q4),q.q1*q.q1 - q.q2*q.q2 - q.q3*q.q3 + q.q4*q.q4);
 8008f98:	ed97 7a02 	vldr	s14, [r7, #8]
 8008f9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fa4:	edd7 6a04 	vldr	s13, [r7, #16]
 8008fa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008fb8:	ee17 0a90 	vmov	r0, s15
 8008fbc:	f7f7 fac4 	bl	8000548 <__aeabi_f2d>
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	ed97 7a02 	vldr	s14, [r7, #8]
 8008fc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8008fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fd0:	edd7 6a03 	vldr	s13, [r7, #12]
 8008fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008fe0:	edd7 6a04 	vldr	s13, [r7, #16]
 8008fe4:	edd7 7a04 	vldr	s15, [r7, #16]
 8008fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008ff0:	edd7 6a05 	vldr	s13, [r7, #20]
 8008ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009000:	ee17 0a90 	vmov	r0, s15
 8009004:	f7f7 faa0 	bl	8000548 <__aeabi_f2d>
 8009008:	4602      	mov	r2, r0
 800900a:	460b      	mov	r3, r1
 800900c:	ec43 2b11 	vmov	d1, r2, r3
 8009010:	ec45 4b10 	vmov	d0, r4, r5
 8009014:	f000 fff2 	bl	8009ffc <atan2>
 8009018:	ec53 2b10 	vmov	r2, r3, d0
 800901c:	4610      	mov	r0, r2
 800901e:	4619      	mov	r1, r3
 8009020:	f7f7 fdc2 	bl	8000ba8 <__aeabi_d2f>
 8009024:	4602      	mov	r2, r0
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	601a      	str	r2, [r3, #0]
	Angle->pitch	= asin(2*(q.q1*q.q3 - q.q2*q.q4));
 800902a:	ed97 7a02 	vldr	s14, [r7, #8]
 800902e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009036:	edd7 6a03 	vldr	s13, [r7, #12]
 800903a:	edd7 7a05 	vldr	s15, [r7, #20]
 800903e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009046:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800904a:	ee17 0a90 	vmov	r0, s15
 800904e:	f7f7 fa7b 	bl	8000548 <__aeabi_f2d>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	ec43 2b10 	vmov	d0, r2, r3
 800905a:	f000 ff9b 	bl	8009f94 <asin>
 800905e:	ec53 2b10 	vmov	r2, r3, d0
 8009062:	4610      	mov	r0, r2
 8009064:	4619      	mov	r1, r3
 8009066:	f7f7 fd9f 	bl	8000ba8 <__aeabi_d2f>
 800906a:	4602      	mov	r2, r0
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	605a      	str	r2, [r3, #4]
	Angle->yaw		= atan2(2*(q.q1*q.q4 + q.q2*q.q3),q.q1*q.q1 + q.q2*q.q2 - q.q3*q.q3 - q.q4*q.q4);
 8009070:	ed97 7a02 	vldr	s14, [r7, #8]
 8009074:	edd7 7a05 	vldr	s15, [r7, #20]
 8009078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800907c:	edd7 6a03 	vldr	s13, [r7, #12]
 8009080:	edd7 7a04 	vldr	s15, [r7, #16]
 8009084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800908c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009090:	ee17 0a90 	vmov	r0, s15
 8009094:	f7f7 fa58 	bl	8000548 <__aeabi_f2d>
 8009098:	4604      	mov	r4, r0
 800909a:	460d      	mov	r5, r1
 800909c:	ed97 7a02 	vldr	s14, [r7, #8]
 80090a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80090a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80090a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80090ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80090b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80090b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80090b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80090bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80090c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80090c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80090c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80090cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80090d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80090d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090d8:	ee17 0a90 	vmov	r0, s15
 80090dc:	f7f7 fa34 	bl	8000548 <__aeabi_f2d>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	ec43 2b11 	vmov	d1, r2, r3
 80090e8:	ec45 4b10 	vmov	d0, r4, r5
 80090ec:	f000 ff86 	bl	8009ffc <atan2>
 80090f0:	ec53 2b10 	vmov	r2, r3, d0
 80090f4:	4610      	mov	r0, r2
 80090f6:	4619      	mov	r1, r3
 80090f8:	f7f7 fd56 	bl	8000ba8 <__aeabi_d2f>
 80090fc:	4602      	mov	r2, r0
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	609a      	str	r2, [r3, #8]
	if(Angle->pitch == PI/2)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	4618      	mov	r0, r3
 8009108:	f7f7 fa1e 	bl	8000548 <__aeabi_f2d>
 800910c:	a34e      	add	r3, pc, #312	; (adr r3, 8009248 <Quat2Angle+0x2d8>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d026      	beq.n	800916a <Quat2Angle+0x1fa>
	{
		Angle->roll = 0;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f04f 0200 	mov.w	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
		Angle->yaw	= -2*atan2(q.q2,q.q1);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	4618      	mov	r0, r3
 8009128:	f7f7 fa0e 	bl	8000548 <__aeabi_f2d>
 800912c:	4604      	mov	r4, r0
 800912e:	460d      	mov	r5, r1
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	4618      	mov	r0, r3
 8009134:	f7f7 fa08 	bl	8000548 <__aeabi_f2d>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	ec43 2b11 	vmov	d1, r2, r3
 8009140:	ec45 4b10 	vmov	d0, r4, r5
 8009144:	f000 ff5a 	bl	8009ffc <atan2>
 8009148:	ec51 0b10 	vmov	r0, r1, d0
 800914c:	f04f 0200 	mov.w	r2, #0
 8009150:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009154:	f7f7 fa50 	bl	80005f8 <__aeabi_dmul>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4610      	mov	r0, r2
 800915e:	4619      	mov	r1, r3
 8009160:	f7f7 fd22 	bl	8000ba8 <__aeabi_d2f>
 8009164:	4602      	mov	r2, r0
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	609a      	str	r2, [r3, #8]
	}
	if(Angle->pitch == -PI/2)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	4618      	mov	r0, r3
 8009170:	f7f7 f9ea 	bl	8000548 <__aeabi_f2d>
 8009174:	a336      	add	r3, pc, #216	; (adr r3, 8009250 <Quat2Angle+0x2e0>)
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	f7f7 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d024      	beq.n	80091ce <Quat2Angle+0x25e>
	{
		Angle->roll = 0;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f04f 0200 	mov.w	r2, #0
 800918a:	601a      	str	r2, [r3, #0]
		Angle->yaw	= 2*atan2(q.q2,q.q1);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4618      	mov	r0, r3
 8009190:	f7f7 f9da 	bl	8000548 <__aeabi_f2d>
 8009194:	4604      	mov	r4, r0
 8009196:	460d      	mov	r5, r1
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	4618      	mov	r0, r3
 800919c:	f7f7 f9d4 	bl	8000548 <__aeabi_f2d>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	ec43 2b11 	vmov	d1, r2, r3
 80091a8:	ec45 4b10 	vmov	d0, r4, r5
 80091ac:	f000 ff26 	bl	8009ffc <atan2>
 80091b0:	ec51 0b10 	vmov	r0, r1, d0
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	f7f7 f868 	bl	800028c <__adddf3>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4610      	mov	r0, r2
 80091c2:	4619      	mov	r1, r3
 80091c4:	f7f7 fcf0 	bl	8000ba8 <__aeabi_d2f>
 80091c8:	4602      	mov	r2, r0
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	609a      	str	r2, [r3, #8]
	}
	Angle->roll 	*= RAD_TO_DEG;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7f7 f9b8 	bl	8000548 <__aeabi_f2d>
 80091d8:	a31f      	add	r3, pc, #124	; (adr r3, 8009258 <Quat2Angle+0x2e8>)
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	f7f7 fa0b 	bl	80005f8 <__aeabi_dmul>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	f7f7 fcdd 	bl	8000ba8 <__aeabi_d2f>
 80091ee:	4602      	mov	r2, r0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	601a      	str	r2, [r3, #0]
	Angle->pitch 	*= RAD_TO_DEG;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7f7 f9a5 	bl	8000548 <__aeabi_f2d>
 80091fe:	a316      	add	r3, pc, #88	; (adr r3, 8009258 <Quat2Angle+0x2e8>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f7f7 f9f8 	bl	80005f8 <__aeabi_dmul>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	4610      	mov	r0, r2
 800920e:	4619      	mov	r1, r3
 8009210:	f7f7 fcca 	bl	8000ba8 <__aeabi_d2f>
 8009214:	4602      	mov	r2, r0
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	605a      	str	r2, [r3, #4]
	Angle->yaw 		*= RAD_TO_DEG;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	4618      	mov	r0, r3
 8009220:	f7f7 f992 	bl	8000548 <__aeabi_f2d>
 8009224:	a30c      	add	r3, pc, #48	; (adr r3, 8009258 <Quat2Angle+0x2e8>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f7f7 f9e5 	bl	80005f8 <__aeabi_dmul>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	4610      	mov	r0, r2
 8009234:	4619      	mov	r1, r3
 8009236:	f7f7 fcb7 	bl	8000ba8 <__aeabi_d2f>
 800923a:	4602      	mov	r2, r0
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	609a      	str	r2, [r3, #8]
}
 8009240:	bf00      	nop
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bdb0      	pop	{r4, r5, r7, pc}
 8009248:	54442d11 	.word	0x54442d11
 800924c:	3ff921fb 	.word	0x3ff921fb
 8009250:	54442d11 	.word	0x54442d11
 8009254:	bff921fb 	.word	0xbff921fb
 8009258:	1a6394b6 	.word	0x1a6394b6
 800925c:	404ca5dc 	.word	0x404ca5dc

08009260 <OffsetAngle>:
void OffsetAngle(Euler_t *Angle, Euler_t Offset)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	eef0 6a40 	vmov.f32	s13, s0
 800926c:	eeb0 7a60 	vmov.f32	s14, s1
 8009270:	eef0 7a41 	vmov.f32	s15, s2
 8009274:	edc7 6a00 	vstr	s13, [r7]
 8009278:	ed87 7a01 	vstr	s14, [r7, #4]
 800927c:	edc7 7a02 	vstr	s15, [r7, #8]
	Angle->roll		+= Offset.roll;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	ed93 7a00 	vldr	s14, [r3]
 8009286:	edd7 7a00 	vldr	s15, [r7]
 800928a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	edc3 7a00 	vstr	s15, [r3]
	Angle->pitch	+= Offset.pitch;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	ed93 7a01 	vldr	s14, [r3, #4]
 800929a:	edd7 7a01 	vldr	s15, [r7, #4]
 800929e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	edc3 7a01 	vstr	s15, [r3, #4]
	Angle->yaw		+= Offset.yaw;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80092ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80092b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80092bc:	bf00      	nop
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <Lowpass4MPU>:
void Lowpass4MPU(MPU6050_t input,MPU6050_t *output)
{
 80092c8:	b084      	sub	sp, #16
 80092ca:	b490      	push	{r4, r7}
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	f107 0408 	add.w	r4, r7, #8
 80092d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	static float ePow_Accel = 1-exp(-DELTA_T * 2 * PI * 2);
//	float ePow_Gyro 	=	1-exp(-DELTA_T * 2 * PI * 1.5);
//	float ePow_Magn	= 1-exp(-DELTA_T * 2 * PI * 1);
	
	output->Ax += (input.Ax - output->Ax) * ePow_Accel;
 80092d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80092dc:	edd7 6a04 	vldr	s13, [r7, #16]
 80092e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80092e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80092ea:	4b24      	ldr	r3, [pc, #144]	; (800937c <Lowpass4MPU+0xb4>)
 80092ec:	edd3 7a00 	vldr	s15, [r3]
 80092f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092fa:	edc3 7a02 	vstr	s15, [r3, #8]
	output->Ay += (input.Ay - output->Ay) * ePow_Accel;
 80092fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009300:	ed93 7a03 	vldr	s14, [r3, #12]
 8009304:	edd7 6a05 	vldr	s13, [r7, #20]
 8009308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800930a:	edd3 7a03 	vldr	s15, [r3, #12]
 800930e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009312:	4b1a      	ldr	r3, [pc, #104]	; (800937c <Lowpass4MPU+0xb4>)
 8009314:	edd3 7a00 	vldr	s15, [r3]
 8009318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800931c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009322:	edc3 7a03 	vstr	s15, [r3, #12]
	output->Az += (input.Az - output->Az) * ePow_Accel;
 8009326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009328:	ed93 7a04 	vldr	s14, [r3, #16]
 800932c:	edd7 6a06 	vldr	s13, [r7, #24]
 8009330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009332:	edd3 7a04 	vldr	s15, [r3, #16]
 8009336:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800933a:	4b10      	ldr	r3, [pc, #64]	; (800937c <Lowpass4MPU+0xb4>)
 800933c:	edd3 7a00 	vldr	s15, [r3]
 8009340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800934a:	edc3 7a04 	vstr	s15, [r3, #16]
//	
//	output->Mx += (input.Mx - output->Mx) * ePow_Magn;
//	output->My += (input.My - output->My) * ePow_Magn;
//	output->Mz += (input.Mz - output->Mz) * ePow_Magn;
	
	output->Gx = input.Gx;
 800934e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009352:	61da      	str	r2, [r3, #28]
	output->Gy = input.Gy;
 8009354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009358:	621a      	str	r2, [r3, #32]
	output->Gz = input.Gz;
 800935a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800935c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935e:	625a      	str	r2, [r3, #36]	; 0x24
	
	output->Mx = input.Mx;
 8009360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009364:	631a      	str	r2, [r3, #48]	; 0x30
	output->My = input.My;
 8009366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800936a:	635a      	str	r2, [r3, #52]	; 0x34
	output->Mz = input.Mz;
 800936c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800936e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009370:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009372:	bf00      	nop
 8009374:	46bd      	mov	sp, r7
 8009376:	bc90      	pop	{r4, r7}
 8009378:	b004      	add	sp, #16
 800937a:	4770      	bx	lr
 800937c:	2000013c 	.word	0x2000013c

08009380 <MPU2Angle>:
void MPU2Angle(MPU6050_t DataStruct, Euler_t *Angle)
{
 8009380:	b084      	sub	sp, #16
 8009382:	b5b0      	push	{r4, r5, r7, lr}
 8009384:	af00      	add	r7, sp, #0
 8009386:	f107 0410 	add.w	r4, r7, #16
 800938a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Angle->roll 	= RAD_TO_DEG*atan2(DataStruct.Ay, DataStruct.Az);
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	4618      	mov	r0, r3
 8009392:	f7f7 f8d9 	bl	8000548 <__aeabi_f2d>
 8009396:	4604      	mov	r4, r0
 8009398:	460d      	mov	r5, r1
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	4618      	mov	r0, r3
 800939e:	f7f7 f8d3 	bl	8000548 <__aeabi_f2d>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	ec43 2b11 	vmov	d1, r2, r3
 80093aa:	ec45 4b10 	vmov	d0, r4, r5
 80093ae:	f000 fe25 	bl	8009ffc <atan2>
 80093b2:	ec51 0b10 	vmov	r0, r1, d0
 80093b6:	a32c      	add	r3, pc, #176	; (adr r3, 8009468 <MPU2Angle+0xe8>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7f7 f91c 	bl	80005f8 <__aeabi_dmul>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4610      	mov	r0, r2
 80093c6:	4619      	mov	r1, r3
 80093c8:	f7f7 fbee 	bl	8000ba8 <__aeabi_d2f>
 80093cc:	4602      	mov	r2, r0
 80093ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093d0:	601a      	str	r2, [r3, #0]
	Angle->pitch 	= RAD_TO_DEG*atan2(-DataStruct.Ax, sqrt(DataStruct.Ay*DataStruct.Ay + DataStruct.Az*DataStruct.Az));
 80093d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80093d6:	eef1 7a67 	vneg.f32	s15, s15
 80093da:	ee17 3a90 	vmov	r3, s15
 80093de:	4618      	mov	r0, r3
 80093e0:	f7f7 f8b2 	bl	8000548 <__aeabi_f2d>
 80093e4:	4604      	mov	r4, r0
 80093e6:	460d      	mov	r5, r1
 80093e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80093ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80093f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093f4:	edd7 6a08 	vldr	s13, [r7, #32]
 80093f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80093fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009404:	ee17 0a90 	vmov	r0, s15
 8009408:	f7f7 f89e 	bl	8000548 <__aeabi_f2d>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	ec43 2b10 	vmov	d0, r2, r3
 8009414:	f000 feac 	bl	800a170 <sqrt>
 8009418:	eeb0 7a40 	vmov.f32	s14, s0
 800941c:	eef0 7a60 	vmov.f32	s15, s1
 8009420:	eeb0 1a47 	vmov.f32	s2, s14
 8009424:	eef0 1a67 	vmov.f32	s3, s15
 8009428:	ec45 4b10 	vmov	d0, r4, r5
 800942c:	f000 fde6 	bl	8009ffc <atan2>
 8009430:	ec51 0b10 	vmov	r0, r1, d0
 8009434:	a30c      	add	r3, pc, #48	; (adr r3, 8009468 <MPU2Angle+0xe8>)
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	f7f7 f8dd 	bl	80005f8 <__aeabi_dmul>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4610      	mov	r0, r2
 8009444:	4619      	mov	r1, r3
 8009446:	f7f7 fbaf 	bl	8000ba8 <__aeabi_d2f>
 800944a:	4602      	mov	r2, r0
 800944c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800944e:	605a      	str	r2, [r3, #4]
	Angle->yaw		= 0;
 8009450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009452:	f04f 0200 	mov.w	r2, #0
 8009456:	609a      	str	r2, [r3, #8]
}
 8009458:	bf00      	nop
 800945a:	46bd      	mov	sp, r7
 800945c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009460:	b004      	add	sp, #16
 8009462:	4770      	bx	lr
 8009464:	f3af 8000 	nop.w
 8009468:	1a6394b6 	.word	0x1a6394b6
 800946c:	404ca5dc 	.word	0x404ca5dc

08009470 <setupESC>:
void setupESC(TIM_HandleTypeDef *HTIMx)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(HTIMx);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7fb fcaf 	bl	8004ddc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_1);
 800947e:	2100      	movs	r1, #0
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7fb fd75 	bl	8004f70 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_1, 20000 * 0.04);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800948e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_2);
 8009490:	2104      	movs	r1, #4
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7fb fd6c 	bl	8004f70 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_2, 20000 * 0.04);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80094a0:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_3);
 80094a2:	2108      	movs	r1, #8
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7fb fd63 	bl	8004f70 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_3, 20000 * 0.04);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f44f 7248 	mov.w	r2, #800	; 0x320
 80094b2:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_4);
 80094b4:	210c      	movs	r1, #12
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7fb fd5a 	bl	8004f70 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_4, 20000 * 0.04);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80094c4:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(2000);
 80094c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80094ca:	f7f8 ff71 	bl	80023b0 <HAL_Delay>
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <ESC_Control>:
void ESC_Control(TIM_HandleTypeDef *HTIMx, uint16_t Duty1,uint16_t Duty2,uint16_t Duty3,uint16_t Duty4)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b085      	sub	sp, #20
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	4608      	mov	r0, r1
 80094e0:	4611      	mov	r1, r2
 80094e2:	461a      	mov	r2, r3
 80094e4:	4603      	mov	r3, r0
 80094e6:	817b      	strh	r3, [r7, #10]
 80094e8:	460b      	mov	r3, r1
 80094ea:	813b      	strh	r3, [r7, #8]
 80094ec:	4613      	mov	r3, r2
 80094ee:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_1, Duty1); // 1000 to 2000
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	897a      	ldrh	r2, [r7, #10]
 80094f6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_2, Duty2); // 1000 to 2000
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	893a      	ldrh	r2, [r7, #8]
 80094fe:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_3, Duty3); // 1000 to 2000
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	88fa      	ldrh	r2, [r7, #6]
 8009506:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_4, Duty4); // 1000 to 2000
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	8b3a      	ldrh	r2, [r7, #24]
 800950e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009510:	bf00      	nop
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	0000      	movs	r0, r0
	...

08009520 <Lowpass>:
void Lowpass(float in,Lowpass_t *filter, float iCutOffFrequency)
{	
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	ed87 0a03 	vstr	s0, [r7, #12]
 800952a:	60b8      	str	r0, [r7, #8]
 800952c:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->ePow = (1-exp(-DELTA_T * 2 * PI * iCutOffFrequency));
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7f7 f809 	bl	8000548 <__aeabi_f2d>
 8009536:	a31d      	add	r3, pc, #116	; (adr r3, 80095ac <Lowpass+0x8c>)
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	f7f7 f85c 	bl	80005f8 <__aeabi_dmul>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	ec43 2b17 	vmov	d7, r2, r3
 8009548:	eeb0 0a47 	vmov.f32	s0, s14
 800954c:	eef0 0a67 	vmov.f32	s1, s15
 8009550:	f000 fd56 	bl	800a000 <exp>
 8009554:	ec53 2b10 	vmov	r2, r3, d0
 8009558:	f04f 0000 	mov.w	r0, #0
 800955c:	4912      	ldr	r1, [pc, #72]	; (80095a8 <Lowpass+0x88>)
 800955e:	f7f6 fe93 	bl	8000288 <__aeabi_dsub>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4610      	mov	r0, r2
 8009568:	4619      	mov	r1, r3
 800956a:	f7f7 fb1d 	bl	8000ba8 <__aeabi_d2f>
 800956e:	4602      	mov	r2, r0
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	605a      	str	r2, [r3, #4]
	filter->out += (in - filter->out) * filter->ePow;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	ed93 7a00 	vldr	s14, [r3]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	edd3 7a00 	vldr	s15, [r3]
 8009580:	edd7 6a03 	vldr	s13, [r7, #12]
 8009584:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	edd3 7a01 	vldr	s15, [r3, #4]
 800958e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	edc3 7a00 	vstr	s15, [r3]
}
 800959c:	bf00      	nop
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	f3af 8000 	nop.w
 80095a8:	3ff00000 	.word	0x3ff00000
 80095ac:	b68b71bc 	.word	0xb68b71bc
 80095b0:	bf89bc65 	.word	0xbf89bc65

080095b4 <compute_control>:
void compute_control(double x[6], double K[4][6], double u[4])
{
 80095b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095b6:	b089      	sub	sp, #36	; 0x24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
	int m = 4, n = 6 ;
 80095c0:	2304      	movs	r3, #4
 80095c2:	617b      	str	r3, [r7, #20]
 80095c4:	2306      	movs	r3, #6
 80095c6:	613b      	str	r3, [r7, #16]
  // Compute u = -K * x
  for (int i = 0; i < m; i++) {
 80095c8:	2300      	movs	r3, #0
 80095ca:	61fb      	str	r3, [r7, #28]
 80095cc:	e039      	b.n	8009642 <compute_control+0x8e>
    for (int j = 0; j < n; j++) {
 80095ce:	2300      	movs	r3, #0
 80095d0:	61bb      	str	r3, [r7, #24]
 80095d2:	e02f      	b.n	8009634 <compute_control+0x80>
      u[i] += K[i][j] * x[j];
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	4413      	add	r3, r2
 80095dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80095e0:	69fa      	ldr	r2, [r7, #28]
 80095e2:	4613      	mov	r3, r2
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	4413      	add	r3, r2
 80095e8:	011b      	lsls	r3, r3, #4
 80095ea:	461a      	mov	r2, r3
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	441a      	add	r2, r3
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	4413      	add	r3, r2
 80095f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	00db      	lsls	r3, r3, #3
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	4413      	add	r3, r2
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f6 fff7 	bl	80005f8 <__aeabi_dmul>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4610      	mov	r0, r2
 8009610:	4619      	mov	r1, r3
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	00db      	lsls	r3, r3, #3
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	18d6      	adds	r6, r2, r3
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	4620      	mov	r0, r4
 8009620:	4629      	mov	r1, r5
 8009622:	f7f6 fe33 	bl	800028c <__adddf3>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	e9c6 2300 	strd	r2, r3, [r6]
    for (int j = 0; j < n; j++) {
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	3301      	adds	r3, #1
 8009632:	61bb      	str	r3, [r7, #24]
 8009634:	69ba      	ldr	r2, [r7, #24]
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	429a      	cmp	r2, r3
 800963a:	dbcb      	blt.n	80095d4 <compute_control+0x20>
  for (int i = 0; i < m; i++) {
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	3301      	adds	r3, #1
 8009640:	61fb      	str	r3, [r7, #28]
 8009642:	69fa      	ldr	r2, [r7, #28]
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	429a      	cmp	r2, r3
 8009648:	dbc1      	blt.n	80095ce <compute_control+0x1a>
    }
  }
}
 800964a:	bf00      	nop
 800964c:	bf00      	nop
 800964e:	3724      	adds	r7, #36	; 0x24
 8009650:	46bd      	mov	sp, r7
 8009652:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009654 <__errno>:
 8009654:	4b01      	ldr	r3, [pc, #4]	; (800965c <__errno+0x8>)
 8009656:	6818      	ldr	r0, [r3, #0]
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	20000140 	.word	0x20000140

08009660 <__libc_init_array>:
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	4d0d      	ldr	r5, [pc, #52]	; (8009698 <__libc_init_array+0x38>)
 8009664:	4c0d      	ldr	r4, [pc, #52]	; (800969c <__libc_init_array+0x3c>)
 8009666:	1b64      	subs	r4, r4, r5
 8009668:	10a4      	asrs	r4, r4, #2
 800966a:	2600      	movs	r6, #0
 800966c:	42a6      	cmp	r6, r4
 800966e:	d109      	bne.n	8009684 <__libc_init_array+0x24>
 8009670:	4d0b      	ldr	r5, [pc, #44]	; (80096a0 <__libc_init_array+0x40>)
 8009672:	4c0c      	ldr	r4, [pc, #48]	; (80096a4 <__libc_init_array+0x44>)
 8009674:	f002 fa5e 	bl	800bb34 <_init>
 8009678:	1b64      	subs	r4, r4, r5
 800967a:	10a4      	asrs	r4, r4, #2
 800967c:	2600      	movs	r6, #0
 800967e:	42a6      	cmp	r6, r4
 8009680:	d105      	bne.n	800968e <__libc_init_array+0x2e>
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	f855 3b04 	ldr.w	r3, [r5], #4
 8009688:	4798      	blx	r3
 800968a:	3601      	adds	r6, #1
 800968c:	e7ee      	b.n	800966c <__libc_init_array+0xc>
 800968e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009692:	4798      	blx	r3
 8009694:	3601      	adds	r6, #1
 8009696:	e7f2      	b.n	800967e <__libc_init_array+0x1e>
 8009698:	0800c1e8 	.word	0x0800c1e8
 800969c:	0800c1e8 	.word	0x0800c1e8
 80096a0:	0800c1e8 	.word	0x0800c1e8
 80096a4:	0800c1ec 	.word	0x0800c1ec

080096a8 <memcpy>:
 80096a8:	440a      	add	r2, r1
 80096aa:	4291      	cmp	r1, r2
 80096ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80096b0:	d100      	bne.n	80096b4 <memcpy+0xc>
 80096b2:	4770      	bx	lr
 80096b4:	b510      	push	{r4, lr}
 80096b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096be:	4291      	cmp	r1, r2
 80096c0:	d1f9      	bne.n	80096b6 <memcpy+0xe>
 80096c2:	bd10      	pop	{r4, pc}

080096c4 <memset>:
 80096c4:	4402      	add	r2, r0
 80096c6:	4603      	mov	r3, r0
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d100      	bne.n	80096ce <memset+0xa>
 80096cc:	4770      	bx	lr
 80096ce:	f803 1b01 	strb.w	r1, [r3], #1
 80096d2:	e7f9      	b.n	80096c8 <memset+0x4>

080096d4 <siprintf>:
 80096d4:	b40e      	push	{r1, r2, r3}
 80096d6:	b500      	push	{lr}
 80096d8:	b09c      	sub	sp, #112	; 0x70
 80096da:	ab1d      	add	r3, sp, #116	; 0x74
 80096dc:	9002      	str	r0, [sp, #8]
 80096de:	9006      	str	r0, [sp, #24]
 80096e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096e4:	4809      	ldr	r0, [pc, #36]	; (800970c <siprintf+0x38>)
 80096e6:	9107      	str	r1, [sp, #28]
 80096e8:	9104      	str	r1, [sp, #16]
 80096ea:	4909      	ldr	r1, [pc, #36]	; (8009710 <siprintf+0x3c>)
 80096ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f0:	9105      	str	r1, [sp, #20]
 80096f2:	6800      	ldr	r0, [r0, #0]
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	a902      	add	r1, sp, #8
 80096f8:	f000 f868 	bl	80097cc <_svfiprintf_r>
 80096fc:	9b02      	ldr	r3, [sp, #8]
 80096fe:	2200      	movs	r2, #0
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	b01c      	add	sp, #112	; 0x70
 8009704:	f85d eb04 	ldr.w	lr, [sp], #4
 8009708:	b003      	add	sp, #12
 800970a:	4770      	bx	lr
 800970c:	20000140 	.word	0x20000140
 8009710:	ffff0208 	.word	0xffff0208

08009714 <__ssputs_r>:
 8009714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009718:	688e      	ldr	r6, [r1, #8]
 800971a:	429e      	cmp	r6, r3
 800971c:	4682      	mov	sl, r0
 800971e:	460c      	mov	r4, r1
 8009720:	4690      	mov	r8, r2
 8009722:	461f      	mov	r7, r3
 8009724:	d838      	bhi.n	8009798 <__ssputs_r+0x84>
 8009726:	898a      	ldrh	r2, [r1, #12]
 8009728:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800972c:	d032      	beq.n	8009794 <__ssputs_r+0x80>
 800972e:	6825      	ldr	r5, [r4, #0]
 8009730:	6909      	ldr	r1, [r1, #16]
 8009732:	eba5 0901 	sub.w	r9, r5, r1
 8009736:	6965      	ldr	r5, [r4, #20]
 8009738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800973c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009740:	3301      	adds	r3, #1
 8009742:	444b      	add	r3, r9
 8009744:	106d      	asrs	r5, r5, #1
 8009746:	429d      	cmp	r5, r3
 8009748:	bf38      	it	cc
 800974a:	461d      	movcc	r5, r3
 800974c:	0553      	lsls	r3, r2, #21
 800974e:	d531      	bpl.n	80097b4 <__ssputs_r+0xa0>
 8009750:	4629      	mov	r1, r5
 8009752:	f000 fb55 	bl	8009e00 <_malloc_r>
 8009756:	4606      	mov	r6, r0
 8009758:	b950      	cbnz	r0, 8009770 <__ssputs_r+0x5c>
 800975a:	230c      	movs	r3, #12
 800975c:	f8ca 3000 	str.w	r3, [sl]
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009766:	81a3      	strh	r3, [r4, #12]
 8009768:	f04f 30ff 	mov.w	r0, #4294967295
 800976c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009770:	6921      	ldr	r1, [r4, #16]
 8009772:	464a      	mov	r2, r9
 8009774:	f7ff ff98 	bl	80096a8 <memcpy>
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800977e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009782:	81a3      	strh	r3, [r4, #12]
 8009784:	6126      	str	r6, [r4, #16]
 8009786:	6165      	str	r5, [r4, #20]
 8009788:	444e      	add	r6, r9
 800978a:	eba5 0509 	sub.w	r5, r5, r9
 800978e:	6026      	str	r6, [r4, #0]
 8009790:	60a5      	str	r5, [r4, #8]
 8009792:	463e      	mov	r6, r7
 8009794:	42be      	cmp	r6, r7
 8009796:	d900      	bls.n	800979a <__ssputs_r+0x86>
 8009798:	463e      	mov	r6, r7
 800979a:	6820      	ldr	r0, [r4, #0]
 800979c:	4632      	mov	r2, r6
 800979e:	4641      	mov	r1, r8
 80097a0:	f000 faa8 	bl	8009cf4 <memmove>
 80097a4:	68a3      	ldr	r3, [r4, #8]
 80097a6:	1b9b      	subs	r3, r3, r6
 80097a8:	60a3      	str	r3, [r4, #8]
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	4433      	add	r3, r6
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	2000      	movs	r0, #0
 80097b2:	e7db      	b.n	800976c <__ssputs_r+0x58>
 80097b4:	462a      	mov	r2, r5
 80097b6:	f000 fb97 	bl	8009ee8 <_realloc_r>
 80097ba:	4606      	mov	r6, r0
 80097bc:	2800      	cmp	r0, #0
 80097be:	d1e1      	bne.n	8009784 <__ssputs_r+0x70>
 80097c0:	6921      	ldr	r1, [r4, #16]
 80097c2:	4650      	mov	r0, sl
 80097c4:	f000 fab0 	bl	8009d28 <_free_r>
 80097c8:	e7c7      	b.n	800975a <__ssputs_r+0x46>
	...

080097cc <_svfiprintf_r>:
 80097cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d0:	4698      	mov	r8, r3
 80097d2:	898b      	ldrh	r3, [r1, #12]
 80097d4:	061b      	lsls	r3, r3, #24
 80097d6:	b09d      	sub	sp, #116	; 0x74
 80097d8:	4607      	mov	r7, r0
 80097da:	460d      	mov	r5, r1
 80097dc:	4614      	mov	r4, r2
 80097de:	d50e      	bpl.n	80097fe <_svfiprintf_r+0x32>
 80097e0:	690b      	ldr	r3, [r1, #16]
 80097e2:	b963      	cbnz	r3, 80097fe <_svfiprintf_r+0x32>
 80097e4:	2140      	movs	r1, #64	; 0x40
 80097e6:	f000 fb0b 	bl	8009e00 <_malloc_r>
 80097ea:	6028      	str	r0, [r5, #0]
 80097ec:	6128      	str	r0, [r5, #16]
 80097ee:	b920      	cbnz	r0, 80097fa <_svfiprintf_r+0x2e>
 80097f0:	230c      	movs	r3, #12
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	f04f 30ff 	mov.w	r0, #4294967295
 80097f8:	e0d1      	b.n	800999e <_svfiprintf_r+0x1d2>
 80097fa:	2340      	movs	r3, #64	; 0x40
 80097fc:	616b      	str	r3, [r5, #20]
 80097fe:	2300      	movs	r3, #0
 8009800:	9309      	str	r3, [sp, #36]	; 0x24
 8009802:	2320      	movs	r3, #32
 8009804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009808:	f8cd 800c 	str.w	r8, [sp, #12]
 800980c:	2330      	movs	r3, #48	; 0x30
 800980e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099b8 <_svfiprintf_r+0x1ec>
 8009812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009816:	f04f 0901 	mov.w	r9, #1
 800981a:	4623      	mov	r3, r4
 800981c:	469a      	mov	sl, r3
 800981e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009822:	b10a      	cbz	r2, 8009828 <_svfiprintf_r+0x5c>
 8009824:	2a25      	cmp	r2, #37	; 0x25
 8009826:	d1f9      	bne.n	800981c <_svfiprintf_r+0x50>
 8009828:	ebba 0b04 	subs.w	fp, sl, r4
 800982c:	d00b      	beq.n	8009846 <_svfiprintf_r+0x7a>
 800982e:	465b      	mov	r3, fp
 8009830:	4622      	mov	r2, r4
 8009832:	4629      	mov	r1, r5
 8009834:	4638      	mov	r0, r7
 8009836:	f7ff ff6d 	bl	8009714 <__ssputs_r>
 800983a:	3001      	adds	r0, #1
 800983c:	f000 80aa 	beq.w	8009994 <_svfiprintf_r+0x1c8>
 8009840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009842:	445a      	add	r2, fp
 8009844:	9209      	str	r2, [sp, #36]	; 0x24
 8009846:	f89a 3000 	ldrb.w	r3, [sl]
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 80a2 	beq.w	8009994 <_svfiprintf_r+0x1c8>
 8009850:	2300      	movs	r3, #0
 8009852:	f04f 32ff 	mov.w	r2, #4294967295
 8009856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800985a:	f10a 0a01 	add.w	sl, sl, #1
 800985e:	9304      	str	r3, [sp, #16]
 8009860:	9307      	str	r3, [sp, #28]
 8009862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009866:	931a      	str	r3, [sp, #104]	; 0x68
 8009868:	4654      	mov	r4, sl
 800986a:	2205      	movs	r2, #5
 800986c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009870:	4851      	ldr	r0, [pc, #324]	; (80099b8 <_svfiprintf_r+0x1ec>)
 8009872:	f7f6 fcb5 	bl	80001e0 <memchr>
 8009876:	9a04      	ldr	r2, [sp, #16]
 8009878:	b9d8      	cbnz	r0, 80098b2 <_svfiprintf_r+0xe6>
 800987a:	06d0      	lsls	r0, r2, #27
 800987c:	bf44      	itt	mi
 800987e:	2320      	movmi	r3, #32
 8009880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009884:	0711      	lsls	r1, r2, #28
 8009886:	bf44      	itt	mi
 8009888:	232b      	movmi	r3, #43	; 0x2b
 800988a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800988e:	f89a 3000 	ldrb.w	r3, [sl]
 8009892:	2b2a      	cmp	r3, #42	; 0x2a
 8009894:	d015      	beq.n	80098c2 <_svfiprintf_r+0xf6>
 8009896:	9a07      	ldr	r2, [sp, #28]
 8009898:	4654      	mov	r4, sl
 800989a:	2000      	movs	r0, #0
 800989c:	f04f 0c0a 	mov.w	ip, #10
 80098a0:	4621      	mov	r1, r4
 80098a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098a6:	3b30      	subs	r3, #48	; 0x30
 80098a8:	2b09      	cmp	r3, #9
 80098aa:	d94e      	bls.n	800994a <_svfiprintf_r+0x17e>
 80098ac:	b1b0      	cbz	r0, 80098dc <_svfiprintf_r+0x110>
 80098ae:	9207      	str	r2, [sp, #28]
 80098b0:	e014      	b.n	80098dc <_svfiprintf_r+0x110>
 80098b2:	eba0 0308 	sub.w	r3, r0, r8
 80098b6:	fa09 f303 	lsl.w	r3, r9, r3
 80098ba:	4313      	orrs	r3, r2
 80098bc:	9304      	str	r3, [sp, #16]
 80098be:	46a2      	mov	sl, r4
 80098c0:	e7d2      	b.n	8009868 <_svfiprintf_r+0x9c>
 80098c2:	9b03      	ldr	r3, [sp, #12]
 80098c4:	1d19      	adds	r1, r3, #4
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	9103      	str	r1, [sp, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	bfbb      	ittet	lt
 80098ce:	425b      	neglt	r3, r3
 80098d0:	f042 0202 	orrlt.w	r2, r2, #2
 80098d4:	9307      	strge	r3, [sp, #28]
 80098d6:	9307      	strlt	r3, [sp, #28]
 80098d8:	bfb8      	it	lt
 80098da:	9204      	strlt	r2, [sp, #16]
 80098dc:	7823      	ldrb	r3, [r4, #0]
 80098de:	2b2e      	cmp	r3, #46	; 0x2e
 80098e0:	d10c      	bne.n	80098fc <_svfiprintf_r+0x130>
 80098e2:	7863      	ldrb	r3, [r4, #1]
 80098e4:	2b2a      	cmp	r3, #42	; 0x2a
 80098e6:	d135      	bne.n	8009954 <_svfiprintf_r+0x188>
 80098e8:	9b03      	ldr	r3, [sp, #12]
 80098ea:	1d1a      	adds	r2, r3, #4
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	9203      	str	r2, [sp, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	bfb8      	it	lt
 80098f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80098f8:	3402      	adds	r4, #2
 80098fa:	9305      	str	r3, [sp, #20]
 80098fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099c8 <_svfiprintf_r+0x1fc>
 8009900:	7821      	ldrb	r1, [r4, #0]
 8009902:	2203      	movs	r2, #3
 8009904:	4650      	mov	r0, sl
 8009906:	f7f6 fc6b 	bl	80001e0 <memchr>
 800990a:	b140      	cbz	r0, 800991e <_svfiprintf_r+0x152>
 800990c:	2340      	movs	r3, #64	; 0x40
 800990e:	eba0 000a 	sub.w	r0, r0, sl
 8009912:	fa03 f000 	lsl.w	r0, r3, r0
 8009916:	9b04      	ldr	r3, [sp, #16]
 8009918:	4303      	orrs	r3, r0
 800991a:	3401      	adds	r4, #1
 800991c:	9304      	str	r3, [sp, #16]
 800991e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009922:	4826      	ldr	r0, [pc, #152]	; (80099bc <_svfiprintf_r+0x1f0>)
 8009924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009928:	2206      	movs	r2, #6
 800992a:	f7f6 fc59 	bl	80001e0 <memchr>
 800992e:	2800      	cmp	r0, #0
 8009930:	d038      	beq.n	80099a4 <_svfiprintf_r+0x1d8>
 8009932:	4b23      	ldr	r3, [pc, #140]	; (80099c0 <_svfiprintf_r+0x1f4>)
 8009934:	bb1b      	cbnz	r3, 800997e <_svfiprintf_r+0x1b2>
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	3307      	adds	r3, #7
 800993a:	f023 0307 	bic.w	r3, r3, #7
 800993e:	3308      	adds	r3, #8
 8009940:	9303      	str	r3, [sp, #12]
 8009942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009944:	4433      	add	r3, r6
 8009946:	9309      	str	r3, [sp, #36]	; 0x24
 8009948:	e767      	b.n	800981a <_svfiprintf_r+0x4e>
 800994a:	fb0c 3202 	mla	r2, ip, r2, r3
 800994e:	460c      	mov	r4, r1
 8009950:	2001      	movs	r0, #1
 8009952:	e7a5      	b.n	80098a0 <_svfiprintf_r+0xd4>
 8009954:	2300      	movs	r3, #0
 8009956:	3401      	adds	r4, #1
 8009958:	9305      	str	r3, [sp, #20]
 800995a:	4619      	mov	r1, r3
 800995c:	f04f 0c0a 	mov.w	ip, #10
 8009960:	4620      	mov	r0, r4
 8009962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009966:	3a30      	subs	r2, #48	; 0x30
 8009968:	2a09      	cmp	r2, #9
 800996a:	d903      	bls.n	8009974 <_svfiprintf_r+0x1a8>
 800996c:	2b00      	cmp	r3, #0
 800996e:	d0c5      	beq.n	80098fc <_svfiprintf_r+0x130>
 8009970:	9105      	str	r1, [sp, #20]
 8009972:	e7c3      	b.n	80098fc <_svfiprintf_r+0x130>
 8009974:	fb0c 2101 	mla	r1, ip, r1, r2
 8009978:	4604      	mov	r4, r0
 800997a:	2301      	movs	r3, #1
 800997c:	e7f0      	b.n	8009960 <_svfiprintf_r+0x194>
 800997e:	ab03      	add	r3, sp, #12
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	462a      	mov	r2, r5
 8009984:	4b0f      	ldr	r3, [pc, #60]	; (80099c4 <_svfiprintf_r+0x1f8>)
 8009986:	a904      	add	r1, sp, #16
 8009988:	4638      	mov	r0, r7
 800998a:	f3af 8000 	nop.w
 800998e:	1c42      	adds	r2, r0, #1
 8009990:	4606      	mov	r6, r0
 8009992:	d1d6      	bne.n	8009942 <_svfiprintf_r+0x176>
 8009994:	89ab      	ldrh	r3, [r5, #12]
 8009996:	065b      	lsls	r3, r3, #25
 8009998:	f53f af2c 	bmi.w	80097f4 <_svfiprintf_r+0x28>
 800999c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800999e:	b01d      	add	sp, #116	; 0x74
 80099a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a4:	ab03      	add	r3, sp, #12
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	462a      	mov	r2, r5
 80099aa:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <_svfiprintf_r+0x1f8>)
 80099ac:	a904      	add	r1, sp, #16
 80099ae:	4638      	mov	r0, r7
 80099b0:	f000 f87a 	bl	8009aa8 <_printf_i>
 80099b4:	e7eb      	b.n	800998e <_svfiprintf_r+0x1c2>
 80099b6:	bf00      	nop
 80099b8:	0800c0dc 	.word	0x0800c0dc
 80099bc:	0800c0e6 	.word	0x0800c0e6
 80099c0:	00000000 	.word	0x00000000
 80099c4:	08009715 	.word	0x08009715
 80099c8:	0800c0e2 	.word	0x0800c0e2

080099cc <_printf_common>:
 80099cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d0:	4616      	mov	r6, r2
 80099d2:	4699      	mov	r9, r3
 80099d4:	688a      	ldr	r2, [r1, #8]
 80099d6:	690b      	ldr	r3, [r1, #16]
 80099d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099dc:	4293      	cmp	r3, r2
 80099de:	bfb8      	it	lt
 80099e0:	4613      	movlt	r3, r2
 80099e2:	6033      	str	r3, [r6, #0]
 80099e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099e8:	4607      	mov	r7, r0
 80099ea:	460c      	mov	r4, r1
 80099ec:	b10a      	cbz	r2, 80099f2 <_printf_common+0x26>
 80099ee:	3301      	adds	r3, #1
 80099f0:	6033      	str	r3, [r6, #0]
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	0699      	lsls	r1, r3, #26
 80099f6:	bf42      	ittt	mi
 80099f8:	6833      	ldrmi	r3, [r6, #0]
 80099fa:	3302      	addmi	r3, #2
 80099fc:	6033      	strmi	r3, [r6, #0]
 80099fe:	6825      	ldr	r5, [r4, #0]
 8009a00:	f015 0506 	ands.w	r5, r5, #6
 8009a04:	d106      	bne.n	8009a14 <_printf_common+0x48>
 8009a06:	f104 0a19 	add.w	sl, r4, #25
 8009a0a:	68e3      	ldr	r3, [r4, #12]
 8009a0c:	6832      	ldr	r2, [r6, #0]
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	42ab      	cmp	r3, r5
 8009a12:	dc26      	bgt.n	8009a62 <_printf_common+0x96>
 8009a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a18:	1e13      	subs	r3, r2, #0
 8009a1a:	6822      	ldr	r2, [r4, #0]
 8009a1c:	bf18      	it	ne
 8009a1e:	2301      	movne	r3, #1
 8009a20:	0692      	lsls	r2, r2, #26
 8009a22:	d42b      	bmi.n	8009a7c <_printf_common+0xb0>
 8009a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a28:	4649      	mov	r1, r9
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	47c0      	blx	r8
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d01e      	beq.n	8009a70 <_printf_common+0xa4>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	68e5      	ldr	r5, [r4, #12]
 8009a36:	6832      	ldr	r2, [r6, #0]
 8009a38:	f003 0306 	and.w	r3, r3, #6
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	bf08      	it	eq
 8009a40:	1aad      	subeq	r5, r5, r2
 8009a42:	68a3      	ldr	r3, [r4, #8]
 8009a44:	6922      	ldr	r2, [r4, #16]
 8009a46:	bf0c      	ite	eq
 8009a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a4c:	2500      	movne	r5, #0
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	bfc4      	itt	gt
 8009a52:	1a9b      	subgt	r3, r3, r2
 8009a54:	18ed      	addgt	r5, r5, r3
 8009a56:	2600      	movs	r6, #0
 8009a58:	341a      	adds	r4, #26
 8009a5a:	42b5      	cmp	r5, r6
 8009a5c:	d11a      	bne.n	8009a94 <_printf_common+0xc8>
 8009a5e:	2000      	movs	r0, #0
 8009a60:	e008      	b.n	8009a74 <_printf_common+0xa8>
 8009a62:	2301      	movs	r3, #1
 8009a64:	4652      	mov	r2, sl
 8009a66:	4649      	mov	r1, r9
 8009a68:	4638      	mov	r0, r7
 8009a6a:	47c0      	blx	r8
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d103      	bne.n	8009a78 <_printf_common+0xac>
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295
 8009a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a78:	3501      	adds	r5, #1
 8009a7a:	e7c6      	b.n	8009a0a <_printf_common+0x3e>
 8009a7c:	18e1      	adds	r1, r4, r3
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	2030      	movs	r0, #48	; 0x30
 8009a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a86:	4422      	add	r2, r4
 8009a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a90:	3302      	adds	r3, #2
 8009a92:	e7c7      	b.n	8009a24 <_printf_common+0x58>
 8009a94:	2301      	movs	r3, #1
 8009a96:	4622      	mov	r2, r4
 8009a98:	4649      	mov	r1, r9
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	47c0      	blx	r8
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	d0e6      	beq.n	8009a70 <_printf_common+0xa4>
 8009aa2:	3601      	adds	r6, #1
 8009aa4:	e7d9      	b.n	8009a5a <_printf_common+0x8e>
	...

08009aa8 <_printf_i>:
 8009aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009aac:	7e0f      	ldrb	r7, [r1, #24]
 8009aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ab0:	2f78      	cmp	r7, #120	; 0x78
 8009ab2:	4691      	mov	r9, r2
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	469a      	mov	sl, r3
 8009aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009abe:	d807      	bhi.n	8009ad0 <_printf_i+0x28>
 8009ac0:	2f62      	cmp	r7, #98	; 0x62
 8009ac2:	d80a      	bhi.n	8009ada <_printf_i+0x32>
 8009ac4:	2f00      	cmp	r7, #0
 8009ac6:	f000 80d8 	beq.w	8009c7a <_printf_i+0x1d2>
 8009aca:	2f58      	cmp	r7, #88	; 0x58
 8009acc:	f000 80a3 	beq.w	8009c16 <_printf_i+0x16e>
 8009ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ad8:	e03a      	b.n	8009b50 <_printf_i+0xa8>
 8009ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ade:	2b15      	cmp	r3, #21
 8009ae0:	d8f6      	bhi.n	8009ad0 <_printf_i+0x28>
 8009ae2:	a101      	add	r1, pc, #4	; (adr r1, 8009ae8 <_printf_i+0x40>)
 8009ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ae8:	08009b41 	.word	0x08009b41
 8009aec:	08009b55 	.word	0x08009b55
 8009af0:	08009ad1 	.word	0x08009ad1
 8009af4:	08009ad1 	.word	0x08009ad1
 8009af8:	08009ad1 	.word	0x08009ad1
 8009afc:	08009ad1 	.word	0x08009ad1
 8009b00:	08009b55 	.word	0x08009b55
 8009b04:	08009ad1 	.word	0x08009ad1
 8009b08:	08009ad1 	.word	0x08009ad1
 8009b0c:	08009ad1 	.word	0x08009ad1
 8009b10:	08009ad1 	.word	0x08009ad1
 8009b14:	08009c61 	.word	0x08009c61
 8009b18:	08009b85 	.word	0x08009b85
 8009b1c:	08009c43 	.word	0x08009c43
 8009b20:	08009ad1 	.word	0x08009ad1
 8009b24:	08009ad1 	.word	0x08009ad1
 8009b28:	08009c83 	.word	0x08009c83
 8009b2c:	08009ad1 	.word	0x08009ad1
 8009b30:	08009b85 	.word	0x08009b85
 8009b34:	08009ad1 	.word	0x08009ad1
 8009b38:	08009ad1 	.word	0x08009ad1
 8009b3c:	08009c4b 	.word	0x08009c4b
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	1d1a      	adds	r2, r3, #4
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	602a      	str	r2, [r5, #0]
 8009b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b50:	2301      	movs	r3, #1
 8009b52:	e0a3      	b.n	8009c9c <_printf_i+0x1f4>
 8009b54:	6820      	ldr	r0, [r4, #0]
 8009b56:	6829      	ldr	r1, [r5, #0]
 8009b58:	0606      	lsls	r6, r0, #24
 8009b5a:	f101 0304 	add.w	r3, r1, #4
 8009b5e:	d50a      	bpl.n	8009b76 <_printf_i+0xce>
 8009b60:	680e      	ldr	r6, [r1, #0]
 8009b62:	602b      	str	r3, [r5, #0]
 8009b64:	2e00      	cmp	r6, #0
 8009b66:	da03      	bge.n	8009b70 <_printf_i+0xc8>
 8009b68:	232d      	movs	r3, #45	; 0x2d
 8009b6a:	4276      	negs	r6, r6
 8009b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b70:	485e      	ldr	r0, [pc, #376]	; (8009cec <_printf_i+0x244>)
 8009b72:	230a      	movs	r3, #10
 8009b74:	e019      	b.n	8009baa <_printf_i+0x102>
 8009b76:	680e      	ldr	r6, [r1, #0]
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b7e:	bf18      	it	ne
 8009b80:	b236      	sxthne	r6, r6
 8009b82:	e7ef      	b.n	8009b64 <_printf_i+0xbc>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	6820      	ldr	r0, [r4, #0]
 8009b88:	1d19      	adds	r1, r3, #4
 8009b8a:	6029      	str	r1, [r5, #0]
 8009b8c:	0601      	lsls	r1, r0, #24
 8009b8e:	d501      	bpl.n	8009b94 <_printf_i+0xec>
 8009b90:	681e      	ldr	r6, [r3, #0]
 8009b92:	e002      	b.n	8009b9a <_printf_i+0xf2>
 8009b94:	0646      	lsls	r6, r0, #25
 8009b96:	d5fb      	bpl.n	8009b90 <_printf_i+0xe8>
 8009b98:	881e      	ldrh	r6, [r3, #0]
 8009b9a:	4854      	ldr	r0, [pc, #336]	; (8009cec <_printf_i+0x244>)
 8009b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8009b9e:	bf0c      	ite	eq
 8009ba0:	2308      	moveq	r3, #8
 8009ba2:	230a      	movne	r3, #10
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009baa:	6865      	ldr	r5, [r4, #4]
 8009bac:	60a5      	str	r5, [r4, #8]
 8009bae:	2d00      	cmp	r5, #0
 8009bb0:	bfa2      	ittt	ge
 8009bb2:	6821      	ldrge	r1, [r4, #0]
 8009bb4:	f021 0104 	bicge.w	r1, r1, #4
 8009bb8:	6021      	strge	r1, [r4, #0]
 8009bba:	b90e      	cbnz	r6, 8009bc0 <_printf_i+0x118>
 8009bbc:	2d00      	cmp	r5, #0
 8009bbe:	d04d      	beq.n	8009c5c <_printf_i+0x1b4>
 8009bc0:	4615      	mov	r5, r2
 8009bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8009bca:	5dc7      	ldrb	r7, [r0, r7]
 8009bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bd0:	4637      	mov	r7, r6
 8009bd2:	42bb      	cmp	r3, r7
 8009bd4:	460e      	mov	r6, r1
 8009bd6:	d9f4      	bls.n	8009bc2 <_printf_i+0x11a>
 8009bd8:	2b08      	cmp	r3, #8
 8009bda:	d10b      	bne.n	8009bf4 <_printf_i+0x14c>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	07de      	lsls	r6, r3, #31
 8009be0:	d508      	bpl.n	8009bf4 <_printf_i+0x14c>
 8009be2:	6923      	ldr	r3, [r4, #16]
 8009be4:	6861      	ldr	r1, [r4, #4]
 8009be6:	4299      	cmp	r1, r3
 8009be8:	bfde      	ittt	le
 8009bea:	2330      	movle	r3, #48	; 0x30
 8009bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bf4:	1b52      	subs	r2, r2, r5
 8009bf6:	6122      	str	r2, [r4, #16]
 8009bf8:	f8cd a000 	str.w	sl, [sp]
 8009bfc:	464b      	mov	r3, r9
 8009bfe:	aa03      	add	r2, sp, #12
 8009c00:	4621      	mov	r1, r4
 8009c02:	4640      	mov	r0, r8
 8009c04:	f7ff fee2 	bl	80099cc <_printf_common>
 8009c08:	3001      	adds	r0, #1
 8009c0a:	d14c      	bne.n	8009ca6 <_printf_i+0x1fe>
 8009c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c10:	b004      	add	sp, #16
 8009c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c16:	4835      	ldr	r0, [pc, #212]	; (8009cec <_printf_i+0x244>)
 8009c18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c1c:	6829      	ldr	r1, [r5, #0]
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c24:	6029      	str	r1, [r5, #0]
 8009c26:	061d      	lsls	r5, r3, #24
 8009c28:	d514      	bpl.n	8009c54 <_printf_i+0x1ac>
 8009c2a:	07df      	lsls	r7, r3, #31
 8009c2c:	bf44      	itt	mi
 8009c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8009c32:	6023      	strmi	r3, [r4, #0]
 8009c34:	b91e      	cbnz	r6, 8009c3e <_printf_i+0x196>
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	f023 0320 	bic.w	r3, r3, #32
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	2310      	movs	r3, #16
 8009c40:	e7b0      	b.n	8009ba4 <_printf_i+0xfc>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	f043 0320 	orr.w	r3, r3, #32
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	2378      	movs	r3, #120	; 0x78
 8009c4c:	4828      	ldr	r0, [pc, #160]	; (8009cf0 <_printf_i+0x248>)
 8009c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c52:	e7e3      	b.n	8009c1c <_printf_i+0x174>
 8009c54:	0659      	lsls	r1, r3, #25
 8009c56:	bf48      	it	mi
 8009c58:	b2b6      	uxthmi	r6, r6
 8009c5a:	e7e6      	b.n	8009c2a <_printf_i+0x182>
 8009c5c:	4615      	mov	r5, r2
 8009c5e:	e7bb      	b.n	8009bd8 <_printf_i+0x130>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	6826      	ldr	r6, [r4, #0]
 8009c64:	6961      	ldr	r1, [r4, #20]
 8009c66:	1d18      	adds	r0, r3, #4
 8009c68:	6028      	str	r0, [r5, #0]
 8009c6a:	0635      	lsls	r5, r6, #24
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	d501      	bpl.n	8009c74 <_printf_i+0x1cc>
 8009c70:	6019      	str	r1, [r3, #0]
 8009c72:	e002      	b.n	8009c7a <_printf_i+0x1d2>
 8009c74:	0670      	lsls	r0, r6, #25
 8009c76:	d5fb      	bpl.n	8009c70 <_printf_i+0x1c8>
 8009c78:	8019      	strh	r1, [r3, #0]
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6123      	str	r3, [r4, #16]
 8009c7e:	4615      	mov	r5, r2
 8009c80:	e7ba      	b.n	8009bf8 <_printf_i+0x150>
 8009c82:	682b      	ldr	r3, [r5, #0]
 8009c84:	1d1a      	adds	r2, r3, #4
 8009c86:	602a      	str	r2, [r5, #0]
 8009c88:	681d      	ldr	r5, [r3, #0]
 8009c8a:	6862      	ldr	r2, [r4, #4]
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	4628      	mov	r0, r5
 8009c90:	f7f6 faa6 	bl	80001e0 <memchr>
 8009c94:	b108      	cbz	r0, 8009c9a <_printf_i+0x1f2>
 8009c96:	1b40      	subs	r0, r0, r5
 8009c98:	6060      	str	r0, [r4, #4]
 8009c9a:	6863      	ldr	r3, [r4, #4]
 8009c9c:	6123      	str	r3, [r4, #16]
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ca4:	e7a8      	b.n	8009bf8 <_printf_i+0x150>
 8009ca6:	6923      	ldr	r3, [r4, #16]
 8009ca8:	462a      	mov	r2, r5
 8009caa:	4649      	mov	r1, r9
 8009cac:	4640      	mov	r0, r8
 8009cae:	47d0      	blx	sl
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d0ab      	beq.n	8009c0c <_printf_i+0x164>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	079b      	lsls	r3, r3, #30
 8009cb8:	d413      	bmi.n	8009ce2 <_printf_i+0x23a>
 8009cba:	68e0      	ldr	r0, [r4, #12]
 8009cbc:	9b03      	ldr	r3, [sp, #12]
 8009cbe:	4298      	cmp	r0, r3
 8009cc0:	bfb8      	it	lt
 8009cc2:	4618      	movlt	r0, r3
 8009cc4:	e7a4      	b.n	8009c10 <_printf_i+0x168>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	4632      	mov	r2, r6
 8009cca:	4649      	mov	r1, r9
 8009ccc:	4640      	mov	r0, r8
 8009cce:	47d0      	blx	sl
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d09b      	beq.n	8009c0c <_printf_i+0x164>
 8009cd4:	3501      	adds	r5, #1
 8009cd6:	68e3      	ldr	r3, [r4, #12]
 8009cd8:	9903      	ldr	r1, [sp, #12]
 8009cda:	1a5b      	subs	r3, r3, r1
 8009cdc:	42ab      	cmp	r3, r5
 8009cde:	dcf2      	bgt.n	8009cc6 <_printf_i+0x21e>
 8009ce0:	e7eb      	b.n	8009cba <_printf_i+0x212>
 8009ce2:	2500      	movs	r5, #0
 8009ce4:	f104 0619 	add.w	r6, r4, #25
 8009ce8:	e7f5      	b.n	8009cd6 <_printf_i+0x22e>
 8009cea:	bf00      	nop
 8009cec:	0800c0ed 	.word	0x0800c0ed
 8009cf0:	0800c0fe 	.word	0x0800c0fe

08009cf4 <memmove>:
 8009cf4:	4288      	cmp	r0, r1
 8009cf6:	b510      	push	{r4, lr}
 8009cf8:	eb01 0402 	add.w	r4, r1, r2
 8009cfc:	d902      	bls.n	8009d04 <memmove+0x10>
 8009cfe:	4284      	cmp	r4, r0
 8009d00:	4623      	mov	r3, r4
 8009d02:	d807      	bhi.n	8009d14 <memmove+0x20>
 8009d04:	1e43      	subs	r3, r0, #1
 8009d06:	42a1      	cmp	r1, r4
 8009d08:	d008      	beq.n	8009d1c <memmove+0x28>
 8009d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d12:	e7f8      	b.n	8009d06 <memmove+0x12>
 8009d14:	4402      	add	r2, r0
 8009d16:	4601      	mov	r1, r0
 8009d18:	428a      	cmp	r2, r1
 8009d1a:	d100      	bne.n	8009d1e <memmove+0x2a>
 8009d1c:	bd10      	pop	{r4, pc}
 8009d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d26:	e7f7      	b.n	8009d18 <memmove+0x24>

08009d28 <_free_r>:
 8009d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d2a:	2900      	cmp	r1, #0
 8009d2c:	d044      	beq.n	8009db8 <_free_r+0x90>
 8009d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d32:	9001      	str	r0, [sp, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f1a1 0404 	sub.w	r4, r1, #4
 8009d3a:	bfb8      	it	lt
 8009d3c:	18e4      	addlt	r4, r4, r3
 8009d3e:	f000 f913 	bl	8009f68 <__malloc_lock>
 8009d42:	4a1e      	ldr	r2, [pc, #120]	; (8009dbc <_free_r+0x94>)
 8009d44:	9801      	ldr	r0, [sp, #4]
 8009d46:	6813      	ldr	r3, [r2, #0]
 8009d48:	b933      	cbnz	r3, 8009d58 <_free_r+0x30>
 8009d4a:	6063      	str	r3, [r4, #4]
 8009d4c:	6014      	str	r4, [r2, #0]
 8009d4e:	b003      	add	sp, #12
 8009d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d54:	f000 b90e 	b.w	8009f74 <__malloc_unlock>
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	d908      	bls.n	8009d6e <_free_r+0x46>
 8009d5c:	6825      	ldr	r5, [r4, #0]
 8009d5e:	1961      	adds	r1, r4, r5
 8009d60:	428b      	cmp	r3, r1
 8009d62:	bf01      	itttt	eq
 8009d64:	6819      	ldreq	r1, [r3, #0]
 8009d66:	685b      	ldreq	r3, [r3, #4]
 8009d68:	1949      	addeq	r1, r1, r5
 8009d6a:	6021      	streq	r1, [r4, #0]
 8009d6c:	e7ed      	b.n	8009d4a <_free_r+0x22>
 8009d6e:	461a      	mov	r2, r3
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	b10b      	cbz	r3, 8009d78 <_free_r+0x50>
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	d9fa      	bls.n	8009d6e <_free_r+0x46>
 8009d78:	6811      	ldr	r1, [r2, #0]
 8009d7a:	1855      	adds	r5, r2, r1
 8009d7c:	42a5      	cmp	r5, r4
 8009d7e:	d10b      	bne.n	8009d98 <_free_r+0x70>
 8009d80:	6824      	ldr	r4, [r4, #0]
 8009d82:	4421      	add	r1, r4
 8009d84:	1854      	adds	r4, r2, r1
 8009d86:	42a3      	cmp	r3, r4
 8009d88:	6011      	str	r1, [r2, #0]
 8009d8a:	d1e0      	bne.n	8009d4e <_free_r+0x26>
 8009d8c:	681c      	ldr	r4, [r3, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	6053      	str	r3, [r2, #4]
 8009d92:	4421      	add	r1, r4
 8009d94:	6011      	str	r1, [r2, #0]
 8009d96:	e7da      	b.n	8009d4e <_free_r+0x26>
 8009d98:	d902      	bls.n	8009da0 <_free_r+0x78>
 8009d9a:	230c      	movs	r3, #12
 8009d9c:	6003      	str	r3, [r0, #0]
 8009d9e:	e7d6      	b.n	8009d4e <_free_r+0x26>
 8009da0:	6825      	ldr	r5, [r4, #0]
 8009da2:	1961      	adds	r1, r4, r5
 8009da4:	428b      	cmp	r3, r1
 8009da6:	bf04      	itt	eq
 8009da8:	6819      	ldreq	r1, [r3, #0]
 8009daa:	685b      	ldreq	r3, [r3, #4]
 8009dac:	6063      	str	r3, [r4, #4]
 8009dae:	bf04      	itt	eq
 8009db0:	1949      	addeq	r1, r1, r5
 8009db2:	6021      	streq	r1, [r4, #0]
 8009db4:	6054      	str	r4, [r2, #4]
 8009db6:	e7ca      	b.n	8009d4e <_free_r+0x26>
 8009db8:	b003      	add	sp, #12
 8009dba:	bd30      	pop	{r4, r5, pc}
 8009dbc:	200005bc 	.word	0x200005bc

08009dc0 <sbrk_aligned>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	4e0e      	ldr	r6, [pc, #56]	; (8009dfc <sbrk_aligned+0x3c>)
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	6831      	ldr	r1, [r6, #0]
 8009dc8:	4605      	mov	r5, r0
 8009dca:	b911      	cbnz	r1, 8009dd2 <sbrk_aligned+0x12>
 8009dcc:	f000 f8bc 	bl	8009f48 <_sbrk_r>
 8009dd0:	6030      	str	r0, [r6, #0]
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f000 f8b7 	bl	8009f48 <_sbrk_r>
 8009dda:	1c43      	adds	r3, r0, #1
 8009ddc:	d00a      	beq.n	8009df4 <sbrk_aligned+0x34>
 8009dde:	1cc4      	adds	r4, r0, #3
 8009de0:	f024 0403 	bic.w	r4, r4, #3
 8009de4:	42a0      	cmp	r0, r4
 8009de6:	d007      	beq.n	8009df8 <sbrk_aligned+0x38>
 8009de8:	1a21      	subs	r1, r4, r0
 8009dea:	4628      	mov	r0, r5
 8009dec:	f000 f8ac 	bl	8009f48 <_sbrk_r>
 8009df0:	3001      	adds	r0, #1
 8009df2:	d101      	bne.n	8009df8 <sbrk_aligned+0x38>
 8009df4:	f04f 34ff 	mov.w	r4, #4294967295
 8009df8:	4620      	mov	r0, r4
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	200005c0 	.word	0x200005c0

08009e00 <_malloc_r>:
 8009e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e04:	1ccd      	adds	r5, r1, #3
 8009e06:	f025 0503 	bic.w	r5, r5, #3
 8009e0a:	3508      	adds	r5, #8
 8009e0c:	2d0c      	cmp	r5, #12
 8009e0e:	bf38      	it	cc
 8009e10:	250c      	movcc	r5, #12
 8009e12:	2d00      	cmp	r5, #0
 8009e14:	4607      	mov	r7, r0
 8009e16:	db01      	blt.n	8009e1c <_malloc_r+0x1c>
 8009e18:	42a9      	cmp	r1, r5
 8009e1a:	d905      	bls.n	8009e28 <_malloc_r+0x28>
 8009e1c:	230c      	movs	r3, #12
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	2600      	movs	r6, #0
 8009e22:	4630      	mov	r0, r6
 8009e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e28:	4e2e      	ldr	r6, [pc, #184]	; (8009ee4 <_malloc_r+0xe4>)
 8009e2a:	f000 f89d 	bl	8009f68 <__malloc_lock>
 8009e2e:	6833      	ldr	r3, [r6, #0]
 8009e30:	461c      	mov	r4, r3
 8009e32:	bb34      	cbnz	r4, 8009e82 <_malloc_r+0x82>
 8009e34:	4629      	mov	r1, r5
 8009e36:	4638      	mov	r0, r7
 8009e38:	f7ff ffc2 	bl	8009dc0 <sbrk_aligned>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	4604      	mov	r4, r0
 8009e40:	d14d      	bne.n	8009ede <_malloc_r+0xde>
 8009e42:	6834      	ldr	r4, [r6, #0]
 8009e44:	4626      	mov	r6, r4
 8009e46:	2e00      	cmp	r6, #0
 8009e48:	d140      	bne.n	8009ecc <_malloc_r+0xcc>
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	4631      	mov	r1, r6
 8009e4e:	4638      	mov	r0, r7
 8009e50:	eb04 0803 	add.w	r8, r4, r3
 8009e54:	f000 f878 	bl	8009f48 <_sbrk_r>
 8009e58:	4580      	cmp	r8, r0
 8009e5a:	d13a      	bne.n	8009ed2 <_malloc_r+0xd2>
 8009e5c:	6821      	ldr	r1, [r4, #0]
 8009e5e:	3503      	adds	r5, #3
 8009e60:	1a6d      	subs	r5, r5, r1
 8009e62:	f025 0503 	bic.w	r5, r5, #3
 8009e66:	3508      	adds	r5, #8
 8009e68:	2d0c      	cmp	r5, #12
 8009e6a:	bf38      	it	cc
 8009e6c:	250c      	movcc	r5, #12
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7ff ffa5 	bl	8009dc0 <sbrk_aligned>
 8009e76:	3001      	adds	r0, #1
 8009e78:	d02b      	beq.n	8009ed2 <_malloc_r+0xd2>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	442b      	add	r3, r5
 8009e7e:	6023      	str	r3, [r4, #0]
 8009e80:	e00e      	b.n	8009ea0 <_malloc_r+0xa0>
 8009e82:	6822      	ldr	r2, [r4, #0]
 8009e84:	1b52      	subs	r2, r2, r5
 8009e86:	d41e      	bmi.n	8009ec6 <_malloc_r+0xc6>
 8009e88:	2a0b      	cmp	r2, #11
 8009e8a:	d916      	bls.n	8009eba <_malloc_r+0xba>
 8009e8c:	1961      	adds	r1, r4, r5
 8009e8e:	42a3      	cmp	r3, r4
 8009e90:	6025      	str	r5, [r4, #0]
 8009e92:	bf18      	it	ne
 8009e94:	6059      	strne	r1, [r3, #4]
 8009e96:	6863      	ldr	r3, [r4, #4]
 8009e98:	bf08      	it	eq
 8009e9a:	6031      	streq	r1, [r6, #0]
 8009e9c:	5162      	str	r2, [r4, r5]
 8009e9e:	604b      	str	r3, [r1, #4]
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f104 060b 	add.w	r6, r4, #11
 8009ea6:	f000 f865 	bl	8009f74 <__malloc_unlock>
 8009eaa:	f026 0607 	bic.w	r6, r6, #7
 8009eae:	1d23      	adds	r3, r4, #4
 8009eb0:	1af2      	subs	r2, r6, r3
 8009eb2:	d0b6      	beq.n	8009e22 <_malloc_r+0x22>
 8009eb4:	1b9b      	subs	r3, r3, r6
 8009eb6:	50a3      	str	r3, [r4, r2]
 8009eb8:	e7b3      	b.n	8009e22 <_malloc_r+0x22>
 8009eba:	6862      	ldr	r2, [r4, #4]
 8009ebc:	42a3      	cmp	r3, r4
 8009ebe:	bf0c      	ite	eq
 8009ec0:	6032      	streq	r2, [r6, #0]
 8009ec2:	605a      	strne	r2, [r3, #4]
 8009ec4:	e7ec      	b.n	8009ea0 <_malloc_r+0xa0>
 8009ec6:	4623      	mov	r3, r4
 8009ec8:	6864      	ldr	r4, [r4, #4]
 8009eca:	e7b2      	b.n	8009e32 <_malloc_r+0x32>
 8009ecc:	4634      	mov	r4, r6
 8009ece:	6876      	ldr	r6, [r6, #4]
 8009ed0:	e7b9      	b.n	8009e46 <_malloc_r+0x46>
 8009ed2:	230c      	movs	r3, #12
 8009ed4:	603b      	str	r3, [r7, #0]
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	f000 f84c 	bl	8009f74 <__malloc_unlock>
 8009edc:	e7a1      	b.n	8009e22 <_malloc_r+0x22>
 8009ede:	6025      	str	r5, [r4, #0]
 8009ee0:	e7de      	b.n	8009ea0 <_malloc_r+0xa0>
 8009ee2:	bf00      	nop
 8009ee4:	200005bc 	.word	0x200005bc

08009ee8 <_realloc_r>:
 8009ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eec:	4680      	mov	r8, r0
 8009eee:	4614      	mov	r4, r2
 8009ef0:	460e      	mov	r6, r1
 8009ef2:	b921      	cbnz	r1, 8009efe <_realloc_r+0x16>
 8009ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef8:	4611      	mov	r1, r2
 8009efa:	f7ff bf81 	b.w	8009e00 <_malloc_r>
 8009efe:	b92a      	cbnz	r2, 8009f0c <_realloc_r+0x24>
 8009f00:	f7ff ff12 	bl	8009d28 <_free_r>
 8009f04:	4625      	mov	r5, r4
 8009f06:	4628      	mov	r0, r5
 8009f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f0c:	f000 f838 	bl	8009f80 <_malloc_usable_size_r>
 8009f10:	4284      	cmp	r4, r0
 8009f12:	4607      	mov	r7, r0
 8009f14:	d802      	bhi.n	8009f1c <_realloc_r+0x34>
 8009f16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f1a:	d812      	bhi.n	8009f42 <_realloc_r+0x5a>
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	4640      	mov	r0, r8
 8009f20:	f7ff ff6e 	bl	8009e00 <_malloc_r>
 8009f24:	4605      	mov	r5, r0
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d0ed      	beq.n	8009f06 <_realloc_r+0x1e>
 8009f2a:	42bc      	cmp	r4, r7
 8009f2c:	4622      	mov	r2, r4
 8009f2e:	4631      	mov	r1, r6
 8009f30:	bf28      	it	cs
 8009f32:	463a      	movcs	r2, r7
 8009f34:	f7ff fbb8 	bl	80096a8 <memcpy>
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	f7ff fef4 	bl	8009d28 <_free_r>
 8009f40:	e7e1      	b.n	8009f06 <_realloc_r+0x1e>
 8009f42:	4635      	mov	r5, r6
 8009f44:	e7df      	b.n	8009f06 <_realloc_r+0x1e>
	...

08009f48 <_sbrk_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d06      	ldr	r5, [pc, #24]	; (8009f64 <_sbrk_r+0x1c>)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	602b      	str	r3, [r5, #0]
 8009f54:	f7f8 f948 	bl	80021e8 <_sbrk>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d102      	bne.n	8009f62 <_sbrk_r+0x1a>
 8009f5c:	682b      	ldr	r3, [r5, #0]
 8009f5e:	b103      	cbz	r3, 8009f62 <_sbrk_r+0x1a>
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	bd38      	pop	{r3, r4, r5, pc}
 8009f64:	200005c4 	.word	0x200005c4

08009f68 <__malloc_lock>:
 8009f68:	4801      	ldr	r0, [pc, #4]	; (8009f70 <__malloc_lock+0x8>)
 8009f6a:	f000 b811 	b.w	8009f90 <__retarget_lock_acquire_recursive>
 8009f6e:	bf00      	nop
 8009f70:	200005c8 	.word	0x200005c8

08009f74 <__malloc_unlock>:
 8009f74:	4801      	ldr	r0, [pc, #4]	; (8009f7c <__malloc_unlock+0x8>)
 8009f76:	f000 b80c 	b.w	8009f92 <__retarget_lock_release_recursive>
 8009f7a:	bf00      	nop
 8009f7c:	200005c8 	.word	0x200005c8

08009f80 <_malloc_usable_size_r>:
 8009f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f84:	1f18      	subs	r0, r3, #4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfbc      	itt	lt
 8009f8a:	580b      	ldrlt	r3, [r1, r0]
 8009f8c:	18c0      	addlt	r0, r0, r3
 8009f8e:	4770      	bx	lr

08009f90 <__retarget_lock_acquire_recursive>:
 8009f90:	4770      	bx	lr

08009f92 <__retarget_lock_release_recursive>:
 8009f92:	4770      	bx	lr

08009f94 <asin>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	ed2d 8b02 	vpush	{d8}
 8009f9a:	ec55 4b10 	vmov	r4, r5, d0
 8009f9e:	f000 f913 	bl	800a1c8 <__ieee754_asin>
 8009fa2:	4622      	mov	r2, r4
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	eeb0 8a40 	vmov.f32	s16, s0
 8009fae:	eef0 8a60 	vmov.f32	s17, s1
 8009fb2:	f7f6 fdbb 	bl	8000b2c <__aeabi_dcmpun>
 8009fb6:	b9a8      	cbnz	r0, 8009fe4 <asin+0x50>
 8009fb8:	ec45 4b10 	vmov	d0, r4, r5
 8009fbc:	f001 fd18 	bl	800b9f0 <fabs>
 8009fc0:	4b0c      	ldr	r3, [pc, #48]	; (8009ff4 <asin+0x60>)
 8009fc2:	ec51 0b10 	vmov	r0, r1, d0
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f7f6 fda6 	bl	8000b18 <__aeabi_dcmpgt>
 8009fcc:	b150      	cbz	r0, 8009fe4 <asin+0x50>
 8009fce:	f7ff fb41 	bl	8009654 <__errno>
 8009fd2:	ecbd 8b02 	vpop	{d8}
 8009fd6:	2321      	movs	r3, #33	; 0x21
 8009fd8:	6003      	str	r3, [r0, #0]
 8009fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fde:	4806      	ldr	r0, [pc, #24]	; (8009ff8 <asin+0x64>)
 8009fe0:	f001 bd1a 	b.w	800ba18 <nan>
 8009fe4:	eeb0 0a48 	vmov.f32	s0, s16
 8009fe8:	eef0 0a68 	vmov.f32	s1, s17
 8009fec:	ecbd 8b02 	vpop	{d8}
 8009ff0:	bd38      	pop	{r3, r4, r5, pc}
 8009ff2:	bf00      	nop
 8009ff4:	3ff00000 	.word	0x3ff00000
 8009ff8:	0800c0e1 	.word	0x0800c0e1

08009ffc <atan2>:
 8009ffc:	f000 baf8 	b.w	800a5f0 <__ieee754_atan2>

0800a000 <exp>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	ed2d 8b02 	vpush	{d8}
 800a006:	ec55 4b10 	vmov	r4, r5, d0
 800a00a:	f000 fbbd 	bl	800a788 <__ieee754_exp>
 800a00e:	eeb0 8a40 	vmov.f32	s16, s0
 800a012:	eef0 8a60 	vmov.f32	s17, s1
 800a016:	ec45 4b10 	vmov	d0, r4, r5
 800a01a:	f001 fcf2 	bl	800ba02 <finite>
 800a01e:	b168      	cbz	r0, 800a03c <exp+0x3c>
 800a020:	a317      	add	r3, pc, #92	; (adr r3, 800a080 <exp+0x80>)
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	4620      	mov	r0, r4
 800a028:	4629      	mov	r1, r5
 800a02a:	f7f6 fd75 	bl	8000b18 <__aeabi_dcmpgt>
 800a02e:	b160      	cbz	r0, 800a04a <exp+0x4a>
 800a030:	f7ff fb10 	bl	8009654 <__errno>
 800a034:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800a070 <exp+0x70>
 800a038:	2322      	movs	r3, #34	; 0x22
 800a03a:	6003      	str	r3, [r0, #0]
 800a03c:	eeb0 0a48 	vmov.f32	s0, s16
 800a040:	eef0 0a68 	vmov.f32	s1, s17
 800a044:	ecbd 8b02 	vpop	{d8}
 800a048:	bd38      	pop	{r3, r4, r5, pc}
 800a04a:	a30f      	add	r3, pc, #60	; (adr r3, 800a088 <exp+0x88>)
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	4620      	mov	r0, r4
 800a052:	4629      	mov	r1, r5
 800a054:	f7f6 fd42 	bl	8000adc <__aeabi_dcmplt>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d0ef      	beq.n	800a03c <exp+0x3c>
 800a05c:	f7ff fafa 	bl	8009654 <__errno>
 800a060:	2322      	movs	r3, #34	; 0x22
 800a062:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800a078 <exp+0x78>
 800a066:	6003      	str	r3, [r0, #0]
 800a068:	e7e8      	b.n	800a03c <exp+0x3c>
 800a06a:	bf00      	nop
 800a06c:	f3af 8000 	nop.w
 800a070:	00000000 	.word	0x00000000
 800a074:	7ff00000 	.word	0x7ff00000
	...
 800a080:	fefa39ef 	.word	0xfefa39ef
 800a084:	40862e42 	.word	0x40862e42
 800a088:	d52d3051 	.word	0xd52d3051
 800a08c:	c0874910 	.word	0xc0874910

0800a090 <pow>:
 800a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a092:	ed2d 8b02 	vpush	{d8}
 800a096:	eeb0 8a40 	vmov.f32	s16, s0
 800a09a:	eef0 8a60 	vmov.f32	s17, s1
 800a09e:	ec55 4b11 	vmov	r4, r5, d1
 800a0a2:	f000 fcf5 	bl	800aa90 <__ieee754_pow>
 800a0a6:	4622      	mov	r2, r4
 800a0a8:	462b      	mov	r3, r5
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	ec57 6b10 	vmov	r6, r7, d0
 800a0b2:	f7f6 fd3b 	bl	8000b2c <__aeabi_dcmpun>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d13b      	bne.n	800a132 <pow+0xa2>
 800a0ba:	ec51 0b18 	vmov	r0, r1, d8
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	f7f6 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0c6:	b1b8      	cbz	r0, 800a0f8 <pow+0x68>
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	f7f6 fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d146      	bne.n	800a166 <pow+0xd6>
 800a0d8:	ec45 4b10 	vmov	d0, r4, r5
 800a0dc:	f001 fc91 	bl	800ba02 <finite>
 800a0e0:	b338      	cbz	r0, 800a132 <pow+0xa2>
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	f7f6 fcf7 	bl	8000adc <__aeabi_dcmplt>
 800a0ee:	b300      	cbz	r0, 800a132 <pow+0xa2>
 800a0f0:	f7ff fab0 	bl	8009654 <__errno>
 800a0f4:	2322      	movs	r3, #34	; 0x22
 800a0f6:	e01b      	b.n	800a130 <pow+0xa0>
 800a0f8:	ec47 6b10 	vmov	d0, r6, r7
 800a0fc:	f001 fc81 	bl	800ba02 <finite>
 800a100:	b9e0      	cbnz	r0, 800a13c <pow+0xac>
 800a102:	eeb0 0a48 	vmov.f32	s0, s16
 800a106:	eef0 0a68 	vmov.f32	s1, s17
 800a10a:	f001 fc7a 	bl	800ba02 <finite>
 800a10e:	b1a8      	cbz	r0, 800a13c <pow+0xac>
 800a110:	ec45 4b10 	vmov	d0, r4, r5
 800a114:	f001 fc75 	bl	800ba02 <finite>
 800a118:	b180      	cbz	r0, 800a13c <pow+0xac>
 800a11a:	4632      	mov	r2, r6
 800a11c:	463b      	mov	r3, r7
 800a11e:	4630      	mov	r0, r6
 800a120:	4639      	mov	r1, r7
 800a122:	f7f6 fd03 	bl	8000b2c <__aeabi_dcmpun>
 800a126:	2800      	cmp	r0, #0
 800a128:	d0e2      	beq.n	800a0f0 <pow+0x60>
 800a12a:	f7ff fa93 	bl	8009654 <__errno>
 800a12e:	2321      	movs	r3, #33	; 0x21
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	ecbd 8b02 	vpop	{d8}
 800a136:	ec47 6b10 	vmov	d0, r6, r7
 800a13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a13c:	2200      	movs	r2, #0
 800a13e:	2300      	movs	r3, #0
 800a140:	4630      	mov	r0, r6
 800a142:	4639      	mov	r1, r7
 800a144:	f7f6 fcc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d0f2      	beq.n	800a132 <pow+0xa2>
 800a14c:	eeb0 0a48 	vmov.f32	s0, s16
 800a150:	eef0 0a68 	vmov.f32	s1, s17
 800a154:	f001 fc55 	bl	800ba02 <finite>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d0ea      	beq.n	800a132 <pow+0xa2>
 800a15c:	ec45 4b10 	vmov	d0, r4, r5
 800a160:	f001 fc4f 	bl	800ba02 <finite>
 800a164:	e7c3      	b.n	800a0ee <pow+0x5e>
 800a166:	4f01      	ldr	r7, [pc, #4]	; (800a16c <pow+0xdc>)
 800a168:	2600      	movs	r6, #0
 800a16a:	e7e2      	b.n	800a132 <pow+0xa2>
 800a16c:	3ff00000 	.word	0x3ff00000

0800a170 <sqrt>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	ed2d 8b02 	vpush	{d8}
 800a176:	ec55 4b10 	vmov	r4, r5, d0
 800a17a:	f001 f9b7 	bl	800b4ec <__ieee754_sqrt>
 800a17e:	4622      	mov	r2, r4
 800a180:	462b      	mov	r3, r5
 800a182:	4620      	mov	r0, r4
 800a184:	4629      	mov	r1, r5
 800a186:	eeb0 8a40 	vmov.f32	s16, s0
 800a18a:	eef0 8a60 	vmov.f32	s17, s1
 800a18e:	f7f6 fccd 	bl	8000b2c <__aeabi_dcmpun>
 800a192:	b990      	cbnz	r0, 800a1ba <sqrt+0x4a>
 800a194:	2200      	movs	r2, #0
 800a196:	2300      	movs	r3, #0
 800a198:	4620      	mov	r0, r4
 800a19a:	4629      	mov	r1, r5
 800a19c:	f7f6 fc9e 	bl	8000adc <__aeabi_dcmplt>
 800a1a0:	b158      	cbz	r0, 800a1ba <sqrt+0x4a>
 800a1a2:	f7ff fa57 	bl	8009654 <__errno>
 800a1a6:	2321      	movs	r3, #33	; 0x21
 800a1a8:	6003      	str	r3, [r0, #0]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	f7f6 fb4b 	bl	800084c <__aeabi_ddiv>
 800a1b6:	ec41 0b18 	vmov	d8, r0, r1
 800a1ba:	eeb0 0a48 	vmov.f32	s0, s16
 800a1be:	eef0 0a68 	vmov.f32	s1, s17
 800a1c2:	ecbd 8b02 	vpop	{d8}
 800a1c6:	bd38      	pop	{r3, r4, r5, pc}

0800a1c8 <__ieee754_asin>:
 800a1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1cc:	ed2d 8b04 	vpush	{d8-d9}
 800a1d0:	ec55 4b10 	vmov	r4, r5, d0
 800a1d4:	4bcc      	ldr	r3, [pc, #816]	; (800a508 <__ieee754_asin+0x340>)
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a1dc:	4598      	cmp	r8, r3
 800a1de:	9501      	str	r5, [sp, #4]
 800a1e0:	dd35      	ble.n	800a24e <__ieee754_asin+0x86>
 800a1e2:	ee10 3a10 	vmov	r3, s0
 800a1e6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800a1ea:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800a1ee:	ea58 0303 	orrs.w	r3, r8, r3
 800a1f2:	d117      	bne.n	800a224 <__ieee754_asin+0x5c>
 800a1f4:	a3aa      	add	r3, pc, #680	; (adr r3, 800a4a0 <__ieee754_asin+0x2d8>)
 800a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fa:	ee10 0a10 	vmov	r0, s0
 800a1fe:	4629      	mov	r1, r5
 800a200:	f7f6 f9fa 	bl	80005f8 <__aeabi_dmul>
 800a204:	a3a8      	add	r3, pc, #672	; (adr r3, 800a4a8 <__ieee754_asin+0x2e0>)
 800a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20a:	4606      	mov	r6, r0
 800a20c:	460f      	mov	r7, r1
 800a20e:	4620      	mov	r0, r4
 800a210:	4629      	mov	r1, r5
 800a212:	f7f6 f9f1 	bl	80005f8 <__aeabi_dmul>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	4630      	mov	r0, r6
 800a21c:	4639      	mov	r1, r7
 800a21e:	f7f6 f835 	bl	800028c <__adddf3>
 800a222:	e00b      	b.n	800a23c <__ieee754_asin+0x74>
 800a224:	ee10 2a10 	vmov	r2, s0
 800a228:	462b      	mov	r3, r5
 800a22a:	ee10 0a10 	vmov	r0, s0
 800a22e:	4629      	mov	r1, r5
 800a230:	f7f6 f82a 	bl	8000288 <__aeabi_dsub>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	f7f6 fb08 	bl	800084c <__aeabi_ddiv>
 800a23c:	4604      	mov	r4, r0
 800a23e:	460d      	mov	r5, r1
 800a240:	ec45 4b10 	vmov	d0, r4, r5
 800a244:	b003      	add	sp, #12
 800a246:	ecbd 8b04 	vpop	{d8-d9}
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	4baf      	ldr	r3, [pc, #700]	; (800a50c <__ieee754_asin+0x344>)
 800a250:	4598      	cmp	r8, r3
 800a252:	dc11      	bgt.n	800a278 <__ieee754_asin+0xb0>
 800a254:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a258:	f280 80ae 	bge.w	800a3b8 <__ieee754_asin+0x1f0>
 800a25c:	a394      	add	r3, pc, #592	; (adr r3, 800a4b0 <__ieee754_asin+0x2e8>)
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	ee10 0a10 	vmov	r0, s0
 800a266:	4629      	mov	r1, r5
 800a268:	f7f6 f810 	bl	800028c <__adddf3>
 800a26c:	4ba8      	ldr	r3, [pc, #672]	; (800a510 <__ieee754_asin+0x348>)
 800a26e:	2200      	movs	r2, #0
 800a270:	f7f6 fc52 	bl	8000b18 <__aeabi_dcmpgt>
 800a274:	2800      	cmp	r0, #0
 800a276:	d1e3      	bne.n	800a240 <__ieee754_asin+0x78>
 800a278:	ec45 4b10 	vmov	d0, r4, r5
 800a27c:	f001 fbb8 	bl	800b9f0 <fabs>
 800a280:	49a3      	ldr	r1, [pc, #652]	; (800a510 <__ieee754_asin+0x348>)
 800a282:	ec53 2b10 	vmov	r2, r3, d0
 800a286:	2000      	movs	r0, #0
 800a288:	f7f5 fffe 	bl	8000288 <__aeabi_dsub>
 800a28c:	4ba1      	ldr	r3, [pc, #644]	; (800a514 <__ieee754_asin+0x34c>)
 800a28e:	2200      	movs	r2, #0
 800a290:	f7f6 f9b2 	bl	80005f8 <__aeabi_dmul>
 800a294:	a388      	add	r3, pc, #544	; (adr r3, 800a4b8 <__ieee754_asin+0x2f0>)
 800a296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29a:	4604      	mov	r4, r0
 800a29c:	460d      	mov	r5, r1
 800a29e:	f7f6 f9ab 	bl	80005f8 <__aeabi_dmul>
 800a2a2:	a387      	add	r3, pc, #540	; (adr r3, 800a4c0 <__ieee754_asin+0x2f8>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	f7f5 fff0 	bl	800028c <__adddf3>
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	462b      	mov	r3, r5
 800a2b0:	f7f6 f9a2 	bl	80005f8 <__aeabi_dmul>
 800a2b4:	a384      	add	r3, pc, #528	; (adr r3, 800a4c8 <__ieee754_asin+0x300>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	f7f5 ffe5 	bl	8000288 <__aeabi_dsub>
 800a2be:	4622      	mov	r2, r4
 800a2c0:	462b      	mov	r3, r5
 800a2c2:	f7f6 f999 	bl	80005f8 <__aeabi_dmul>
 800a2c6:	a382      	add	r3, pc, #520	; (adr r3, 800a4d0 <__ieee754_asin+0x308>)
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f7f5 ffde 	bl	800028c <__adddf3>
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	462b      	mov	r3, r5
 800a2d4:	f7f6 f990 	bl	80005f8 <__aeabi_dmul>
 800a2d8:	a37f      	add	r3, pc, #508	; (adr r3, 800a4d8 <__ieee754_asin+0x310>)
 800a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2de:	f7f5 ffd3 	bl	8000288 <__aeabi_dsub>
 800a2e2:	4622      	mov	r2, r4
 800a2e4:	462b      	mov	r3, r5
 800a2e6:	f7f6 f987 	bl	80005f8 <__aeabi_dmul>
 800a2ea:	a37d      	add	r3, pc, #500	; (adr r3, 800a4e0 <__ieee754_asin+0x318>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f7f5 ffcc 	bl	800028c <__adddf3>
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	462b      	mov	r3, r5
 800a2f8:	f7f6 f97e 	bl	80005f8 <__aeabi_dmul>
 800a2fc:	a37a      	add	r3, pc, #488	; (adr r3, 800a4e8 <__ieee754_asin+0x320>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	ec41 0b18 	vmov	d8, r0, r1
 800a306:	4620      	mov	r0, r4
 800a308:	4629      	mov	r1, r5
 800a30a:	f7f6 f975 	bl	80005f8 <__aeabi_dmul>
 800a30e:	a378      	add	r3, pc, #480	; (adr r3, 800a4f0 <__ieee754_asin+0x328>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f7f5 ffb8 	bl	8000288 <__aeabi_dsub>
 800a318:	4622      	mov	r2, r4
 800a31a:	462b      	mov	r3, r5
 800a31c:	f7f6 f96c 	bl	80005f8 <__aeabi_dmul>
 800a320:	a375      	add	r3, pc, #468	; (adr r3, 800a4f8 <__ieee754_asin+0x330>)
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	f7f5 ffb1 	bl	800028c <__adddf3>
 800a32a:	4622      	mov	r2, r4
 800a32c:	462b      	mov	r3, r5
 800a32e:	f7f6 f963 	bl	80005f8 <__aeabi_dmul>
 800a332:	a373      	add	r3, pc, #460	; (adr r3, 800a500 <__ieee754_asin+0x338>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	f7f5 ffa6 	bl	8000288 <__aeabi_dsub>
 800a33c:	4622      	mov	r2, r4
 800a33e:	462b      	mov	r3, r5
 800a340:	f7f6 f95a 	bl	80005f8 <__aeabi_dmul>
 800a344:	4b72      	ldr	r3, [pc, #456]	; (800a510 <__ieee754_asin+0x348>)
 800a346:	2200      	movs	r2, #0
 800a348:	f7f5 ffa0 	bl	800028c <__adddf3>
 800a34c:	ec45 4b10 	vmov	d0, r4, r5
 800a350:	4606      	mov	r6, r0
 800a352:	460f      	mov	r7, r1
 800a354:	f001 f8ca 	bl	800b4ec <__ieee754_sqrt>
 800a358:	4b6f      	ldr	r3, [pc, #444]	; (800a518 <__ieee754_asin+0x350>)
 800a35a:	4598      	cmp	r8, r3
 800a35c:	ec5b ab10 	vmov	sl, fp, d0
 800a360:	f340 80dc 	ble.w	800a51c <__ieee754_asin+0x354>
 800a364:	4632      	mov	r2, r6
 800a366:	463b      	mov	r3, r7
 800a368:	ec51 0b18 	vmov	r0, r1, d8
 800a36c:	f7f6 fa6e 	bl	800084c <__aeabi_ddiv>
 800a370:	4652      	mov	r2, sl
 800a372:	465b      	mov	r3, fp
 800a374:	f7f6 f940 	bl	80005f8 <__aeabi_dmul>
 800a378:	4652      	mov	r2, sl
 800a37a:	465b      	mov	r3, fp
 800a37c:	f7f5 ff86 	bl	800028c <__adddf3>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	f7f5 ff82 	bl	800028c <__adddf3>
 800a388:	a347      	add	r3, pc, #284	; (adr r3, 800a4a8 <__ieee754_asin+0x2e0>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f7f5 ff7b 	bl	8000288 <__aeabi_dsub>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	a142      	add	r1, pc, #264	; (adr r1, 800a4a0 <__ieee754_asin+0x2d8>)
 800a398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a39c:	f7f5 ff74 	bl	8000288 <__aeabi_dsub>
 800a3a0:	9b01      	ldr	r3, [sp, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	bfdc      	itt	le
 800a3a6:	4602      	movle	r2, r0
 800a3a8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	460d      	mov	r5, r1
 800a3b0:	bfdc      	itt	le
 800a3b2:	4614      	movle	r4, r2
 800a3b4:	461d      	movle	r5, r3
 800a3b6:	e743      	b.n	800a240 <__ieee754_asin+0x78>
 800a3b8:	ee10 2a10 	vmov	r2, s0
 800a3bc:	ee10 0a10 	vmov	r0, s0
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	f7f6 f918 	bl	80005f8 <__aeabi_dmul>
 800a3c8:	a33b      	add	r3, pc, #236	; (adr r3, 800a4b8 <__ieee754_asin+0x2f0>)
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	460f      	mov	r7, r1
 800a3d2:	f7f6 f911 	bl	80005f8 <__aeabi_dmul>
 800a3d6:	a33a      	add	r3, pc, #232	; (adr r3, 800a4c0 <__ieee754_asin+0x2f8>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	f7f5 ff56 	bl	800028c <__adddf3>
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	463b      	mov	r3, r7
 800a3e4:	f7f6 f908 	bl	80005f8 <__aeabi_dmul>
 800a3e8:	a337      	add	r3, pc, #220	; (adr r3, 800a4c8 <__ieee754_asin+0x300>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	f7f5 ff4b 	bl	8000288 <__aeabi_dsub>
 800a3f2:	4632      	mov	r2, r6
 800a3f4:	463b      	mov	r3, r7
 800a3f6:	f7f6 f8ff 	bl	80005f8 <__aeabi_dmul>
 800a3fa:	a335      	add	r3, pc, #212	; (adr r3, 800a4d0 <__ieee754_asin+0x308>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	f7f5 ff44 	bl	800028c <__adddf3>
 800a404:	4632      	mov	r2, r6
 800a406:	463b      	mov	r3, r7
 800a408:	f7f6 f8f6 	bl	80005f8 <__aeabi_dmul>
 800a40c:	a332      	add	r3, pc, #200	; (adr r3, 800a4d8 <__ieee754_asin+0x310>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	f7f5 ff39 	bl	8000288 <__aeabi_dsub>
 800a416:	4632      	mov	r2, r6
 800a418:	463b      	mov	r3, r7
 800a41a:	f7f6 f8ed 	bl	80005f8 <__aeabi_dmul>
 800a41e:	a330      	add	r3, pc, #192	; (adr r3, 800a4e0 <__ieee754_asin+0x318>)
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	f7f5 ff32 	bl	800028c <__adddf3>
 800a428:	4632      	mov	r2, r6
 800a42a:	463b      	mov	r3, r7
 800a42c:	f7f6 f8e4 	bl	80005f8 <__aeabi_dmul>
 800a430:	a32d      	add	r3, pc, #180	; (adr r3, 800a4e8 <__ieee754_asin+0x320>)
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	4680      	mov	r8, r0
 800a438:	4689      	mov	r9, r1
 800a43a:	4630      	mov	r0, r6
 800a43c:	4639      	mov	r1, r7
 800a43e:	f7f6 f8db 	bl	80005f8 <__aeabi_dmul>
 800a442:	a32b      	add	r3, pc, #172	; (adr r3, 800a4f0 <__ieee754_asin+0x328>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	f7f5 ff1e 	bl	8000288 <__aeabi_dsub>
 800a44c:	4632      	mov	r2, r6
 800a44e:	463b      	mov	r3, r7
 800a450:	f7f6 f8d2 	bl	80005f8 <__aeabi_dmul>
 800a454:	a328      	add	r3, pc, #160	; (adr r3, 800a4f8 <__ieee754_asin+0x330>)
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	f7f5 ff17 	bl	800028c <__adddf3>
 800a45e:	4632      	mov	r2, r6
 800a460:	463b      	mov	r3, r7
 800a462:	f7f6 f8c9 	bl	80005f8 <__aeabi_dmul>
 800a466:	a326      	add	r3, pc, #152	; (adr r3, 800a500 <__ieee754_asin+0x338>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	f7f5 ff0c 	bl	8000288 <__aeabi_dsub>
 800a470:	4632      	mov	r2, r6
 800a472:	463b      	mov	r3, r7
 800a474:	f7f6 f8c0 	bl	80005f8 <__aeabi_dmul>
 800a478:	4b25      	ldr	r3, [pc, #148]	; (800a510 <__ieee754_asin+0x348>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	f7f5 ff06 	bl	800028c <__adddf3>
 800a480:	4602      	mov	r2, r0
 800a482:	460b      	mov	r3, r1
 800a484:	4640      	mov	r0, r8
 800a486:	4649      	mov	r1, r9
 800a488:	f7f6 f9e0 	bl	800084c <__aeabi_ddiv>
 800a48c:	4622      	mov	r2, r4
 800a48e:	462b      	mov	r3, r5
 800a490:	f7f6 f8b2 	bl	80005f8 <__aeabi_dmul>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4620      	mov	r0, r4
 800a49a:	4629      	mov	r1, r5
 800a49c:	e6bf      	b.n	800a21e <__ieee754_asin+0x56>
 800a49e:	bf00      	nop
 800a4a0:	54442d18 	.word	0x54442d18
 800a4a4:	3ff921fb 	.word	0x3ff921fb
 800a4a8:	33145c07 	.word	0x33145c07
 800a4ac:	3c91a626 	.word	0x3c91a626
 800a4b0:	8800759c 	.word	0x8800759c
 800a4b4:	7e37e43c 	.word	0x7e37e43c
 800a4b8:	0dfdf709 	.word	0x0dfdf709
 800a4bc:	3f023de1 	.word	0x3f023de1
 800a4c0:	7501b288 	.word	0x7501b288
 800a4c4:	3f49efe0 	.word	0x3f49efe0
 800a4c8:	b5688f3b 	.word	0xb5688f3b
 800a4cc:	3fa48228 	.word	0x3fa48228
 800a4d0:	0e884455 	.word	0x0e884455
 800a4d4:	3fc9c155 	.word	0x3fc9c155
 800a4d8:	03eb6f7d 	.word	0x03eb6f7d
 800a4dc:	3fd4d612 	.word	0x3fd4d612
 800a4e0:	55555555 	.word	0x55555555
 800a4e4:	3fc55555 	.word	0x3fc55555
 800a4e8:	b12e9282 	.word	0xb12e9282
 800a4ec:	3fb3b8c5 	.word	0x3fb3b8c5
 800a4f0:	1b8d0159 	.word	0x1b8d0159
 800a4f4:	3fe6066c 	.word	0x3fe6066c
 800a4f8:	9c598ac8 	.word	0x9c598ac8
 800a4fc:	40002ae5 	.word	0x40002ae5
 800a500:	1c8a2d4b 	.word	0x1c8a2d4b
 800a504:	40033a27 	.word	0x40033a27
 800a508:	3fefffff 	.word	0x3fefffff
 800a50c:	3fdfffff 	.word	0x3fdfffff
 800a510:	3ff00000 	.word	0x3ff00000
 800a514:	3fe00000 	.word	0x3fe00000
 800a518:	3fef3332 	.word	0x3fef3332
 800a51c:	ee10 2a10 	vmov	r2, s0
 800a520:	ee10 0a10 	vmov	r0, s0
 800a524:	465b      	mov	r3, fp
 800a526:	4659      	mov	r1, fp
 800a528:	f7f5 feb0 	bl	800028c <__adddf3>
 800a52c:	4632      	mov	r2, r6
 800a52e:	463b      	mov	r3, r7
 800a530:	ec41 0b19 	vmov	d9, r0, r1
 800a534:	ec51 0b18 	vmov	r0, r1, d8
 800a538:	f7f6 f988 	bl	800084c <__aeabi_ddiv>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	ec51 0b19 	vmov	r0, r1, d9
 800a544:	f7f6 f858 	bl	80005f8 <__aeabi_dmul>
 800a548:	f04f 0800 	mov.w	r8, #0
 800a54c:	4606      	mov	r6, r0
 800a54e:	460f      	mov	r7, r1
 800a550:	4642      	mov	r2, r8
 800a552:	465b      	mov	r3, fp
 800a554:	4640      	mov	r0, r8
 800a556:	4659      	mov	r1, fp
 800a558:	f7f6 f84e 	bl	80005f8 <__aeabi_dmul>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	4620      	mov	r0, r4
 800a562:	4629      	mov	r1, r5
 800a564:	f7f5 fe90 	bl	8000288 <__aeabi_dsub>
 800a568:	4642      	mov	r2, r8
 800a56a:	4604      	mov	r4, r0
 800a56c:	460d      	mov	r5, r1
 800a56e:	465b      	mov	r3, fp
 800a570:	4650      	mov	r0, sl
 800a572:	4659      	mov	r1, fp
 800a574:	f7f5 fe8a 	bl	800028c <__adddf3>
 800a578:	4602      	mov	r2, r0
 800a57a:	460b      	mov	r3, r1
 800a57c:	4620      	mov	r0, r4
 800a57e:	4629      	mov	r1, r5
 800a580:	f7f6 f964 	bl	800084c <__aeabi_ddiv>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	f7f5 fe80 	bl	800028c <__adddf3>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	a113      	add	r1, pc, #76	; (adr r1, 800a5e0 <__ieee754_asin+0x418>)
 800a592:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a596:	f7f5 fe77 	bl	8000288 <__aeabi_dsub>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4630      	mov	r0, r6
 800a5a0:	4639      	mov	r1, r7
 800a5a2:	f7f5 fe71 	bl	8000288 <__aeabi_dsub>
 800a5a6:	4642      	mov	r2, r8
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	465b      	mov	r3, fp
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	4659      	mov	r1, fp
 800a5b2:	f7f5 fe6b 	bl	800028c <__adddf3>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	a10b      	add	r1, pc, #44	; (adr r1, 800a5e8 <__ieee754_asin+0x420>)
 800a5bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5c0:	f7f5 fe62 	bl	8000288 <__aeabi_dsub>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	f7f5 fe5c 	bl	8000288 <__aeabi_dsub>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	a104      	add	r1, pc, #16	; (adr r1, 800a5e8 <__ieee754_asin+0x420>)
 800a5d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5da:	e6df      	b.n	800a39c <__ieee754_asin+0x1d4>
 800a5dc:	f3af 8000 	nop.w
 800a5e0:	33145c07 	.word	0x33145c07
 800a5e4:	3c91a626 	.word	0x3c91a626
 800a5e8:	54442d18 	.word	0x54442d18
 800a5ec:	3fe921fb 	.word	0x3fe921fb

0800a5f0 <__ieee754_atan2>:
 800a5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f4:	ec57 6b11 	vmov	r6, r7, d1
 800a5f8:	4273      	negs	r3, r6
 800a5fa:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a780 <__ieee754_atan2+0x190>
 800a5fe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a602:	4333      	orrs	r3, r6
 800a604:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a608:	4573      	cmp	r3, lr
 800a60a:	ec51 0b10 	vmov	r0, r1, d0
 800a60e:	ee11 8a10 	vmov	r8, s2
 800a612:	d80a      	bhi.n	800a62a <__ieee754_atan2+0x3a>
 800a614:	4244      	negs	r4, r0
 800a616:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a61a:	4304      	orrs	r4, r0
 800a61c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a620:	4574      	cmp	r4, lr
 800a622:	ee10 9a10 	vmov	r9, s0
 800a626:	468c      	mov	ip, r1
 800a628:	d907      	bls.n	800a63a <__ieee754_atan2+0x4a>
 800a62a:	4632      	mov	r2, r6
 800a62c:	463b      	mov	r3, r7
 800a62e:	f7f5 fe2d 	bl	800028c <__adddf3>
 800a632:	ec41 0b10 	vmov	d0, r0, r1
 800a636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a63a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a63e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a642:	4334      	orrs	r4, r6
 800a644:	d103      	bne.n	800a64e <__ieee754_atan2+0x5e>
 800a646:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a64a:	f001 b831 	b.w	800b6b0 <atan>
 800a64e:	17bc      	asrs	r4, r7, #30
 800a650:	f004 0402 	and.w	r4, r4, #2
 800a654:	ea53 0909 	orrs.w	r9, r3, r9
 800a658:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a65c:	d107      	bne.n	800a66e <__ieee754_atan2+0x7e>
 800a65e:	2c02      	cmp	r4, #2
 800a660:	d060      	beq.n	800a724 <__ieee754_atan2+0x134>
 800a662:	2c03      	cmp	r4, #3
 800a664:	d1e5      	bne.n	800a632 <__ieee754_atan2+0x42>
 800a666:	a142      	add	r1, pc, #264	; (adr r1, 800a770 <__ieee754_atan2+0x180>)
 800a668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a66c:	e7e1      	b.n	800a632 <__ieee754_atan2+0x42>
 800a66e:	ea52 0808 	orrs.w	r8, r2, r8
 800a672:	d106      	bne.n	800a682 <__ieee754_atan2+0x92>
 800a674:	f1bc 0f00 	cmp.w	ip, #0
 800a678:	da5f      	bge.n	800a73a <__ieee754_atan2+0x14a>
 800a67a:	a13f      	add	r1, pc, #252	; (adr r1, 800a778 <__ieee754_atan2+0x188>)
 800a67c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a680:	e7d7      	b.n	800a632 <__ieee754_atan2+0x42>
 800a682:	4572      	cmp	r2, lr
 800a684:	d10f      	bne.n	800a6a6 <__ieee754_atan2+0xb6>
 800a686:	4293      	cmp	r3, r2
 800a688:	f104 34ff 	add.w	r4, r4, #4294967295
 800a68c:	d107      	bne.n	800a69e <__ieee754_atan2+0xae>
 800a68e:	2c02      	cmp	r4, #2
 800a690:	d84c      	bhi.n	800a72c <__ieee754_atan2+0x13c>
 800a692:	4b35      	ldr	r3, [pc, #212]	; (800a768 <__ieee754_atan2+0x178>)
 800a694:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a698:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a69c:	e7c9      	b.n	800a632 <__ieee754_atan2+0x42>
 800a69e:	2c02      	cmp	r4, #2
 800a6a0:	d848      	bhi.n	800a734 <__ieee754_atan2+0x144>
 800a6a2:	4b32      	ldr	r3, [pc, #200]	; (800a76c <__ieee754_atan2+0x17c>)
 800a6a4:	e7f6      	b.n	800a694 <__ieee754_atan2+0xa4>
 800a6a6:	4573      	cmp	r3, lr
 800a6a8:	d0e4      	beq.n	800a674 <__ieee754_atan2+0x84>
 800a6aa:	1a9b      	subs	r3, r3, r2
 800a6ac:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a6b0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6b4:	da1e      	bge.n	800a6f4 <__ieee754_atan2+0x104>
 800a6b6:	2f00      	cmp	r7, #0
 800a6b8:	da01      	bge.n	800a6be <__ieee754_atan2+0xce>
 800a6ba:	323c      	adds	r2, #60	; 0x3c
 800a6bc:	db1e      	blt.n	800a6fc <__ieee754_atan2+0x10c>
 800a6be:	4632      	mov	r2, r6
 800a6c0:	463b      	mov	r3, r7
 800a6c2:	f7f6 f8c3 	bl	800084c <__aeabi_ddiv>
 800a6c6:	ec41 0b10 	vmov	d0, r0, r1
 800a6ca:	f001 f991 	bl	800b9f0 <fabs>
 800a6ce:	f000 ffef 	bl	800b6b0 <atan>
 800a6d2:	ec51 0b10 	vmov	r0, r1, d0
 800a6d6:	2c01      	cmp	r4, #1
 800a6d8:	d013      	beq.n	800a702 <__ieee754_atan2+0x112>
 800a6da:	2c02      	cmp	r4, #2
 800a6dc:	d015      	beq.n	800a70a <__ieee754_atan2+0x11a>
 800a6de:	2c00      	cmp	r4, #0
 800a6e0:	d0a7      	beq.n	800a632 <__ieee754_atan2+0x42>
 800a6e2:	a319      	add	r3, pc, #100	; (adr r3, 800a748 <__ieee754_atan2+0x158>)
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	f7f5 fdce 	bl	8000288 <__aeabi_dsub>
 800a6ec:	a318      	add	r3, pc, #96	; (adr r3, 800a750 <__ieee754_atan2+0x160>)
 800a6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f2:	e014      	b.n	800a71e <__ieee754_atan2+0x12e>
 800a6f4:	a118      	add	r1, pc, #96	; (adr r1, 800a758 <__ieee754_atan2+0x168>)
 800a6f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6fa:	e7ec      	b.n	800a6d6 <__ieee754_atan2+0xe6>
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	2100      	movs	r1, #0
 800a700:	e7e9      	b.n	800a6d6 <__ieee754_atan2+0xe6>
 800a702:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a706:	4619      	mov	r1, r3
 800a708:	e793      	b.n	800a632 <__ieee754_atan2+0x42>
 800a70a:	a30f      	add	r3, pc, #60	; (adr r3, 800a748 <__ieee754_atan2+0x158>)
 800a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a710:	f7f5 fdba 	bl	8000288 <__aeabi_dsub>
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	a10d      	add	r1, pc, #52	; (adr r1, 800a750 <__ieee754_atan2+0x160>)
 800a71a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a71e:	f7f5 fdb3 	bl	8000288 <__aeabi_dsub>
 800a722:	e786      	b.n	800a632 <__ieee754_atan2+0x42>
 800a724:	a10a      	add	r1, pc, #40	; (adr r1, 800a750 <__ieee754_atan2+0x160>)
 800a726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a72a:	e782      	b.n	800a632 <__ieee754_atan2+0x42>
 800a72c:	a10c      	add	r1, pc, #48	; (adr r1, 800a760 <__ieee754_atan2+0x170>)
 800a72e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a732:	e77e      	b.n	800a632 <__ieee754_atan2+0x42>
 800a734:	2000      	movs	r0, #0
 800a736:	2100      	movs	r1, #0
 800a738:	e77b      	b.n	800a632 <__ieee754_atan2+0x42>
 800a73a:	a107      	add	r1, pc, #28	; (adr r1, 800a758 <__ieee754_atan2+0x168>)
 800a73c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a740:	e777      	b.n	800a632 <__ieee754_atan2+0x42>
 800a742:	bf00      	nop
 800a744:	f3af 8000 	nop.w
 800a748:	33145c07 	.word	0x33145c07
 800a74c:	3ca1a626 	.word	0x3ca1a626
 800a750:	54442d18 	.word	0x54442d18
 800a754:	400921fb 	.word	0x400921fb
 800a758:	54442d18 	.word	0x54442d18
 800a75c:	3ff921fb 	.word	0x3ff921fb
 800a760:	54442d18 	.word	0x54442d18
 800a764:	3fe921fb 	.word	0x3fe921fb
 800a768:	0800c110 	.word	0x0800c110
 800a76c:	0800c128 	.word	0x0800c128
 800a770:	54442d18 	.word	0x54442d18
 800a774:	c00921fb 	.word	0xc00921fb
 800a778:	54442d18 	.word	0x54442d18
 800a77c:	bff921fb 	.word	0xbff921fb
 800a780:	7ff00000 	.word	0x7ff00000
 800a784:	00000000 	.word	0x00000000

0800a788 <__ieee754_exp>:
 800a788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a78c:	ec55 4b10 	vmov	r4, r5, d0
 800a790:	49b5      	ldr	r1, [pc, #724]	; (800aa68 <__ieee754_exp+0x2e0>)
 800a792:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a796:	428b      	cmp	r3, r1
 800a798:	ed2d 8b04 	vpush	{d8-d9}
 800a79c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800a7a0:	d93d      	bls.n	800a81e <__ieee754_exp+0x96>
 800a7a2:	49b2      	ldr	r1, [pc, #712]	; (800aa6c <__ieee754_exp+0x2e4>)
 800a7a4:	428b      	cmp	r3, r1
 800a7a6:	d918      	bls.n	800a7da <__ieee754_exp+0x52>
 800a7a8:	ee10 3a10 	vmov	r3, s0
 800a7ac:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	d009      	beq.n	800a7c8 <__ieee754_exp+0x40>
 800a7b4:	ee10 2a10 	vmov	r2, s0
 800a7b8:	462b      	mov	r3, r5
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	4629      	mov	r1, r5
 800a7be:	f7f5 fd65 	bl	800028c <__adddf3>
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	460d      	mov	r5, r1
 800a7c6:	e002      	b.n	800a7ce <__ieee754_exp+0x46>
 800a7c8:	b10e      	cbz	r6, 800a7ce <__ieee754_exp+0x46>
 800a7ca:	2400      	movs	r4, #0
 800a7cc:	2500      	movs	r5, #0
 800a7ce:	ecbd 8b04 	vpop	{d8-d9}
 800a7d2:	ec45 4b10 	vmov	d0, r4, r5
 800a7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7da:	a38d      	add	r3, pc, #564	; (adr r3, 800aa10 <__ieee754_exp+0x288>)
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	ee10 0a10 	vmov	r0, s0
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	f7f6 f997 	bl	8000b18 <__aeabi_dcmpgt>
 800a7ea:	4607      	mov	r7, r0
 800a7ec:	b130      	cbz	r0, 800a7fc <__ieee754_exp+0x74>
 800a7ee:	ecbd 8b04 	vpop	{d8-d9}
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	f000 bf51 	b.w	800b69e <__math_oflow>
 800a7fc:	a386      	add	r3, pc, #536	; (adr r3, 800aa18 <__ieee754_exp+0x290>)
 800a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a802:	4620      	mov	r0, r4
 800a804:	4629      	mov	r1, r5
 800a806:	f7f6 f969 	bl	8000adc <__aeabi_dcmplt>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	f000 808b 	beq.w	800a926 <__ieee754_exp+0x19e>
 800a810:	ecbd 8b04 	vpop	{d8-d9}
 800a814:	4638      	mov	r0, r7
 800a816:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a81a:	f000 bf37 	b.w	800b68c <__math_uflow>
 800a81e:	4a94      	ldr	r2, [pc, #592]	; (800aa70 <__ieee754_exp+0x2e8>)
 800a820:	4293      	cmp	r3, r2
 800a822:	f240 80ac 	bls.w	800a97e <__ieee754_exp+0x1f6>
 800a826:	4a93      	ldr	r2, [pc, #588]	; (800aa74 <__ieee754_exp+0x2ec>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d87c      	bhi.n	800a926 <__ieee754_exp+0x19e>
 800a82c:	4b92      	ldr	r3, [pc, #584]	; (800aa78 <__ieee754_exp+0x2f0>)
 800a82e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	ee10 0a10 	vmov	r0, s0
 800a83a:	4629      	mov	r1, r5
 800a83c:	f7f5 fd24 	bl	8000288 <__aeabi_dsub>
 800a840:	4b8e      	ldr	r3, [pc, #568]	; (800aa7c <__ieee754_exp+0x2f4>)
 800a842:	00f7      	lsls	r7, r6, #3
 800a844:	443b      	add	r3, r7
 800a846:	ed93 7b00 	vldr	d7, [r3]
 800a84a:	f1c6 0a01 	rsb	sl, r6, #1
 800a84e:	4680      	mov	r8, r0
 800a850:	4689      	mov	r9, r1
 800a852:	ebaa 0a06 	sub.w	sl, sl, r6
 800a856:	eeb0 8a47 	vmov.f32	s16, s14
 800a85a:	eef0 8a67 	vmov.f32	s17, s15
 800a85e:	ec53 2b18 	vmov	r2, r3, d8
 800a862:	4640      	mov	r0, r8
 800a864:	4649      	mov	r1, r9
 800a866:	f7f5 fd0f 	bl	8000288 <__aeabi_dsub>
 800a86a:	4604      	mov	r4, r0
 800a86c:	460d      	mov	r5, r1
 800a86e:	4622      	mov	r2, r4
 800a870:	462b      	mov	r3, r5
 800a872:	4620      	mov	r0, r4
 800a874:	4629      	mov	r1, r5
 800a876:	f7f5 febf 	bl	80005f8 <__aeabi_dmul>
 800a87a:	a369      	add	r3, pc, #420	; (adr r3, 800aa20 <__ieee754_exp+0x298>)
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	4606      	mov	r6, r0
 800a882:	460f      	mov	r7, r1
 800a884:	f7f5 feb8 	bl	80005f8 <__aeabi_dmul>
 800a888:	a367      	add	r3, pc, #412	; (adr r3, 800aa28 <__ieee754_exp+0x2a0>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	f7f5 fcfb 	bl	8000288 <__aeabi_dsub>
 800a892:	4632      	mov	r2, r6
 800a894:	463b      	mov	r3, r7
 800a896:	f7f5 feaf 	bl	80005f8 <__aeabi_dmul>
 800a89a:	a365      	add	r3, pc, #404	; (adr r3, 800aa30 <__ieee754_exp+0x2a8>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f7f5 fcf4 	bl	800028c <__adddf3>
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	463b      	mov	r3, r7
 800a8a8:	f7f5 fea6 	bl	80005f8 <__aeabi_dmul>
 800a8ac:	a362      	add	r3, pc, #392	; (adr r3, 800aa38 <__ieee754_exp+0x2b0>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	f7f5 fce9 	bl	8000288 <__aeabi_dsub>
 800a8b6:	4632      	mov	r2, r6
 800a8b8:	463b      	mov	r3, r7
 800a8ba:	f7f5 fe9d 	bl	80005f8 <__aeabi_dmul>
 800a8be:	a360      	add	r3, pc, #384	; (adr r3, 800aa40 <__ieee754_exp+0x2b8>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fce2 	bl	800028c <__adddf3>
 800a8c8:	4632      	mov	r2, r6
 800a8ca:	463b      	mov	r3, r7
 800a8cc:	f7f5 fe94 	bl	80005f8 <__aeabi_dmul>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	f7f5 fcd6 	bl	8000288 <__aeabi_dsub>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4606      	mov	r6, r0
 800a8e2:	460f      	mov	r7, r1
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	f7f5 fe86 	bl	80005f8 <__aeabi_dmul>
 800a8ec:	ec41 0b19 	vmov	d9, r0, r1
 800a8f0:	f1ba 0f00 	cmp.w	sl, #0
 800a8f4:	d15d      	bne.n	800a9b2 <__ieee754_exp+0x22a>
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	4639      	mov	r1, r7
 800a900:	f7f5 fcc2 	bl	8000288 <__aeabi_dsub>
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
 800a908:	ec51 0b19 	vmov	r0, r1, d9
 800a90c:	f7f5 ff9e 	bl	800084c <__aeabi_ddiv>
 800a910:	4622      	mov	r2, r4
 800a912:	462b      	mov	r3, r5
 800a914:	f7f5 fcb8 	bl	8000288 <__aeabi_dsub>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	2000      	movs	r0, #0
 800a91e:	4958      	ldr	r1, [pc, #352]	; (800aa80 <__ieee754_exp+0x2f8>)
 800a920:	f7f5 fcb2 	bl	8000288 <__aeabi_dsub>
 800a924:	e74d      	b.n	800a7c2 <__ieee754_exp+0x3a>
 800a926:	4857      	ldr	r0, [pc, #348]	; (800aa84 <__ieee754_exp+0x2fc>)
 800a928:	a347      	add	r3, pc, #284	; (adr r3, 800aa48 <__ieee754_exp+0x2c0>)
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800a932:	4629      	mov	r1, r5
 800a934:	4620      	mov	r0, r4
 800a936:	f7f5 fe5f 	bl	80005f8 <__aeabi_dmul>
 800a93a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a93e:	f7f5 fca5 	bl	800028c <__adddf3>
 800a942:	f7f6 f909 	bl	8000b58 <__aeabi_d2iz>
 800a946:	4682      	mov	sl, r0
 800a948:	f7f5 fdec 	bl	8000524 <__aeabi_i2d>
 800a94c:	a340      	add	r3, pc, #256	; (adr r3, 800aa50 <__ieee754_exp+0x2c8>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	4606      	mov	r6, r0
 800a954:	460f      	mov	r7, r1
 800a956:	f7f5 fe4f 	bl	80005f8 <__aeabi_dmul>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	f7f5 fc91 	bl	8000288 <__aeabi_dsub>
 800a966:	a33c      	add	r3, pc, #240	; (adr r3, 800aa58 <__ieee754_exp+0x2d0>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	4680      	mov	r8, r0
 800a96e:	4689      	mov	r9, r1
 800a970:	4630      	mov	r0, r6
 800a972:	4639      	mov	r1, r7
 800a974:	f7f5 fe40 	bl	80005f8 <__aeabi_dmul>
 800a978:	ec41 0b18 	vmov	d8, r0, r1
 800a97c:	e76f      	b.n	800a85e <__ieee754_exp+0xd6>
 800a97e:	4a42      	ldr	r2, [pc, #264]	; (800aa88 <__ieee754_exp+0x300>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d811      	bhi.n	800a9a8 <__ieee754_exp+0x220>
 800a984:	a336      	add	r3, pc, #216	; (adr r3, 800aa60 <__ieee754_exp+0x2d8>)
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	ee10 0a10 	vmov	r0, s0
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f5 fc7c 	bl	800028c <__adddf3>
 800a994:	4b3a      	ldr	r3, [pc, #232]	; (800aa80 <__ieee754_exp+0x2f8>)
 800a996:	2200      	movs	r2, #0
 800a998:	f7f6 f8be 	bl	8000b18 <__aeabi_dcmpgt>
 800a99c:	b138      	cbz	r0, 800a9ae <__ieee754_exp+0x226>
 800a99e:	4b38      	ldr	r3, [pc, #224]	; (800aa80 <__ieee754_exp+0x2f8>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	e70a      	b.n	800a7be <__ieee754_exp+0x36>
 800a9a8:	f04f 0a00 	mov.w	sl, #0
 800a9ac:	e75f      	b.n	800a86e <__ieee754_exp+0xe6>
 800a9ae:	4682      	mov	sl, r0
 800a9b0:	e75d      	b.n	800a86e <__ieee754_exp+0xe6>
 800a9b2:	4632      	mov	r2, r6
 800a9b4:	463b      	mov	r3, r7
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a9bc:	f7f5 fc64 	bl	8000288 <__aeabi_dsub>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	ec51 0b19 	vmov	r0, r1, d9
 800a9c8:	f7f5 ff40 	bl	800084c <__aeabi_ddiv>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	ec51 0b18 	vmov	r0, r1, d8
 800a9d4:	f7f5 fc58 	bl	8000288 <__aeabi_dsub>
 800a9d8:	4642      	mov	r2, r8
 800a9da:	464b      	mov	r3, r9
 800a9dc:	f7f5 fc54 	bl	8000288 <__aeabi_dsub>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	4926      	ldr	r1, [pc, #152]	; (800aa80 <__ieee754_exp+0x2f8>)
 800a9e8:	f7f5 fc4e 	bl	8000288 <__aeabi_dsub>
 800a9ec:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800a9f0:	4592      	cmp	sl, r2
 800a9f2:	db02      	blt.n	800a9fa <__ieee754_exp+0x272>
 800a9f4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a9f8:	e6e3      	b.n	800a7c2 <__ieee754_exp+0x3a>
 800a9fa:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800a9fe:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800aa02:	2200      	movs	r2, #0
 800aa04:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800aa08:	f7f5 fdf6 	bl	80005f8 <__aeabi_dmul>
 800aa0c:	e6d9      	b.n	800a7c2 <__ieee754_exp+0x3a>
 800aa0e:	bf00      	nop
 800aa10:	fefa39ef 	.word	0xfefa39ef
 800aa14:	40862e42 	.word	0x40862e42
 800aa18:	d52d3051 	.word	0xd52d3051
 800aa1c:	c0874910 	.word	0xc0874910
 800aa20:	72bea4d0 	.word	0x72bea4d0
 800aa24:	3e663769 	.word	0x3e663769
 800aa28:	c5d26bf1 	.word	0xc5d26bf1
 800aa2c:	3ebbbd41 	.word	0x3ebbbd41
 800aa30:	af25de2c 	.word	0xaf25de2c
 800aa34:	3f11566a 	.word	0x3f11566a
 800aa38:	16bebd93 	.word	0x16bebd93
 800aa3c:	3f66c16c 	.word	0x3f66c16c
 800aa40:	5555553e 	.word	0x5555553e
 800aa44:	3fc55555 	.word	0x3fc55555
 800aa48:	652b82fe 	.word	0x652b82fe
 800aa4c:	3ff71547 	.word	0x3ff71547
 800aa50:	fee00000 	.word	0xfee00000
 800aa54:	3fe62e42 	.word	0x3fe62e42
 800aa58:	35793c76 	.word	0x35793c76
 800aa5c:	3dea39ef 	.word	0x3dea39ef
 800aa60:	8800759c 	.word	0x8800759c
 800aa64:	7e37e43c 	.word	0x7e37e43c
 800aa68:	40862e41 	.word	0x40862e41
 800aa6c:	7fefffff 	.word	0x7fefffff
 800aa70:	3fd62e42 	.word	0x3fd62e42
 800aa74:	3ff0a2b1 	.word	0x3ff0a2b1
 800aa78:	0800c150 	.word	0x0800c150
 800aa7c:	0800c160 	.word	0x0800c160
 800aa80:	3ff00000 	.word	0x3ff00000
 800aa84:	0800c140 	.word	0x0800c140
 800aa88:	3defffff 	.word	0x3defffff
 800aa8c:	00000000 	.word	0x00000000

0800aa90 <__ieee754_pow>:
 800aa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa94:	ed2d 8b06 	vpush	{d8-d10}
 800aa98:	b089      	sub	sp, #36	; 0x24
 800aa9a:	ed8d 1b00 	vstr	d1, [sp]
 800aa9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800aaa2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800aaa6:	ea58 0102 	orrs.w	r1, r8, r2
 800aaaa:	ec57 6b10 	vmov	r6, r7, d0
 800aaae:	d115      	bne.n	800aadc <__ieee754_pow+0x4c>
 800aab0:	19b3      	adds	r3, r6, r6
 800aab2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800aab6:	4152      	adcs	r2, r2
 800aab8:	4299      	cmp	r1, r3
 800aaba:	4b89      	ldr	r3, [pc, #548]	; (800ace0 <__ieee754_pow+0x250>)
 800aabc:	4193      	sbcs	r3, r2
 800aabe:	f080 84d2 	bcs.w	800b466 <__ieee754_pow+0x9d6>
 800aac2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aac6:	4630      	mov	r0, r6
 800aac8:	4639      	mov	r1, r7
 800aaca:	f7f5 fbdf 	bl	800028c <__adddf3>
 800aace:	ec41 0b10 	vmov	d0, r0, r1
 800aad2:	b009      	add	sp, #36	; 0x24
 800aad4:	ecbd 8b06 	vpop	{d8-d10}
 800aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aadc:	4b81      	ldr	r3, [pc, #516]	; (800ace4 <__ieee754_pow+0x254>)
 800aade:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800aae2:	429c      	cmp	r4, r3
 800aae4:	ee10 aa10 	vmov	sl, s0
 800aae8:	463d      	mov	r5, r7
 800aaea:	dc06      	bgt.n	800aafa <__ieee754_pow+0x6a>
 800aaec:	d101      	bne.n	800aaf2 <__ieee754_pow+0x62>
 800aaee:	2e00      	cmp	r6, #0
 800aaf0:	d1e7      	bne.n	800aac2 <__ieee754_pow+0x32>
 800aaf2:	4598      	cmp	r8, r3
 800aaf4:	dc01      	bgt.n	800aafa <__ieee754_pow+0x6a>
 800aaf6:	d10f      	bne.n	800ab18 <__ieee754_pow+0x88>
 800aaf8:	b172      	cbz	r2, 800ab18 <__ieee754_pow+0x88>
 800aafa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800aafe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ab02:	ea55 050a 	orrs.w	r5, r5, sl
 800ab06:	d1dc      	bne.n	800aac2 <__ieee754_pow+0x32>
 800ab08:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab0c:	18db      	adds	r3, r3, r3
 800ab0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ab12:	4152      	adcs	r2, r2
 800ab14:	429d      	cmp	r5, r3
 800ab16:	e7d0      	b.n	800aaba <__ieee754_pow+0x2a>
 800ab18:	2d00      	cmp	r5, #0
 800ab1a:	da3b      	bge.n	800ab94 <__ieee754_pow+0x104>
 800ab1c:	4b72      	ldr	r3, [pc, #456]	; (800ace8 <__ieee754_pow+0x258>)
 800ab1e:	4598      	cmp	r8, r3
 800ab20:	dc51      	bgt.n	800abc6 <__ieee754_pow+0x136>
 800ab22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ab26:	4598      	cmp	r8, r3
 800ab28:	f340 84ac 	ble.w	800b484 <__ieee754_pow+0x9f4>
 800ab2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ab30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ab34:	2b14      	cmp	r3, #20
 800ab36:	dd0f      	ble.n	800ab58 <__ieee754_pow+0xc8>
 800ab38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ab3c:	fa22 f103 	lsr.w	r1, r2, r3
 800ab40:	fa01 f303 	lsl.w	r3, r1, r3
 800ab44:	4293      	cmp	r3, r2
 800ab46:	f040 849d 	bne.w	800b484 <__ieee754_pow+0x9f4>
 800ab4a:	f001 0101 	and.w	r1, r1, #1
 800ab4e:	f1c1 0302 	rsb	r3, r1, #2
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	b182      	cbz	r2, 800ab78 <__ieee754_pow+0xe8>
 800ab56:	e05f      	b.n	800ac18 <__ieee754_pow+0x188>
 800ab58:	2a00      	cmp	r2, #0
 800ab5a:	d15b      	bne.n	800ac14 <__ieee754_pow+0x184>
 800ab5c:	f1c3 0314 	rsb	r3, r3, #20
 800ab60:	fa48 f103 	asr.w	r1, r8, r3
 800ab64:	fa01 f303 	lsl.w	r3, r1, r3
 800ab68:	4543      	cmp	r3, r8
 800ab6a:	f040 8488 	bne.w	800b47e <__ieee754_pow+0x9ee>
 800ab6e:	f001 0101 	and.w	r1, r1, #1
 800ab72:	f1c1 0302 	rsb	r3, r1, #2
 800ab76:	9304      	str	r3, [sp, #16]
 800ab78:	4b5c      	ldr	r3, [pc, #368]	; (800acec <__ieee754_pow+0x25c>)
 800ab7a:	4598      	cmp	r8, r3
 800ab7c:	d132      	bne.n	800abe4 <__ieee754_pow+0x154>
 800ab7e:	f1b9 0f00 	cmp.w	r9, #0
 800ab82:	f280 8478 	bge.w	800b476 <__ieee754_pow+0x9e6>
 800ab86:	4959      	ldr	r1, [pc, #356]	; (800acec <__ieee754_pow+0x25c>)
 800ab88:	4632      	mov	r2, r6
 800ab8a:	463b      	mov	r3, r7
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	f7f5 fe5d 	bl	800084c <__aeabi_ddiv>
 800ab92:	e79c      	b.n	800aace <__ieee754_pow+0x3e>
 800ab94:	2300      	movs	r3, #0
 800ab96:	9304      	str	r3, [sp, #16]
 800ab98:	2a00      	cmp	r2, #0
 800ab9a:	d13d      	bne.n	800ac18 <__ieee754_pow+0x188>
 800ab9c:	4b51      	ldr	r3, [pc, #324]	; (800ace4 <__ieee754_pow+0x254>)
 800ab9e:	4598      	cmp	r8, r3
 800aba0:	d1ea      	bne.n	800ab78 <__ieee754_pow+0xe8>
 800aba2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aba6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800abaa:	ea53 030a 	orrs.w	r3, r3, sl
 800abae:	f000 845a 	beq.w	800b466 <__ieee754_pow+0x9d6>
 800abb2:	4b4f      	ldr	r3, [pc, #316]	; (800acf0 <__ieee754_pow+0x260>)
 800abb4:	429c      	cmp	r4, r3
 800abb6:	dd08      	ble.n	800abca <__ieee754_pow+0x13a>
 800abb8:	f1b9 0f00 	cmp.w	r9, #0
 800abbc:	f2c0 8457 	blt.w	800b46e <__ieee754_pow+0x9de>
 800abc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abc4:	e783      	b.n	800aace <__ieee754_pow+0x3e>
 800abc6:	2302      	movs	r3, #2
 800abc8:	e7e5      	b.n	800ab96 <__ieee754_pow+0x106>
 800abca:	f1b9 0f00 	cmp.w	r9, #0
 800abce:	f04f 0000 	mov.w	r0, #0
 800abd2:	f04f 0100 	mov.w	r1, #0
 800abd6:	f6bf af7a 	bge.w	800aace <__ieee754_pow+0x3e>
 800abda:	e9dd 0300 	ldrd	r0, r3, [sp]
 800abde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800abe2:	e774      	b.n	800aace <__ieee754_pow+0x3e>
 800abe4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800abe8:	d106      	bne.n	800abf8 <__ieee754_pow+0x168>
 800abea:	4632      	mov	r2, r6
 800abec:	463b      	mov	r3, r7
 800abee:	4630      	mov	r0, r6
 800abf0:	4639      	mov	r1, r7
 800abf2:	f7f5 fd01 	bl	80005f8 <__aeabi_dmul>
 800abf6:	e76a      	b.n	800aace <__ieee754_pow+0x3e>
 800abf8:	4b3e      	ldr	r3, [pc, #248]	; (800acf4 <__ieee754_pow+0x264>)
 800abfa:	4599      	cmp	r9, r3
 800abfc:	d10c      	bne.n	800ac18 <__ieee754_pow+0x188>
 800abfe:	2d00      	cmp	r5, #0
 800ac00:	db0a      	blt.n	800ac18 <__ieee754_pow+0x188>
 800ac02:	ec47 6b10 	vmov	d0, r6, r7
 800ac06:	b009      	add	sp, #36	; 0x24
 800ac08:	ecbd 8b06 	vpop	{d8-d10}
 800ac0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	f000 bc6c 	b.w	800b4ec <__ieee754_sqrt>
 800ac14:	2300      	movs	r3, #0
 800ac16:	9304      	str	r3, [sp, #16]
 800ac18:	ec47 6b10 	vmov	d0, r6, r7
 800ac1c:	f000 fee8 	bl	800b9f0 <fabs>
 800ac20:	ec51 0b10 	vmov	r0, r1, d0
 800ac24:	f1ba 0f00 	cmp.w	sl, #0
 800ac28:	d129      	bne.n	800ac7e <__ieee754_pow+0x1ee>
 800ac2a:	b124      	cbz	r4, 800ac36 <__ieee754_pow+0x1a6>
 800ac2c:	4b2f      	ldr	r3, [pc, #188]	; (800acec <__ieee754_pow+0x25c>)
 800ac2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d123      	bne.n	800ac7e <__ieee754_pow+0x1ee>
 800ac36:	f1b9 0f00 	cmp.w	r9, #0
 800ac3a:	da05      	bge.n	800ac48 <__ieee754_pow+0x1b8>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	2000      	movs	r0, #0
 800ac42:	492a      	ldr	r1, [pc, #168]	; (800acec <__ieee754_pow+0x25c>)
 800ac44:	f7f5 fe02 	bl	800084c <__aeabi_ddiv>
 800ac48:	2d00      	cmp	r5, #0
 800ac4a:	f6bf af40 	bge.w	800aace <__ieee754_pow+0x3e>
 800ac4e:	9b04      	ldr	r3, [sp, #16]
 800ac50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ac54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ac58:	4323      	orrs	r3, r4
 800ac5a:	d108      	bne.n	800ac6e <__ieee754_pow+0x1de>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4610      	mov	r0, r2
 800ac62:	4619      	mov	r1, r3
 800ac64:	f7f5 fb10 	bl	8000288 <__aeabi_dsub>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	e78f      	b.n	800ab8e <__ieee754_pow+0xfe>
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	f47f af2c 	bne.w	800aace <__ieee754_pow+0x3e>
 800ac76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	e727      	b.n	800aace <__ieee754_pow+0x3e>
 800ac7e:	0feb      	lsrs	r3, r5, #31
 800ac80:	3b01      	subs	r3, #1
 800ac82:	9306      	str	r3, [sp, #24]
 800ac84:	9a06      	ldr	r2, [sp, #24]
 800ac86:	9b04      	ldr	r3, [sp, #16]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	d102      	bne.n	800ac92 <__ieee754_pow+0x202>
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	463b      	mov	r3, r7
 800ac90:	e7e6      	b.n	800ac60 <__ieee754_pow+0x1d0>
 800ac92:	4b19      	ldr	r3, [pc, #100]	; (800acf8 <__ieee754_pow+0x268>)
 800ac94:	4598      	cmp	r8, r3
 800ac96:	f340 80fb 	ble.w	800ae90 <__ieee754_pow+0x400>
 800ac9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ac9e:	4598      	cmp	r8, r3
 800aca0:	4b13      	ldr	r3, [pc, #76]	; (800acf0 <__ieee754_pow+0x260>)
 800aca2:	dd0c      	ble.n	800acbe <__ieee754_pow+0x22e>
 800aca4:	429c      	cmp	r4, r3
 800aca6:	dc0f      	bgt.n	800acc8 <__ieee754_pow+0x238>
 800aca8:	f1b9 0f00 	cmp.w	r9, #0
 800acac:	da0f      	bge.n	800acce <__ieee754_pow+0x23e>
 800acae:	2000      	movs	r0, #0
 800acb0:	b009      	add	sp, #36	; 0x24
 800acb2:	ecbd 8b06 	vpop	{d8-d10}
 800acb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acba:	f000 bcf0 	b.w	800b69e <__math_oflow>
 800acbe:	429c      	cmp	r4, r3
 800acc0:	dbf2      	blt.n	800aca8 <__ieee754_pow+0x218>
 800acc2:	4b0a      	ldr	r3, [pc, #40]	; (800acec <__ieee754_pow+0x25c>)
 800acc4:	429c      	cmp	r4, r3
 800acc6:	dd19      	ble.n	800acfc <__ieee754_pow+0x26c>
 800acc8:	f1b9 0f00 	cmp.w	r9, #0
 800accc:	dcef      	bgt.n	800acae <__ieee754_pow+0x21e>
 800acce:	2000      	movs	r0, #0
 800acd0:	b009      	add	sp, #36	; 0x24
 800acd2:	ecbd 8b06 	vpop	{d8-d10}
 800acd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acda:	f000 bcd7 	b.w	800b68c <__math_uflow>
 800acde:	bf00      	nop
 800ace0:	fff00000 	.word	0xfff00000
 800ace4:	7ff00000 	.word	0x7ff00000
 800ace8:	433fffff 	.word	0x433fffff
 800acec:	3ff00000 	.word	0x3ff00000
 800acf0:	3fefffff 	.word	0x3fefffff
 800acf4:	3fe00000 	.word	0x3fe00000
 800acf8:	41e00000 	.word	0x41e00000
 800acfc:	4b60      	ldr	r3, [pc, #384]	; (800ae80 <__ieee754_pow+0x3f0>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	f7f5 fac2 	bl	8000288 <__aeabi_dsub>
 800ad04:	a354      	add	r3, pc, #336	; (adr r3, 800ae58 <__ieee754_pow+0x3c8>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	f7f5 fc73 	bl	80005f8 <__aeabi_dmul>
 800ad12:	a353      	add	r3, pc, #332	; (adr r3, 800ae60 <__ieee754_pow+0x3d0>)
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	4606      	mov	r6, r0
 800ad1a:	460f      	mov	r7, r1
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	4629      	mov	r1, r5
 800ad20:	f7f5 fc6a 	bl	80005f8 <__aeabi_dmul>
 800ad24:	4b57      	ldr	r3, [pc, #348]	; (800ae84 <__ieee754_pow+0x3f4>)
 800ad26:	4682      	mov	sl, r0
 800ad28:	468b      	mov	fp, r1
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f7f5 fc62 	bl	80005f8 <__aeabi_dmul>
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	a14b      	add	r1, pc, #300	; (adr r1, 800ae68 <__ieee754_pow+0x3d8>)
 800ad3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad3e:	f7f5 faa3 	bl	8000288 <__aeabi_dsub>
 800ad42:	4622      	mov	r2, r4
 800ad44:	462b      	mov	r3, r5
 800ad46:	f7f5 fc57 	bl	80005f8 <__aeabi_dmul>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	2000      	movs	r0, #0
 800ad50:	494d      	ldr	r1, [pc, #308]	; (800ae88 <__ieee754_pow+0x3f8>)
 800ad52:	f7f5 fa99 	bl	8000288 <__aeabi_dsub>
 800ad56:	4622      	mov	r2, r4
 800ad58:	4680      	mov	r8, r0
 800ad5a:	4689      	mov	r9, r1
 800ad5c:	462b      	mov	r3, r5
 800ad5e:	4620      	mov	r0, r4
 800ad60:	4629      	mov	r1, r5
 800ad62:	f7f5 fc49 	bl	80005f8 <__aeabi_dmul>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	4649      	mov	r1, r9
 800ad6e:	f7f5 fc43 	bl	80005f8 <__aeabi_dmul>
 800ad72:	a33f      	add	r3, pc, #252	; (adr r3, 800ae70 <__ieee754_pow+0x3e0>)
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	f7f5 fc3e 	bl	80005f8 <__aeabi_dmul>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4650      	mov	r0, sl
 800ad82:	4659      	mov	r1, fp
 800ad84:	f7f5 fa80 	bl	8000288 <__aeabi_dsub>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4680      	mov	r8, r0
 800ad8e:	4689      	mov	r9, r1
 800ad90:	4630      	mov	r0, r6
 800ad92:	4639      	mov	r1, r7
 800ad94:	f7f5 fa7a 	bl	800028c <__adddf3>
 800ad98:	2000      	movs	r0, #0
 800ad9a:	4632      	mov	r2, r6
 800ad9c:	463b      	mov	r3, r7
 800ad9e:	4604      	mov	r4, r0
 800ada0:	460d      	mov	r5, r1
 800ada2:	f7f5 fa71 	bl	8000288 <__aeabi_dsub>
 800ada6:	4602      	mov	r2, r0
 800ada8:	460b      	mov	r3, r1
 800adaa:	4640      	mov	r0, r8
 800adac:	4649      	mov	r1, r9
 800adae:	f7f5 fa6b 	bl	8000288 <__aeabi_dsub>
 800adb2:	9b04      	ldr	r3, [sp, #16]
 800adb4:	9a06      	ldr	r2, [sp, #24]
 800adb6:	3b01      	subs	r3, #1
 800adb8:	4313      	orrs	r3, r2
 800adba:	4682      	mov	sl, r0
 800adbc:	468b      	mov	fp, r1
 800adbe:	f040 81e7 	bne.w	800b190 <__ieee754_pow+0x700>
 800adc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ae78 <__ieee754_pow+0x3e8>
 800adc6:	eeb0 8a47 	vmov.f32	s16, s14
 800adca:	eef0 8a67 	vmov.f32	s17, s15
 800adce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800add2:	2600      	movs	r6, #0
 800add4:	4632      	mov	r2, r6
 800add6:	463b      	mov	r3, r7
 800add8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800addc:	f7f5 fa54 	bl	8000288 <__aeabi_dsub>
 800ade0:	4622      	mov	r2, r4
 800ade2:	462b      	mov	r3, r5
 800ade4:	f7f5 fc08 	bl	80005f8 <__aeabi_dmul>
 800ade8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adec:	4680      	mov	r8, r0
 800adee:	4689      	mov	r9, r1
 800adf0:	4650      	mov	r0, sl
 800adf2:	4659      	mov	r1, fp
 800adf4:	f7f5 fc00 	bl	80005f8 <__aeabi_dmul>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	4640      	mov	r0, r8
 800adfe:	4649      	mov	r1, r9
 800ae00:	f7f5 fa44 	bl	800028c <__adddf3>
 800ae04:	4632      	mov	r2, r6
 800ae06:	463b      	mov	r3, r7
 800ae08:	4680      	mov	r8, r0
 800ae0a:	4689      	mov	r9, r1
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	4629      	mov	r1, r5
 800ae10:	f7f5 fbf2 	bl	80005f8 <__aeabi_dmul>
 800ae14:	460b      	mov	r3, r1
 800ae16:	4604      	mov	r4, r0
 800ae18:	460d      	mov	r5, r1
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	4649      	mov	r1, r9
 800ae1e:	4640      	mov	r0, r8
 800ae20:	f7f5 fa34 	bl	800028c <__adddf3>
 800ae24:	4b19      	ldr	r3, [pc, #100]	; (800ae8c <__ieee754_pow+0x3fc>)
 800ae26:	4299      	cmp	r1, r3
 800ae28:	ec45 4b19 	vmov	d9, r4, r5
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	460f      	mov	r7, r1
 800ae30:	468b      	mov	fp, r1
 800ae32:	f340 82f1 	ble.w	800b418 <__ieee754_pow+0x988>
 800ae36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ae3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ae3e:	4303      	orrs	r3, r0
 800ae40:	f000 81e4 	beq.w	800b20c <__ieee754_pow+0x77c>
 800ae44:	ec51 0b18 	vmov	r0, r1, d8
 800ae48:	2200      	movs	r2, #0
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f7f5 fe46 	bl	8000adc <__aeabi_dcmplt>
 800ae50:	3800      	subs	r0, #0
 800ae52:	bf18      	it	ne
 800ae54:	2001      	movne	r0, #1
 800ae56:	e72b      	b.n	800acb0 <__ieee754_pow+0x220>
 800ae58:	60000000 	.word	0x60000000
 800ae5c:	3ff71547 	.word	0x3ff71547
 800ae60:	f85ddf44 	.word	0xf85ddf44
 800ae64:	3e54ae0b 	.word	0x3e54ae0b
 800ae68:	55555555 	.word	0x55555555
 800ae6c:	3fd55555 	.word	0x3fd55555
 800ae70:	652b82fe 	.word	0x652b82fe
 800ae74:	3ff71547 	.word	0x3ff71547
 800ae78:	00000000 	.word	0x00000000
 800ae7c:	bff00000 	.word	0xbff00000
 800ae80:	3ff00000 	.word	0x3ff00000
 800ae84:	3fd00000 	.word	0x3fd00000
 800ae88:	3fe00000 	.word	0x3fe00000
 800ae8c:	408fffff 	.word	0x408fffff
 800ae90:	4bd5      	ldr	r3, [pc, #852]	; (800b1e8 <__ieee754_pow+0x758>)
 800ae92:	402b      	ands	r3, r5
 800ae94:	2200      	movs	r2, #0
 800ae96:	b92b      	cbnz	r3, 800aea4 <__ieee754_pow+0x414>
 800ae98:	4bd4      	ldr	r3, [pc, #848]	; (800b1ec <__ieee754_pow+0x75c>)
 800ae9a:	f7f5 fbad 	bl	80005f8 <__aeabi_dmul>
 800ae9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aea2:	460c      	mov	r4, r1
 800aea4:	1523      	asrs	r3, r4, #20
 800aea6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aeaa:	4413      	add	r3, r2
 800aeac:	9305      	str	r3, [sp, #20]
 800aeae:	4bd0      	ldr	r3, [pc, #832]	; (800b1f0 <__ieee754_pow+0x760>)
 800aeb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aeb4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aeb8:	429c      	cmp	r4, r3
 800aeba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aebe:	dd08      	ble.n	800aed2 <__ieee754_pow+0x442>
 800aec0:	4bcc      	ldr	r3, [pc, #816]	; (800b1f4 <__ieee754_pow+0x764>)
 800aec2:	429c      	cmp	r4, r3
 800aec4:	f340 8162 	ble.w	800b18c <__ieee754_pow+0x6fc>
 800aec8:	9b05      	ldr	r3, [sp, #20]
 800aeca:	3301      	adds	r3, #1
 800aecc:	9305      	str	r3, [sp, #20]
 800aece:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aed2:	2400      	movs	r4, #0
 800aed4:	00e3      	lsls	r3, r4, #3
 800aed6:	9307      	str	r3, [sp, #28]
 800aed8:	4bc7      	ldr	r3, [pc, #796]	; (800b1f8 <__ieee754_pow+0x768>)
 800aeda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aede:	ed93 7b00 	vldr	d7, [r3]
 800aee2:	4629      	mov	r1, r5
 800aee4:	ec53 2b17 	vmov	r2, r3, d7
 800aee8:	eeb0 9a47 	vmov.f32	s18, s14
 800aeec:	eef0 9a67 	vmov.f32	s19, s15
 800aef0:	4682      	mov	sl, r0
 800aef2:	f7f5 f9c9 	bl	8000288 <__aeabi_dsub>
 800aef6:	4652      	mov	r2, sl
 800aef8:	4606      	mov	r6, r0
 800aefa:	460f      	mov	r7, r1
 800aefc:	462b      	mov	r3, r5
 800aefe:	ec51 0b19 	vmov	r0, r1, d9
 800af02:	f7f5 f9c3 	bl	800028c <__adddf3>
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	2000      	movs	r0, #0
 800af0c:	49bb      	ldr	r1, [pc, #748]	; (800b1fc <__ieee754_pow+0x76c>)
 800af0e:	f7f5 fc9d 	bl	800084c <__aeabi_ddiv>
 800af12:	ec41 0b1a 	vmov	d10, r0, r1
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	4630      	mov	r0, r6
 800af1c:	4639      	mov	r1, r7
 800af1e:	f7f5 fb6b 	bl	80005f8 <__aeabi_dmul>
 800af22:	2300      	movs	r3, #0
 800af24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af28:	9302      	str	r3, [sp, #8]
 800af2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800af2e:	46ab      	mov	fp, r5
 800af30:	106d      	asrs	r5, r5, #1
 800af32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800af36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800af3a:	ec41 0b18 	vmov	d8, r0, r1
 800af3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800af42:	2200      	movs	r2, #0
 800af44:	4640      	mov	r0, r8
 800af46:	4649      	mov	r1, r9
 800af48:	4614      	mov	r4, r2
 800af4a:	461d      	mov	r5, r3
 800af4c:	f7f5 fb54 	bl	80005f8 <__aeabi_dmul>
 800af50:	4602      	mov	r2, r0
 800af52:	460b      	mov	r3, r1
 800af54:	4630      	mov	r0, r6
 800af56:	4639      	mov	r1, r7
 800af58:	f7f5 f996 	bl	8000288 <__aeabi_dsub>
 800af5c:	ec53 2b19 	vmov	r2, r3, d9
 800af60:	4606      	mov	r6, r0
 800af62:	460f      	mov	r7, r1
 800af64:	4620      	mov	r0, r4
 800af66:	4629      	mov	r1, r5
 800af68:	f7f5 f98e 	bl	8000288 <__aeabi_dsub>
 800af6c:	4602      	mov	r2, r0
 800af6e:	460b      	mov	r3, r1
 800af70:	4650      	mov	r0, sl
 800af72:	4659      	mov	r1, fp
 800af74:	f7f5 f988 	bl	8000288 <__aeabi_dsub>
 800af78:	4642      	mov	r2, r8
 800af7a:	464b      	mov	r3, r9
 800af7c:	f7f5 fb3c 	bl	80005f8 <__aeabi_dmul>
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	4630      	mov	r0, r6
 800af86:	4639      	mov	r1, r7
 800af88:	f7f5 f97e 	bl	8000288 <__aeabi_dsub>
 800af8c:	ec53 2b1a 	vmov	r2, r3, d10
 800af90:	f7f5 fb32 	bl	80005f8 <__aeabi_dmul>
 800af94:	ec53 2b18 	vmov	r2, r3, d8
 800af98:	ec41 0b19 	vmov	d9, r0, r1
 800af9c:	ec51 0b18 	vmov	r0, r1, d8
 800afa0:	f7f5 fb2a 	bl	80005f8 <__aeabi_dmul>
 800afa4:	a37c      	add	r3, pc, #496	; (adr r3, 800b198 <__ieee754_pow+0x708>)
 800afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afaa:	4604      	mov	r4, r0
 800afac:	460d      	mov	r5, r1
 800afae:	f7f5 fb23 	bl	80005f8 <__aeabi_dmul>
 800afb2:	a37b      	add	r3, pc, #492	; (adr r3, 800b1a0 <__ieee754_pow+0x710>)
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f7f5 f968 	bl	800028c <__adddf3>
 800afbc:	4622      	mov	r2, r4
 800afbe:	462b      	mov	r3, r5
 800afc0:	f7f5 fb1a 	bl	80005f8 <__aeabi_dmul>
 800afc4:	a378      	add	r3, pc, #480	; (adr r3, 800b1a8 <__ieee754_pow+0x718>)
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	f7f5 f95f 	bl	800028c <__adddf3>
 800afce:	4622      	mov	r2, r4
 800afd0:	462b      	mov	r3, r5
 800afd2:	f7f5 fb11 	bl	80005f8 <__aeabi_dmul>
 800afd6:	a376      	add	r3, pc, #472	; (adr r3, 800b1b0 <__ieee754_pow+0x720>)
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f7f5 f956 	bl	800028c <__adddf3>
 800afe0:	4622      	mov	r2, r4
 800afe2:	462b      	mov	r3, r5
 800afe4:	f7f5 fb08 	bl	80005f8 <__aeabi_dmul>
 800afe8:	a373      	add	r3, pc, #460	; (adr r3, 800b1b8 <__ieee754_pow+0x728>)
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	f7f5 f94d 	bl	800028c <__adddf3>
 800aff2:	4622      	mov	r2, r4
 800aff4:	462b      	mov	r3, r5
 800aff6:	f7f5 faff 	bl	80005f8 <__aeabi_dmul>
 800affa:	a371      	add	r3, pc, #452	; (adr r3, 800b1c0 <__ieee754_pow+0x730>)
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	f7f5 f944 	bl	800028c <__adddf3>
 800b004:	4622      	mov	r2, r4
 800b006:	4606      	mov	r6, r0
 800b008:	460f      	mov	r7, r1
 800b00a:	462b      	mov	r3, r5
 800b00c:	4620      	mov	r0, r4
 800b00e:	4629      	mov	r1, r5
 800b010:	f7f5 faf2 	bl	80005f8 <__aeabi_dmul>
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	4630      	mov	r0, r6
 800b01a:	4639      	mov	r1, r7
 800b01c:	f7f5 faec 	bl	80005f8 <__aeabi_dmul>
 800b020:	4642      	mov	r2, r8
 800b022:	4604      	mov	r4, r0
 800b024:	460d      	mov	r5, r1
 800b026:	464b      	mov	r3, r9
 800b028:	ec51 0b18 	vmov	r0, r1, d8
 800b02c:	f7f5 f92e 	bl	800028c <__adddf3>
 800b030:	ec53 2b19 	vmov	r2, r3, d9
 800b034:	f7f5 fae0 	bl	80005f8 <__aeabi_dmul>
 800b038:	4622      	mov	r2, r4
 800b03a:	462b      	mov	r3, r5
 800b03c:	f7f5 f926 	bl	800028c <__adddf3>
 800b040:	4642      	mov	r2, r8
 800b042:	4682      	mov	sl, r0
 800b044:	468b      	mov	fp, r1
 800b046:	464b      	mov	r3, r9
 800b048:	4640      	mov	r0, r8
 800b04a:	4649      	mov	r1, r9
 800b04c:	f7f5 fad4 	bl	80005f8 <__aeabi_dmul>
 800b050:	4b6b      	ldr	r3, [pc, #428]	; (800b200 <__ieee754_pow+0x770>)
 800b052:	2200      	movs	r2, #0
 800b054:	4606      	mov	r6, r0
 800b056:	460f      	mov	r7, r1
 800b058:	f7f5 f918 	bl	800028c <__adddf3>
 800b05c:	4652      	mov	r2, sl
 800b05e:	465b      	mov	r3, fp
 800b060:	f7f5 f914 	bl	800028c <__adddf3>
 800b064:	2000      	movs	r0, #0
 800b066:	4604      	mov	r4, r0
 800b068:	460d      	mov	r5, r1
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	4640      	mov	r0, r8
 800b070:	4649      	mov	r1, r9
 800b072:	f7f5 fac1 	bl	80005f8 <__aeabi_dmul>
 800b076:	4b62      	ldr	r3, [pc, #392]	; (800b200 <__ieee754_pow+0x770>)
 800b078:	4680      	mov	r8, r0
 800b07a:	4689      	mov	r9, r1
 800b07c:	2200      	movs	r2, #0
 800b07e:	4620      	mov	r0, r4
 800b080:	4629      	mov	r1, r5
 800b082:	f7f5 f901 	bl	8000288 <__aeabi_dsub>
 800b086:	4632      	mov	r2, r6
 800b088:	463b      	mov	r3, r7
 800b08a:	f7f5 f8fd 	bl	8000288 <__aeabi_dsub>
 800b08e:	4602      	mov	r2, r0
 800b090:	460b      	mov	r3, r1
 800b092:	4650      	mov	r0, sl
 800b094:	4659      	mov	r1, fp
 800b096:	f7f5 f8f7 	bl	8000288 <__aeabi_dsub>
 800b09a:	ec53 2b18 	vmov	r2, r3, d8
 800b09e:	f7f5 faab 	bl	80005f8 <__aeabi_dmul>
 800b0a2:	4622      	mov	r2, r4
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	460f      	mov	r7, r1
 800b0a8:	462b      	mov	r3, r5
 800b0aa:	ec51 0b19 	vmov	r0, r1, d9
 800b0ae:	f7f5 faa3 	bl	80005f8 <__aeabi_dmul>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	f7f5 f8e7 	bl	800028c <__adddf3>
 800b0be:	4606      	mov	r6, r0
 800b0c0:	460f      	mov	r7, r1
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	f7f5 f8df 	bl	800028c <__adddf3>
 800b0ce:	a33e      	add	r3, pc, #248	; (adr r3, 800b1c8 <__ieee754_pow+0x738>)
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	460d      	mov	r5, r1
 800b0da:	f7f5 fa8d 	bl	80005f8 <__aeabi_dmul>
 800b0de:	4642      	mov	r2, r8
 800b0e0:	ec41 0b18 	vmov	d8, r0, r1
 800b0e4:	464b      	mov	r3, r9
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	f7f5 f8cd 	bl	8000288 <__aeabi_dsub>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	f7f5 f8c7 	bl	8000288 <__aeabi_dsub>
 800b0fa:	a335      	add	r3, pc, #212	; (adr r3, 800b1d0 <__ieee754_pow+0x740>)
 800b0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b100:	f7f5 fa7a 	bl	80005f8 <__aeabi_dmul>
 800b104:	a334      	add	r3, pc, #208	; (adr r3, 800b1d8 <__ieee754_pow+0x748>)
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	4606      	mov	r6, r0
 800b10c:	460f      	mov	r7, r1
 800b10e:	4620      	mov	r0, r4
 800b110:	4629      	mov	r1, r5
 800b112:	f7f5 fa71 	bl	80005f8 <__aeabi_dmul>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4630      	mov	r0, r6
 800b11c:	4639      	mov	r1, r7
 800b11e:	f7f5 f8b5 	bl	800028c <__adddf3>
 800b122:	9a07      	ldr	r2, [sp, #28]
 800b124:	4b37      	ldr	r3, [pc, #220]	; (800b204 <__ieee754_pow+0x774>)
 800b126:	4413      	add	r3, r2
 800b128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12c:	f7f5 f8ae 	bl	800028c <__adddf3>
 800b130:	4682      	mov	sl, r0
 800b132:	9805      	ldr	r0, [sp, #20]
 800b134:	468b      	mov	fp, r1
 800b136:	f7f5 f9f5 	bl	8000524 <__aeabi_i2d>
 800b13a:	9a07      	ldr	r2, [sp, #28]
 800b13c:	4b32      	ldr	r3, [pc, #200]	; (800b208 <__ieee754_pow+0x778>)
 800b13e:	4413      	add	r3, r2
 800b140:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b144:	4606      	mov	r6, r0
 800b146:	460f      	mov	r7, r1
 800b148:	4652      	mov	r2, sl
 800b14a:	465b      	mov	r3, fp
 800b14c:	ec51 0b18 	vmov	r0, r1, d8
 800b150:	f7f5 f89c 	bl	800028c <__adddf3>
 800b154:	4642      	mov	r2, r8
 800b156:	464b      	mov	r3, r9
 800b158:	f7f5 f898 	bl	800028c <__adddf3>
 800b15c:	4632      	mov	r2, r6
 800b15e:	463b      	mov	r3, r7
 800b160:	f7f5 f894 	bl	800028c <__adddf3>
 800b164:	2000      	movs	r0, #0
 800b166:	4632      	mov	r2, r6
 800b168:	463b      	mov	r3, r7
 800b16a:	4604      	mov	r4, r0
 800b16c:	460d      	mov	r5, r1
 800b16e:	f7f5 f88b 	bl	8000288 <__aeabi_dsub>
 800b172:	4642      	mov	r2, r8
 800b174:	464b      	mov	r3, r9
 800b176:	f7f5 f887 	bl	8000288 <__aeabi_dsub>
 800b17a:	ec53 2b18 	vmov	r2, r3, d8
 800b17e:	f7f5 f883 	bl	8000288 <__aeabi_dsub>
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	4650      	mov	r0, sl
 800b188:	4659      	mov	r1, fp
 800b18a:	e610      	b.n	800adae <__ieee754_pow+0x31e>
 800b18c:	2401      	movs	r4, #1
 800b18e:	e6a1      	b.n	800aed4 <__ieee754_pow+0x444>
 800b190:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b1e0 <__ieee754_pow+0x750>
 800b194:	e617      	b.n	800adc6 <__ieee754_pow+0x336>
 800b196:	bf00      	nop
 800b198:	4a454eef 	.word	0x4a454eef
 800b19c:	3fca7e28 	.word	0x3fca7e28
 800b1a0:	93c9db65 	.word	0x93c9db65
 800b1a4:	3fcd864a 	.word	0x3fcd864a
 800b1a8:	a91d4101 	.word	0xa91d4101
 800b1ac:	3fd17460 	.word	0x3fd17460
 800b1b0:	518f264d 	.word	0x518f264d
 800b1b4:	3fd55555 	.word	0x3fd55555
 800b1b8:	db6fabff 	.word	0xdb6fabff
 800b1bc:	3fdb6db6 	.word	0x3fdb6db6
 800b1c0:	33333303 	.word	0x33333303
 800b1c4:	3fe33333 	.word	0x3fe33333
 800b1c8:	e0000000 	.word	0xe0000000
 800b1cc:	3feec709 	.word	0x3feec709
 800b1d0:	dc3a03fd 	.word	0xdc3a03fd
 800b1d4:	3feec709 	.word	0x3feec709
 800b1d8:	145b01f5 	.word	0x145b01f5
 800b1dc:	be3e2fe0 	.word	0xbe3e2fe0
 800b1e0:	00000000 	.word	0x00000000
 800b1e4:	3ff00000 	.word	0x3ff00000
 800b1e8:	7ff00000 	.word	0x7ff00000
 800b1ec:	43400000 	.word	0x43400000
 800b1f0:	0003988e 	.word	0x0003988e
 800b1f4:	000bb679 	.word	0x000bb679
 800b1f8:	0800c170 	.word	0x0800c170
 800b1fc:	3ff00000 	.word	0x3ff00000
 800b200:	40080000 	.word	0x40080000
 800b204:	0800c190 	.word	0x0800c190
 800b208:	0800c180 	.word	0x0800c180
 800b20c:	a3b5      	add	r3, pc, #724	; (adr r3, 800b4e4 <__ieee754_pow+0xa54>)
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	4640      	mov	r0, r8
 800b214:	4649      	mov	r1, r9
 800b216:	f7f5 f839 	bl	800028c <__adddf3>
 800b21a:	4622      	mov	r2, r4
 800b21c:	ec41 0b1a 	vmov	d10, r0, r1
 800b220:	462b      	mov	r3, r5
 800b222:	4630      	mov	r0, r6
 800b224:	4639      	mov	r1, r7
 800b226:	f7f5 f82f 	bl	8000288 <__aeabi_dsub>
 800b22a:	4602      	mov	r2, r0
 800b22c:	460b      	mov	r3, r1
 800b22e:	ec51 0b1a 	vmov	r0, r1, d10
 800b232:	f7f5 fc71 	bl	8000b18 <__aeabi_dcmpgt>
 800b236:	2800      	cmp	r0, #0
 800b238:	f47f ae04 	bne.w	800ae44 <__ieee754_pow+0x3b4>
 800b23c:	4aa4      	ldr	r2, [pc, #656]	; (800b4d0 <__ieee754_pow+0xa40>)
 800b23e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b242:	4293      	cmp	r3, r2
 800b244:	f340 8108 	ble.w	800b458 <__ieee754_pow+0x9c8>
 800b248:	151b      	asrs	r3, r3, #20
 800b24a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b24e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b252:	fa4a f303 	asr.w	r3, sl, r3
 800b256:	445b      	add	r3, fp
 800b258:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b25c:	4e9d      	ldr	r6, [pc, #628]	; (800b4d4 <__ieee754_pow+0xa44>)
 800b25e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b262:	4116      	asrs	r6, r2
 800b264:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b268:	2000      	movs	r0, #0
 800b26a:	ea23 0106 	bic.w	r1, r3, r6
 800b26e:	f1c2 0214 	rsb	r2, r2, #20
 800b272:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b276:	fa4a fa02 	asr.w	sl, sl, r2
 800b27a:	f1bb 0f00 	cmp.w	fp, #0
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4620      	mov	r0, r4
 800b284:	4629      	mov	r1, r5
 800b286:	bfb8      	it	lt
 800b288:	f1ca 0a00 	rsblt	sl, sl, #0
 800b28c:	f7f4 fffc 	bl	8000288 <__aeabi_dsub>
 800b290:	ec41 0b19 	vmov	d9, r0, r1
 800b294:	4642      	mov	r2, r8
 800b296:	464b      	mov	r3, r9
 800b298:	ec51 0b19 	vmov	r0, r1, d9
 800b29c:	f7f4 fff6 	bl	800028c <__adddf3>
 800b2a0:	a37b      	add	r3, pc, #492	; (adr r3, 800b490 <__ieee754_pow+0xa00>)
 800b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	460d      	mov	r5, r1
 800b2ac:	f7f5 f9a4 	bl	80005f8 <__aeabi_dmul>
 800b2b0:	ec53 2b19 	vmov	r2, r3, d9
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	460f      	mov	r7, r1
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	f7f4 ffe4 	bl	8000288 <__aeabi_dsub>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4640      	mov	r0, r8
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	f7f4 ffde 	bl	8000288 <__aeabi_dsub>
 800b2cc:	a372      	add	r3, pc, #456	; (adr r3, 800b498 <__ieee754_pow+0xa08>)
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	f7f5 f991 	bl	80005f8 <__aeabi_dmul>
 800b2d6:	a372      	add	r3, pc, #456	; (adr r3, 800b4a0 <__ieee754_pow+0xa10>)
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	4680      	mov	r8, r0
 800b2de:	4689      	mov	r9, r1
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	f7f5 f988 	bl	80005f8 <__aeabi_dmul>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4640      	mov	r0, r8
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	f7f4 ffcc 	bl	800028c <__adddf3>
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	460d      	mov	r5, r1
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	4639      	mov	r1, r7
 800b300:	f7f4 ffc4 	bl	800028c <__adddf3>
 800b304:	4632      	mov	r2, r6
 800b306:	463b      	mov	r3, r7
 800b308:	4680      	mov	r8, r0
 800b30a:	4689      	mov	r9, r1
 800b30c:	f7f4 ffbc 	bl	8000288 <__aeabi_dsub>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	4620      	mov	r0, r4
 800b316:	4629      	mov	r1, r5
 800b318:	f7f4 ffb6 	bl	8000288 <__aeabi_dsub>
 800b31c:	4642      	mov	r2, r8
 800b31e:	4606      	mov	r6, r0
 800b320:	460f      	mov	r7, r1
 800b322:	464b      	mov	r3, r9
 800b324:	4640      	mov	r0, r8
 800b326:	4649      	mov	r1, r9
 800b328:	f7f5 f966 	bl	80005f8 <__aeabi_dmul>
 800b32c:	a35e      	add	r3, pc, #376	; (adr r3, 800b4a8 <__ieee754_pow+0xa18>)
 800b32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b332:	4604      	mov	r4, r0
 800b334:	460d      	mov	r5, r1
 800b336:	f7f5 f95f 	bl	80005f8 <__aeabi_dmul>
 800b33a:	a35d      	add	r3, pc, #372	; (adr r3, 800b4b0 <__ieee754_pow+0xa20>)
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	f7f4 ffa2 	bl	8000288 <__aeabi_dsub>
 800b344:	4622      	mov	r2, r4
 800b346:	462b      	mov	r3, r5
 800b348:	f7f5 f956 	bl	80005f8 <__aeabi_dmul>
 800b34c:	a35a      	add	r3, pc, #360	; (adr r3, 800b4b8 <__ieee754_pow+0xa28>)
 800b34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b352:	f7f4 ff9b 	bl	800028c <__adddf3>
 800b356:	4622      	mov	r2, r4
 800b358:	462b      	mov	r3, r5
 800b35a:	f7f5 f94d 	bl	80005f8 <__aeabi_dmul>
 800b35e:	a358      	add	r3, pc, #352	; (adr r3, 800b4c0 <__ieee754_pow+0xa30>)
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	f7f4 ff90 	bl	8000288 <__aeabi_dsub>
 800b368:	4622      	mov	r2, r4
 800b36a:	462b      	mov	r3, r5
 800b36c:	f7f5 f944 	bl	80005f8 <__aeabi_dmul>
 800b370:	a355      	add	r3, pc, #340	; (adr r3, 800b4c8 <__ieee754_pow+0xa38>)
 800b372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b376:	f7f4 ff89 	bl	800028c <__adddf3>
 800b37a:	4622      	mov	r2, r4
 800b37c:	462b      	mov	r3, r5
 800b37e:	f7f5 f93b 	bl	80005f8 <__aeabi_dmul>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	4640      	mov	r0, r8
 800b388:	4649      	mov	r1, r9
 800b38a:	f7f4 ff7d 	bl	8000288 <__aeabi_dsub>
 800b38e:	4604      	mov	r4, r0
 800b390:	460d      	mov	r5, r1
 800b392:	4602      	mov	r2, r0
 800b394:	460b      	mov	r3, r1
 800b396:	4640      	mov	r0, r8
 800b398:	4649      	mov	r1, r9
 800b39a:	f7f5 f92d 	bl	80005f8 <__aeabi_dmul>
 800b39e:	2200      	movs	r2, #0
 800b3a0:	ec41 0b19 	vmov	d9, r0, r1
 800b3a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	f7f4 ff6c 	bl	8000288 <__aeabi_dsub>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	ec51 0b19 	vmov	r0, r1, d9
 800b3b8:	f7f5 fa48 	bl	800084c <__aeabi_ddiv>
 800b3bc:	4632      	mov	r2, r6
 800b3be:	4604      	mov	r4, r0
 800b3c0:	460d      	mov	r5, r1
 800b3c2:	463b      	mov	r3, r7
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	4649      	mov	r1, r9
 800b3c8:	f7f5 f916 	bl	80005f8 <__aeabi_dmul>
 800b3cc:	4632      	mov	r2, r6
 800b3ce:	463b      	mov	r3, r7
 800b3d0:	f7f4 ff5c 	bl	800028c <__adddf3>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4620      	mov	r0, r4
 800b3da:	4629      	mov	r1, r5
 800b3dc:	f7f4 ff54 	bl	8000288 <__aeabi_dsub>
 800b3e0:	4642      	mov	r2, r8
 800b3e2:	464b      	mov	r3, r9
 800b3e4:	f7f4 ff50 	bl	8000288 <__aeabi_dsub>
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	493a      	ldr	r1, [pc, #232]	; (800b4d8 <__ieee754_pow+0xa48>)
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	f7f4 ff4a 	bl	8000288 <__aeabi_dsub>
 800b3f4:	ec41 0b10 	vmov	d0, r0, r1
 800b3f8:	ee10 3a90 	vmov	r3, s1
 800b3fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b404:	da2b      	bge.n	800b45e <__ieee754_pow+0x9ce>
 800b406:	4650      	mov	r0, sl
 800b408:	f000 fb0e 	bl	800ba28 <scalbn>
 800b40c:	ec51 0b10 	vmov	r0, r1, d0
 800b410:	ec53 2b18 	vmov	r2, r3, d8
 800b414:	f7ff bbed 	b.w	800abf2 <__ieee754_pow+0x162>
 800b418:	4b30      	ldr	r3, [pc, #192]	; (800b4dc <__ieee754_pow+0xa4c>)
 800b41a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b41e:	429e      	cmp	r6, r3
 800b420:	f77f af0c 	ble.w	800b23c <__ieee754_pow+0x7ac>
 800b424:	4b2e      	ldr	r3, [pc, #184]	; (800b4e0 <__ieee754_pow+0xa50>)
 800b426:	440b      	add	r3, r1
 800b428:	4303      	orrs	r3, r0
 800b42a:	d009      	beq.n	800b440 <__ieee754_pow+0x9b0>
 800b42c:	ec51 0b18 	vmov	r0, r1, d8
 800b430:	2200      	movs	r2, #0
 800b432:	2300      	movs	r3, #0
 800b434:	f7f5 fb52 	bl	8000adc <__aeabi_dcmplt>
 800b438:	3800      	subs	r0, #0
 800b43a:	bf18      	it	ne
 800b43c:	2001      	movne	r0, #1
 800b43e:	e447      	b.n	800acd0 <__ieee754_pow+0x240>
 800b440:	4622      	mov	r2, r4
 800b442:	462b      	mov	r3, r5
 800b444:	f7f4 ff20 	bl	8000288 <__aeabi_dsub>
 800b448:	4642      	mov	r2, r8
 800b44a:	464b      	mov	r3, r9
 800b44c:	f7f5 fb5a 	bl	8000b04 <__aeabi_dcmpge>
 800b450:	2800      	cmp	r0, #0
 800b452:	f43f aef3 	beq.w	800b23c <__ieee754_pow+0x7ac>
 800b456:	e7e9      	b.n	800b42c <__ieee754_pow+0x99c>
 800b458:	f04f 0a00 	mov.w	sl, #0
 800b45c:	e71a      	b.n	800b294 <__ieee754_pow+0x804>
 800b45e:	ec51 0b10 	vmov	r0, r1, d0
 800b462:	4619      	mov	r1, r3
 800b464:	e7d4      	b.n	800b410 <__ieee754_pow+0x980>
 800b466:	491c      	ldr	r1, [pc, #112]	; (800b4d8 <__ieee754_pow+0xa48>)
 800b468:	2000      	movs	r0, #0
 800b46a:	f7ff bb30 	b.w	800aace <__ieee754_pow+0x3e>
 800b46e:	2000      	movs	r0, #0
 800b470:	2100      	movs	r1, #0
 800b472:	f7ff bb2c 	b.w	800aace <__ieee754_pow+0x3e>
 800b476:	4630      	mov	r0, r6
 800b478:	4639      	mov	r1, r7
 800b47a:	f7ff bb28 	b.w	800aace <__ieee754_pow+0x3e>
 800b47e:	9204      	str	r2, [sp, #16]
 800b480:	f7ff bb7a 	b.w	800ab78 <__ieee754_pow+0xe8>
 800b484:	2300      	movs	r3, #0
 800b486:	f7ff bb64 	b.w	800ab52 <__ieee754_pow+0xc2>
 800b48a:	bf00      	nop
 800b48c:	f3af 8000 	nop.w
 800b490:	00000000 	.word	0x00000000
 800b494:	3fe62e43 	.word	0x3fe62e43
 800b498:	fefa39ef 	.word	0xfefa39ef
 800b49c:	3fe62e42 	.word	0x3fe62e42
 800b4a0:	0ca86c39 	.word	0x0ca86c39
 800b4a4:	be205c61 	.word	0xbe205c61
 800b4a8:	72bea4d0 	.word	0x72bea4d0
 800b4ac:	3e663769 	.word	0x3e663769
 800b4b0:	c5d26bf1 	.word	0xc5d26bf1
 800b4b4:	3ebbbd41 	.word	0x3ebbbd41
 800b4b8:	af25de2c 	.word	0xaf25de2c
 800b4bc:	3f11566a 	.word	0x3f11566a
 800b4c0:	16bebd93 	.word	0x16bebd93
 800b4c4:	3f66c16c 	.word	0x3f66c16c
 800b4c8:	5555553e 	.word	0x5555553e
 800b4cc:	3fc55555 	.word	0x3fc55555
 800b4d0:	3fe00000 	.word	0x3fe00000
 800b4d4:	000fffff 	.word	0x000fffff
 800b4d8:	3ff00000 	.word	0x3ff00000
 800b4dc:	4090cbff 	.word	0x4090cbff
 800b4e0:	3f6f3400 	.word	0x3f6f3400
 800b4e4:	652b82fe 	.word	0x652b82fe
 800b4e8:	3c971547 	.word	0x3c971547

0800b4ec <__ieee754_sqrt>:
 800b4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f0:	ec55 4b10 	vmov	r4, r5, d0
 800b4f4:	4e55      	ldr	r6, [pc, #340]	; (800b64c <__ieee754_sqrt+0x160>)
 800b4f6:	43ae      	bics	r6, r5
 800b4f8:	ee10 0a10 	vmov	r0, s0
 800b4fc:	ee10 3a10 	vmov	r3, s0
 800b500:	462a      	mov	r2, r5
 800b502:	4629      	mov	r1, r5
 800b504:	d110      	bne.n	800b528 <__ieee754_sqrt+0x3c>
 800b506:	ee10 2a10 	vmov	r2, s0
 800b50a:	462b      	mov	r3, r5
 800b50c:	f7f5 f874 	bl	80005f8 <__aeabi_dmul>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4620      	mov	r0, r4
 800b516:	4629      	mov	r1, r5
 800b518:	f7f4 feb8 	bl	800028c <__adddf3>
 800b51c:	4604      	mov	r4, r0
 800b51e:	460d      	mov	r5, r1
 800b520:	ec45 4b10 	vmov	d0, r4, r5
 800b524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b528:	2d00      	cmp	r5, #0
 800b52a:	dc10      	bgt.n	800b54e <__ieee754_sqrt+0x62>
 800b52c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b530:	4330      	orrs	r0, r6
 800b532:	d0f5      	beq.n	800b520 <__ieee754_sqrt+0x34>
 800b534:	b15d      	cbz	r5, 800b54e <__ieee754_sqrt+0x62>
 800b536:	ee10 2a10 	vmov	r2, s0
 800b53a:	462b      	mov	r3, r5
 800b53c:	ee10 0a10 	vmov	r0, s0
 800b540:	f7f4 fea2 	bl	8000288 <__aeabi_dsub>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	f7f5 f980 	bl	800084c <__aeabi_ddiv>
 800b54c:	e7e6      	b.n	800b51c <__ieee754_sqrt+0x30>
 800b54e:	1512      	asrs	r2, r2, #20
 800b550:	d074      	beq.n	800b63c <__ieee754_sqrt+0x150>
 800b552:	07d4      	lsls	r4, r2, #31
 800b554:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b558:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b55c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b560:	bf5e      	ittt	pl
 800b562:	0fda      	lsrpl	r2, r3, #31
 800b564:	005b      	lslpl	r3, r3, #1
 800b566:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b56a:	2400      	movs	r4, #0
 800b56c:	0fda      	lsrs	r2, r3, #31
 800b56e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b572:	107f      	asrs	r7, r7, #1
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	2516      	movs	r5, #22
 800b578:	4620      	mov	r0, r4
 800b57a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b57e:	1886      	adds	r6, r0, r2
 800b580:	428e      	cmp	r6, r1
 800b582:	bfde      	ittt	le
 800b584:	1b89      	suble	r1, r1, r6
 800b586:	18b0      	addle	r0, r6, r2
 800b588:	18a4      	addle	r4, r4, r2
 800b58a:	0049      	lsls	r1, r1, #1
 800b58c:	3d01      	subs	r5, #1
 800b58e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b592:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b596:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b59a:	d1f0      	bne.n	800b57e <__ieee754_sqrt+0x92>
 800b59c:	462a      	mov	r2, r5
 800b59e:	f04f 0e20 	mov.w	lr, #32
 800b5a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b5a6:	4281      	cmp	r1, r0
 800b5a8:	eb06 0c05 	add.w	ip, r6, r5
 800b5ac:	dc02      	bgt.n	800b5b4 <__ieee754_sqrt+0xc8>
 800b5ae:	d113      	bne.n	800b5d8 <__ieee754_sqrt+0xec>
 800b5b0:	459c      	cmp	ip, r3
 800b5b2:	d811      	bhi.n	800b5d8 <__ieee754_sqrt+0xec>
 800b5b4:	f1bc 0f00 	cmp.w	ip, #0
 800b5b8:	eb0c 0506 	add.w	r5, ip, r6
 800b5bc:	da43      	bge.n	800b646 <__ieee754_sqrt+0x15a>
 800b5be:	2d00      	cmp	r5, #0
 800b5c0:	db41      	blt.n	800b646 <__ieee754_sqrt+0x15a>
 800b5c2:	f100 0801 	add.w	r8, r0, #1
 800b5c6:	1a09      	subs	r1, r1, r0
 800b5c8:	459c      	cmp	ip, r3
 800b5ca:	bf88      	it	hi
 800b5cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b5d0:	eba3 030c 	sub.w	r3, r3, ip
 800b5d4:	4432      	add	r2, r6
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b5dc:	f1be 0e01 	subs.w	lr, lr, #1
 800b5e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b5e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b5e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b5ec:	d1db      	bne.n	800b5a6 <__ieee754_sqrt+0xba>
 800b5ee:	430b      	orrs	r3, r1
 800b5f0:	d006      	beq.n	800b600 <__ieee754_sqrt+0x114>
 800b5f2:	1c50      	adds	r0, r2, #1
 800b5f4:	bf13      	iteet	ne
 800b5f6:	3201      	addne	r2, #1
 800b5f8:	3401      	addeq	r4, #1
 800b5fa:	4672      	moveq	r2, lr
 800b5fc:	f022 0201 	bicne.w	r2, r2, #1
 800b600:	1063      	asrs	r3, r4, #1
 800b602:	0852      	lsrs	r2, r2, #1
 800b604:	07e1      	lsls	r1, r4, #31
 800b606:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b60a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b60e:	bf48      	it	mi
 800b610:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b614:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b618:	4614      	mov	r4, r2
 800b61a:	e781      	b.n	800b520 <__ieee754_sqrt+0x34>
 800b61c:	0ad9      	lsrs	r1, r3, #11
 800b61e:	3815      	subs	r0, #21
 800b620:	055b      	lsls	r3, r3, #21
 800b622:	2900      	cmp	r1, #0
 800b624:	d0fa      	beq.n	800b61c <__ieee754_sqrt+0x130>
 800b626:	02cd      	lsls	r5, r1, #11
 800b628:	d50a      	bpl.n	800b640 <__ieee754_sqrt+0x154>
 800b62a:	f1c2 0420 	rsb	r4, r2, #32
 800b62e:	fa23 f404 	lsr.w	r4, r3, r4
 800b632:	1e55      	subs	r5, r2, #1
 800b634:	4093      	lsls	r3, r2
 800b636:	4321      	orrs	r1, r4
 800b638:	1b42      	subs	r2, r0, r5
 800b63a:	e78a      	b.n	800b552 <__ieee754_sqrt+0x66>
 800b63c:	4610      	mov	r0, r2
 800b63e:	e7f0      	b.n	800b622 <__ieee754_sqrt+0x136>
 800b640:	0049      	lsls	r1, r1, #1
 800b642:	3201      	adds	r2, #1
 800b644:	e7ef      	b.n	800b626 <__ieee754_sqrt+0x13a>
 800b646:	4680      	mov	r8, r0
 800b648:	e7bd      	b.n	800b5c6 <__ieee754_sqrt+0xda>
 800b64a:	bf00      	nop
 800b64c:	7ff00000 	.word	0x7ff00000

0800b650 <with_errno>:
 800b650:	b570      	push	{r4, r5, r6, lr}
 800b652:	4604      	mov	r4, r0
 800b654:	460d      	mov	r5, r1
 800b656:	4616      	mov	r6, r2
 800b658:	f7fd fffc 	bl	8009654 <__errno>
 800b65c:	4629      	mov	r1, r5
 800b65e:	6006      	str	r6, [r0, #0]
 800b660:	4620      	mov	r0, r4
 800b662:	bd70      	pop	{r4, r5, r6, pc}

0800b664 <xflow>:
 800b664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b666:	4614      	mov	r4, r2
 800b668:	461d      	mov	r5, r3
 800b66a:	b108      	cbz	r0, 800b670 <xflow+0xc>
 800b66c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b670:	e9cd 2300 	strd	r2, r3, [sp]
 800b674:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b678:	4620      	mov	r0, r4
 800b67a:	4629      	mov	r1, r5
 800b67c:	f7f4 ffbc 	bl	80005f8 <__aeabi_dmul>
 800b680:	2222      	movs	r2, #34	; 0x22
 800b682:	b003      	add	sp, #12
 800b684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b688:	f7ff bfe2 	b.w	800b650 <with_errno>

0800b68c <__math_uflow>:
 800b68c:	b508      	push	{r3, lr}
 800b68e:	2200      	movs	r2, #0
 800b690:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b694:	f7ff ffe6 	bl	800b664 <xflow>
 800b698:	ec41 0b10 	vmov	d0, r0, r1
 800b69c:	bd08      	pop	{r3, pc}

0800b69e <__math_oflow>:
 800b69e:	b508      	push	{r3, lr}
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b6a6:	f7ff ffdd 	bl	800b664 <xflow>
 800b6aa:	ec41 0b10 	vmov	d0, r0, r1
 800b6ae:	bd08      	pop	{r3, pc}

0800b6b0 <atan>:
 800b6b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	ec55 4b10 	vmov	r4, r5, d0
 800b6b8:	4bc3      	ldr	r3, [pc, #780]	; (800b9c8 <atan+0x318>)
 800b6ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b6be:	429e      	cmp	r6, r3
 800b6c0:	46ab      	mov	fp, r5
 800b6c2:	dd18      	ble.n	800b6f6 <atan+0x46>
 800b6c4:	4bc1      	ldr	r3, [pc, #772]	; (800b9cc <atan+0x31c>)
 800b6c6:	429e      	cmp	r6, r3
 800b6c8:	dc01      	bgt.n	800b6ce <atan+0x1e>
 800b6ca:	d109      	bne.n	800b6e0 <atan+0x30>
 800b6cc:	b144      	cbz	r4, 800b6e0 <atan+0x30>
 800b6ce:	4622      	mov	r2, r4
 800b6d0:	462b      	mov	r3, r5
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	f7f4 fdd9 	bl	800028c <__adddf3>
 800b6da:	4604      	mov	r4, r0
 800b6dc:	460d      	mov	r5, r1
 800b6de:	e006      	b.n	800b6ee <atan+0x3e>
 800b6e0:	f1bb 0f00 	cmp.w	fp, #0
 800b6e4:	f300 8131 	bgt.w	800b94a <atan+0x29a>
 800b6e8:	a59b      	add	r5, pc, #620	; (adr r5, 800b958 <atan+0x2a8>)
 800b6ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b6ee:	ec45 4b10 	vmov	d0, r4, r5
 800b6f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f6:	4bb6      	ldr	r3, [pc, #728]	; (800b9d0 <atan+0x320>)
 800b6f8:	429e      	cmp	r6, r3
 800b6fa:	dc14      	bgt.n	800b726 <atan+0x76>
 800b6fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b700:	429e      	cmp	r6, r3
 800b702:	dc0d      	bgt.n	800b720 <atan+0x70>
 800b704:	a396      	add	r3, pc, #600	; (adr r3, 800b960 <atan+0x2b0>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	ee10 0a10 	vmov	r0, s0
 800b70e:	4629      	mov	r1, r5
 800b710:	f7f4 fdbc 	bl	800028c <__adddf3>
 800b714:	4baf      	ldr	r3, [pc, #700]	; (800b9d4 <atan+0x324>)
 800b716:	2200      	movs	r2, #0
 800b718:	f7f5 f9fe 	bl	8000b18 <__aeabi_dcmpgt>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d1e6      	bne.n	800b6ee <atan+0x3e>
 800b720:	f04f 3aff 	mov.w	sl, #4294967295
 800b724:	e02b      	b.n	800b77e <atan+0xce>
 800b726:	f000 f963 	bl	800b9f0 <fabs>
 800b72a:	4bab      	ldr	r3, [pc, #684]	; (800b9d8 <atan+0x328>)
 800b72c:	429e      	cmp	r6, r3
 800b72e:	ec55 4b10 	vmov	r4, r5, d0
 800b732:	f300 80bf 	bgt.w	800b8b4 <atan+0x204>
 800b736:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b73a:	429e      	cmp	r6, r3
 800b73c:	f300 80a0 	bgt.w	800b880 <atan+0x1d0>
 800b740:	ee10 2a10 	vmov	r2, s0
 800b744:	ee10 0a10 	vmov	r0, s0
 800b748:	462b      	mov	r3, r5
 800b74a:	4629      	mov	r1, r5
 800b74c:	f7f4 fd9e 	bl	800028c <__adddf3>
 800b750:	4ba0      	ldr	r3, [pc, #640]	; (800b9d4 <atan+0x324>)
 800b752:	2200      	movs	r2, #0
 800b754:	f7f4 fd98 	bl	8000288 <__aeabi_dsub>
 800b758:	2200      	movs	r2, #0
 800b75a:	4606      	mov	r6, r0
 800b75c:	460f      	mov	r7, r1
 800b75e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b762:	4620      	mov	r0, r4
 800b764:	4629      	mov	r1, r5
 800b766:	f7f4 fd91 	bl	800028c <__adddf3>
 800b76a:	4602      	mov	r2, r0
 800b76c:	460b      	mov	r3, r1
 800b76e:	4630      	mov	r0, r6
 800b770:	4639      	mov	r1, r7
 800b772:	f7f5 f86b 	bl	800084c <__aeabi_ddiv>
 800b776:	f04f 0a00 	mov.w	sl, #0
 800b77a:	4604      	mov	r4, r0
 800b77c:	460d      	mov	r5, r1
 800b77e:	4622      	mov	r2, r4
 800b780:	462b      	mov	r3, r5
 800b782:	4620      	mov	r0, r4
 800b784:	4629      	mov	r1, r5
 800b786:	f7f4 ff37 	bl	80005f8 <__aeabi_dmul>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4680      	mov	r8, r0
 800b790:	4689      	mov	r9, r1
 800b792:	f7f4 ff31 	bl	80005f8 <__aeabi_dmul>
 800b796:	a374      	add	r3, pc, #464	; (adr r3, 800b968 <atan+0x2b8>)
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	4606      	mov	r6, r0
 800b79e:	460f      	mov	r7, r1
 800b7a0:	f7f4 ff2a 	bl	80005f8 <__aeabi_dmul>
 800b7a4:	a372      	add	r3, pc, #456	; (adr r3, 800b970 <atan+0x2c0>)
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f7f4 fd6f 	bl	800028c <__adddf3>
 800b7ae:	4632      	mov	r2, r6
 800b7b0:	463b      	mov	r3, r7
 800b7b2:	f7f4 ff21 	bl	80005f8 <__aeabi_dmul>
 800b7b6:	a370      	add	r3, pc, #448	; (adr r3, 800b978 <atan+0x2c8>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	f7f4 fd66 	bl	800028c <__adddf3>
 800b7c0:	4632      	mov	r2, r6
 800b7c2:	463b      	mov	r3, r7
 800b7c4:	f7f4 ff18 	bl	80005f8 <__aeabi_dmul>
 800b7c8:	a36d      	add	r3, pc, #436	; (adr r3, 800b980 <atan+0x2d0>)
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	f7f4 fd5d 	bl	800028c <__adddf3>
 800b7d2:	4632      	mov	r2, r6
 800b7d4:	463b      	mov	r3, r7
 800b7d6:	f7f4 ff0f 	bl	80005f8 <__aeabi_dmul>
 800b7da:	a36b      	add	r3, pc, #428	; (adr r3, 800b988 <atan+0x2d8>)
 800b7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e0:	f7f4 fd54 	bl	800028c <__adddf3>
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	463b      	mov	r3, r7
 800b7e8:	f7f4 ff06 	bl	80005f8 <__aeabi_dmul>
 800b7ec:	a368      	add	r3, pc, #416	; (adr r3, 800b990 <atan+0x2e0>)
 800b7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f2:	f7f4 fd4b 	bl	800028c <__adddf3>
 800b7f6:	4642      	mov	r2, r8
 800b7f8:	464b      	mov	r3, r9
 800b7fa:	f7f4 fefd 	bl	80005f8 <__aeabi_dmul>
 800b7fe:	a366      	add	r3, pc, #408	; (adr r3, 800b998 <atan+0x2e8>)
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	4680      	mov	r8, r0
 800b806:	4689      	mov	r9, r1
 800b808:	4630      	mov	r0, r6
 800b80a:	4639      	mov	r1, r7
 800b80c:	f7f4 fef4 	bl	80005f8 <__aeabi_dmul>
 800b810:	a363      	add	r3, pc, #396	; (adr r3, 800b9a0 <atan+0x2f0>)
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	f7f4 fd37 	bl	8000288 <__aeabi_dsub>
 800b81a:	4632      	mov	r2, r6
 800b81c:	463b      	mov	r3, r7
 800b81e:	f7f4 feeb 	bl	80005f8 <__aeabi_dmul>
 800b822:	a361      	add	r3, pc, #388	; (adr r3, 800b9a8 <atan+0x2f8>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 fd2e 	bl	8000288 <__aeabi_dsub>
 800b82c:	4632      	mov	r2, r6
 800b82e:	463b      	mov	r3, r7
 800b830:	f7f4 fee2 	bl	80005f8 <__aeabi_dmul>
 800b834:	a35e      	add	r3, pc, #376	; (adr r3, 800b9b0 <atan+0x300>)
 800b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83a:	f7f4 fd25 	bl	8000288 <__aeabi_dsub>
 800b83e:	4632      	mov	r2, r6
 800b840:	463b      	mov	r3, r7
 800b842:	f7f4 fed9 	bl	80005f8 <__aeabi_dmul>
 800b846:	a35c      	add	r3, pc, #368	; (adr r3, 800b9b8 <atan+0x308>)
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f7f4 fd1c 	bl	8000288 <__aeabi_dsub>
 800b850:	4632      	mov	r2, r6
 800b852:	463b      	mov	r3, r7
 800b854:	f7f4 fed0 	bl	80005f8 <__aeabi_dmul>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4640      	mov	r0, r8
 800b85e:	4649      	mov	r1, r9
 800b860:	f7f4 fd14 	bl	800028c <__adddf3>
 800b864:	4622      	mov	r2, r4
 800b866:	462b      	mov	r3, r5
 800b868:	f7f4 fec6 	bl	80005f8 <__aeabi_dmul>
 800b86c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	d14b      	bne.n	800b90e <atan+0x25e>
 800b876:	4620      	mov	r0, r4
 800b878:	4629      	mov	r1, r5
 800b87a:	f7f4 fd05 	bl	8000288 <__aeabi_dsub>
 800b87e:	e72c      	b.n	800b6da <atan+0x2a>
 800b880:	ee10 0a10 	vmov	r0, s0
 800b884:	4b53      	ldr	r3, [pc, #332]	; (800b9d4 <atan+0x324>)
 800b886:	2200      	movs	r2, #0
 800b888:	4629      	mov	r1, r5
 800b88a:	f7f4 fcfd 	bl	8000288 <__aeabi_dsub>
 800b88e:	4b51      	ldr	r3, [pc, #324]	; (800b9d4 <atan+0x324>)
 800b890:	4606      	mov	r6, r0
 800b892:	460f      	mov	r7, r1
 800b894:	2200      	movs	r2, #0
 800b896:	4620      	mov	r0, r4
 800b898:	4629      	mov	r1, r5
 800b89a:	f7f4 fcf7 	bl	800028c <__adddf3>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	f7f4 ffd1 	bl	800084c <__aeabi_ddiv>
 800b8aa:	f04f 0a01 	mov.w	sl, #1
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	460d      	mov	r5, r1
 800b8b2:	e764      	b.n	800b77e <atan+0xce>
 800b8b4:	4b49      	ldr	r3, [pc, #292]	; (800b9dc <atan+0x32c>)
 800b8b6:	429e      	cmp	r6, r3
 800b8b8:	da1d      	bge.n	800b8f6 <atan+0x246>
 800b8ba:	ee10 0a10 	vmov	r0, s0
 800b8be:	4b48      	ldr	r3, [pc, #288]	; (800b9e0 <atan+0x330>)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	f7f4 fce0 	bl	8000288 <__aeabi_dsub>
 800b8c8:	4b45      	ldr	r3, [pc, #276]	; (800b9e0 <atan+0x330>)
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	460f      	mov	r7, r1
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	f7f4 fe90 	bl	80005f8 <__aeabi_dmul>
 800b8d8:	4b3e      	ldr	r3, [pc, #248]	; (800b9d4 <atan+0x324>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f7f4 fcd6 	bl	800028c <__adddf3>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	4639      	mov	r1, r7
 800b8e8:	f7f4 ffb0 	bl	800084c <__aeabi_ddiv>
 800b8ec:	f04f 0a02 	mov.w	sl, #2
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	460d      	mov	r5, r1
 800b8f4:	e743      	b.n	800b77e <atan+0xce>
 800b8f6:	462b      	mov	r3, r5
 800b8f8:	ee10 2a10 	vmov	r2, s0
 800b8fc:	4939      	ldr	r1, [pc, #228]	; (800b9e4 <atan+0x334>)
 800b8fe:	2000      	movs	r0, #0
 800b900:	f7f4 ffa4 	bl	800084c <__aeabi_ddiv>
 800b904:	f04f 0a03 	mov.w	sl, #3
 800b908:	4604      	mov	r4, r0
 800b90a:	460d      	mov	r5, r1
 800b90c:	e737      	b.n	800b77e <atan+0xce>
 800b90e:	4b36      	ldr	r3, [pc, #216]	; (800b9e8 <atan+0x338>)
 800b910:	4e36      	ldr	r6, [pc, #216]	; (800b9ec <atan+0x33c>)
 800b912:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b916:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b91a:	e9da 2300 	ldrd	r2, r3, [sl]
 800b91e:	f7f4 fcb3 	bl	8000288 <__aeabi_dsub>
 800b922:	4622      	mov	r2, r4
 800b924:	462b      	mov	r3, r5
 800b926:	f7f4 fcaf 	bl	8000288 <__aeabi_dsub>
 800b92a:	4602      	mov	r2, r0
 800b92c:	460b      	mov	r3, r1
 800b92e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b932:	f7f4 fca9 	bl	8000288 <__aeabi_dsub>
 800b936:	f1bb 0f00 	cmp.w	fp, #0
 800b93a:	4604      	mov	r4, r0
 800b93c:	460d      	mov	r5, r1
 800b93e:	f6bf aed6 	bge.w	800b6ee <atan+0x3e>
 800b942:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b946:	461d      	mov	r5, r3
 800b948:	e6d1      	b.n	800b6ee <atan+0x3e>
 800b94a:	a51d      	add	r5, pc, #116	; (adr r5, 800b9c0 <atan+0x310>)
 800b94c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b950:	e6cd      	b.n	800b6ee <atan+0x3e>
 800b952:	bf00      	nop
 800b954:	f3af 8000 	nop.w
 800b958:	54442d18 	.word	0x54442d18
 800b95c:	bff921fb 	.word	0xbff921fb
 800b960:	8800759c 	.word	0x8800759c
 800b964:	7e37e43c 	.word	0x7e37e43c
 800b968:	e322da11 	.word	0xe322da11
 800b96c:	3f90ad3a 	.word	0x3f90ad3a
 800b970:	24760deb 	.word	0x24760deb
 800b974:	3fa97b4b 	.word	0x3fa97b4b
 800b978:	a0d03d51 	.word	0xa0d03d51
 800b97c:	3fb10d66 	.word	0x3fb10d66
 800b980:	c54c206e 	.word	0xc54c206e
 800b984:	3fb745cd 	.word	0x3fb745cd
 800b988:	920083ff 	.word	0x920083ff
 800b98c:	3fc24924 	.word	0x3fc24924
 800b990:	5555550d 	.word	0x5555550d
 800b994:	3fd55555 	.word	0x3fd55555
 800b998:	2c6a6c2f 	.word	0x2c6a6c2f
 800b99c:	bfa2b444 	.word	0xbfa2b444
 800b9a0:	52defd9a 	.word	0x52defd9a
 800b9a4:	3fadde2d 	.word	0x3fadde2d
 800b9a8:	af749a6d 	.word	0xaf749a6d
 800b9ac:	3fb3b0f2 	.word	0x3fb3b0f2
 800b9b0:	fe231671 	.word	0xfe231671
 800b9b4:	3fbc71c6 	.word	0x3fbc71c6
 800b9b8:	9998ebc4 	.word	0x9998ebc4
 800b9bc:	3fc99999 	.word	0x3fc99999
 800b9c0:	54442d18 	.word	0x54442d18
 800b9c4:	3ff921fb 	.word	0x3ff921fb
 800b9c8:	440fffff 	.word	0x440fffff
 800b9cc:	7ff00000 	.word	0x7ff00000
 800b9d0:	3fdbffff 	.word	0x3fdbffff
 800b9d4:	3ff00000 	.word	0x3ff00000
 800b9d8:	3ff2ffff 	.word	0x3ff2ffff
 800b9dc:	40038000 	.word	0x40038000
 800b9e0:	3ff80000 	.word	0x3ff80000
 800b9e4:	bff00000 	.word	0xbff00000
 800b9e8:	0800c1c0 	.word	0x0800c1c0
 800b9ec:	0800c1a0 	.word	0x0800c1a0

0800b9f0 <fabs>:
 800b9f0:	ec51 0b10 	vmov	r0, r1, d0
 800b9f4:	ee10 2a10 	vmov	r2, s0
 800b9f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9fc:	ec43 2b10 	vmov	d0, r2, r3
 800ba00:	4770      	bx	lr

0800ba02 <finite>:
 800ba02:	b082      	sub	sp, #8
 800ba04:	ed8d 0b00 	vstr	d0, [sp]
 800ba08:	9801      	ldr	r0, [sp, #4]
 800ba0a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ba0e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ba12:	0fc0      	lsrs	r0, r0, #31
 800ba14:	b002      	add	sp, #8
 800ba16:	4770      	bx	lr

0800ba18 <nan>:
 800ba18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba20 <nan+0x8>
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	00000000 	.word	0x00000000
 800ba24:	7ff80000 	.word	0x7ff80000

0800ba28 <scalbn>:
 800ba28:	b570      	push	{r4, r5, r6, lr}
 800ba2a:	ec55 4b10 	vmov	r4, r5, d0
 800ba2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba32:	4606      	mov	r6, r0
 800ba34:	462b      	mov	r3, r5
 800ba36:	b99a      	cbnz	r2, 800ba60 <scalbn+0x38>
 800ba38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba3c:	4323      	orrs	r3, r4
 800ba3e:	d036      	beq.n	800baae <scalbn+0x86>
 800ba40:	4b39      	ldr	r3, [pc, #228]	; (800bb28 <scalbn+0x100>)
 800ba42:	4629      	mov	r1, r5
 800ba44:	ee10 0a10 	vmov	r0, s0
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f7f4 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ba4e:	4b37      	ldr	r3, [pc, #220]	; (800bb2c <scalbn+0x104>)
 800ba50:	429e      	cmp	r6, r3
 800ba52:	4604      	mov	r4, r0
 800ba54:	460d      	mov	r5, r1
 800ba56:	da10      	bge.n	800ba7a <scalbn+0x52>
 800ba58:	a32b      	add	r3, pc, #172	; (adr r3, 800bb08 <scalbn+0xe0>)
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	e03a      	b.n	800bad6 <scalbn+0xae>
 800ba60:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ba64:	428a      	cmp	r2, r1
 800ba66:	d10c      	bne.n	800ba82 <scalbn+0x5a>
 800ba68:	ee10 2a10 	vmov	r2, s0
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	4629      	mov	r1, r5
 800ba70:	f7f4 fc0c 	bl	800028c <__adddf3>
 800ba74:	4604      	mov	r4, r0
 800ba76:	460d      	mov	r5, r1
 800ba78:	e019      	b.n	800baae <scalbn+0x86>
 800ba7a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba7e:	460b      	mov	r3, r1
 800ba80:	3a36      	subs	r2, #54	; 0x36
 800ba82:	4432      	add	r2, r6
 800ba84:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ba88:	428a      	cmp	r2, r1
 800ba8a:	dd08      	ble.n	800ba9e <scalbn+0x76>
 800ba8c:	2d00      	cmp	r5, #0
 800ba8e:	a120      	add	r1, pc, #128	; (adr r1, 800bb10 <scalbn+0xe8>)
 800ba90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba94:	da1c      	bge.n	800bad0 <scalbn+0xa8>
 800ba96:	a120      	add	r1, pc, #128	; (adr r1, 800bb18 <scalbn+0xf0>)
 800ba98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba9c:	e018      	b.n	800bad0 <scalbn+0xa8>
 800ba9e:	2a00      	cmp	r2, #0
 800baa0:	dd08      	ble.n	800bab4 <scalbn+0x8c>
 800baa2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800baa6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800baaa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800baae:	ec45 4b10 	vmov	d0, r4, r5
 800bab2:	bd70      	pop	{r4, r5, r6, pc}
 800bab4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bab8:	da19      	bge.n	800baee <scalbn+0xc6>
 800baba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800babe:	429e      	cmp	r6, r3
 800bac0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bac4:	dd0a      	ble.n	800badc <scalbn+0xb4>
 800bac6:	a112      	add	r1, pc, #72	; (adr r1, 800bb10 <scalbn+0xe8>)
 800bac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d1e2      	bne.n	800ba96 <scalbn+0x6e>
 800bad0:	a30f      	add	r3, pc, #60	; (adr r3, 800bb10 <scalbn+0xe8>)
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	f7f4 fd8f 	bl	80005f8 <__aeabi_dmul>
 800bada:	e7cb      	b.n	800ba74 <scalbn+0x4c>
 800badc:	a10a      	add	r1, pc, #40	; (adr r1, 800bb08 <scalbn+0xe0>)
 800bade:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d0b8      	beq.n	800ba58 <scalbn+0x30>
 800bae6:	a10e      	add	r1, pc, #56	; (adr r1, 800bb20 <scalbn+0xf8>)
 800bae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baec:	e7b4      	b.n	800ba58 <scalbn+0x30>
 800baee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800baf2:	3236      	adds	r2, #54	; 0x36
 800baf4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800baf8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bafc:	4620      	mov	r0, r4
 800bafe:	4b0c      	ldr	r3, [pc, #48]	; (800bb30 <scalbn+0x108>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	e7e8      	b.n	800bad6 <scalbn+0xae>
 800bb04:	f3af 8000 	nop.w
 800bb08:	c2f8f359 	.word	0xc2f8f359
 800bb0c:	01a56e1f 	.word	0x01a56e1f
 800bb10:	8800759c 	.word	0x8800759c
 800bb14:	7e37e43c 	.word	0x7e37e43c
 800bb18:	8800759c 	.word	0x8800759c
 800bb1c:	fe37e43c 	.word	0xfe37e43c
 800bb20:	c2f8f359 	.word	0xc2f8f359
 800bb24:	81a56e1f 	.word	0x81a56e1f
 800bb28:	43500000 	.word	0x43500000
 800bb2c:	ffff3cb0 	.word	0xffff3cb0
 800bb30:	3c900000 	.word	0x3c900000

0800bb34 <_init>:
 800bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb36:	bf00      	nop
 800bb38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb3a:	bc08      	pop	{r3}
 800bb3c:	469e      	mov	lr, r3
 800bb3e:	4770      	bx	lr

0800bb40 <_fini>:
 800bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb42:	bf00      	nop
 800bb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb46:	bc08      	pop	{r3}
 800bb48:	469e      	mov	lr, r3
 800bb4a:	4770      	bx	lr
