
Code_RF_Matlab_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005474  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08005604  08005604  00015604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba8  08005ba8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb0  08005bb0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005bb8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000001e8  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc6d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000204a  00000000  00000000  0002cd15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009f0  00000000  00000000  0002f828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021454  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d0c9  00000000  00000000  0005166c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c56b7  00000000  00000000  0005e735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00123dec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ec4  00000000  00000000  00123e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055ec 	.word	0x080055ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080055ec 	.word	0x080055ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	4b38      	ldr	r3, [pc, #224]	; (8000680 <MX_GPIO_Init+0xfc>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a37      	ldr	r2, [pc, #220]	; (8000680 <MX_GPIO_Init+0xfc>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b35      	ldr	r3, [pc, #212]	; (8000680 <MX_GPIO_Init+0xfc>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b31      	ldr	r3, [pc, #196]	; (8000680 <MX_GPIO_Init+0xfc>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a30      	ldr	r2, [pc, #192]	; (8000680 <MX_GPIO_Init+0xfc>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <MX_GPIO_Init+0xfc>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <MX_GPIO_Init+0xfc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a29      	ldr	r2, [pc, #164]	; (8000680 <MX_GPIO_Init+0xfc>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b27      	ldr	r3, [pc, #156]	; (8000680 <MX_GPIO_Init+0xfc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b23      	ldr	r3, [pc, #140]	; (8000680 <MX_GPIO_Init+0xfc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a22      	ldr	r2, [pc, #136]	; (8000680 <MX_GPIO_Init+0xfc>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b20      	ldr	r3, [pc, #128]	; (8000680 <MX_GPIO_Init+0xfc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_GPIO_Init+0xfc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <MX_GPIO_Init+0xfc>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_GPIO_Init+0xfc>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2103      	movs	r1, #3
 800062a:	4816      	ldr	r0, [pc, #88]	; (8000684 <MX_GPIO_Init+0x100>)
 800062c:	f000 fed4 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000636:	4814      	ldr	r0, [pc, #80]	; (8000688 <MX_GPIO_Init+0x104>)
 8000638:	f000 fece 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800063c:	2303      	movs	r3, #3
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_GPIO_Init+0x100>)
 8000654:	f000 fd24 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000658:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_GPIO_Init+0x104>)
 8000672:	f000 fd15 	bl	80010a0 <HAL_GPIO_Init>

}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40020400 	.word	0x40020400
 8000688:	40020c00 	.word	0x40020c00

0800068c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	b097      	sub	sp, #92	; 0x5c
 8000690:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 facb 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f869 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f7ff ff73 	bl	8000584 <MX_GPIO_Init>
  MX_SPI1_Init();
 800069e:	f000 f8ff 	bl	80008a0 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80006a2:	f000 fa1f 	bl	8000ae4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi1);
 80006a6:	4c28      	ldr	r4, [pc, #160]	; (8000748 <main+0xbc>)
 80006a8:	4668      	mov	r0, sp
 80006aa:	1d23      	adds	r3, r4, #4
 80006ac:	2254      	movs	r2, #84	; 0x54
 80006ae:	4619      	mov	r1, r3
 80006b0:	f004 fb26 	bl	8004d00 <memcpy>
 80006b4:	6823      	ldr	r3, [r4, #0]
 80006b6:	2202      	movs	r2, #2
 80006b8:	2101      	movs	r1, #1
 80006ba:	4824      	ldr	r0, [pc, #144]	; (800074c <main+0xc0>)
 80006bc:	f003 fb1e 	bl	8003cfc <NRF24_begin>
  nrf24_DebugUART_Init(huart6);
 80006c0:	4e23      	ldr	r6, [pc, #140]	; (8000750 <main+0xc4>)
 80006c2:	466d      	mov	r5, sp
 80006c4:	f106 0410 	add.w	r4, r6, #16
 80006c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d4:	6823      	ldr	r3, [r4, #0]
 80006d6:	602b      	str	r3, [r5, #0]
 80006d8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006dc:	f004 face 	bl	8004c7c <nrf24_DebugUART_Init>

  NRF24_setAutoAck(true);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f003 fd5b 	bl	800419c <NRF24_setAutoAck>
  NRF24_openReadingPipe(1, RxpipeAddrs);
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <main+0xc8>)
 80006e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006ec:	2001      	movs	r0, #1
 80006ee:	f003 fc33 	bl	8003f58 <NRF24_openReadingPipe>

  NRF24_enableDynamicPayloads();
 80006f2:	f003 fd09 	bl	8004108 <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 80006f6:	f003 fcd9 	bl	80040ac <NRF24_enableAckPayload>

  NRF24_startListening();
 80006fa:	f003 fbdf 	bl	8003ebc <NRF24_startListening>
  HAL_UART_Receive_IT(&huart6, (uint8_t *)UART6_rxBuffer, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	4915      	ldr	r1, [pc, #84]	; (8000758 <main+0xcc>)
 8000702:	4813      	ldr	r0, [pc, #76]	; (8000750 <main+0xc4>)
 8000704:	f002 fa1d 	bl	8002b42 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Receive
    if (NRF24_available())
 8000708:	f003 fbfe 	bl	8003f08 <NRF24_available>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0fa      	beq.n	8000708 <main+0x7c>
    {
      NRF24_read(&data_Quad, 32);
 8000712:	2120      	movs	r1, #32
 8000714:	4811      	ldr	r0, [pc, #68]	; (800075c <main+0xd0>)
 8000716:	f003 fbff 	bl	8003f18 <NRF24_read>
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800071a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071e:	4810      	ldr	r0, [pc, #64]	; (8000760 <main+0xd4>)
 8000720:	f000 fe73 	bl	800140a <HAL_GPIO_TogglePin>
      // Send Pack Data Receive from PC to quadcopter
      NRF24_writeAckPayload(1, &data_PC, 32);
 8000724:	2220      	movs	r2, #32
 8000726:	490f      	ldr	r1, [pc, #60]	; (8000764 <main+0xd8>)
 8000728:	2001      	movs	r0, #1
 800072a:	f003 fe32 	bl	8004392 <NRF24_writeAckPayload>
      // Send Pack Data Receive from quacopter to PC
      HAL_UART_Transmit(&huart6, (uint8_t *)&data_Quad, 32, 10);
 800072e:	230a      	movs	r3, #10
 8000730:	2220      	movs	r2, #32
 8000732:	490a      	ldr	r1, [pc, #40]	; (800075c <main+0xd0>)
 8000734:	4806      	ldr	r0, [pc, #24]	; (8000750 <main+0xc4>)
 8000736:	f002 f8d0 	bl	80028da <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart6, (uint8_t *)"E", strlen("E"), 10);
 800073a:	230a      	movs	r3, #10
 800073c:	2201      	movs	r2, #1
 800073e:	490a      	ldr	r1, [pc, #40]	; (8000768 <main+0xdc>)
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <main+0xc4>)
 8000742:	f002 f8ca 	bl	80028da <HAL_UART_Transmit>
    if (NRF24_available())
 8000746:	e7df      	b.n	8000708 <main+0x7c>
 8000748:	200000f8 	.word	0x200000f8
 800074c:	40020400 	.word	0x40020400
 8000750:	20000154 	.word	0x20000154
 8000754:	20000000 	.word	0x20000000
 8000758:	20000094 	.word	0x20000094
 800075c:	200000d8 	.word	0x200000d8
 8000760:	40020c00 	.word	0x40020c00
 8000764:	200000b8 	.word	0x200000b8
 8000768:	08005604 	.word	0x08005604

0800076c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	; 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f004 face 	bl	8004d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <SystemClock_Config+0xc8>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a26      	ldr	r2, [pc, #152]	; (8000834 <SystemClock_Config+0xc8>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b24      	ldr	r3, [pc, #144]	; (8000834 <SystemClock_Config+0xc8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <SystemClock_Config+0xcc>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a20      	ldr	r2, [pc, #128]	; (8000838 <SystemClock_Config+0xcc>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <SystemClock_Config+0xcc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c8:	2302      	movs	r3, #2
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d0:	2310      	movs	r3, #16
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d4:	2302      	movs	r3, #2
 80007d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d8:	2300      	movs	r3, #0
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007dc:	2308      	movs	r3, #8
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007e0:	2348      	movs	r3, #72	; 0x48
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fe25 	bl	8001440 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007fc:	f000 f84a 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000800:	230f      	movs	r3, #15
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2302      	movs	r3, #2
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2102      	movs	r1, #2
 800081c:	4618      	mov	r0, r3
 800081e:	f001 f887 	bl	8001930 <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000828:	f000 f834 	bl	8000894 <Error_Handler>
  }
}
 800082c:	bf00      	nop
 800082e:	3750      	adds	r7, #80	; 0x50
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Hàm ngắt khi nhận được dữ liệu từ UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  // Kiểm tra UART nào gây ra ngắt
  if (huart->Instance == USART6)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <HAL_UART_RxCpltCallback+0x44>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d10e      	bne.n	800086c <HAL_UART_RxCpltCallback+0x30>
  {
    // Kiểm tra kí tự vừa nhận được có phải là kí tự mong muốn hay không
    if (UART6_rxBuffer[0] == 'S')
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <HAL_UART_RxCpltCallback+0x48>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b53      	cmp	r3, #83	; 0x53
 8000854:	d10a      	bne.n	800086c <HAL_UART_RxCpltCallback+0x30>
    {
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085a:	480b      	ldr	r0, [pc, #44]	; (8000888 <HAL_UART_RxCpltCallback+0x4c>)
 800085c:	f000 fdd5 	bl	800140a <HAL_GPIO_TogglePin>
      // Tách chuỗi nhận được thành kiểu dữ liệu Data để gửi cho quadcopter
      HAL_UART_Receive(&huart6, (uint8_t *)&data_PC, 32, 10);
 8000860:	230a      	movs	r3, #10
 8000862:	2220      	movs	r2, #32
 8000864:	4909      	ldr	r1, [pc, #36]	; (800088c <HAL_UART_RxCpltCallback+0x50>)
 8000866:	480a      	ldr	r0, [pc, #40]	; (8000890 <HAL_UART_RxCpltCallback+0x54>)
 8000868:	f002 f8c9 	bl	80029fe <HAL_UART_Receive>
    }
  }
  // Khai báo lại hàm ngắt nhận 1 kí tự
  HAL_UART_Receive_IT(&huart6, (uint8_t *)UART6_rxBuffer, 1);
 800086c:	2201      	movs	r2, #1
 800086e:	4905      	ldr	r1, [pc, #20]	; (8000884 <HAL_UART_RxCpltCallback+0x48>)
 8000870:	4807      	ldr	r0, [pc, #28]	; (8000890 <HAL_UART_RxCpltCallback+0x54>)
 8000872:	f002 f966 	bl	8002b42 <HAL_UART_Receive_IT>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40011400 	.word	0x40011400
 8000884:	20000094 	.word	0x20000094
 8000888:	40020c00 	.word	0x40020c00
 800088c:	200000b8 	.word	0x200000b8
 8000890:	20000154 	.word	0x20000154

08000894 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_SPI1_Init+0x64>)
 80008a6:	4a18      	ldr	r2, [pc, #96]	; (8000908 <MX_SPI1_Init+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_SPI1_Init+0x64>)
 80008ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_SPI1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_SPI1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_SPI1_Init+0x64>)
 80008cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_SPI1_Init+0x64>)
 80008d4:	2210      	movs	r2, #16
 80008d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_SPI1_Init+0x64>)
 80008ec:	220a      	movs	r2, #10
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_SPI1_Init+0x64>)
 80008f2:	f001 f9fd 	bl	8001cf0 <HAL_SPI_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008fc:	f7ff ffca 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000f8 	.word	0x200000f8
 8000908:	40013000 	.word	0x40013000

0800090c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a19      	ldr	r2, [pc, #100]	; (8000990 <HAL_SPI_MspInit+0x84>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d12b      	bne.n	8000986 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_SPI_MspInit+0x88>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <HAL_SPI_MspInit+0x88>)
 8000938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_SPI_MspInit+0x88>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_SPI_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_SPI_MspInit+0x88>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_SPI_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000966:	23e0      	movs	r3, #224	; 0xe0
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000976:	2305      	movs	r3, #5
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_SPI_MspInit+0x8c>)
 8000982:	f000 fb8d 	bl	80010a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40013000 	.word	0x40013000
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <HAL_MspInit+0x4c>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 f94a 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <USART6_IRQHandler+0x10>)
 8000a46:	f002 f8ad 	bl	8002ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000154 	.word	0x20000154

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f004 f912 	bl	8004cac <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20020000 	.word	0x20020000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	20000150 	.word	0x20000150
 8000abc:	20000260 	.word	0x20000260

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_USART6_UART_Init+0x4c>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_USART6_UART_Init+0x50>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_USART6_UART_Init+0x4c>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_USART6_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_USART6_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_USART6_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_USART6_UART_Init+0x4c>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_USART6_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_USART6_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_USART6_UART_Init+0x4c>)
 8000b1c:	f001 fe90 	bl	8002840 <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b26:	f7ff feb5 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000154 	.word	0x20000154
 8000b34:	40011400 	.word	0x40011400

08000b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <HAL_UART_MspInit+0x94>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d133      	bne.n	8000bc2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_UART_MspInit+0x98>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <HAL_UART_MspInit+0x98>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_UART_MspInit+0x98>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_UART_MspInit+0x98>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <HAL_UART_MspInit+0x98>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_UART_MspInit+0x98>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b92:	23c0      	movs	r3, #192	; 0xc0
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <HAL_UART_MspInit+0x9c>)
 8000bae:	f000 fa77 	bl	80010a0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2047      	movs	r0, #71	; 0x47
 8000bb8:	f000 f9a9 	bl	8000f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000bbc:	2047      	movs	r0, #71	; 0x47
 8000bbe:	f000 f9c2 	bl	8000f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40011400 	.word	0x40011400
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020800 	.word	0x40020800

08000bd8 <Reset_Handler>:
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopFillZerobss+0x12>
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopFillZerobss+0x16>)
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1a>)
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1e>)
 8000be2:	2300      	movs	r3, #0
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:
 8000be6:	58d4      	ldr	r4, [r2, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:
 8000bec:	18c4      	adds	r4, r0, r3
 8000bee:	428c      	cmp	r4, r1
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <LoopFillZerobss+0x22>)
 8000bf4:	4c0b      	ldr	r4, [pc, #44]	; (8000c24 <LoopFillZerobss+0x26>)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:
 8000bfe:	42a2      	cmp	r2, r4
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>
 8000c02:	f7ff ff5d 	bl	8000ac0 <SystemInit>
 8000c06:	f004 f857 	bl	8004cb8 <__libc_init_array>
 8000c0a:	f7ff fd3f 	bl	800068c <main>
 8000c0e:	4770      	bx	lr
 8000c10:	20020000 	.word	0x20020000
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000078 	.word	0x20000078
 8000c1c:	08005bb8 	.word	0x08005bb8
 8000c20:	20000078 	.word	0x20000078
 8000c24:	20000260 	.word	0x20000260

08000c28 <ADC_IRQHandler>:
 8000c28:	e7fe      	b.n	8000c28 <ADC_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <HAL_Init+0x40>)
 8000c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_Init+0x40>)
 8000c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_Init+0x40>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 f94f 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f000 f808 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fe9c 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023c00 	.word	0x40023c00

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f967 	bl	8000f62 <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 f92f 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000010 	.word	0x20000010
 8000ccc:	2000000c 	.word	0x2000000c

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000010 	.word	0x20000010
 8000cf4:	20000198 	.word	0x20000198

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000198 	.word	0x20000198

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ffee 	bl	8000cf8 <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffde 	bl	8000cf8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000010 	.word	0x20000010

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff29 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff3e 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff31 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa2 	bl	8000eb4 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff feb6 	bl	8000cf8 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d008      	beq.n	8000fac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e052      	b.n	8001052 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0216 	bic.w	r2, r2, #22
 8000fba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d103      	bne.n	8000fdc <HAL_DMA_Abort+0x62>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d007      	beq.n	8000fec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0208 	bic.w	r2, r2, #8
 8000fea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0201 	bic.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ffc:	e013      	b.n	8001026 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ffe:	f7ff fe7b 	bl	8000cf8 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b05      	cmp	r3, #5
 800100a:	d90c      	bls.n	8001026 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2220      	movs	r2, #32
 8001010:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2203      	movs	r2, #3
 8001016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e015      	b.n	8001052 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1e4      	bne.n	8000ffe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001038:	223f      	movs	r2, #63	; 0x3f
 800103a:	409a      	lsls	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d004      	beq.n	8001078 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e00c      	b.n	8001092 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2205      	movs	r2, #5
 800107c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0201 	bic.w	r2, r2, #1
 800108e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	e16b      	b.n	8001394 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010bc:	2201      	movs	r2, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	f040 815a 	bne.w	800138e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d005      	beq.n	80010f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d130      	bne.n	8001154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	f003 0201 	and.w	r2, r3, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b03      	cmp	r3, #3
 800115e:	d017      	beq.n	8001190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d123      	bne.n	80011e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	691a      	ldr	r2, [r3, #16]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	08da      	lsrs	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3208      	adds	r2, #8
 80011de:	69b9      	ldr	r1, [r7, #24]
 80011e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0203 	and.w	r2, r3, #3
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80b4 	beq.w	800138e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b60      	ldr	r3, [pc, #384]	; (80013ac <HAL_GPIO_Init+0x30c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a5f      	ldr	r2, [pc, #380]	; (80013ac <HAL_GPIO_Init+0x30c>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b5d      	ldr	r3, [pc, #372]	; (80013ac <HAL_GPIO_Init+0x30c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001242:	4a5b      	ldr	r2, [pc, #364]	; (80013b0 <HAL_GPIO_Init+0x310>)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a52      	ldr	r2, [pc, #328]	; (80013b4 <HAL_GPIO_Init+0x314>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d02b      	beq.n	80012c6 <HAL_GPIO_Init+0x226>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a51      	ldr	r2, [pc, #324]	; (80013b8 <HAL_GPIO_Init+0x318>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d025      	beq.n	80012c2 <HAL_GPIO_Init+0x222>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a50      	ldr	r2, [pc, #320]	; (80013bc <HAL_GPIO_Init+0x31c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d01f      	beq.n	80012be <HAL_GPIO_Init+0x21e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4f      	ldr	r2, [pc, #316]	; (80013c0 <HAL_GPIO_Init+0x320>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d019      	beq.n	80012ba <HAL_GPIO_Init+0x21a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4e      	ldr	r2, [pc, #312]	; (80013c4 <HAL_GPIO_Init+0x324>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0x216>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4d      	ldr	r2, [pc, #308]	; (80013c8 <HAL_GPIO_Init+0x328>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00d      	beq.n	80012b2 <HAL_GPIO_Init+0x212>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4c      	ldr	r2, [pc, #304]	; (80013cc <HAL_GPIO_Init+0x32c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x20e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4b      	ldr	r2, [pc, #300]	; (80013d0 <HAL_GPIO_Init+0x330>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_Init+0x20a>
 80012a6:	2307      	movs	r3, #7
 80012a8:	e00e      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012aa:	2308      	movs	r3, #8
 80012ac:	e00c      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012ae:	2306      	movs	r3, #6
 80012b0:	e00a      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012b2:	2305      	movs	r3, #5
 80012b4:	e008      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012b6:	2304      	movs	r3, #4
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012ba:	2303      	movs	r3, #3
 80012bc:	e004      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012be:	2302      	movs	r3, #2
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012c6:	2300      	movs	r3, #0
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	f002 0203 	and.w	r2, r2, #3
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	4093      	lsls	r3, r2
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d8:	4935      	ldr	r1, [pc, #212]	; (80013b0 <HAL_GPIO_Init+0x310>)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <HAL_GPIO_Init+0x334>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130a:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <HAL_GPIO_Init+0x334>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001310:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <HAL_GPIO_Init+0x334>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001334:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <HAL_GPIO_Init+0x334>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_GPIO_Init+0x334>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800135e:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <HAL_GPIO_Init+0x334>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_GPIO_Init+0x334>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001388:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <HAL_GPIO_Init+0x334>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3301      	adds	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	f67f ae90 	bls.w	80010bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40013800 	.word	0x40013800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40021400 	.word	0x40021400
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40021c00 	.word	0x40021c00
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f4:	e003      	b.n	80013fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	460b      	mov	r3, r1
 8001414:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800141c:	887a      	ldrh	r2, [r7, #2]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4013      	ands	r3, r2
 8001422:	041a      	lsls	r2, r3, #16
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	43d9      	mvns	r1, r3
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	400b      	ands	r3, r1
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e267      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d075      	beq.n	800154a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145e:	4b88      	ldr	r3, [pc, #544]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d00c      	beq.n	8001484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146a:	4b85      	ldr	r3, [pc, #532]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001472:	2b08      	cmp	r3, #8
 8001474:	d112      	bne.n	800149c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001476:	4b82      	ldr	r3, [pc, #520]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001482:	d10b      	bne.n	800149c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d05b      	beq.n	8001548 <HAL_RCC_OscConfig+0x108>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d157      	bne.n	8001548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e242      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a4:	d106      	bne.n	80014b4 <HAL_RCC_OscConfig+0x74>
 80014a6:	4b76      	ldr	r3, [pc, #472]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a75      	ldr	r2, [pc, #468]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e01d      	b.n	80014f0 <HAL_RCC_OscConfig+0xb0>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x98>
 80014be:	4b70      	ldr	r3, [pc, #448]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6f      	ldr	r2, [pc, #444]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b6d      	ldr	r3, [pc, #436]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6c      	ldr	r2, [pc, #432]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e00b      	b.n	80014f0 <HAL_RCC_OscConfig+0xb0>
 80014d8:	4b69      	ldr	r3, [pc, #420]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a68      	ldr	r2, [pc, #416]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b66      	ldr	r3, [pc, #408]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a65      	ldr	r2, [pc, #404]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fbfe 	bl	8000cf8 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fbfa 	bl	8000cf8 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e207      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b5b      	ldr	r3, [pc, #364]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0xc0>
 800151e:	e014      	b.n	800154a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fbea 	bl	8000cf8 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fbe6 	bl	8000cf8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1f3      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	4b51      	ldr	r3, [pc, #324]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0xe8>
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d063      	beq.n	800161e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001556:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001562:	4b47      	ldr	r3, [pc, #284]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156a:	2b08      	cmp	r3, #8
 800156c:	d11c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156e:	4b44      	ldr	r3, [pc, #272]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d116      	bne.n	80015a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	4b41      	ldr	r3, [pc, #260]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_RCC_OscConfig+0x152>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d001      	beq.n	8001592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e1c7      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4937      	ldr	r1, [pc, #220]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	e03a      	b.n	800161e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b0:	4b34      	ldr	r3, [pc, #208]	; (8001684 <HAL_RCC_OscConfig+0x244>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff fb9f 	bl	8000cf8 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff fb9b 	bl	8000cf8 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e1a8      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4925      	ldr	r1, [pc, #148]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_RCC_OscConfig+0x244>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb7e 	bl	8000cf8 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001600:	f7ff fb7a 	bl	8000cf8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e187      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d036      	beq.n	8001698 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d016      	beq.n	8001660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_RCC_OscConfig+0x248>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff fb5e 	bl	8000cf8 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff fb5a 	bl	8000cf8 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e167      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x200>
 800165e:	e01b      	b.n	8001698 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_RCC_OscConfig+0x248>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001666:	f7ff fb47 	bl	8000cf8 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	e00e      	b.n	800168c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fb43 	bl	8000cf8 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d907      	bls.n	800168c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e150      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
 8001680:	40023800 	.word	0x40023800
 8001684:	42470000 	.word	0x42470000
 8001688:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1ea      	bne.n	800166e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 8097 	beq.w	80017d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016aa:	4b81      	ldr	r3, [pc, #516]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10f      	bne.n	80016d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b7d      	ldr	r3, [pc, #500]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a7c      	ldr	r2, [pc, #496]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b7a      	ldr	r3, [pc, #488]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d2:	2301      	movs	r3, #1
 80016d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4b77      	ldr	r3, [pc, #476]	; (80018b4 <HAL_RCC_OscConfig+0x474>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d118      	bne.n	8001714 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e2:	4b74      	ldr	r3, [pc, #464]	; (80018b4 <HAL_RCC_OscConfig+0x474>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a73      	ldr	r2, [pc, #460]	; (80018b4 <HAL_RCC_OscConfig+0x474>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fb03 	bl	8000cf8 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7ff faff 	bl	8000cf8 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e10c      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	4b6a      	ldr	r3, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x474>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x2ea>
 800171c:	4b64      	ldr	r3, [pc, #400]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	4a63      	ldr	r2, [pc, #396]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6713      	str	r3, [r2, #112]	; 0x70
 8001728:	e01c      	b.n	8001764 <HAL_RCC_OscConfig+0x324>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b05      	cmp	r3, #5
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x30c>
 8001732:	4b5f      	ldr	r3, [pc, #380]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a5e      	ldr	r2, [pc, #376]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
 800173e:	4b5c      	ldr	r3, [pc, #368]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	4a5b      	ldr	r2, [pc, #364]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6713      	str	r3, [r2, #112]	; 0x70
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0x324>
 800174c:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
 8001758:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	4a54      	ldr	r2, [pc, #336]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800175e:	f023 0304 	bic.w	r3, r3, #4
 8001762:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d015      	beq.n	8001798 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff fac4 	bl	8000cf8 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff fac0 	bl	8000cf8 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e0cb      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178a:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0ee      	beq.n	8001774 <HAL_RCC_OscConfig+0x334>
 8001796:	e014      	b.n	80017c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7ff faae 	bl	8000cf8 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f7ff faaa 	bl	8000cf8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e0b5      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b6:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ee      	bne.n	80017a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	4a38      	ldr	r2, [pc, #224]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80a1 	beq.w	8001920 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d05c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d141      	bne.n	8001876 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <HAL_RCC_OscConfig+0x478>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fa7e 	bl	8000cf8 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff fa7a 	bl	8000cf8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e087      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	019b      	lsls	r3, r3, #6
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	3b01      	subs	r3, #1
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	491b      	ldr	r1, [pc, #108]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_RCC_OscConfig+0x478>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fa53 	bl	8000cf8 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff fa4f 	bl	8000cf8 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e05c      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x416>
 8001874:	e054      	b.n	8001920 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_RCC_OscConfig+0x478>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fa3c 	bl	8000cf8 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fa38 	bl	8000cf8 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e045      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x444>
 80018a2:	e03d      	b.n	8001920 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e038      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40007000 	.word	0x40007000
 80018b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x4ec>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d028      	beq.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d121      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d11a      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018ec:	4013      	ands	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d111      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	3b01      	subs	r3, #1
 8001906:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d107      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800

08001930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0cc      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b68      	ldr	r3, [pc, #416]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d90c      	bls.n	800196c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b65      	ldr	r3, [pc, #404]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b63      	ldr	r3, [pc, #396]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0b8      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d020      	beq.n	80019ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001984:	4b59      	ldr	r3, [pc, #356]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a58      	ldr	r2, [pc, #352]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800198e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4a52      	ldr	r2, [pc, #328]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a8:	4b50      	ldr	r3, [pc, #320]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	494d      	ldr	r1, [pc, #308]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d044      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d119      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e07f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ee:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e06f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e067      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0e:	4b37      	ldr	r3, [pc, #220]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f023 0203 	bic.w	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4934      	ldr	r1, [pc, #208]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a20:	f7ff f96a 	bl	8000cf8 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7ff f966 	bl	8000cf8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e04f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 020c 	and.w	r2, r3, #12
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1eb      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d20c      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e032      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4916      	ldr	r1, [pc, #88]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	490e      	ldr	r1, [pc, #56]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ab6:	f000 f821 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	490a      	ldr	r1, [pc, #40]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	5ccb      	ldrb	r3, [r1, r3]
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f8ca 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023c00 	.word	0x40023c00
 8001aec:	40023800 	.word	0x40023800
 8001af0:	08005b4c 	.word	0x08005b4c
 8001af4:	20000008 	.word	0x20000008
 8001af8:	2000000c 	.word	0x2000000c

08001afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b00:	b090      	sub	sp, #64	; 0x40
 8001b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b14:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d00d      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x40>
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	f200 80a1 	bhi.w	8001c68 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x34>
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b2e:	e09b      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b34:	e09b      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b36:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b3a:	e098      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b3c:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b46:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d028      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	2200      	movs	r2, #0
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	627a      	str	r2, [r7, #36]	; 0x24
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b64:	2100      	movs	r1, #0
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b68:	fb03 f201 	mul.w	r2, r3, r1
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	fb00 f303 	mul.w	r3, r0, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	4a43      	ldr	r2, [pc, #268]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b76:	fba0 1202 	umull	r1, r2, r0, r2
 8001b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b82:	4413      	add	r3, r2
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b88:	2200      	movs	r2, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	61fa      	str	r2, [r7, #28]
 8001b8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b96:	f7fe fb73 	bl	8000280 <__aeabi_uldivmod>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba2:	e053      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	099b      	lsrs	r3, r3, #6
 8001baa:	2200      	movs	r2, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	617a      	str	r2, [r7, #20]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bb6:	f04f 0b00 	mov.w	fp, #0
 8001bba:	4652      	mov	r2, sl
 8001bbc:	465b      	mov	r3, fp
 8001bbe:	f04f 0000 	mov.w	r0, #0
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	0159      	lsls	r1, r3, #5
 8001bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bcc:	0150      	lsls	r0, r2, #5
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	ebb2 080a 	subs.w	r8, r2, sl
 8001bd6:	eb63 090b 	sbc.w	r9, r3, fp
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001be6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bee:	ebb2 0408 	subs.w	r4, r2, r8
 8001bf2:	eb63 0509 	sbc.w	r5, r3, r9
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	00eb      	lsls	r3, r5, #3
 8001c00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c04:	00e2      	lsls	r2, r4, #3
 8001c06:	4614      	mov	r4, r2
 8001c08:	461d      	mov	r5, r3
 8001c0a:	eb14 030a 	adds.w	r3, r4, sl
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	eb45 030b 	adc.w	r3, r5, fp
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c22:	4629      	mov	r1, r5
 8001c24:	028b      	lsls	r3, r1, #10
 8001c26:	4621      	mov	r1, r4
 8001c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	028a      	lsls	r2, r1, #10
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c36:	2200      	movs	r2, #0
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	60fa      	str	r2, [r7, #12]
 8001c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c40:	f7fe fb1e 	bl	8000280 <__aeabi_uldivmod>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4613      	mov	r3, r2
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	3301      	adds	r3, #1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c66:	e002      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3740      	adds	r7, #64	; 0x40
 8001c74:	46bd      	mov	sp, r7
 8001c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	00f42400 	.word	0x00f42400
 8001c84:	017d7840 	.word	0x017d7840

08001c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000008 	.word	0x20000008

08001ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca4:	f7ff fff0 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0a9b      	lsrs	r3, r3, #10
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4903      	ldr	r1, [pc, #12]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08005b5c 	.word	0x08005b5c

08001cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ccc:	f7ff ffdc 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0b5b      	lsrs	r3, r3, #13
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4903      	ldr	r1, [pc, #12]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	08005b5c 	.word	0x08005b5c

08001cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e07b      	b.n	8001dfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d108      	bne.n	8001d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d12:	d009      	beq.n	8001d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
 8001d1a:	e005      	b.n	8001d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7fe fde2 	bl	800090c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dac:	ea42 0103 	orr.w	r1, r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	0c1b      	lsrs	r3, r3, #16
 8001dc6:	f003 0104 	and.w	r1, r3, #4
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	f003 0210 	and.w	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69da      	ldr	r2, [r3, #28]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b088      	sub	sp, #32
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_SPI_Transmit+0x22>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e126      	b.n	8002072 <HAL_SPI_Transmit+0x270>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e2c:	f7fe ff64 	bl	8000cf8 <HAL_GetTick>
 8001e30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d002      	beq.n	8001e48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e46:	e10b      	b.n	8002060 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_SPI_Transmit+0x52>
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e58:	e102      	b.n	8002060 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	88fa      	ldrh	r2, [r7, #6]
 8001e72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	88fa      	ldrh	r2, [r7, #6]
 8001e78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ec0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ecc:	2b40      	cmp	r3, #64	; 0x40
 8001ece:	d007      	beq.n	8001ee0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ede:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ee8:	d14b      	bne.n	8001f82 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_SPI_Transmit+0xf6>
 8001ef2:	8afb      	ldrh	r3, [r7, #22]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d13e      	bne.n	8001f76 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	881a      	ldrh	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	1c9a      	adds	r2, r3, #2
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f1c:	e02b      	b.n	8001f76 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d112      	bne.n	8001f52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	881a      	ldrh	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	1c9a      	adds	r2, r3, #2
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f50:	e011      	b.n	8001f76 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f52:	f7fe fed1 	bl	8000cf8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d803      	bhi.n	8001f6a <HAL_SPI_Transmit+0x168>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d102      	bne.n	8001f70 <HAL_SPI_Transmit+0x16e>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f74:	e074      	b.n	8002060 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ce      	bne.n	8001f1e <HAL_SPI_Transmit+0x11c>
 8001f80:	e04c      	b.n	800201c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_SPI_Transmit+0x18e>
 8001f8a:	8afb      	ldrh	r3, [r7, #22]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d140      	bne.n	8002012 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	330c      	adds	r3, #12
 8001f9a:	7812      	ldrb	r2, [r2, #0]
 8001f9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fb6:	e02c      	b.n	8002012 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d113      	bne.n	8001fee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	330c      	adds	r3, #12
 8001fd0:	7812      	ldrb	r2, [r2, #0]
 8001fd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fec:	e011      	b.n	8002012 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fee:	f7fe fe83 	bl	8000cf8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d803      	bhi.n	8002006 <HAL_SPI_Transmit+0x204>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002004:	d102      	bne.n	800200c <HAL_SPI_Transmit+0x20a>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002010:	e026      	b.n	8002060 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1cd      	bne.n	8001fb8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fbcb 	bl	80027bc <SPI_EndRxTxTransaction>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2220      	movs	r2, #32
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	77fb      	strb	r3, [r7, #31]
 800205c:	e000      	b.n	8002060 <HAL_SPI_Transmit+0x25e>
  }

error:
 800205e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002070:	7ffb      	ldrb	r3, [r7, #31]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b088      	sub	sp, #32
 800207e:	af02      	add	r7, sp, #8
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	4613      	mov	r3, r2
 8002088:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002096:	d112      	bne.n	80020be <HAL_SPI_Receive+0x44>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10e      	bne.n	80020be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2204      	movs	r2, #4
 80020a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80020a8:	88fa      	ldrh	r2, [r7, #6]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f8f1 	bl	800229c <HAL_SPI_TransmitReceive>
 80020ba:	4603      	mov	r3, r0
 80020bc:	e0ea      	b.n	8002294 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_SPI_Receive+0x52>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e0e3      	b.n	8002294 <HAL_SPI_Receive+0x21a>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020d4:	f7fe fe10 	bl	8000cf8 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d002      	beq.n	80020ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
 80020e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020ea:	e0ca      	b.n	8002282 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_SPI_Receive+0x7e>
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020fc:	e0c1      	b.n	8002282 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2204      	movs	r2, #4
 8002102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002144:	d10f      	bne.n	8002166 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002154:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002170:	2b40      	cmp	r3, #64	; 0x40
 8002172:	d007      	beq.n	8002184 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002182:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d162      	bne.n	8002252 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800218c:	e02e      	b.n	80021ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b01      	cmp	r3, #1
 800219a:	d115      	bne.n	80021c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f103 020c 	add.w	r2, r3, #12
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	7812      	ldrb	r2, [r2, #0]
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021c6:	e011      	b.n	80021ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021c8:	f7fe fd96 	bl	8000cf8 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d803      	bhi.n	80021e0 <HAL_SPI_Receive+0x166>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d102      	bne.n	80021e6 <HAL_SPI_Receive+0x16c>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021ea:	e04a      	b.n	8002282 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1cb      	bne.n	800218e <HAL_SPI_Receive+0x114>
 80021f6:	e031      	b.n	800225c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d113      	bne.n	800222e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002210:	b292      	uxth	r2, r2
 8002212:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	1c9a      	adds	r2, r3, #2
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800222c:	e011      	b.n	8002252 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800222e:	f7fe fd63 	bl	8000cf8 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d803      	bhi.n	8002246 <HAL_SPI_Receive+0x1cc>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d102      	bne.n	800224c <HAL_SPI_Receive+0x1d2>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002250:	e017      	b.n	8002282 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1cd      	bne.n	80021f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fa45 	bl	80026f0 <SPI_EndRxTransaction>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	75fb      	strb	r3, [r7, #23]
 800227e:	e000      	b.n	8002282 <HAL_SPI_Receive+0x208>
  }

error :
 8002280:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002292:	7dfb      	ldrb	r3, [r7, #23]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022aa:	2301      	movs	r3, #1
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_SPI_TransmitReceive+0x26>
 80022be:	2302      	movs	r3, #2
 80022c0:	e18a      	b.n	80025d8 <HAL_SPI_TransmitReceive+0x33c>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022ca:	f7fe fd15 	bl	8000cf8 <HAL_GetTick>
 80022ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d00f      	beq.n	800230c <HAL_SPI_TransmitReceive+0x70>
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022f2:	d107      	bne.n	8002304 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d103      	bne.n	8002304 <HAL_SPI_TransmitReceive+0x68>
 80022fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002300:	2b04      	cmp	r3, #4
 8002302:	d003      	beq.n	800230c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002304:	2302      	movs	r3, #2
 8002306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800230a:	e15b      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_SPI_TransmitReceive+0x82>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_SPI_TransmitReceive+0x82>
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d103      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002324:	e14e      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b04      	cmp	r3, #4
 8002330:	d003      	beq.n	800233a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2205      	movs	r2, #5
 8002336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	887a      	ldrh	r2, [r7, #2]
 800234a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	887a      	ldrh	r2, [r7, #2]
 800235c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	887a      	ldrh	r2, [r7, #2]
 8002362:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237a:	2b40      	cmp	r3, #64	; 0x40
 800237c:	d007      	beq.n	800238e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002396:	d178      	bne.n	800248a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_SPI_TransmitReceive+0x10a>
 80023a0:	8b7b      	ldrh	r3, [r7, #26]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d166      	bne.n	8002474 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	881a      	ldrh	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	1c9a      	adds	r2, r3, #2
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ca:	e053      	b.n	8002474 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d11b      	bne.n	8002412 <HAL_SPI_TransmitReceive+0x176>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d016      	beq.n	8002412 <HAL_SPI_TransmitReceive+0x176>
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d113      	bne.n	8002412 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	881a      	ldrh	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	1c9a      	adds	r2, r3, #2
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d119      	bne.n	8002454 <HAL_SPI_TransmitReceive+0x1b8>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d014      	beq.n	8002454 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	b292      	uxth	r2, r2
 8002436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	1c9a      	adds	r2, r3, #2
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002450:	2301      	movs	r3, #1
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002454:	f7fe fc50 	bl	8000cf8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002460:	429a      	cmp	r2, r3
 8002462:	d807      	bhi.n	8002474 <HAL_SPI_TransmitReceive+0x1d8>
 8002464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246a:	d003      	beq.n	8002474 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002472:	e0a7      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002478:	b29b      	uxth	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1a6      	bne.n	80023cc <HAL_SPI_TransmitReceive+0x130>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1a1      	bne.n	80023cc <HAL_SPI_TransmitReceive+0x130>
 8002488:	e07c      	b.n	8002584 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_SPI_TransmitReceive+0x1fc>
 8002492:	8b7b      	ldrh	r3, [r7, #26]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d16b      	bne.n	8002570 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	7812      	ldrb	r2, [r2, #0]
 80024a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024be:	e057      	b.n	8002570 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d11c      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x26c>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d017      	beq.n	8002508 <HAL_SPI_TransmitReceive+0x26c>
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d114      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	330c      	adds	r3, #12
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d119      	bne.n	800254a <HAL_SPI_TransmitReceive+0x2ae>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d014      	beq.n	800254a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002546:	2301      	movs	r3, #1
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800254a:	f7fe fbd5 	bl	8000cf8 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002556:	429a      	cmp	r2, r3
 8002558:	d803      	bhi.n	8002562 <HAL_SPI_TransmitReceive+0x2c6>
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d102      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x2cc>
 8002562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002564:	2b00      	cmp	r3, #0
 8002566:	d103      	bne.n	8002570 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800256e:	e029      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1a2      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x224>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d19d      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f917 	bl	80027bc <SPI_EndRxTxTransaction>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025a0:	e010      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10b      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	e000      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80025c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3730      	adds	r7, #48	; 0x30
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025f0:	f7fe fb82 	bl	8000cf8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002600:	f7fe fb7a 	bl	8000cf8 <HAL_GetTick>
 8002604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002606:	4b39      	ldr	r3, [pc, #228]	; (80026ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	015b      	lsls	r3, r3, #5
 800260c:	0d1b      	lsrs	r3, r3, #20
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	fb02 f303 	mul.w	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002616:	e054      	b.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261e:	d050      	beq.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002620:	f7fe fb6a 	bl	8000cf8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	429a      	cmp	r2, r3
 800262e:	d902      	bls.n	8002636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d13d      	bne.n	80026b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800264e:	d111      	bne.n	8002674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002658:	d004      	beq.n	8002664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002662:	d107      	bne.n	8002674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267c:	d10f      	bne.n	800269e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800269c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e017      	b.n	80026e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	3b01      	subs	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4013      	ands	r3, r2
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d19b      	bne.n	8002618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000008 	.word	0x20000008

080026f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002704:	d111      	bne.n	800272a <SPI_EndRxTransaction+0x3a>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800270e:	d004      	beq.n	800271a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002718:	d107      	bne.n	800272a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002728:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002732:	d12a      	bne.n	800278a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273c:	d012      	beq.n	8002764 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2200      	movs	r2, #0
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff ff49 	bl	80025e0 <SPI_WaitFlagStateUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d02d      	beq.n	80027b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e026      	b.n	80027b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	2101      	movs	r1, #1
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff ff36 	bl	80025e0 <SPI_WaitFlagStateUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d01a      	beq.n	80027b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e013      	b.n	80027b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2200      	movs	r2, #0
 8002792:	2101      	movs	r1, #1
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7ff ff23 	bl	80025e0 <SPI_WaitFlagStateUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0220 	orr.w	r2, r3, #32
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e000      	b.n	80027b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027c8:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <SPI_EndRxTxTransaction+0x7c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <SPI_EndRxTxTransaction+0x80>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	0d5b      	lsrs	r3, r3, #21
 80027d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027e6:	d112      	bne.n	800280e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2200      	movs	r2, #0
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f7ff fef4 	bl	80025e0 <SPI_WaitFlagStateUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f043 0220 	orr.w	r2, r3, #32
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e00f      	b.n	800282e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3b01      	subs	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002824:	2b80      	cmp	r3, #128	; 0x80
 8002826:	d0f2      	beq.n	800280e <SPI_EndRxTxTransaction+0x52>
 8002828:	e000      	b.n	800282c <SPI_EndRxTxTransaction+0x70>
        break;
 800282a:	bf00      	nop
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000008 	.word	0x20000008
 800283c:	165e9f81 	.word	0x165e9f81

08002840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e03f      	b.n	80028d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe f966 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	; 0x24
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fe81 	bl	800358c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b08a      	sub	sp, #40	; 0x28
 80028de:	af02      	add	r7, sp, #8
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d17c      	bne.n	80029f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_UART_Transmit+0x2c>
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e075      	b.n	80029f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_UART_Transmit+0x3e>
 8002914:	2302      	movs	r3, #2
 8002916:	e06e      	b.n	80029f6 <HAL_UART_Transmit+0x11c>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2221      	movs	r2, #33	; 0x21
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800292e:	f7fe f9e3 	bl	8000cf8 <HAL_GetTick>
 8002932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002948:	d108      	bne.n	800295c <HAL_UART_Transmit+0x82>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d104      	bne.n	800295c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	e003      	b.n	8002964 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800296c:	e02a      	b.n	80029c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fbc1 	bl	8003100 <UART_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e036      	b.n	80029f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10b      	bne.n	80029a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800299c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	3302      	adds	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	e007      	b.n	80029b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	3301      	adds	r3, #1
 80029b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1cf      	bne.n	800296e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2200      	movs	r2, #0
 80029d6:	2140      	movs	r1, #64	; 0x40
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fb91 	bl	8003100 <UART_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e006      	b.n	80029f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b08a      	sub	sp, #40	; 0x28
 8002a02:	af02      	add	r7, sp, #8
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	f040 808c 	bne.w	8002b38 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_UART_Receive+0x2e>
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e084      	b.n	8002b3a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_UART_Receive+0x40>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e07d      	b.n	8002b3a <HAL_UART_Receive+0x13c>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2222      	movs	r2, #34	; 0x22
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a5a:	f7fe f94d 	bl	8000cf8 <HAL_GetTick>
 8002a5e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	88fa      	ldrh	r2, [r7, #6]
 8002a64:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	88fa      	ldrh	r2, [r7, #6]
 8002a6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a74:	d108      	bne.n	8002a88 <HAL_UART_Receive+0x8a>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d104      	bne.n	8002a88 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	e003      	b.n	8002a90 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a98:	e043      	b.n	8002b22 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2120      	movs	r1, #32
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fb2b 	bl	8003100 <UART_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e042      	b.n	8002b3a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	3302      	adds	r3, #2
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	e01f      	b.n	8002b14 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002adc:	d007      	beq.n	8002aee <HAL_UART_Receive+0xf0>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <HAL_UART_Receive+0xfe>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e008      	b.n	8002b0e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1b6      	bne.n	8002a9a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e000      	b.n	8002b3a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002b38:	2302      	movs	r3, #2
  }
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d11d      	bne.n	8002b98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_UART_Receive_IT+0x26>
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e016      	b.n	8002b9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_UART_Receive_IT+0x38>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e00f      	b.n	8002b9a <HAL_UART_Receive_IT+0x58>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fb24 	bl	80031dc <UART_Start_Receive_IT>
 8002b94:	4603      	mov	r3, r0
 8002b96:	e000      	b.n	8002b9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002b98:	2302      	movs	r3, #2
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b0ba      	sub	sp, #232	; 0xe8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_UART_IRQHandler+0x66>
 8002bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fc07 	bl	8003416 <UART_Receive_IT>
      return;
 8002c08:	e256      	b.n	80030b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80de 	beq.w	8002dd0 <HAL_UART_IRQHandler+0x22c>
 8002c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d106      	bne.n	8002c2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80d1 	beq.w	8002dd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00b      	beq.n	8002c52 <HAL_UART_IRQHandler+0xae>
 8002c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_UART_IRQHandler+0xd2>
 8002c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f043 0202 	orr.w	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_UART_IRQHandler+0xf6>
 8002c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f043 0204 	orr.w	r2, r3, #4
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d011      	beq.n	8002cca <HAL_UART_IRQHandler+0x126>
 8002ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f043 0208 	orr.w	r2, r3, #8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 81ed 	beq.w	80030ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x14e>
 8002ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fb92 	bl	8003416 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d103      	bne.n	8002d1e <HAL_UART_IRQHandler+0x17a>
 8002d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d04f      	beq.n	8002dbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fa9a 	bl	8003258 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d141      	bne.n	8002db6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3314      	adds	r3, #20
 8002d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3314      	adds	r3, #20
 8002d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d6e:	e841 2300 	strex	r3, r2, [r1]
 8002d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1d9      	bne.n	8002d32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d013      	beq.n	8002dae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	4a7d      	ldr	r2, [pc, #500]	; (8002f80 <HAL_UART_IRQHandler+0x3dc>)
 8002d8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe f961 	bl	800105a <HAL_DMA_Abort_IT>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d016      	beq.n	8002dcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002da8:	4610      	mov	r0, r2
 8002daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dac:	e00e      	b.n	8002dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f990 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db4:	e00a      	b.n	8002dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f98c 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbc:	e006      	b.n	8002dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f988 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002dca:	e170      	b.n	80030ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dcc:	bf00      	nop
    return;
 8002dce:	e16e      	b.n	80030ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	f040 814a 	bne.w	800306e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8143 	beq.w	800306e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 813c 	beq.w	800306e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	2b40      	cmp	r3, #64	; 0x40
 8002e18:	f040 80b4 	bne.w	8002f84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8140 	beq.w	80030b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	f080 8139 	bcs.w	80030b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e52:	f000 8088 	beq.w	8002f66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e92:	e841 2300 	strex	r3, r2, [r1]
 8002e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1d9      	bne.n	8002e56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3314      	adds	r3, #20
 8002ea8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ec6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002eca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ecc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ed2:	e841 2300 	strex	r3, r2, [r1]
 8002ed6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1e1      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3314      	adds	r3, #20
 8002ee4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3314      	adds	r3, #20
 8002efe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f0a:	e841 2300 	strex	r3, r2, [r1]
 8002f0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1e3      	bne.n	8002ede <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f36:	f023 0310 	bic.w	r3, r3, #16
 8002f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f48:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e3      	bne.n	8002f24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe f80a 	bl	8000f7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	4619      	mov	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f8b6 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f7c:	e099      	b.n	80030b2 <HAL_UART_IRQHandler+0x50e>
 8002f7e:	bf00      	nop
 8002f80:	0800331f 	.word	0x0800331f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 808b 	beq.w	80030b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8086 	beq.w	80030b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002fce:	647a      	str	r2, [r7, #68]	; 0x44
 8002fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e3      	bne.n	8002faa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	e853 3f00 	ldrex	r3, [r3]
 8002ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3314      	adds	r3, #20
 8003002:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003006:	633a      	str	r2, [r7, #48]	; 0x30
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800300c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300e:	e841 2300 	strex	r3, r2, [r1]
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e3      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	330c      	adds	r3, #12
 800302e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	60fb      	str	r3, [r7, #12]
   return(result);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0310 	bic.w	r3, r3, #16
 800303e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	330c      	adds	r3, #12
 8003048:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800304c:	61fa      	str	r2, [r7, #28]
 800304e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	69b9      	ldr	r1, [r7, #24]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	e841 2300 	strex	r3, r2, [r1]
 8003058:	617b      	str	r3, [r7, #20]
   return(result);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e3      	bne.n	8003028 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003064:	4619      	mov	r1, r3
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f83e 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800306c:	e023      	b.n	80030b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_UART_IRQHandler+0x4ea>
 800307a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f95d 	bl	8003346 <UART_Transmit_IT>
    return;
 800308c:	e014      	b.n	80030b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800308e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00e      	beq.n	80030b8 <HAL_UART_IRQHandler+0x514>
 800309a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f99d 	bl	80033e6 <UART_EndTransmit_IT>
    return;
 80030ac:	e004      	b.n	80030b8 <HAL_UART_IRQHandler+0x514>
    return;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <HAL_UART_IRQHandler+0x514>
      return;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <HAL_UART_IRQHandler+0x514>
      return;
 80030b6:	bf00      	nop
  }
}
 80030b8:	37e8      	adds	r7, #232	; 0xe8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b090      	sub	sp, #64	; 0x40
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003110:	e050      	b.n	80031b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d04c      	beq.n	80031b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800311a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <UART_WaitOnFlagUntilTimeout+0x30>
 8003120:	f7fd fdea 	bl	8000cf8 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800312c:	429a      	cmp	r2, r3
 800312e:	d241      	bcs.n	80031b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	e853 3f00 	ldrex	r3, [r3]
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	330c      	adds	r3, #12
 800314e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003150:	637a      	str	r2, [r7, #52]	; 0x34
 8003152:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003158:	e841 2300 	strex	r3, r2, [r1]
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e5      	bne.n	8003130 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3314      	adds	r3, #20
 800316a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	613b      	str	r3, [r7, #16]
   return(result);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	63bb      	str	r3, [r7, #56]	; 0x38
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3314      	adds	r3, #20
 8003182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003184:	623a      	str	r2, [r7, #32]
 8003186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003188:	69f9      	ldr	r1, [r7, #28]
 800318a:	6a3a      	ldr	r2, [r7, #32]
 800318c:	e841 2300 	strex	r3, r2, [r1]
 8003190:	61bb      	str	r3, [r7, #24]
   return(result);
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e5      	bne.n	8003164 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e00f      	b.n	80031d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4013      	ands	r3, r2
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d09f      	beq.n	8003112 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3740      	adds	r7, #64	; 0x40
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	88fa      	ldrh	r2, [r7, #6]
 80031f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	88fa      	ldrh	r2, [r7, #6]
 80031fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2222      	movs	r2, #34	; 0x22
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003228:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0220 	orr.w	r2, r2, #32
 8003248:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003258:	b480      	push	{r7}
 800325a:	b095      	sub	sp, #84	; 0x54
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326a:	e853 3f00 	ldrex	r3, [r3]
 800326e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	330c      	adds	r3, #12
 800327e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003280:	643a      	str	r2, [r7, #64]	; 0x40
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003284:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003288:	e841 2300 	strex	r3, r2, [r1]
 800328c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e5      	bne.n	8003260 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	e853 3f00 	ldrex	r3, [r3]
 80032a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3314      	adds	r3, #20
 80032b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e5      	bne.n	8003294 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d119      	bne.n	8003304 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	e853 3f00 	ldrex	r3, [r3]
 80032de:	60bb      	str	r3, [r7, #8]
   return(result);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f023 0310 	bic.w	r3, r3, #16
 80032e6:	647b      	str	r3, [r7, #68]	; 0x44
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032f0:	61ba      	str	r2, [r7, #24]
 80032f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f4:	6979      	ldr	r1, [r7, #20]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	e841 2300 	strex	r3, r2, [r1]
 80032fc:	613b      	str	r3, [r7, #16]
   return(result);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e5      	bne.n	80032d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003312:	bf00      	nop
 8003314:	3754      	adds	r7, #84	; 0x54
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff fecb 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b21      	cmp	r3, #33	; 0x21
 8003358:	d13e      	bne.n	80033d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003362:	d114      	bne.n	800338e <UART_Transmit_IT+0x48>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d110      	bne.n	800338e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003380:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	1c9a      	adds	r2, r3, #2
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	621a      	str	r2, [r3, #32]
 800338c:	e008      	b.n	80033a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6211      	str	r1, [r2, #32]
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4619      	mov	r1, r3
 80033ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10f      	bne.n	80033d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fe5a 	bl	80030c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b08c      	sub	sp, #48	; 0x30
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b22      	cmp	r3, #34	; 0x22
 8003428:	f040 80ab 	bne.w	8003582 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003434:	d117      	bne.n	8003466 <UART_Receive_IT+0x50>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d113      	bne.n	8003466 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800343e:	2300      	movs	r3, #0
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	b29b      	uxth	r3, r3
 8003450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003454:	b29a      	uxth	r2, r3
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
 8003464:	e026      	b.n	80034b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800346c:	2300      	movs	r3, #0
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003478:	d007      	beq.n	800348a <UART_Receive_IT+0x74>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <UART_Receive_IT+0x82>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e008      	b.n	80034aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29b      	uxth	r3, r3
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4619      	mov	r1, r3
 80034c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d15a      	bne.n	800357e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0220 	bic.w	r2, r2, #32
 80034d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	2b01      	cmp	r3, #1
 8003506:	d135      	bne.n	8003574 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	330c      	adds	r3, #12
 8003514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	613b      	str	r3, [r7, #16]
   return(result);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f023 0310 	bic.w	r3, r3, #16
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352e:	623a      	str	r2, [r7, #32]
 8003530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	69f9      	ldr	r1, [r7, #28]
 8003534:	6a3a      	ldr	r2, [r7, #32]
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	61bb      	str	r3, [r7, #24]
   return(result);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e5      	bne.n	800350e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b10      	cmp	r3, #16
 800354e:	d10a      	bne.n	8003566 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800356a:	4619      	mov	r1, r3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff fdbb 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
 8003572:	e002      	b.n	800357a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fd f961 	bl	800083c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e002      	b.n	8003584 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	e000      	b.n	8003584 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003582:	2302      	movs	r3, #2
  }
}
 8003584:	4618      	mov	r0, r3
 8003586:	3730      	adds	r7, #48	; 0x30
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800358c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003590:	b0c0      	sub	sp, #256	; 0x100
 8003592:	af00      	add	r7, sp, #0
 8003594:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	68d9      	ldr	r1, [r3, #12]
 80035aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	ea40 0301 	orr.w	r3, r0, r1
 80035b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035e4:	f021 010c 	bic.w	r1, r1, #12
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035f2:	430b      	orrs	r3, r1
 80035f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003606:	6999      	ldr	r1, [r3, #24]
 8003608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	ea40 0301 	orr.w	r3, r0, r1
 8003612:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b8f      	ldr	r3, [pc, #572]	; (8003858 <UART_SetConfig+0x2cc>)
 800361c:	429a      	cmp	r2, r3
 800361e:	d005      	beq.n	800362c <UART_SetConfig+0xa0>
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	4b8d      	ldr	r3, [pc, #564]	; (800385c <UART_SetConfig+0x2d0>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d104      	bne.n	8003636 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800362c:	f7fe fb4c 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 8003630:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003634:	e003      	b.n	800363e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003636:	f7fe fb33 	bl	8001ca0 <HAL_RCC_GetPCLK1Freq>
 800363a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003648:	f040 810c 	bne.w	8003864 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800364c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003650:	2200      	movs	r2, #0
 8003652:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003656:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800365a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800365e:	4622      	mov	r2, r4
 8003660:	462b      	mov	r3, r5
 8003662:	1891      	adds	r1, r2, r2
 8003664:	65b9      	str	r1, [r7, #88]	; 0x58
 8003666:	415b      	adcs	r3, r3
 8003668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800366a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800366e:	4621      	mov	r1, r4
 8003670:	eb12 0801 	adds.w	r8, r2, r1
 8003674:	4629      	mov	r1, r5
 8003676:	eb43 0901 	adc.w	r9, r3, r1
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800368a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800368e:	4690      	mov	r8, r2
 8003690:	4699      	mov	r9, r3
 8003692:	4623      	mov	r3, r4
 8003694:	eb18 0303 	adds.w	r3, r8, r3
 8003698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800369c:	462b      	mov	r3, r5
 800369e:	eb49 0303 	adc.w	r3, r9, r3
 80036a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036ba:	460b      	mov	r3, r1
 80036bc:	18db      	adds	r3, r3, r3
 80036be:	653b      	str	r3, [r7, #80]	; 0x50
 80036c0:	4613      	mov	r3, r2
 80036c2:	eb42 0303 	adc.w	r3, r2, r3
 80036c6:	657b      	str	r3, [r7, #84]	; 0x54
 80036c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036d0:	f7fc fdd6 	bl	8000280 <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4b61      	ldr	r3, [pc, #388]	; (8003860 <UART_SetConfig+0x2d4>)
 80036da:	fba3 2302 	umull	r2, r3, r3, r2
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	011c      	lsls	r4, r3, #4
 80036e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036f4:	4642      	mov	r2, r8
 80036f6:	464b      	mov	r3, r9
 80036f8:	1891      	adds	r1, r2, r2
 80036fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80036fc:	415b      	adcs	r3, r3
 80036fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003700:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003704:	4641      	mov	r1, r8
 8003706:	eb12 0a01 	adds.w	sl, r2, r1
 800370a:	4649      	mov	r1, r9
 800370c:	eb43 0b01 	adc.w	fp, r3, r1
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800371c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003724:	4692      	mov	sl, r2
 8003726:	469b      	mov	fp, r3
 8003728:	4643      	mov	r3, r8
 800372a:	eb1a 0303 	adds.w	r3, sl, r3
 800372e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003732:	464b      	mov	r3, r9
 8003734:	eb4b 0303 	adc.w	r3, fp, r3
 8003738:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003748:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800374c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003750:	460b      	mov	r3, r1
 8003752:	18db      	adds	r3, r3, r3
 8003754:	643b      	str	r3, [r7, #64]	; 0x40
 8003756:	4613      	mov	r3, r2
 8003758:	eb42 0303 	adc.w	r3, r2, r3
 800375c:	647b      	str	r3, [r7, #68]	; 0x44
 800375e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003762:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003766:	f7fc fd8b 	bl	8000280 <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4611      	mov	r1, r2
 8003770:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <UART_SetConfig+0x2d4>)
 8003772:	fba3 2301 	umull	r2, r3, r3, r1
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2264      	movs	r2, #100	; 0x64
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	1acb      	subs	r3, r1, r3
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003786:	4b36      	ldr	r3, [pc, #216]	; (8003860 <UART_SetConfig+0x2d4>)
 8003788:	fba3 2302 	umull	r2, r3, r3, r2
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003794:	441c      	add	r4, r3
 8003796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800379a:	2200      	movs	r2, #0
 800379c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037a8:	4642      	mov	r2, r8
 80037aa:	464b      	mov	r3, r9
 80037ac:	1891      	adds	r1, r2, r2
 80037ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80037b0:	415b      	adcs	r3, r3
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037b8:	4641      	mov	r1, r8
 80037ba:	1851      	adds	r1, r2, r1
 80037bc:	6339      	str	r1, [r7, #48]	; 0x30
 80037be:	4649      	mov	r1, r9
 80037c0:	414b      	adcs	r3, r1
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037d0:	4659      	mov	r1, fp
 80037d2:	00cb      	lsls	r3, r1, #3
 80037d4:	4651      	mov	r1, sl
 80037d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037da:	4651      	mov	r1, sl
 80037dc:	00ca      	lsls	r2, r1, #3
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	4642      	mov	r2, r8
 80037e6:	189b      	adds	r3, r3, r2
 80037e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037ec:	464b      	mov	r3, r9
 80037ee:	460a      	mov	r2, r1
 80037f0:	eb42 0303 	adc.w	r3, r2, r3
 80037f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003804:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003808:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800380c:	460b      	mov	r3, r1
 800380e:	18db      	adds	r3, r3, r3
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
 8003812:	4613      	mov	r3, r2
 8003814:	eb42 0303 	adc.w	r3, r2, r3
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800381e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003822:	f7fc fd2d 	bl	8000280 <__aeabi_uldivmod>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <UART_SetConfig+0x2d4>)
 800382c:	fba3 1302 	umull	r1, r3, r3, r2
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	2164      	movs	r1, #100	; 0x64
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	3332      	adds	r3, #50	; 0x32
 800383e:	4a08      	ldr	r2, [pc, #32]	; (8003860 <UART_SetConfig+0x2d4>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	f003 0207 	and.w	r2, r3, #7
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4422      	add	r2, r4
 8003852:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003854:	e105      	b.n	8003a62 <UART_SetConfig+0x4d6>
 8003856:	bf00      	nop
 8003858:	40011000 	.word	0x40011000
 800385c:	40011400 	.word	0x40011400
 8003860:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003868:	2200      	movs	r2, #0
 800386a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800386e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003872:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003876:	4642      	mov	r2, r8
 8003878:	464b      	mov	r3, r9
 800387a:	1891      	adds	r1, r2, r2
 800387c:	6239      	str	r1, [r7, #32]
 800387e:	415b      	adcs	r3, r3
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003886:	4641      	mov	r1, r8
 8003888:	1854      	adds	r4, r2, r1
 800388a:	4649      	mov	r1, r9
 800388c:	eb43 0501 	adc.w	r5, r3, r1
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	00eb      	lsls	r3, r5, #3
 800389a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800389e:	00e2      	lsls	r2, r4, #3
 80038a0:	4614      	mov	r4, r2
 80038a2:	461d      	mov	r5, r3
 80038a4:	4643      	mov	r3, r8
 80038a6:	18e3      	adds	r3, r4, r3
 80038a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038ac:	464b      	mov	r3, r9
 80038ae:	eb45 0303 	adc.w	r3, r5, r3
 80038b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038d2:	4629      	mov	r1, r5
 80038d4:	008b      	lsls	r3, r1, #2
 80038d6:	4621      	mov	r1, r4
 80038d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038dc:	4621      	mov	r1, r4
 80038de:	008a      	lsls	r2, r1, #2
 80038e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038e4:	f7fc fccc 	bl	8000280 <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4b60      	ldr	r3, [pc, #384]	; (8003a70 <UART_SetConfig+0x4e4>)
 80038ee:	fba3 2302 	umull	r2, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	011c      	lsls	r4, r3, #4
 80038f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fa:	2200      	movs	r2, #0
 80038fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003900:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003904:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003908:	4642      	mov	r2, r8
 800390a:	464b      	mov	r3, r9
 800390c:	1891      	adds	r1, r2, r2
 800390e:	61b9      	str	r1, [r7, #24]
 8003910:	415b      	adcs	r3, r3
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003918:	4641      	mov	r1, r8
 800391a:	1851      	adds	r1, r2, r1
 800391c:	6139      	str	r1, [r7, #16]
 800391e:	4649      	mov	r1, r9
 8003920:	414b      	adcs	r3, r1
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003930:	4659      	mov	r1, fp
 8003932:	00cb      	lsls	r3, r1, #3
 8003934:	4651      	mov	r1, sl
 8003936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800393a:	4651      	mov	r1, sl
 800393c:	00ca      	lsls	r2, r1, #3
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
 8003942:	4603      	mov	r3, r0
 8003944:	4642      	mov	r2, r8
 8003946:	189b      	adds	r3, r3, r2
 8003948:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800394c:	464b      	mov	r3, r9
 800394e:	460a      	mov	r2, r1
 8003950:	eb42 0303 	adc.w	r3, r2, r3
 8003954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	67bb      	str	r3, [r7, #120]	; 0x78
 8003962:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003970:	4649      	mov	r1, r9
 8003972:	008b      	lsls	r3, r1, #2
 8003974:	4641      	mov	r1, r8
 8003976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800397a:	4641      	mov	r1, r8
 800397c:	008a      	lsls	r2, r1, #2
 800397e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003982:	f7fc fc7d 	bl	8000280 <__aeabi_uldivmod>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <UART_SetConfig+0x4e4>)
 800398c:	fba3 1302 	umull	r1, r3, r3, r2
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	2164      	movs	r1, #100	; 0x64
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	3332      	adds	r3, #50	; 0x32
 800399e:	4a34      	ldr	r2, [pc, #208]	; (8003a70 <UART_SetConfig+0x4e4>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039aa:	441c      	add	r4, r3
 80039ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b0:	2200      	movs	r2, #0
 80039b2:	673b      	str	r3, [r7, #112]	; 0x70
 80039b4:	677a      	str	r2, [r7, #116]	; 0x74
 80039b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039ba:	4642      	mov	r2, r8
 80039bc:	464b      	mov	r3, r9
 80039be:	1891      	adds	r1, r2, r2
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	415b      	adcs	r3, r3
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039ca:	4641      	mov	r1, r8
 80039cc:	1851      	adds	r1, r2, r1
 80039ce:	6039      	str	r1, [r7, #0]
 80039d0:	4649      	mov	r1, r9
 80039d2:	414b      	adcs	r3, r1
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039e2:	4659      	mov	r1, fp
 80039e4:	00cb      	lsls	r3, r1, #3
 80039e6:	4651      	mov	r1, sl
 80039e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ec:	4651      	mov	r1, sl
 80039ee:	00ca      	lsls	r2, r1, #3
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	4603      	mov	r3, r0
 80039f6:	4642      	mov	r2, r8
 80039f8:	189b      	adds	r3, r3, r2
 80039fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80039fc:	464b      	mov	r3, r9
 80039fe:	460a      	mov	r2, r1
 8003a00:	eb42 0303 	adc.w	r3, r2, r3
 8003a04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a10:	667a      	str	r2, [r7, #100]	; 0x64
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a1e:	4649      	mov	r1, r9
 8003a20:	008b      	lsls	r3, r1, #2
 8003a22:	4641      	mov	r1, r8
 8003a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a28:	4641      	mov	r1, r8
 8003a2a:	008a      	lsls	r2, r1, #2
 8003a2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a30:	f7fc fc26 	bl	8000280 <__aeabi_uldivmod>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <UART_SetConfig+0x4e4>)
 8003a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	2164      	movs	r1, #100	; 0x64
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	3332      	adds	r3, #50	; 0x32
 8003a4c:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <UART_SetConfig+0x4e4>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	f003 020f 	and.w	r2, r3, #15
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4422      	add	r2, r4
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6e:	bf00      	nop
 8003a70:	51eb851f 	.word	0x51eb851f

08003a74 <NRF24_DelayMicroSeconds>:
 *
 * @returns None
 */
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <NRF24_DelayMicroSeconds+0x3c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <NRF24_DelayMicroSeconds+0x40>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	0c9a      	lsrs	r2, r3, #18
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8003a94:	bf00      	nop
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1e5a      	subs	r2, r3, #1
 8003a9a:	60fa      	str	r2, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1fa      	bne.n	8003a96 <NRF24_DelayMicroSeconds+0x22>
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000008 	.word	0x20000008
 8003ab4:	165e9f81 	.word	0x165e9f81

08003ab8 <NRF24_csn>:
 *
 * @returns None
 */
//1. Chip Select function
void NRF24_csn(int state)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <NRF24_csn+0x20>
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <NRF24_csn+0x38>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <NRF24_csn+0x3c>)
 8003acc:	8811      	ldrh	r1, [r2, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fd fc81 	bl	80013d8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8003ad6:	e007      	b.n	8003ae8 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <NRF24_csn+0x38>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <NRF24_csn+0x3c>)
 8003ade:	8811      	ldrh	r1, [r2, #0]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd fc78 	bl	80013d8 <HAL_GPIO_WritePin>
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	200001ac 	.word	0x200001ac
 8003af4:	200001b0 	.word	0x200001b0

08003af8 <NRF24_ce>:
 *
 * @returns None
 */
//2. Chip Enable
void NRF24_ce(int state)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <NRF24_ce+0x20>
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <NRF24_ce+0x38>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <NRF24_ce+0x3c>)
 8003b0c:	8811      	ldrh	r1, [r2, #0]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fd fc61 	bl	80013d8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8003b16:	e007      	b.n	8003b28 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <NRF24_ce+0x38>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a05      	ldr	r2, [pc, #20]	; (8003b34 <NRF24_ce+0x3c>)
 8003b1e:	8811      	ldrh	r1, [r2, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fd fc58 	bl	80013d8 <HAL_GPIO_WritePin>
}
 8003b28:	bf00      	nop
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	200001ac 	.word	0x200001ac
 8003b34:	200001b2 	.word	0x200001b2

08003b38 <NRF24_read_register>:
 *
 * @returns The value of the specified register.
 */
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8003b42:	2000      	movs	r0, #0
 8003b44:	f7ff ffb8 	bl	8003ab8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003b4c:	f107 010c 	add.w	r1, r7, #12
 8003b50:	2364      	movs	r3, #100	; 0x64
 8003b52:	2201      	movs	r2, #1
 8003b54:	480a      	ldr	r0, [pc, #40]	; (8003b80 <NRF24_read_register+0x48>)
 8003b56:	f7fe f954 	bl	8001e02 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8003b5a:	f107 030c 	add.w	r3, r7, #12
 8003b5e:	1c59      	adds	r1, r3, #1
 8003b60:	2364      	movs	r3, #100	; 0x64
 8003b62:	2201      	movs	r2, #1
 8003b64:	4806      	ldr	r0, [pc, #24]	; (8003b80 <NRF24_read_register+0x48>)
 8003b66:	f7fe fa88 	bl	800207a <HAL_SPI_Receive>
	retData = spiBuf[1];
 8003b6a:	7b7b      	ldrb	r3, [r7, #13]
 8003b6c:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f7ff ffa2 	bl	8003ab8 <NRF24_csn>
	return retData;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	200001b4 	.word	0x200001b4

08003b84 <NRF24_read_registerN>:
 *
 * @returns None
 */
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	6039      	str	r1, [r7, #0]
 8003b8e:	71fb      	strb	r3, [r7, #7]
 8003b90:	4613      	mov	r3, r2
 8003b92:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003b94:	2000      	movs	r0, #0
 8003b96:	f7ff ff8f 	bl	8003ab8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003b9e:	f107 010c 	add.w	r1, r7, #12
 8003ba2:	2364      	movs	r3, #100	; 0x64
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4808      	ldr	r0, [pc, #32]	; (8003bc8 <NRF24_read_registerN+0x44>)
 8003ba8:	f7fe f92b 	bl	8001e02 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8003bac:	79bb      	ldrb	r3, [r7, #6]
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	2364      	movs	r3, #100	; 0x64
 8003bb2:	6839      	ldr	r1, [r7, #0]
 8003bb4:	4804      	ldr	r0, [pc, #16]	; (8003bc8 <NRF24_read_registerN+0x44>)
 8003bb6:	f7fe fa60 	bl	800207a <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8003bba:	2001      	movs	r0, #1
 8003bbc:	f7ff ff7c 	bl	8003ab8 <NRF24_csn>
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	200001b4 	.word	0x200001b4

08003bcc <NRF24_write_register>:
 *
 * @returns None
 */
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	71fb      	strb	r3, [r7, #7]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f7ff ff6b 	bl	8003ab8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	f043 0320 	orr.w	r3, r3, #32
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8003bec:	79bb      	ldrb	r3, [r7, #6]
 8003bee:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8003bf0:	f107 010c 	add.w	r1, r7, #12
 8003bf4:	2364      	movs	r3, #100	; 0x64
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4804      	ldr	r0, [pc, #16]	; (8003c0c <NRF24_write_register+0x40>)
 8003bfa:	f7fe f902 	bl	8001e02 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f7ff ff5a 	bl	8003ab8 <NRF24_csn>
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	200001b4 	.word	0x200001b4

08003c10 <NRF24_write_registerN>:
 *
 * @returns None
 */
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	71fb      	strb	r3, [r7, #7]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003c20:	2000      	movs	r0, #0
 8003c22:	f7ff ff49 	bl	8003ab8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	f043 0320 	orr.w	r3, r3, #32
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003c30:	f107 010c 	add.w	r1, r7, #12
 8003c34:	2364      	movs	r3, #100	; 0x64
 8003c36:	2201      	movs	r2, #1
 8003c38:	4808      	ldr	r0, [pc, #32]	; (8003c5c <NRF24_write_registerN+0x4c>)
 8003c3a:	f7fe f8e2 	bl	8001e02 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8003c3e:	79bb      	ldrb	r3, [r7, #6]
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	2364      	movs	r3, #100	; 0x64
 8003c44:	6839      	ldr	r1, [r7, #0]
 8003c46:	4805      	ldr	r0, [pc, #20]	; (8003c5c <NRF24_write_registerN+0x4c>)
 8003c48:	f7fe f8db 	bl	8001e02 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f7ff ff33 	bl	8003ab8 <NRF24_csn>
}
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200001b4 	.word	0x200001b4

08003c60 <NRF24_read_payload>:
 *
 * @returns None
 */
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8003c6c:	f000 fa0a 	bl	8004084 <NRF24_getPayloadSize>
 8003c70:	4603      	mov	r3, r0
 8003c72:	461a      	mov	r2, r3
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d303      	bcc.n	8003c82 <NRF24_read_payload+0x22>
 8003c7a:	f000 fa03 	bl	8004084 <NRF24_getPayloadSize>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	e000      	b.n	8003c84 <NRF24_read_payload+0x24>
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8003c86:	2000      	movs	r0, #0
 8003c88:	f7ff ff16 	bl	8003ab8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8003c8c:	2361      	movs	r3, #97	; 0x61
 8003c8e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8003c90:	f107 010e 	add.w	r1, r7, #14
 8003c94:	2364      	movs	r3, #100	; 0x64
 8003c96:	2201      	movs	r2, #1
 8003c98:	4808      	ldr	r0, [pc, #32]	; (8003cbc <NRF24_read_payload+0x5c>)
 8003c9a:	f7fe f8b2 	bl	8001e02 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	2364      	movs	r3, #100	; 0x64
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4805      	ldr	r0, [pc, #20]	; (8003cbc <NRF24_read_payload+0x5c>)
 8003ca8:	f7fe f9e7 	bl	800207a <HAL_SPI_Receive>
	NRF24_csn(1);
 8003cac:	2001      	movs	r0, #1
 8003cae:	f7ff ff03 	bl	8003ab8 <NRF24_csn>
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	200001b4 	.word	0x200001b4

08003cc0 <NRF24_flush_tx>:
 *
 * @returns None
 */
//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8003cc4:	21ff      	movs	r1, #255	; 0xff
 8003cc6:	20e1      	movs	r0, #225	; 0xe1
 8003cc8:	f7ff ff80 	bl	8003bcc <NRF24_write_register>
}
 8003ccc:	bf00      	nop
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <NRF24_flush_rx>:
 *
 * @returns None
 */
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8003cd4:	21ff      	movs	r1, #255	; 0xff
 8003cd6:	20e2      	movs	r0, #226	; 0xe2
 8003cd8:	f7ff ff78 	bl	8003bcc <NRF24_write_register>
}
 8003cdc:	bf00      	nop
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <NRF24_get_status>:
 *
 * @returns The value of the status register.
 */
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8003ce6:	2007      	movs	r0, #7
 8003ce8:	f7ff ff26 	bl	8003b38 <NRF24_read_register>
 8003cec:	4603      	mov	r3, r0
 8003cee:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <NRF24_begin>:
 *
 * @returns None
 */
//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8003d10:	4b66      	ldr	r3, [pc, #408]	; (8003eac <NRF24_begin+0x1b0>)
 8003d12:	4618      	mov	r0, r3
 8003d14:	f107 031c 	add.w	r3, r7, #28
 8003d18:	2258      	movs	r2, #88	; 0x58
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f000 fff0 	bl	8004d00 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8003d20:	4a63      	ldr	r2, [pc, #396]	; (8003eb0 <NRF24_begin+0x1b4>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8003d26:	4a63      	ldr	r2, [pc, #396]	; (8003eb4 <NRF24_begin+0x1b8>)
 8003d28:	887b      	ldrh	r3, [r7, #2]
 8003d2a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;  
 8003d2c:	4a62      	ldr	r2, [pc, #392]	; (8003eb8 <NRF24_begin+0x1bc>)
 8003d2e:	883b      	ldrh	r3, [r7, #0]
 8003d30:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8003d32:	2001      	movs	r0, #1
 8003d34:	f7ff fec0 	bl	8003ab8 <NRF24_csn>
	NRF24_ce(0);
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f7ff fedd 	bl	8003af8 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8003d3e:	2005      	movs	r0, #5
 8003d40:	f7fc ffe6 	bl	8000d10 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08); //0x08
 8003d44:	2108      	movs	r1, #8
 8003d46:	2000      	movs	r0, #0
 8003d48:	f7ff ff40 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f); //0x3f
 8003d4c:	213f      	movs	r1, #63	; 0x3f
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f7ff ff3c 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03); //0x03
 8003d54:	2103      	movs	r1, #3
 8003d56:	2002      	movs	r0, #2
 8003d58:	f7ff ff38 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03); //0x03
 8003d5c:	2103      	movs	r1, #3
 8003d5e:	2003      	movs	r0, #3
 8003d60:	f7ff ff34 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03); //0x03
 8003d64:	2103      	movs	r1, #3
 8003d66:	2004      	movs	r0, #4
 8003d68:	f7ff ff30 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02); //0x02
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	2005      	movs	r0, #5
 8003d70:	f7ff ff2c 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f); //0x0f
 8003d74:	210f      	movs	r1, #15
 8003d76:	2006      	movs	r0, #6
 8003d78:	f7ff ff28 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e); //0x0e
 8003d7c:	210e      	movs	r1, #14
 8003d7e:	2007      	movs	r0, #7
 8003d80:	f7ff ff24 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00); //0x00
 8003d84:	2100      	movs	r1, #0
 8003d86:	2008      	movs	r0, #8
 8003d88:	f7ff ff20 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00); //0x00
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	2009      	movs	r0, #9
 8003d90:	f7ff ff1c 	bl	8003bcc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8003d94:	23e7      	movs	r3, #231	; 0xe7
 8003d96:	733b      	strb	r3, [r7, #12]
 8003d98:	23e7      	movs	r3, #231	; 0xe7
 8003d9a:	72fb      	strb	r3, [r7, #11]
 8003d9c:	23e7      	movs	r3, #231	; 0xe7
 8003d9e:	72bb      	strb	r3, [r7, #10]
 8003da0:	23e7      	movs	r3, #231	; 0xe7
 8003da2:	727b      	strb	r3, [r7, #9]
 8003da4:	23e7      	movs	r3, #231	; 0xe7
 8003da6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8003da8:	f107 0308 	add.w	r3, r7, #8
 8003dac:	2205      	movs	r2, #5
 8003dae:	4619      	mov	r1, r3
 8003db0:	200a      	movs	r0, #10
 8003db2:	f7ff ff2d 	bl	8003c10 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8003db6:	23c2      	movs	r3, #194	; 0xc2
 8003db8:	733b      	strb	r3, [r7, #12]
 8003dba:	23c2      	movs	r3, #194	; 0xc2
 8003dbc:	72fb      	strb	r3, [r7, #11]
 8003dbe:	23c2      	movs	r3, #194	; 0xc2
 8003dc0:	72bb      	strb	r3, [r7, #10]
 8003dc2:	23c2      	movs	r3, #194	; 0xc2
 8003dc4:	727b      	strb	r3, [r7, #9]
 8003dc6:	23c2      	movs	r3, #194	; 0xc2
 8003dc8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8003dca:	f107 0308 	add.w	r3, r7, #8
 8003dce:	2205      	movs	r2, #5
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	200b      	movs	r0, #11
 8003dd4:	f7ff ff1c 	bl	8003c10 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8003dd8:	21c3      	movs	r1, #195	; 0xc3
 8003dda:	200c      	movs	r0, #12
 8003ddc:	f7ff fef6 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8003de0:	21c4      	movs	r1, #196	; 0xc4
 8003de2:	200d      	movs	r0, #13
 8003de4:	f7ff fef2 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8003de8:	21c5      	movs	r1, #197	; 0xc5
 8003dea:	200e      	movs	r0, #14
 8003dec:	f7ff feee 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8003df0:	21c6      	movs	r1, #198	; 0xc6
 8003df2:	200f      	movs	r0, #15
 8003df4:	f7ff feea 	bl	8003bcc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8003df8:	23e7      	movs	r3, #231	; 0xe7
 8003dfa:	733b      	strb	r3, [r7, #12]
 8003dfc:	23e7      	movs	r3, #231	; 0xe7
 8003dfe:	72fb      	strb	r3, [r7, #11]
 8003e00:	23e7      	movs	r3, #231	; 0xe7
 8003e02:	72bb      	strb	r3, [r7, #10]
 8003e04:	23e7      	movs	r3, #231	; 0xe7
 8003e06:	727b      	strb	r3, [r7, #9]
 8003e08:	23e7      	movs	r3, #231	; 0xe7
 8003e0a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8003e0c:	f107 0308 	add.w	r3, r7, #8
 8003e10:	2205      	movs	r2, #5
 8003e12:	4619      	mov	r1, r3
 8003e14:	2010      	movs	r0, #16
 8003e16:	f7ff fefb 	bl	8003c10 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	2011      	movs	r0, #17
 8003e1e:	f7ff fed5 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8003e22:	2100      	movs	r1, #0
 8003e24:	2012      	movs	r0, #18
 8003e26:	f7ff fed1 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	2013      	movs	r0, #19
 8003e2e:	f7ff fecd 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8003e32:	2100      	movs	r1, #0
 8003e34:	2014      	movs	r0, #20
 8003e36:	f7ff fec9 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	2015      	movs	r0, #21
 8003e3e:	f7ff fec5 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8003e42:	2100      	movs	r1, #0
 8003e44:	2016      	movs	r0, #22
 8003e46:	f7ff fec1 	bl	8003bcc <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8003e4a:	f000 fad5 	bl	80043f8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8003e4e:	2100      	movs	r1, #0
 8003e50:	201c      	movs	r0, #28
 8003e52:	f7ff febb 	bl	8003bcc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8003e56:	2100      	movs	r1, #0
 8003e58:	201d      	movs	r0, #29
 8003e5a:	f7ff feb7 	bl	8003bcc <NRF24_write_register>
	printRadioSettings();
 8003e5e:	f000 fae5 	bl	800442c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8003e62:	210f      	movs	r1, #15
 8003e64:	200f      	movs	r0, #15
 8003e66:	f000 f8c5 	bl	8003ff4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m18dB);
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f000 f9ab 	bl	80041c6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8003e70:	2001      	movs	r0, #1
 8003e72:	f000 f9e1 	bl	8004238 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8003e76:	2001      	movs	r0, #1
 8003e78:	f000 fa24 	bl	80042c4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8003e7c:	f000 f976 	bl	800416c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8003e80:	2020      	movs	r0, #32
 8003e82:	f000 f8e7 	bl	8004054 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8003e86:	f000 faae 	bl	80043e6 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(52);
 8003e8a:	2034      	movs	r0, #52	; 0x34
 8003e8c:	f000 f8cd 	bl	800402a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8003e90:	f7ff ff16 	bl	8003cc0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8003e94:	f7ff ff1c 	bl	8003cd0 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8003e98:	f000 fa3c 	bl	8004314 <NRF24_powerDown>
	
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ea6:	b002      	add	sp, #8
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	200001b4 	.word	0x200001b4
 8003eb0:	200001ac 	.word	0x200001ac
 8003eb4:	200001b0 	.word	0x200001b0
 8003eb8:	200001b2 	.word	0x200001b2

08003ebc <NRF24_startListening>:
 *
 * @returns None
 */
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f7ff fe39 	bl	8003b38 <NRF24_read_register>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f043 0303 	orr.w	r3, r3, #3
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	4619      	mov	r1, r3
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f7ff fe7b 	bl	8003bcc <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <NRF24_startListening+0x48>)
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	d004      	beq.n	8003eea <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8003ee0:	2205      	movs	r2, #5
 8003ee2:	4908      	ldr	r1, [pc, #32]	; (8003f04 <NRF24_startListening+0x48>)
 8003ee4:	200a      	movs	r0, #10
 8003ee6:	f7ff fe93 	bl	8003c10 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8003eea:	f7ff fee9 	bl	8003cc0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8003eee:	f7ff feef 	bl	8003cd0 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8003ef2:	2001      	movs	r0, #1
 8003ef4:	f7ff fe00 	bl	8003af8 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8003ef8:	2096      	movs	r0, #150	; 0x96
 8003efa:	f7ff fdbb 	bl	8003a74 <NRF24_DelayMicroSeconds>
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200001a0 	.word	0x200001a0

08003f08 <NRF24_available>:
 *
 * @returns True if there is available data to read, false otherwise.
 */
//16. Check for available data to read
bool NRF24_available(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f000 fa10 	bl	8004332 <NRF24_availablePipe>
 8003f12:	4603      	mov	r3, r0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <NRF24_read>:
 *
 * @returns True if the read operation was successful, false otherwise.
 */
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	4619      	mov	r1, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fe99 	bl	8003c60 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8003f2e:	2017      	movs	r0, #23
 8003f30:	f7ff fe02 	bl	8003b38 <NRF24_read_register>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8003f3c:	f7ff fec8 	bl	8003cd0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8003f40:	f000 f8ac 	bl	800409c <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <NRF24_openReadingPipe>:
 *
 * @returns None
 */
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4601      	mov	r1, r0
 8003f60:	e9c7 2300 	strd	r2, r3, [r7]
 8003f64:	460b      	mov	r3, r1
 8003f66:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d104      	bne.n	8003f78 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8003f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f72:	491c      	ldr	r1, [pc, #112]	; (8003fe4 <NRF24_openReadingPipe+0x8c>)
 8003f74:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b06      	cmp	r3, #6
 8003f7c:	d82d      	bhi.n	8003fda <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d808      	bhi.n	8003f96 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <NRF24_openReadingPipe+0x90>)
 8003f88:	5cd3      	ldrb	r3, [r2, r3]
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	2205      	movs	r2, #5
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fe3e 	bl	8003c10 <NRF24_write_registerN>
 8003f94:	e007      	b.n	8003fa6 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	4a13      	ldr	r2, [pc, #76]	; (8003fe8 <NRF24_openReadingPipe+0x90>)
 8003f9a:	5cd3      	ldrb	r3, [r2, r3]
 8003f9c:	4639      	mov	r1, r7
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fe35 	bl	8003c10 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	4a10      	ldr	r2, [pc, #64]	; (8003fec <NRF24_openReadingPipe+0x94>)
 8003faa:	5cd3      	ldrb	r3, [r2, r3]
 8003fac:	4a10      	ldr	r2, [pc, #64]	; (8003ff0 <NRF24_openReadingPipe+0x98>)
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fe0a 	bl	8003bcc <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8003fb8:	2002      	movs	r0, #2
 8003fba:	f7ff fdbd 	bl	8003b38 <NRF24_read_register>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	b25a      	sxtb	r2, r3
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	b25b      	sxtb	r3, r3
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	b25b      	sxtb	r3, r3
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	2002      	movs	r0, #2
 8003fd6:	f7ff fdf9 	bl	8003bcc <NRF24_write_register>
	}
	
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	200001a0 	.word	0x200001a0
 8003fe8:	08005b64 	.word	0x08005b64
 8003fec:	08005b6c 	.word	0x08005b6c
 8003ff0:	200001a8 	.word	0x200001a8

08003ff4 <NRF24_setRetries>:
 *
 * @returns None
 */
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	460a      	mov	r2, r1
 8003ffe:	71fb      	strb	r3, [r7, #7]
 8004000:	4613      	mov	r3, r2
 8004002:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	b25a      	sxtb	r2, r3
 800400a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	b25b      	sxtb	r3, r3
 8004014:	4313      	orrs	r3, r2
 8004016:	b25b      	sxtb	r3, r3
 8004018:	b2db      	uxtb	r3, r3
 800401a:	4619      	mov	r1, r3
 800401c:	2004      	movs	r0, #4
 800401e:	f7ff fdd5 	bl	8003bcc <NRF24_write_register>
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <NRF24_setChannel>:
 *
 * @returns None
 */
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	4603      	mov	r3, r0
 8004032:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8004034:	237f      	movs	r3, #127	; 0x7f
 8004036:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8004038:	7bfa      	ldrb	r2, [r7, #15]
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	4293      	cmp	r3, r2
 800403e:	bf28      	it	cs
 8004040:	4613      	movcs	r3, r2
 8004042:	b2db      	uxtb	r3, r3
 8004044:	4619      	mov	r1, r3
 8004046:	2005      	movs	r0, #5
 8004048:	f7ff fdc0 	bl	8003bcc <NRF24_write_register>
}
 800404c:	bf00      	nop
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <NRF24_setPayloadSize>:
 *
 * @returns None
 */
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800405e:	2320      	movs	r3, #32
 8004060:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	4293      	cmp	r3, r2
 8004068:	bf28      	it	cs
 800406a:	4613      	movcs	r3, r2
 800406c:	b2da      	uxtb	r2, r3
 800406e:	4b04      	ldr	r3, [pc, #16]	; (8004080 <NRF24_setPayloadSize+0x2c>)
 8004070:	701a      	strb	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	200001a8 	.word	0x200001a8

08004084 <NRF24_getPayloadSize>:
 *
 * @returns The payload size of the NRF24 module.
 */
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
	return payload_size;
 8004088:	4b03      	ldr	r3, [pc, #12]	; (8004098 <NRF24_getPayloadSize+0x14>)
 800408a:	781b      	ldrb	r3, [r3, #0]
}
 800408c:	4618      	mov	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	200001a8 	.word	0x200001a8

0800409c <NRF24_getDynamicPayloadSize>:
 *
 * @returns The size of the dynamic payload.
 */
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80040a0:	2060      	movs	r0, #96	; 0x60
 80040a2:	f7ff fd49 	bl	8003b38 <NRF24_read_register>
 80040a6:	4603      	mov	r3, r0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}

080040ac <NRF24_enableAckPayload>:
 *
 * @returns None
 */
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80040b0:	201d      	movs	r0, #29
 80040b2:	f7ff fd41 	bl	8003b38 <NRF24_read_register>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f043 0306 	orr.w	r3, r3, #6
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	4619      	mov	r1, r3
 80040c0:	201d      	movs	r0, #29
 80040c2:	f7ff fd83 	bl	8003bcc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80040c6:	201d      	movs	r0, #29
 80040c8:	f7ff fd36 	bl	8003b38 <NRF24_read_register>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10c      	bne.n	80040ec <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80040d2:	f000 f991 	bl	80043f8 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80040d6:	201d      	movs	r0, #29
 80040d8:	f7ff fd2e 	bl	8003b38 <NRF24_read_register>
 80040dc:	4603      	mov	r3, r0
 80040de:	f043 0306 	orr.w	r3, r3, #6
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	4619      	mov	r1, r3
 80040e6:	201d      	movs	r0, #29
 80040e8:	f7ff fd70 	bl	8003bcc <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80040ec:	201c      	movs	r0, #28
 80040ee:	f7ff fd23 	bl	8003b38 <NRF24_read_register>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f043 0303 	orr.w	r3, r3, #3
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	4619      	mov	r1, r3
 80040fc:	201c      	movs	r0, #28
 80040fe:	f7ff fd65 	bl	8003bcc <NRF24_write_register>
}
 8004102:	bf00      	nop
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <NRF24_enableDynamicPayloads>:
 *
 * @returns None
 */
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800410c:	201d      	movs	r0, #29
 800410e:	f7ff fd13 	bl	8003b38 <NRF24_read_register>
 8004112:	4603      	mov	r3, r0
 8004114:	f043 0304 	orr.w	r3, r3, #4
 8004118:	b2db      	uxtb	r3, r3
 800411a:	4619      	mov	r1, r3
 800411c:	201d      	movs	r0, #29
 800411e:	f7ff fd55 	bl	8003bcc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8004122:	201d      	movs	r0, #29
 8004124:	f7ff fd08 	bl	8003b38 <NRF24_read_register>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10c      	bne.n	8004148 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800412e:	f000 f963 	bl	80043f8 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8004132:	201d      	movs	r0, #29
 8004134:	f7ff fd00 	bl	8003b38 <NRF24_read_register>
 8004138:	4603      	mov	r3, r0
 800413a:	f043 0304 	orr.w	r3, r3, #4
 800413e:	b2db      	uxtb	r3, r3
 8004140:	4619      	mov	r1, r3
 8004142:	201d      	movs	r0, #29
 8004144:	f7ff fd42 	bl	8003bcc <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8004148:	201c      	movs	r0, #28
 800414a:	f7ff fcf5 	bl	8003b38 <NRF24_read_register>
 800414e:	4603      	mov	r3, r0
 8004150:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8004154:	b2db      	uxtb	r3, r3
 8004156:	4619      	mov	r1, r3
 8004158:	201c      	movs	r0, #28
 800415a:	f7ff fd37 	bl	8003bcc <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800415e:	4b02      	ldr	r3, [pc, #8]	; (8004168 <NRF24_enableDynamicPayloads+0x60>)
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
	
}
 8004164:	bf00      	nop
 8004166:	bd80      	pop	{r7, pc}
 8004168:	200001a9 	.word	0x200001a9

0800416c <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8004170:	201d      	movs	r0, #29
 8004172:	f7ff fce1 	bl	8003b38 <NRF24_read_register>
 8004176:	4603      	mov	r3, r0
 8004178:	f023 0304 	bic.w	r3, r3, #4
 800417c:	b2db      	uxtb	r3, r3
 800417e:	4619      	mov	r1, r3
 8004180:	201d      	movs	r0, #29
 8004182:	f7ff fd23 	bl	8003bcc <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8004186:	2100      	movs	r1, #0
 8004188:	201c      	movs	r0, #28
 800418a:	f7ff fd1f 	bl	8003bcc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800418e:	4b02      	ldr	r3, [pc, #8]	; (8004198 <NRF24_disableDynamicPayloads+0x2c>)
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
}
 8004194:	bf00      	nop
 8004196:	bd80      	pop	{r7, pc}
 8004198:	200001a9 	.word	0x200001a9

0800419c <NRF24_setAutoAck>:
 *
 * @returns None
 */
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d004      	beq.n	80041b6 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80041ac:	213f      	movs	r1, #63	; 0x3f
 80041ae:	2001      	movs	r0, #1
 80041b0:	f7ff fd0c 	bl	8003bcc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80041b4:	e003      	b.n	80041be <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80041b6:	2100      	movs	r1, #0
 80041b8:	2001      	movs	r0, #1
 80041ba:	f7ff fd07 	bl	8003bcc <NRF24_write_register>
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <NRF24_setPALevel>:
 *
 * @returns None
 */
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	4603      	mov	r3, r0
 80041ce:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80041d0:	2006      	movs	r0, #6
 80041d2:	f7ff fcb1 	bl	8003b38 <NRF24_read_register>
 80041d6:	4603      	mov	r3, r0
 80041d8:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	f023 0306 	bic.w	r3, r3, #6
 80041e0:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d104      	bne.n	80041f2 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	f043 0306 	orr.w	r3, r3, #6
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	e019      	b.n	8004226 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d104      	bne.n	8004202 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e011      	b.n	8004226 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d104      	bne.n	8004212 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	f043 0302 	orr.w	r3, r3, #2
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	e009      	b.n	8004226 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d006      	beq.n	8004226 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	2b04      	cmp	r3, #4
 800421c:	d103      	bne.n	8004226 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	f043 0306 	orr.w	r3, r3, #6
 8004224:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	4619      	mov	r1, r3
 800422a:	2006      	movs	r0, #6
 800422c:	f7ff fcce 	bl	8003bcc <NRF24_write_register>
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <NRF24_setDataRate>:
 *
 * @returns True if the data rate was successfully set, false otherwise.
 */
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8004246:	2006      	movs	r0, #6
 8004248:	f7ff fc76 	bl	8003b38 <NRF24_read_register>
 800424c:	4603      	mov	r3, r0
 800424e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8004250:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <NRF24_setDataRate+0x88>)
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8004256:	7bbb      	ldrb	r3, [r7, #14]
 8004258:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800425c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d107      	bne.n	8004274 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8004264:	4b16      	ldr	r3, [pc, #88]	; (80042c0 <NRF24_setDataRate+0x88>)
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800426a:	7bbb      	ldrb	r3, [r7, #14]
 800426c:	f043 0320 	orr.w	r3, r3, #32
 8004270:	73bb      	strb	r3, [r7, #14]
 8004272:	e00d      	b.n	8004290 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d107      	bne.n	800428a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800427a:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <NRF24_setDataRate+0x88>)
 800427c:	2201      	movs	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8004280:	7bbb      	ldrb	r3, [r7, #14]
 8004282:	f043 0308 	orr.w	r3, r3, #8
 8004286:	73bb      	strb	r3, [r7, #14]
 8004288:	e002      	b.n	8004290 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <NRF24_setDataRate+0x88>)
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8004290:	7bbb      	ldrb	r3, [r7, #14]
 8004292:	4619      	mov	r1, r3
 8004294:	2006      	movs	r0, #6
 8004296:	f7ff fc99 	bl	8003bcc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800429a:	2006      	movs	r0, #6
 800429c:	f7ff fc4c 	bl	8003b38 <NRF24_read_register>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461a      	mov	r2, r3
 80042a4:	7bbb      	ldrb	r3, [r7, #14]
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d102      	bne.n	80042b0 <NRF24_setDataRate+0x78>
  {
    result = true;
 80042aa:	2301      	movs	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
 80042ae:	e002      	b.n	80042b6 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <NRF24_setDataRate+0x88>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	200001aa 	.word	0x200001aa

080042c4 <NRF24_setCRCLength>:
 *
 * @returns None
 */
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80042ce:	2000      	movs	r0, #0
 80042d0:	f7ff fc32 	bl	8003b38 <NRF24_read_register>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f023 030c 	bic.w	r3, r3, #12
 80042da:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d00f      	beq.n	8004302 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d104      	bne.n	80042f2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	f043 0308 	orr.w	r3, r3, #8
 80042ee:	73fb      	strb	r3, [r7, #15]
 80042f0:	e007      	b.n	8004302 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	f043 0308 	orr.w	r3, r3, #8
 80042f8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	f043 0304 	orr.w	r3, r3, #4
 8004300:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	4619      	mov	r1, r3
 8004306:	2000      	movs	r0, #0
 8004308:	f7ff fc60 	bl	8003bcc <NRF24_write_register>
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <NRF24_powerDown>:
 *
 * @returns None
 */
//38. power down
void NRF24_powerDown(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8004318:	2000      	movs	r0, #0
 800431a:	f7ff fc0d 	bl	8003b38 <NRF24_read_register>
 800431e:	4603      	mov	r3, r0
 8004320:	f023 0302 	bic.w	r3, r3, #2
 8004324:	b2db      	uxtb	r3, r3
 8004326:	4619      	mov	r1, r3
 8004328:	2000      	movs	r0, #0
 800432a:	f7ff fc4f 	bl	8003bcc <NRF24_write_register>
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}

08004332 <NRF24_availablePipe>:
 *
 * @returns True if data is available on any of the pipes, false otherwise.
 */
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800433a:	f7ff fcd1 	bl	8003ce0 <NRF24_get_status>
 800433e:	4603      	mov	r3, r0
 8004340:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	73bb      	strb	r3, [r7, #14]

  if (result)
 8004352:	7bbb      	ldrb	r3, [r7, #14]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d017      	beq.n	8004388 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	b2da      	uxtb	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800436e:	2140      	movs	r1, #64	; 0x40
 8004370:	2007      	movs	r0, #7
 8004372:	f7ff fc2b 	bl	8003bcc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8004380:	2120      	movs	r1, #32
 8004382:	2007      	movs	r0, #7
 8004384:	f7ff fc22 	bl	8003bcc <NRF24_write_register>
    }
  }
  return result;
 8004388:	7bbb      	ldrb	r3, [r7, #14]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <NRF24_writeAckPayload>:
 *
 * @returns None
 */
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	4603      	mov	r3, r0
 800439a:	6039      	str	r1, [r7, #0]
 800439c:	71fb      	strb	r3, [r7, #7]
 800439e:	4613      	mov	r3, r2
 80043a0:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 80043a6:	2320      	movs	r3, #32
 80043a8:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 80043aa:	7afa      	ldrb	r2, [r7, #11]
 80043ac:	79bb      	ldrb	r3, [r7, #6]
 80043ae:	4293      	cmp	r3, r2
 80043b0:	bf28      	it	cs
 80043b2:	4613      	movcs	r3, r2
 80043b4:	72bb      	strb	r3, [r7, #10]
	
  NRF24_csn(0);
 80043b6:	2000      	movs	r0, #0
 80043b8:	f7ff fb7e 	bl	8003ab8 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80043bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	b25b      	sxtb	r3, r3
 80043c6:	f063 0357 	orn	r3, r3, #87	; 0x57
 80043ca:	b25b      	sxtb	r3, r3
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	7aba      	ldrb	r2, [r7, #10]
 80043d0:	68f9      	ldr	r1, [r7, #12]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff fc1c 	bl	8003c10 <NRF24_write_registerN>
  NRF24_csn(1);
 80043d8:	2001      	movs	r0, #1
 80043da:	f7ff fb6d 	bl	8003ab8 <NRF24_csn>
}
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <NRF24_resetStatus>:
 *
 * @returns None
 */
//46. Reset Status
void NRF24_resetStatus(void)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80043ea:	2170      	movs	r1, #112	; 0x70
 80043ec:	2007      	movs	r0, #7
 80043ee:	f7ff fbed 	bl	8003bcc <NRF24_write_register>
}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <NRF24_ACTIVATE_cmd>:
 *
 * @returns None
 */
//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80043fe:	2000      	movs	r0, #0
 8004400:	f7ff fb5a 	bl	8003ab8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8004404:	2350      	movs	r3, #80	; 0x50
 8004406:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8004408:	2373      	movs	r3, #115	; 0x73
 800440a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800440c:	1d39      	adds	r1, r7, #4
 800440e:	2364      	movs	r3, #100	; 0x64
 8004410:	2202      	movs	r2, #2
 8004412:	4805      	ldr	r0, [pc, #20]	; (8004428 <NRF24_ACTIVATE_cmd+0x30>)
 8004414:	f7fd fcf5 	bl	8001e02 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8004418:	2001      	movs	r0, #1
 800441a:	f7ff fb4d 	bl	8003ab8 <NRF24_csn>
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200001b4 	.word	0x200001b4

0800442c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 800442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442e:	b0a1      	sub	sp, #132	; 0x84
 8004430:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004432:	f107 0308 	add.w	r3, r7, #8
 8004436:	49c3      	ldr	r1, [pc, #780]	; (8004744 <printRadioSettings+0x318>)
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fc77 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800443e:	f107 0308 	add.w	r3, r7, #8
 8004442:	4618      	mov	r0, r3
 8004444:	f7fb fec4 	bl	80001d0 <strlen>
 8004448:	4603      	mov	r3, r0
 800444a:	b29a      	uxth	r2, r3
 800444c:	f107 0108 	add.w	r1, r7, #8
 8004450:	230a      	movs	r3, #10
 8004452:	48bd      	ldr	r0, [pc, #756]	; (8004748 <printRadioSettings+0x31c>)
 8004454:	f7fe fa41 	bl	80028da <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8004458:	2000      	movs	r0, #0
 800445a:	f7ff fb6d 	bl	8003b38 <NRF24_read_register>
 800445e:	4603      	mov	r3, r0
 8004460:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8004464:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d013      	beq.n	8004498 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8004470:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d006      	beq.n	800448a <printRadioSettings+0x5e>
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	49b2      	ldr	r1, [pc, #712]	; (800474c <printRadioSettings+0x320>)
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fc52 	bl	8004d2c <siprintf>
 8004488:	e00c      	b.n	80044a4 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800448a:	f107 0308 	add.w	r3, r7, #8
 800448e:	49b0      	ldr	r1, [pc, #704]	; (8004750 <printRadioSettings+0x324>)
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fc4b 	bl	8004d2c <siprintf>
 8004496:	e005      	b.n	80044a4 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8004498:	f107 0308 	add.w	r3, r7, #8
 800449c:	49ad      	ldr	r1, [pc, #692]	; (8004754 <printRadioSettings+0x328>)
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fc44 	bl	8004d2c <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80044a4:	f107 0308 	add.w	r3, r7, #8
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fb fe91 	bl	80001d0 <strlen>
 80044ae:	4603      	mov	r3, r0
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	f107 0108 	add.w	r1, r7, #8
 80044b6:	230a      	movs	r3, #10
 80044b8:	48a3      	ldr	r0, [pc, #652]	; (8004748 <printRadioSettings+0x31c>)
 80044ba:	f7fe fa0e 	bl	80028da <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80044be:	2001      	movs	r0, #1
 80044c0:	f7ff fb3a 	bl	8003b38 <NRF24_read_register>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80044ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044ce:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bfcc      	ite	gt
 80044d6:	2301      	movgt	r3, #1
 80044d8:	2300      	movle	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80044de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044e2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bfcc      	ite	gt
 80044ea:	2301      	movgt	r3, #1
 80044ec:	2300      	movle	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80044f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044f6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bfcc      	ite	gt
 80044fe:	2301      	movgt	r3, #1
 8004500:	2300      	movle	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004506:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800450a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800450e:	2b00      	cmp	r3, #0
 8004510:	bfcc      	ite	gt
 8004512:	2301      	movgt	r3, #1
 8004514:	2300      	movle	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800451a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800451e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004522:	2b00      	cmp	r3, #0
 8004524:	bfcc      	ite	gt
 8004526:	2301      	movgt	r3, #1
 8004528:	2300      	movle	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800452e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004532:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004536:	2b00      	cmp	r3, #0
 8004538:	bfcc      	ite	gt
 800453a:	2301      	movgt	r3, #1
 800453c:	2300      	movle	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	f107 0008 	add.w	r0, r7, #8
 8004544:	9303      	str	r3, [sp, #12]
 8004546:	9402      	str	r4, [sp, #8]
 8004548:	9101      	str	r1, [sp, #4]
 800454a:	9200      	str	r2, [sp, #0]
 800454c:	4633      	mov	r3, r6
 800454e:	462a      	mov	r2, r5
 8004550:	4981      	ldr	r1, [pc, #516]	; (8004758 <printRadioSettings+0x32c>)
 8004552:	f000 fbeb 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004556:	f107 0308 	add.w	r3, r7, #8
 800455a:	4618      	mov	r0, r3
 800455c:	f7fb fe38 	bl	80001d0 <strlen>
 8004560:	4603      	mov	r3, r0
 8004562:	b29a      	uxth	r2, r3
 8004564:	f107 0108 	add.w	r1, r7, #8
 8004568:	230a      	movs	r3, #10
 800456a:	4877      	ldr	r0, [pc, #476]	; (8004748 <printRadioSettings+0x31c>)
 800456c:	f7fe f9b5 	bl	80028da <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8004570:	2002      	movs	r0, #2
 8004572:	f7ff fae1 	bl	8003b38 <NRF24_read_register>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800457c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004580:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004584:	2b00      	cmp	r3, #0
 8004586:	bfcc      	ite	gt
 8004588:	2301      	movgt	r3, #1
 800458a:	2300      	movle	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004590:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004594:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004598:	2b00      	cmp	r3, #0
 800459a:	bfcc      	ite	gt
 800459c:	2301      	movgt	r3, #1
 800459e:	2300      	movle	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80045a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045a8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bfcc      	ite	gt
 80045b0:	2301      	movgt	r3, #1
 80045b2:	2300      	movle	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80045b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045bc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bfcc      	ite	gt
 80045c4:	2301      	movgt	r3, #1
 80045c6:	2300      	movle	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80045cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045d0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bfcc      	ite	gt
 80045d8:	2301      	movgt	r3, #1
 80045da:	2300      	movle	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80045e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045e4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bfcc      	ite	gt
 80045ec:	2301      	movgt	r3, #1
 80045ee:	2300      	movle	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f107 0008 	add.w	r0, r7, #8
 80045f6:	9303      	str	r3, [sp, #12]
 80045f8:	9402      	str	r4, [sp, #8]
 80045fa:	9101      	str	r1, [sp, #4]
 80045fc:	9200      	str	r2, [sp, #0]
 80045fe:	4633      	mov	r3, r6
 8004600:	462a      	mov	r2, r5
 8004602:	4956      	ldr	r1, [pc, #344]	; (800475c <printRadioSettings+0x330>)
 8004604:	f000 fb92 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004608:	f107 0308 	add.w	r3, r7, #8
 800460c:	4618      	mov	r0, r3
 800460e:	f7fb fddf 	bl	80001d0 <strlen>
 8004612:	4603      	mov	r3, r0
 8004614:	b29a      	uxth	r2, r3
 8004616:	f107 0108 	add.w	r1, r7, #8
 800461a:	230a      	movs	r3, #10
 800461c:	484a      	ldr	r0, [pc, #296]	; (8004748 <printRadioSettings+0x31c>)
 800461e:	f7fe f95c 	bl	80028da <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8004622:	2003      	movs	r0, #3
 8004624:	f7ff fa88 	bl	8003b38 <NRF24_read_register>
 8004628:	4603      	mov	r3, r0
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8004632:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004636:	3302      	adds	r3, #2
 8004638:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800463c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004640:	f107 0308 	add.w	r3, r7, #8
 8004644:	4946      	ldr	r1, [pc, #280]	; (8004760 <printRadioSettings+0x334>)
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fb70 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800464c:	f107 0308 	add.w	r3, r7, #8
 8004650:	4618      	mov	r0, r3
 8004652:	f7fb fdbd 	bl	80001d0 <strlen>
 8004656:	4603      	mov	r3, r0
 8004658:	b29a      	uxth	r2, r3
 800465a:	f107 0108 	add.w	r1, r7, #8
 800465e:	230a      	movs	r3, #10
 8004660:	4839      	ldr	r0, [pc, #228]	; (8004748 <printRadioSettings+0x31c>)
 8004662:	f7fe f93a 	bl	80028da <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8004666:	2005      	movs	r0, #5
 8004668:	f7ff fa66 	bl	8003b38 <NRF24_read_register>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8004672:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800467a:	f107 0308 	add.w	r3, r7, #8
 800467e:	4939      	ldr	r1, [pc, #228]	; (8004764 <printRadioSettings+0x338>)
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fb53 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004686:	f107 0308 	add.w	r3, r7, #8
 800468a:	4618      	mov	r0, r3
 800468c:	f7fb fda0 	bl	80001d0 <strlen>
 8004690:	4603      	mov	r3, r0
 8004692:	b29a      	uxth	r2, r3
 8004694:	f107 0108 	add.w	r1, r7, #8
 8004698:	230a      	movs	r3, #10
 800469a:	482b      	ldr	r0, [pc, #172]	; (8004748 <printRadioSettings+0x31c>)
 800469c:	f7fe f91d 	bl	80028da <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80046a0:	2006      	movs	r0, #6
 80046a2:	f7ff fa49 	bl	8003b38 <NRF24_read_register>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80046ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d006      	beq.n	80046c6 <printRadioSettings+0x29a>
 80046b8:	f107 0308 	add.w	r3, r7, #8
 80046bc:	492a      	ldr	r1, [pc, #168]	; (8004768 <printRadioSettings+0x33c>)
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fb34 	bl	8004d2c <siprintf>
 80046c4:	e005      	b.n	80046d2 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80046c6:	f107 0308 	add.w	r3, r7, #8
 80046ca:	4928      	ldr	r1, [pc, #160]	; (800476c <printRadioSettings+0x340>)
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fb2d 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80046d2:	f107 0308 	add.w	r3, r7, #8
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fb fd7a 	bl	80001d0 <strlen>
 80046dc:	4603      	mov	r3, r0
 80046de:	b29a      	uxth	r2, r3
 80046e0:	f107 0108 	add.w	r1, r7, #8
 80046e4:	230a      	movs	r3, #10
 80046e6:	4818      	ldr	r0, [pc, #96]	; (8004748 <printRadioSettings+0x31c>)
 80046e8:	f7fe f8f7 	bl	80028da <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80046ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046f0:	f003 0306 	and.w	r3, r3, #6
 80046f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80046f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8004702:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <printRadioSettings+0x2ec>
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	4918      	ldr	r1, [pc, #96]	; (8004770 <printRadioSettings+0x344>)
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fb0b 	bl	8004d2c <siprintf>
 8004716:	e03b      	b.n	8004790 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8004718:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800471c:	2b01      	cmp	r3, #1
 800471e:	d106      	bne.n	800472e <printRadioSettings+0x302>
 8004720:	f107 0308 	add.w	r3, r7, #8
 8004724:	4913      	ldr	r1, [pc, #76]	; (8004774 <printRadioSettings+0x348>)
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fb00 	bl	8004d2c <siprintf>
 800472c:	e030      	b.n	8004790 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800472e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004732:	2b02      	cmp	r3, #2
 8004734:	d122      	bne.n	800477c <printRadioSettings+0x350>
 8004736:	f107 0308 	add.w	r3, r7, #8
 800473a:	490f      	ldr	r1, [pc, #60]	; (8004778 <printRadioSettings+0x34c>)
 800473c:	4618      	mov	r0, r3
 800473e:	f000 faf5 	bl	8004d2c <siprintf>
 8004742:	e025      	b.n	8004790 <printRadioSettings+0x364>
 8004744:	08005608 	.word	0x08005608
 8004748:	2000020c 	.word	0x2000020c
 800474c:	0800563c 	.word	0x0800563c
 8004750:	08005658 	.word	0x08005658
 8004754:	08005674 	.word	0x08005674
 8004758:	08005688 	.word	0x08005688
 800475c:	080056cc 	.word	0x080056cc
 8004760:	08005718 	.word	0x08005718
 8004764:	08005734 	.word	0x08005734
 8004768:	08005748 	.word	0x08005748
 800476c:	08005760 	.word	0x08005760
 8004770:	08005778 	.word	0x08005778
 8004774:	0800578c 	.word	0x0800578c
 8004778:	080057a0 	.word	0x080057a0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800477c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004780:	2b03      	cmp	r3, #3
 8004782:	d105      	bne.n	8004790 <printRadioSettings+0x364>
 8004784:	f107 0308 	add.w	r3, r7, #8
 8004788:	49d7      	ldr	r1, [pc, #860]	; (8004ae8 <printRadioSettings+0x6bc>)
 800478a:	4618      	mov	r0, r3
 800478c:	f000 face 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004790:	f107 0308 	add.w	r3, r7, #8
 8004794:	4618      	mov	r0, r3
 8004796:	f7fb fd1b 	bl	80001d0 <strlen>
 800479a:	4603      	mov	r3, r0
 800479c:	b29a      	uxth	r2, r3
 800479e:	f107 0108 	add.w	r1, r7, #8
 80047a2:	230a      	movs	r3, #10
 80047a4:	48d1      	ldr	r0, [pc, #836]	; (8004aec <printRadioSettings+0x6c0>)
 80047a6:	f7fe f898 	bl	80028da <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80047aa:	463b      	mov	r3, r7
 80047ac:	2205      	movs	r2, #5
 80047ae:	4619      	mov	r1, r3
 80047b0:	200a      	movs	r0, #10
 80047b2:	f7ff f9e7 	bl	8003b84 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80047b6:	793b      	ldrb	r3, [r7, #4]
 80047b8:	461c      	mov	r4, r3
 80047ba:	78fb      	ldrb	r3, [r7, #3]
 80047bc:	461d      	mov	r5, r3
 80047be:	78bb      	ldrb	r3, [r7, #2]
 80047c0:	787a      	ldrb	r2, [r7, #1]
 80047c2:	7839      	ldrb	r1, [r7, #0]
 80047c4:	f107 0008 	add.w	r0, r7, #8
 80047c8:	9102      	str	r1, [sp, #8]
 80047ca:	9201      	str	r2, [sp, #4]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	462b      	mov	r3, r5
 80047d0:	4622      	mov	r2, r4
 80047d2:	49c7      	ldr	r1, [pc, #796]	; (8004af0 <printRadioSettings+0x6c4>)
 80047d4:	f000 faaa 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80047d8:	f107 0308 	add.w	r3, r7, #8
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fb fcf7 	bl	80001d0 <strlen>
 80047e2:	4603      	mov	r3, r0
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	f107 0108 	add.w	r1, r7, #8
 80047ea:	230a      	movs	r3, #10
 80047ec:	48bf      	ldr	r0, [pc, #764]	; (8004aec <printRadioSettings+0x6c0>)
 80047ee:	f7fe f874 	bl	80028da <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80047f2:	463b      	mov	r3, r7
 80047f4:	2205      	movs	r2, #5
 80047f6:	4619      	mov	r1, r3
 80047f8:	200b      	movs	r0, #11
 80047fa:	f7ff f9c3 	bl	8003b84 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80047fe:	793b      	ldrb	r3, [r7, #4]
 8004800:	461c      	mov	r4, r3
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	461d      	mov	r5, r3
 8004806:	78bb      	ldrb	r3, [r7, #2]
 8004808:	787a      	ldrb	r2, [r7, #1]
 800480a:	7839      	ldrb	r1, [r7, #0]
 800480c:	f107 0008 	add.w	r0, r7, #8
 8004810:	9102      	str	r1, [sp, #8]
 8004812:	9201      	str	r2, [sp, #4]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	462b      	mov	r3, r5
 8004818:	4622      	mov	r2, r4
 800481a:	49b6      	ldr	r1, [pc, #728]	; (8004af4 <printRadioSettings+0x6c8>)
 800481c:	f000 fa86 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004820:	f107 0308 	add.w	r3, r7, #8
 8004824:	4618      	mov	r0, r3
 8004826:	f7fb fcd3 	bl	80001d0 <strlen>
 800482a:	4603      	mov	r3, r0
 800482c:	b29a      	uxth	r2, r3
 800482e:	f107 0108 	add.w	r1, r7, #8
 8004832:	230a      	movs	r3, #10
 8004834:	48ad      	ldr	r0, [pc, #692]	; (8004aec <printRadioSettings+0x6c0>)
 8004836:	f7fe f850 	bl	80028da <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800483a:	463b      	mov	r3, r7
 800483c:	2201      	movs	r2, #1
 800483e:	4619      	mov	r1, r3
 8004840:	200c      	movs	r0, #12
 8004842:	f7ff f99f 	bl	8003b84 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004846:	783b      	ldrb	r3, [r7, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	f107 0308 	add.w	r3, r7, #8
 800484e:	49aa      	ldr	r1, [pc, #680]	; (8004af8 <printRadioSettings+0x6cc>)
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fa6b 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004856:	f107 0308 	add.w	r3, r7, #8
 800485a:	4618      	mov	r0, r3
 800485c:	f7fb fcb8 	bl	80001d0 <strlen>
 8004860:	4603      	mov	r3, r0
 8004862:	b29a      	uxth	r2, r3
 8004864:	f107 0108 	add.w	r1, r7, #8
 8004868:	230a      	movs	r3, #10
 800486a:	48a0      	ldr	r0, [pc, #640]	; (8004aec <printRadioSettings+0x6c0>)
 800486c:	f7fe f835 	bl	80028da <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8004870:	463b      	mov	r3, r7
 8004872:	2201      	movs	r2, #1
 8004874:	4619      	mov	r1, r3
 8004876:	200d      	movs	r0, #13
 8004878:	f7ff f984 	bl	8003b84 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800487c:	783b      	ldrb	r3, [r7, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	f107 0308 	add.w	r3, r7, #8
 8004884:	499d      	ldr	r1, [pc, #628]	; (8004afc <printRadioSettings+0x6d0>)
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fa50 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800488c:	f107 0308 	add.w	r3, r7, #8
 8004890:	4618      	mov	r0, r3
 8004892:	f7fb fc9d 	bl	80001d0 <strlen>
 8004896:	4603      	mov	r3, r0
 8004898:	b29a      	uxth	r2, r3
 800489a:	f107 0108 	add.w	r1, r7, #8
 800489e:	230a      	movs	r3, #10
 80048a0:	4892      	ldr	r0, [pc, #584]	; (8004aec <printRadioSettings+0x6c0>)
 80048a2:	f7fe f81a 	bl	80028da <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80048a6:	463b      	mov	r3, r7
 80048a8:	2201      	movs	r2, #1
 80048aa:	4619      	mov	r1, r3
 80048ac:	200e      	movs	r0, #14
 80048ae:	f7ff f969 	bl	8003b84 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80048b2:	783b      	ldrb	r3, [r7, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	f107 0308 	add.w	r3, r7, #8
 80048ba:	4991      	ldr	r1, [pc, #580]	; (8004b00 <printRadioSettings+0x6d4>)
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fa35 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80048c2:	f107 0308 	add.w	r3, r7, #8
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fb fc82 	bl	80001d0 <strlen>
 80048cc:	4603      	mov	r3, r0
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	f107 0108 	add.w	r1, r7, #8
 80048d4:	230a      	movs	r3, #10
 80048d6:	4885      	ldr	r0, [pc, #532]	; (8004aec <printRadioSettings+0x6c0>)
 80048d8:	f7fd ffff 	bl	80028da <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80048dc:	463b      	mov	r3, r7
 80048de:	2201      	movs	r2, #1
 80048e0:	4619      	mov	r1, r3
 80048e2:	200f      	movs	r0, #15
 80048e4:	f7ff f94e 	bl	8003b84 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80048e8:	783b      	ldrb	r3, [r7, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f107 0308 	add.w	r3, r7, #8
 80048f0:	4984      	ldr	r1, [pc, #528]	; (8004b04 <printRadioSettings+0x6d8>)
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fa1a 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80048f8:	f107 0308 	add.w	r3, r7, #8
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fb fc67 	bl	80001d0 <strlen>
 8004902:	4603      	mov	r3, r0
 8004904:	b29a      	uxth	r2, r3
 8004906:	f107 0108 	add.w	r1, r7, #8
 800490a:	230a      	movs	r3, #10
 800490c:	4877      	ldr	r0, [pc, #476]	; (8004aec <printRadioSettings+0x6c0>)
 800490e:	f7fd ffe4 	bl	80028da <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8004912:	463b      	mov	r3, r7
 8004914:	2205      	movs	r2, #5
 8004916:	4619      	mov	r1, r3
 8004918:	2010      	movs	r0, #16
 800491a:	f7ff f933 	bl	8003b84 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800491e:	793b      	ldrb	r3, [r7, #4]
 8004920:	461c      	mov	r4, r3
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	461d      	mov	r5, r3
 8004926:	78bb      	ldrb	r3, [r7, #2]
 8004928:	787a      	ldrb	r2, [r7, #1]
 800492a:	7839      	ldrb	r1, [r7, #0]
 800492c:	f107 0008 	add.w	r0, r7, #8
 8004930:	9102      	str	r1, [sp, #8]
 8004932:	9201      	str	r2, [sp, #4]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	462b      	mov	r3, r5
 8004938:	4622      	mov	r2, r4
 800493a:	4973      	ldr	r1, [pc, #460]	; (8004b08 <printRadioSettings+0x6dc>)
 800493c:	f000 f9f6 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004940:	f107 0308 	add.w	r3, r7, #8
 8004944:	4618      	mov	r0, r3
 8004946:	f7fb fc43 	bl	80001d0 <strlen>
 800494a:	4603      	mov	r3, r0
 800494c:	b29a      	uxth	r2, r3
 800494e:	f107 0108 	add.w	r1, r7, #8
 8004952:	230a      	movs	r3, #10
 8004954:	4865      	ldr	r0, [pc, #404]	; (8004aec <printRadioSettings+0x6c0>)
 8004956:	f7fd ffc0 	bl	80028da <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800495a:	2011      	movs	r0, #17
 800495c:	f7ff f8ec 	bl	8003b38 <NRF24_read_register>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004966:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800496a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800496e:	f107 0308 	add.w	r3, r7, #8
 8004972:	4966      	ldr	r1, [pc, #408]	; (8004b0c <printRadioSettings+0x6e0>)
 8004974:	4618      	mov	r0, r3
 8004976:	f000 f9d9 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800497a:	f107 0308 	add.w	r3, r7, #8
 800497e:	4618      	mov	r0, r3
 8004980:	f7fb fc26 	bl	80001d0 <strlen>
 8004984:	4603      	mov	r3, r0
 8004986:	b29a      	uxth	r2, r3
 8004988:	f107 0108 	add.w	r1, r7, #8
 800498c:	230a      	movs	r3, #10
 800498e:	4857      	ldr	r0, [pc, #348]	; (8004aec <printRadioSettings+0x6c0>)
 8004990:	f7fd ffa3 	bl	80028da <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8004994:	2012      	movs	r0, #18
 8004996:	f7ff f8cf 	bl	8003b38 <NRF24_read_register>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80049a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049a8:	f107 0308 	add.w	r3, r7, #8
 80049ac:	4958      	ldr	r1, [pc, #352]	; (8004b10 <printRadioSettings+0x6e4>)
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f9bc 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049b4:	f107 0308 	add.w	r3, r7, #8
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fb fc09 	bl	80001d0 <strlen>
 80049be:	4603      	mov	r3, r0
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	f107 0108 	add.w	r1, r7, #8
 80049c6:	230a      	movs	r3, #10
 80049c8:	4848      	ldr	r0, [pc, #288]	; (8004aec <printRadioSettings+0x6c0>)
 80049ca:	f7fd ff86 	bl	80028da <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80049ce:	2013      	movs	r0, #19
 80049d0:	f7ff f8b2 	bl	8003b38 <NRF24_read_register>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80049da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049e2:	f107 0308 	add.w	r3, r7, #8
 80049e6:	494b      	ldr	r1, [pc, #300]	; (8004b14 <printRadioSettings+0x6e8>)
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f99f 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fb fbec 	bl	80001d0 <strlen>
 80049f8:	4603      	mov	r3, r0
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	f107 0108 	add.w	r1, r7, #8
 8004a00:	230a      	movs	r3, #10
 8004a02:	483a      	ldr	r0, [pc, #232]	; (8004aec <printRadioSettings+0x6c0>)
 8004a04:	f7fd ff69 	bl	80028da <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8004a08:	2014      	movs	r0, #20
 8004a0a:	f7ff f895 	bl	8003b38 <NRF24_read_register>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004a14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a1c:	f107 0308 	add.w	r3, r7, #8
 8004a20:	493d      	ldr	r1, [pc, #244]	; (8004b18 <printRadioSettings+0x6ec>)
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f982 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a28:	f107 0308 	add.w	r3, r7, #8
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fb fbcf 	bl	80001d0 <strlen>
 8004a32:	4603      	mov	r3, r0
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	f107 0108 	add.w	r1, r7, #8
 8004a3a:	230a      	movs	r3, #10
 8004a3c:	482b      	ldr	r0, [pc, #172]	; (8004aec <printRadioSettings+0x6c0>)
 8004a3e:	f7fd ff4c 	bl	80028da <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8004a42:	2015      	movs	r0, #21
 8004a44:	f7ff f878 	bl	8003b38 <NRF24_read_register>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004a4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a56:	f107 0308 	add.w	r3, r7, #8
 8004a5a:	4930      	ldr	r1, [pc, #192]	; (8004b1c <printRadioSettings+0x6f0>)
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 f965 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a62:	f107 0308 	add.w	r3, r7, #8
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fb fbb2 	bl	80001d0 <strlen>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	f107 0108 	add.w	r1, r7, #8
 8004a74:	230a      	movs	r3, #10
 8004a76:	481d      	ldr	r0, [pc, #116]	; (8004aec <printRadioSettings+0x6c0>)
 8004a78:	f7fd ff2f 	bl	80028da <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8004a7c:	2016      	movs	r0, #22
 8004a7e:	f7ff f85b 	bl	8003b38 <NRF24_read_register>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004a88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a90:	f107 0308 	add.w	r3, r7, #8
 8004a94:	4922      	ldr	r1, [pc, #136]	; (8004b20 <printRadioSettings+0x6f4>)
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 f948 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a9c:	f107 0308 	add.w	r3, r7, #8
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fb fb95 	bl	80001d0 <strlen>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	f107 0108 	add.w	r1, r7, #8
 8004aae:	230a      	movs	r3, #10
 8004ab0:	480e      	ldr	r0, [pc, #56]	; (8004aec <printRadioSettings+0x6c0>)
 8004ab2:	f7fd ff12 	bl	80028da <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8004ab6:	201c      	movs	r0, #28
 8004ab8:	f7ff f83e 	bl	8003b38 <NRF24_read_register>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ac6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bfcc      	ite	gt
 8004ace:	2301      	movgt	r3, #1
 8004ad0:	2300      	movle	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004ad6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ada:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfcc      	ite	gt
 8004ae2:	2301      	movgt	r3, #1
 8004ae4:	2300      	movle	r3, #0
 8004ae6:	e01d      	b.n	8004b24 <printRadioSettings+0x6f8>
 8004ae8:	080057b4 	.word	0x080057b4
 8004aec:	2000020c 	.word	0x2000020c
 8004af0:	080057c8 	.word	0x080057c8
 8004af4:	080057f8 	.word	0x080057f8
 8004af8:	08005828 	.word	0x08005828
 8004afc:	08005850 	.word	0x08005850
 8004b00:	08005878 	.word	0x08005878
 8004b04:	080058a0 	.word	0x080058a0
 8004b08:	080058c8 	.word	0x080058c8
 8004b0c:	080058f4 	.word	0x080058f4
 8004b10:	08005910 	.word	0x08005910
 8004b14:	0800592c 	.word	0x0800592c
 8004b18:	08005948 	.word	0x08005948
 8004b1c:	08005964 	.word	0x08005964
 8004b20:	08005980 	.word	0x08005980
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b2c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bfcc      	ite	gt
 8004b34:	2301      	movgt	r3, #1
 8004b36:	2300      	movle	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b40:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bfcc      	ite	gt
 8004b48:	2301      	movgt	r3, #1
 8004b4a:	2300      	movle	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b54:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bfcc      	ite	gt
 8004b5c:	2301      	movgt	r3, #1
 8004b5e:	2300      	movle	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b68:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bfcc      	ite	gt
 8004b70:	2301      	movgt	r3, #1
 8004b72:	2300      	movle	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f107 0008 	add.w	r0, r7, #8
 8004b7a:	9303      	str	r3, [sp, #12]
 8004b7c:	9402      	str	r4, [sp, #8]
 8004b7e:	9101      	str	r1, [sp, #4]
 8004b80:	9200      	str	r2, [sp, #0]
 8004b82:	4633      	mov	r3, r6
 8004b84:	462a      	mov	r2, r5
 8004b86:	4936      	ldr	r1, [pc, #216]	; (8004c60 <printRadioSettings+0x834>)
 8004b88:	f000 f8d0 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b8c:	f107 0308 	add.w	r3, r7, #8
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fb fb1d 	bl	80001d0 <strlen>
 8004b96:	4603      	mov	r3, r0
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	f107 0108 	add.w	r1, r7, #8
 8004b9e:	230a      	movs	r3, #10
 8004ba0:	4830      	ldr	r0, [pc, #192]	; (8004c64 <printRadioSettings+0x838>)
 8004ba2:	f7fd fe9a 	bl	80028da <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8004ba6:	201d      	movs	r0, #29
 8004ba8:	f7fe ffc6 	bl	8003b38 <NRF24_read_register>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8004bb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d006      	beq.n	8004bcc <printRadioSettings+0x7a0>
 8004bbe:	f107 0308 	add.w	r3, r7, #8
 8004bc2:	4929      	ldr	r1, [pc, #164]	; (8004c68 <printRadioSettings+0x83c>)
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 f8b1 	bl	8004d2c <siprintf>
 8004bca:	e005      	b.n	8004bd8 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8004bcc:	f107 0308 	add.w	r3, r7, #8
 8004bd0:	4926      	ldr	r1, [pc, #152]	; (8004c6c <printRadioSettings+0x840>)
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 f8aa 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004bd8:	f107 0308 	add.w	r3, r7, #8
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fb faf7 	bl	80001d0 <strlen>
 8004be2:	4603      	mov	r3, r0
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	f107 0108 	add.w	r1, r7, #8
 8004bea:	230a      	movs	r3, #10
 8004bec:	481d      	ldr	r0, [pc, #116]	; (8004c64 <printRadioSettings+0x838>)
 8004bee:	f7fd fe74 	bl	80028da <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8004bf2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d006      	beq.n	8004c0c <printRadioSettings+0x7e0>
 8004bfe:	f107 0308 	add.w	r3, r7, #8
 8004c02:	491b      	ldr	r1, [pc, #108]	; (8004c70 <printRadioSettings+0x844>)
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 f891 	bl	8004d2c <siprintf>
 8004c0a:	e005      	b.n	8004c18 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8004c0c:	f107 0308 	add.w	r3, r7, #8
 8004c10:	4918      	ldr	r1, [pc, #96]	; (8004c74 <printRadioSettings+0x848>)
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 f88a 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c18:	f107 0308 	add.w	r3, r7, #8
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fb fad7 	bl	80001d0 <strlen>
 8004c22:	4603      	mov	r3, r0
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	f107 0108 	add.w	r1, r7, #8
 8004c2a:	230a      	movs	r3, #10
 8004c2c:	480d      	ldr	r0, [pc, #52]	; (8004c64 <printRadioSettings+0x838>)
 8004c2e:	f7fd fe54 	bl	80028da <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004c32:	f107 0308 	add.w	r3, r7, #8
 8004c36:	4910      	ldr	r1, [pc, #64]	; (8004c78 <printRadioSettings+0x84c>)
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f877 	bl	8004d2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c3e:	f107 0308 	add.w	r3, r7, #8
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fb fac4 	bl	80001d0 <strlen>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	f107 0108 	add.w	r1, r7, #8
 8004c50:	230a      	movs	r3, #10
 8004c52:	4804      	ldr	r0, [pc, #16]	; (8004c64 <printRadioSettings+0x838>)
 8004c54:	f7fd fe41 	bl	80028da <HAL_UART_Transmit>
}
 8004c58:	bf00      	nop
 8004c5a:	3774      	adds	r7, #116	; 0x74
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c60:	0800599c 	.word	0x0800599c
 8004c64:	2000020c 	.word	0x2000020c
 8004c68:	080059e8 	.word	0x080059e8
 8004c6c:	08005a00 	.word	0x08005a00
 8004c70:	08005a18 	.word	0x08005a18
 8004c74:	08005a34 	.word	0x08005a34
 8004c78:	08005608 	.word	0x08005608

08004c7c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	f107 0c08 	add.w	ip, r7, #8
 8004c86:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8004c8a:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <nrf24_DebugUART_Init+0x2c>)
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f107 0308 	add.w	r3, r7, #8
 8004c92:	2244      	movs	r2, #68	; 0x44
 8004c94:	4619      	mov	r1, r3
 8004c96:	f000 f833 	bl	8004d00 <memcpy>
}
 8004c9a:	bf00      	nop
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ca2:	b004      	add	sp, #16
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	2000020c 	.word	0x2000020c

08004cac <__errno>:
 8004cac:	4b01      	ldr	r3, [pc, #4]	; (8004cb4 <__errno+0x8>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000014 	.word	0x20000014

08004cb8 <__libc_init_array>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	4d0d      	ldr	r5, [pc, #52]	; (8004cf0 <__libc_init_array+0x38>)
 8004cbc:	4c0d      	ldr	r4, [pc, #52]	; (8004cf4 <__libc_init_array+0x3c>)
 8004cbe:	1b64      	subs	r4, r4, r5
 8004cc0:	10a4      	asrs	r4, r4, #2
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	42a6      	cmp	r6, r4
 8004cc6:	d109      	bne.n	8004cdc <__libc_init_array+0x24>
 8004cc8:	4d0b      	ldr	r5, [pc, #44]	; (8004cf8 <__libc_init_array+0x40>)
 8004cca:	4c0c      	ldr	r4, [pc, #48]	; (8004cfc <__libc_init_array+0x44>)
 8004ccc:	f000 fc8e 	bl	80055ec <_init>
 8004cd0:	1b64      	subs	r4, r4, r5
 8004cd2:	10a4      	asrs	r4, r4, #2
 8004cd4:	2600      	movs	r6, #0
 8004cd6:	42a6      	cmp	r6, r4
 8004cd8:	d105      	bne.n	8004ce6 <__libc_init_array+0x2e>
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce0:	4798      	blx	r3
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	e7ee      	b.n	8004cc4 <__libc_init_array+0xc>
 8004ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cea:	4798      	blx	r3
 8004cec:	3601      	adds	r6, #1
 8004cee:	e7f2      	b.n	8004cd6 <__libc_init_array+0x1e>
 8004cf0:	08005bb0 	.word	0x08005bb0
 8004cf4:	08005bb0 	.word	0x08005bb0
 8004cf8:	08005bb0 	.word	0x08005bb0
 8004cfc:	08005bb4 	.word	0x08005bb4

08004d00 <memcpy>:
 8004d00:	440a      	add	r2, r1
 8004d02:	4291      	cmp	r1, r2
 8004d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d08:	d100      	bne.n	8004d0c <memcpy+0xc>
 8004d0a:	4770      	bx	lr
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d16:	4291      	cmp	r1, r2
 8004d18:	d1f9      	bne.n	8004d0e <memcpy+0xe>
 8004d1a:	bd10      	pop	{r4, pc}

08004d1c <memset>:
 8004d1c:	4402      	add	r2, r0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d100      	bne.n	8004d26 <memset+0xa>
 8004d24:	4770      	bx	lr
 8004d26:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2a:	e7f9      	b.n	8004d20 <memset+0x4>

08004d2c <siprintf>:
 8004d2c:	b40e      	push	{r1, r2, r3}
 8004d2e:	b500      	push	{lr}
 8004d30:	b09c      	sub	sp, #112	; 0x70
 8004d32:	ab1d      	add	r3, sp, #116	; 0x74
 8004d34:	9002      	str	r0, [sp, #8]
 8004d36:	9006      	str	r0, [sp, #24]
 8004d38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d3c:	4809      	ldr	r0, [pc, #36]	; (8004d64 <siprintf+0x38>)
 8004d3e:	9107      	str	r1, [sp, #28]
 8004d40:	9104      	str	r1, [sp, #16]
 8004d42:	4909      	ldr	r1, [pc, #36]	; (8004d68 <siprintf+0x3c>)
 8004d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d48:	9105      	str	r1, [sp, #20]
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	a902      	add	r1, sp, #8
 8004d50:	f000 f868 	bl	8004e24 <_svfiprintf_r>
 8004d54:	9b02      	ldr	r3, [sp, #8]
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	b01c      	add	sp, #112	; 0x70
 8004d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d60:	b003      	add	sp, #12
 8004d62:	4770      	bx	lr
 8004d64:	20000014 	.word	0x20000014
 8004d68:	ffff0208 	.word	0xffff0208

08004d6c <__ssputs_r>:
 8004d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	688e      	ldr	r6, [r1, #8]
 8004d72:	429e      	cmp	r6, r3
 8004d74:	4682      	mov	sl, r0
 8004d76:	460c      	mov	r4, r1
 8004d78:	4690      	mov	r8, r2
 8004d7a:	461f      	mov	r7, r3
 8004d7c:	d838      	bhi.n	8004df0 <__ssputs_r+0x84>
 8004d7e:	898a      	ldrh	r2, [r1, #12]
 8004d80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d84:	d032      	beq.n	8004dec <__ssputs_r+0x80>
 8004d86:	6825      	ldr	r5, [r4, #0]
 8004d88:	6909      	ldr	r1, [r1, #16]
 8004d8a:	eba5 0901 	sub.w	r9, r5, r1
 8004d8e:	6965      	ldr	r5, [r4, #20]
 8004d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d98:	3301      	adds	r3, #1
 8004d9a:	444b      	add	r3, r9
 8004d9c:	106d      	asrs	r5, r5, #1
 8004d9e:	429d      	cmp	r5, r3
 8004da0:	bf38      	it	cc
 8004da2:	461d      	movcc	r5, r3
 8004da4:	0553      	lsls	r3, r2, #21
 8004da6:	d531      	bpl.n	8004e0c <__ssputs_r+0xa0>
 8004da8:	4629      	mov	r1, r5
 8004daa:	f000 fb55 	bl	8005458 <_malloc_r>
 8004dae:	4606      	mov	r6, r0
 8004db0:	b950      	cbnz	r0, 8004dc8 <__ssputs_r+0x5c>
 8004db2:	230c      	movs	r3, #12
 8004db4:	f8ca 3000 	str.w	r3, [sl]
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dbe:	81a3      	strh	r3, [r4, #12]
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc8:	6921      	ldr	r1, [r4, #16]
 8004dca:	464a      	mov	r2, r9
 8004dcc:	f7ff ff98 	bl	8004d00 <memcpy>
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dda:	81a3      	strh	r3, [r4, #12]
 8004ddc:	6126      	str	r6, [r4, #16]
 8004dde:	6165      	str	r5, [r4, #20]
 8004de0:	444e      	add	r6, r9
 8004de2:	eba5 0509 	sub.w	r5, r5, r9
 8004de6:	6026      	str	r6, [r4, #0]
 8004de8:	60a5      	str	r5, [r4, #8]
 8004dea:	463e      	mov	r6, r7
 8004dec:	42be      	cmp	r6, r7
 8004dee:	d900      	bls.n	8004df2 <__ssputs_r+0x86>
 8004df0:	463e      	mov	r6, r7
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	4632      	mov	r2, r6
 8004df6:	4641      	mov	r1, r8
 8004df8:	f000 faa8 	bl	800534c <memmove>
 8004dfc:	68a3      	ldr	r3, [r4, #8]
 8004dfe:	1b9b      	subs	r3, r3, r6
 8004e00:	60a3      	str	r3, [r4, #8]
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	4433      	add	r3, r6
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	2000      	movs	r0, #0
 8004e0a:	e7db      	b.n	8004dc4 <__ssputs_r+0x58>
 8004e0c:	462a      	mov	r2, r5
 8004e0e:	f000 fb97 	bl	8005540 <_realloc_r>
 8004e12:	4606      	mov	r6, r0
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d1e1      	bne.n	8004ddc <__ssputs_r+0x70>
 8004e18:	6921      	ldr	r1, [r4, #16]
 8004e1a:	4650      	mov	r0, sl
 8004e1c:	f000 fab0 	bl	8005380 <_free_r>
 8004e20:	e7c7      	b.n	8004db2 <__ssputs_r+0x46>
	...

08004e24 <_svfiprintf_r>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	4698      	mov	r8, r3
 8004e2a:	898b      	ldrh	r3, [r1, #12]
 8004e2c:	061b      	lsls	r3, r3, #24
 8004e2e:	b09d      	sub	sp, #116	; 0x74
 8004e30:	4607      	mov	r7, r0
 8004e32:	460d      	mov	r5, r1
 8004e34:	4614      	mov	r4, r2
 8004e36:	d50e      	bpl.n	8004e56 <_svfiprintf_r+0x32>
 8004e38:	690b      	ldr	r3, [r1, #16]
 8004e3a:	b963      	cbnz	r3, 8004e56 <_svfiprintf_r+0x32>
 8004e3c:	2140      	movs	r1, #64	; 0x40
 8004e3e:	f000 fb0b 	bl	8005458 <_malloc_r>
 8004e42:	6028      	str	r0, [r5, #0]
 8004e44:	6128      	str	r0, [r5, #16]
 8004e46:	b920      	cbnz	r0, 8004e52 <_svfiprintf_r+0x2e>
 8004e48:	230c      	movs	r3, #12
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	e0d1      	b.n	8004ff6 <_svfiprintf_r+0x1d2>
 8004e52:	2340      	movs	r3, #64	; 0x40
 8004e54:	616b      	str	r3, [r5, #20]
 8004e56:	2300      	movs	r3, #0
 8004e58:	9309      	str	r3, [sp, #36]	; 0x24
 8004e5a:	2320      	movs	r3, #32
 8004e5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e60:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e64:	2330      	movs	r3, #48	; 0x30
 8004e66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005010 <_svfiprintf_r+0x1ec>
 8004e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e6e:	f04f 0901 	mov.w	r9, #1
 8004e72:	4623      	mov	r3, r4
 8004e74:	469a      	mov	sl, r3
 8004e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e7a:	b10a      	cbz	r2, 8004e80 <_svfiprintf_r+0x5c>
 8004e7c:	2a25      	cmp	r2, #37	; 0x25
 8004e7e:	d1f9      	bne.n	8004e74 <_svfiprintf_r+0x50>
 8004e80:	ebba 0b04 	subs.w	fp, sl, r4
 8004e84:	d00b      	beq.n	8004e9e <_svfiprintf_r+0x7a>
 8004e86:	465b      	mov	r3, fp
 8004e88:	4622      	mov	r2, r4
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	f7ff ff6d 	bl	8004d6c <__ssputs_r>
 8004e92:	3001      	adds	r0, #1
 8004e94:	f000 80aa 	beq.w	8004fec <_svfiprintf_r+0x1c8>
 8004e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e9a:	445a      	add	r2, fp
 8004e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80a2 	beq.w	8004fec <_svfiprintf_r+0x1c8>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eb2:	f10a 0a01 	add.w	sl, sl, #1
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	9307      	str	r3, [sp, #28]
 8004eba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ebe:	931a      	str	r3, [sp, #104]	; 0x68
 8004ec0:	4654      	mov	r4, sl
 8004ec2:	2205      	movs	r2, #5
 8004ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec8:	4851      	ldr	r0, [pc, #324]	; (8005010 <_svfiprintf_r+0x1ec>)
 8004eca:	f7fb f989 	bl	80001e0 <memchr>
 8004ece:	9a04      	ldr	r2, [sp, #16]
 8004ed0:	b9d8      	cbnz	r0, 8004f0a <_svfiprintf_r+0xe6>
 8004ed2:	06d0      	lsls	r0, r2, #27
 8004ed4:	bf44      	itt	mi
 8004ed6:	2320      	movmi	r3, #32
 8004ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004edc:	0711      	lsls	r1, r2, #28
 8004ede:	bf44      	itt	mi
 8004ee0:	232b      	movmi	r3, #43	; 0x2b
 8004ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eea:	2b2a      	cmp	r3, #42	; 0x2a
 8004eec:	d015      	beq.n	8004f1a <_svfiprintf_r+0xf6>
 8004eee:	9a07      	ldr	r2, [sp, #28]
 8004ef0:	4654      	mov	r4, sl
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	f04f 0c0a 	mov.w	ip, #10
 8004ef8:	4621      	mov	r1, r4
 8004efa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004efe:	3b30      	subs	r3, #48	; 0x30
 8004f00:	2b09      	cmp	r3, #9
 8004f02:	d94e      	bls.n	8004fa2 <_svfiprintf_r+0x17e>
 8004f04:	b1b0      	cbz	r0, 8004f34 <_svfiprintf_r+0x110>
 8004f06:	9207      	str	r2, [sp, #28]
 8004f08:	e014      	b.n	8004f34 <_svfiprintf_r+0x110>
 8004f0a:	eba0 0308 	sub.w	r3, r0, r8
 8004f0e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f12:	4313      	orrs	r3, r2
 8004f14:	9304      	str	r3, [sp, #16]
 8004f16:	46a2      	mov	sl, r4
 8004f18:	e7d2      	b.n	8004ec0 <_svfiprintf_r+0x9c>
 8004f1a:	9b03      	ldr	r3, [sp, #12]
 8004f1c:	1d19      	adds	r1, r3, #4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	9103      	str	r1, [sp, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bfbb      	ittet	lt
 8004f26:	425b      	neglt	r3, r3
 8004f28:	f042 0202 	orrlt.w	r2, r2, #2
 8004f2c:	9307      	strge	r3, [sp, #28]
 8004f2e:	9307      	strlt	r3, [sp, #28]
 8004f30:	bfb8      	it	lt
 8004f32:	9204      	strlt	r2, [sp, #16]
 8004f34:	7823      	ldrb	r3, [r4, #0]
 8004f36:	2b2e      	cmp	r3, #46	; 0x2e
 8004f38:	d10c      	bne.n	8004f54 <_svfiprintf_r+0x130>
 8004f3a:	7863      	ldrb	r3, [r4, #1]
 8004f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f3e:	d135      	bne.n	8004fac <_svfiprintf_r+0x188>
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	1d1a      	adds	r2, r3, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	9203      	str	r2, [sp, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	bfb8      	it	lt
 8004f4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f50:	3402      	adds	r4, #2
 8004f52:	9305      	str	r3, [sp, #20]
 8004f54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005020 <_svfiprintf_r+0x1fc>
 8004f58:	7821      	ldrb	r1, [r4, #0]
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	4650      	mov	r0, sl
 8004f5e:	f7fb f93f 	bl	80001e0 <memchr>
 8004f62:	b140      	cbz	r0, 8004f76 <_svfiprintf_r+0x152>
 8004f64:	2340      	movs	r3, #64	; 0x40
 8004f66:	eba0 000a 	sub.w	r0, r0, sl
 8004f6a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f6e:	9b04      	ldr	r3, [sp, #16]
 8004f70:	4303      	orrs	r3, r0
 8004f72:	3401      	adds	r4, #1
 8004f74:	9304      	str	r3, [sp, #16]
 8004f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f7a:	4826      	ldr	r0, [pc, #152]	; (8005014 <_svfiprintf_r+0x1f0>)
 8004f7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f80:	2206      	movs	r2, #6
 8004f82:	f7fb f92d 	bl	80001e0 <memchr>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d038      	beq.n	8004ffc <_svfiprintf_r+0x1d8>
 8004f8a:	4b23      	ldr	r3, [pc, #140]	; (8005018 <_svfiprintf_r+0x1f4>)
 8004f8c:	bb1b      	cbnz	r3, 8004fd6 <_svfiprintf_r+0x1b2>
 8004f8e:	9b03      	ldr	r3, [sp, #12]
 8004f90:	3307      	adds	r3, #7
 8004f92:	f023 0307 	bic.w	r3, r3, #7
 8004f96:	3308      	adds	r3, #8
 8004f98:	9303      	str	r3, [sp, #12]
 8004f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9c:	4433      	add	r3, r6
 8004f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa0:	e767      	b.n	8004e72 <_svfiprintf_r+0x4e>
 8004fa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	2001      	movs	r0, #1
 8004faa:	e7a5      	b.n	8004ef8 <_svfiprintf_r+0xd4>
 8004fac:	2300      	movs	r3, #0
 8004fae:	3401      	adds	r4, #1
 8004fb0:	9305      	str	r3, [sp, #20]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	f04f 0c0a 	mov.w	ip, #10
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fbe:	3a30      	subs	r2, #48	; 0x30
 8004fc0:	2a09      	cmp	r2, #9
 8004fc2:	d903      	bls.n	8004fcc <_svfiprintf_r+0x1a8>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0c5      	beq.n	8004f54 <_svfiprintf_r+0x130>
 8004fc8:	9105      	str	r1, [sp, #20]
 8004fca:	e7c3      	b.n	8004f54 <_svfiprintf_r+0x130>
 8004fcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e7f0      	b.n	8004fb8 <_svfiprintf_r+0x194>
 8004fd6:	ab03      	add	r3, sp, #12
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	462a      	mov	r2, r5
 8004fdc:	4b0f      	ldr	r3, [pc, #60]	; (800501c <_svfiprintf_r+0x1f8>)
 8004fde:	a904      	add	r1, sp, #16
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	f3af 8000 	nop.w
 8004fe6:	1c42      	adds	r2, r0, #1
 8004fe8:	4606      	mov	r6, r0
 8004fea:	d1d6      	bne.n	8004f9a <_svfiprintf_r+0x176>
 8004fec:	89ab      	ldrh	r3, [r5, #12]
 8004fee:	065b      	lsls	r3, r3, #25
 8004ff0:	f53f af2c 	bmi.w	8004e4c <_svfiprintf_r+0x28>
 8004ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ff6:	b01d      	add	sp, #116	; 0x74
 8004ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffc:	ab03      	add	r3, sp, #12
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	462a      	mov	r2, r5
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <_svfiprintf_r+0x1f8>)
 8005004:	a904      	add	r1, sp, #16
 8005006:	4638      	mov	r0, r7
 8005008:	f000 f87a 	bl	8005100 <_printf_i>
 800500c:	e7eb      	b.n	8004fe6 <_svfiprintf_r+0x1c2>
 800500e:	bf00      	nop
 8005010:	08005b72 	.word	0x08005b72
 8005014:	08005b7c 	.word	0x08005b7c
 8005018:	00000000 	.word	0x00000000
 800501c:	08004d6d 	.word	0x08004d6d
 8005020:	08005b78 	.word	0x08005b78

08005024 <_printf_common>:
 8005024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005028:	4616      	mov	r6, r2
 800502a:	4699      	mov	r9, r3
 800502c:	688a      	ldr	r2, [r1, #8]
 800502e:	690b      	ldr	r3, [r1, #16]
 8005030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005034:	4293      	cmp	r3, r2
 8005036:	bfb8      	it	lt
 8005038:	4613      	movlt	r3, r2
 800503a:	6033      	str	r3, [r6, #0]
 800503c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005040:	4607      	mov	r7, r0
 8005042:	460c      	mov	r4, r1
 8005044:	b10a      	cbz	r2, 800504a <_printf_common+0x26>
 8005046:	3301      	adds	r3, #1
 8005048:	6033      	str	r3, [r6, #0]
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	0699      	lsls	r1, r3, #26
 800504e:	bf42      	ittt	mi
 8005050:	6833      	ldrmi	r3, [r6, #0]
 8005052:	3302      	addmi	r3, #2
 8005054:	6033      	strmi	r3, [r6, #0]
 8005056:	6825      	ldr	r5, [r4, #0]
 8005058:	f015 0506 	ands.w	r5, r5, #6
 800505c:	d106      	bne.n	800506c <_printf_common+0x48>
 800505e:	f104 0a19 	add.w	sl, r4, #25
 8005062:	68e3      	ldr	r3, [r4, #12]
 8005064:	6832      	ldr	r2, [r6, #0]
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	42ab      	cmp	r3, r5
 800506a:	dc26      	bgt.n	80050ba <_printf_common+0x96>
 800506c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005070:	1e13      	subs	r3, r2, #0
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	bf18      	it	ne
 8005076:	2301      	movne	r3, #1
 8005078:	0692      	lsls	r2, r2, #26
 800507a:	d42b      	bmi.n	80050d4 <_printf_common+0xb0>
 800507c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005080:	4649      	mov	r1, r9
 8005082:	4638      	mov	r0, r7
 8005084:	47c0      	blx	r8
 8005086:	3001      	adds	r0, #1
 8005088:	d01e      	beq.n	80050c8 <_printf_common+0xa4>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	68e5      	ldr	r5, [r4, #12]
 800508e:	6832      	ldr	r2, [r6, #0]
 8005090:	f003 0306 	and.w	r3, r3, #6
 8005094:	2b04      	cmp	r3, #4
 8005096:	bf08      	it	eq
 8005098:	1aad      	subeq	r5, r5, r2
 800509a:	68a3      	ldr	r3, [r4, #8]
 800509c:	6922      	ldr	r2, [r4, #16]
 800509e:	bf0c      	ite	eq
 80050a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050a4:	2500      	movne	r5, #0
 80050a6:	4293      	cmp	r3, r2
 80050a8:	bfc4      	itt	gt
 80050aa:	1a9b      	subgt	r3, r3, r2
 80050ac:	18ed      	addgt	r5, r5, r3
 80050ae:	2600      	movs	r6, #0
 80050b0:	341a      	adds	r4, #26
 80050b2:	42b5      	cmp	r5, r6
 80050b4:	d11a      	bne.n	80050ec <_printf_common+0xc8>
 80050b6:	2000      	movs	r0, #0
 80050b8:	e008      	b.n	80050cc <_printf_common+0xa8>
 80050ba:	2301      	movs	r3, #1
 80050bc:	4652      	mov	r2, sl
 80050be:	4649      	mov	r1, r9
 80050c0:	4638      	mov	r0, r7
 80050c2:	47c0      	blx	r8
 80050c4:	3001      	adds	r0, #1
 80050c6:	d103      	bne.n	80050d0 <_printf_common+0xac>
 80050c8:	f04f 30ff 	mov.w	r0, #4294967295
 80050cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d0:	3501      	adds	r5, #1
 80050d2:	e7c6      	b.n	8005062 <_printf_common+0x3e>
 80050d4:	18e1      	adds	r1, r4, r3
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	2030      	movs	r0, #48	; 0x30
 80050da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050de:	4422      	add	r2, r4
 80050e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050e8:	3302      	adds	r3, #2
 80050ea:	e7c7      	b.n	800507c <_printf_common+0x58>
 80050ec:	2301      	movs	r3, #1
 80050ee:	4622      	mov	r2, r4
 80050f0:	4649      	mov	r1, r9
 80050f2:	4638      	mov	r0, r7
 80050f4:	47c0      	blx	r8
 80050f6:	3001      	adds	r0, #1
 80050f8:	d0e6      	beq.n	80050c8 <_printf_common+0xa4>
 80050fa:	3601      	adds	r6, #1
 80050fc:	e7d9      	b.n	80050b2 <_printf_common+0x8e>
	...

08005100 <_printf_i>:
 8005100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005104:	7e0f      	ldrb	r7, [r1, #24]
 8005106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005108:	2f78      	cmp	r7, #120	; 0x78
 800510a:	4691      	mov	r9, r2
 800510c:	4680      	mov	r8, r0
 800510e:	460c      	mov	r4, r1
 8005110:	469a      	mov	sl, r3
 8005112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005116:	d807      	bhi.n	8005128 <_printf_i+0x28>
 8005118:	2f62      	cmp	r7, #98	; 0x62
 800511a:	d80a      	bhi.n	8005132 <_printf_i+0x32>
 800511c:	2f00      	cmp	r7, #0
 800511e:	f000 80d8 	beq.w	80052d2 <_printf_i+0x1d2>
 8005122:	2f58      	cmp	r7, #88	; 0x58
 8005124:	f000 80a3 	beq.w	800526e <_printf_i+0x16e>
 8005128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800512c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005130:	e03a      	b.n	80051a8 <_printf_i+0xa8>
 8005132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005136:	2b15      	cmp	r3, #21
 8005138:	d8f6      	bhi.n	8005128 <_printf_i+0x28>
 800513a:	a101      	add	r1, pc, #4	; (adr r1, 8005140 <_printf_i+0x40>)
 800513c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005140:	08005199 	.word	0x08005199
 8005144:	080051ad 	.word	0x080051ad
 8005148:	08005129 	.word	0x08005129
 800514c:	08005129 	.word	0x08005129
 8005150:	08005129 	.word	0x08005129
 8005154:	08005129 	.word	0x08005129
 8005158:	080051ad 	.word	0x080051ad
 800515c:	08005129 	.word	0x08005129
 8005160:	08005129 	.word	0x08005129
 8005164:	08005129 	.word	0x08005129
 8005168:	08005129 	.word	0x08005129
 800516c:	080052b9 	.word	0x080052b9
 8005170:	080051dd 	.word	0x080051dd
 8005174:	0800529b 	.word	0x0800529b
 8005178:	08005129 	.word	0x08005129
 800517c:	08005129 	.word	0x08005129
 8005180:	080052db 	.word	0x080052db
 8005184:	08005129 	.word	0x08005129
 8005188:	080051dd 	.word	0x080051dd
 800518c:	08005129 	.word	0x08005129
 8005190:	08005129 	.word	0x08005129
 8005194:	080052a3 	.word	0x080052a3
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	1d1a      	adds	r2, r3, #4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	602a      	str	r2, [r5, #0]
 80051a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0a3      	b.n	80052f4 <_printf_i+0x1f4>
 80051ac:	6820      	ldr	r0, [r4, #0]
 80051ae:	6829      	ldr	r1, [r5, #0]
 80051b0:	0606      	lsls	r6, r0, #24
 80051b2:	f101 0304 	add.w	r3, r1, #4
 80051b6:	d50a      	bpl.n	80051ce <_printf_i+0xce>
 80051b8:	680e      	ldr	r6, [r1, #0]
 80051ba:	602b      	str	r3, [r5, #0]
 80051bc:	2e00      	cmp	r6, #0
 80051be:	da03      	bge.n	80051c8 <_printf_i+0xc8>
 80051c0:	232d      	movs	r3, #45	; 0x2d
 80051c2:	4276      	negs	r6, r6
 80051c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c8:	485e      	ldr	r0, [pc, #376]	; (8005344 <_printf_i+0x244>)
 80051ca:	230a      	movs	r3, #10
 80051cc:	e019      	b.n	8005202 <_printf_i+0x102>
 80051ce:	680e      	ldr	r6, [r1, #0]
 80051d0:	602b      	str	r3, [r5, #0]
 80051d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051d6:	bf18      	it	ne
 80051d8:	b236      	sxthne	r6, r6
 80051da:	e7ef      	b.n	80051bc <_printf_i+0xbc>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	6820      	ldr	r0, [r4, #0]
 80051e0:	1d19      	adds	r1, r3, #4
 80051e2:	6029      	str	r1, [r5, #0]
 80051e4:	0601      	lsls	r1, r0, #24
 80051e6:	d501      	bpl.n	80051ec <_printf_i+0xec>
 80051e8:	681e      	ldr	r6, [r3, #0]
 80051ea:	e002      	b.n	80051f2 <_printf_i+0xf2>
 80051ec:	0646      	lsls	r6, r0, #25
 80051ee:	d5fb      	bpl.n	80051e8 <_printf_i+0xe8>
 80051f0:	881e      	ldrh	r6, [r3, #0]
 80051f2:	4854      	ldr	r0, [pc, #336]	; (8005344 <_printf_i+0x244>)
 80051f4:	2f6f      	cmp	r7, #111	; 0x6f
 80051f6:	bf0c      	ite	eq
 80051f8:	2308      	moveq	r3, #8
 80051fa:	230a      	movne	r3, #10
 80051fc:	2100      	movs	r1, #0
 80051fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005202:	6865      	ldr	r5, [r4, #4]
 8005204:	60a5      	str	r5, [r4, #8]
 8005206:	2d00      	cmp	r5, #0
 8005208:	bfa2      	ittt	ge
 800520a:	6821      	ldrge	r1, [r4, #0]
 800520c:	f021 0104 	bicge.w	r1, r1, #4
 8005210:	6021      	strge	r1, [r4, #0]
 8005212:	b90e      	cbnz	r6, 8005218 <_printf_i+0x118>
 8005214:	2d00      	cmp	r5, #0
 8005216:	d04d      	beq.n	80052b4 <_printf_i+0x1b4>
 8005218:	4615      	mov	r5, r2
 800521a:	fbb6 f1f3 	udiv	r1, r6, r3
 800521e:	fb03 6711 	mls	r7, r3, r1, r6
 8005222:	5dc7      	ldrb	r7, [r0, r7]
 8005224:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005228:	4637      	mov	r7, r6
 800522a:	42bb      	cmp	r3, r7
 800522c:	460e      	mov	r6, r1
 800522e:	d9f4      	bls.n	800521a <_printf_i+0x11a>
 8005230:	2b08      	cmp	r3, #8
 8005232:	d10b      	bne.n	800524c <_printf_i+0x14c>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	07de      	lsls	r6, r3, #31
 8005238:	d508      	bpl.n	800524c <_printf_i+0x14c>
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	6861      	ldr	r1, [r4, #4]
 800523e:	4299      	cmp	r1, r3
 8005240:	bfde      	ittt	le
 8005242:	2330      	movle	r3, #48	; 0x30
 8005244:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005248:	f105 35ff 	addle.w	r5, r5, #4294967295
 800524c:	1b52      	subs	r2, r2, r5
 800524e:	6122      	str	r2, [r4, #16]
 8005250:	f8cd a000 	str.w	sl, [sp]
 8005254:	464b      	mov	r3, r9
 8005256:	aa03      	add	r2, sp, #12
 8005258:	4621      	mov	r1, r4
 800525a:	4640      	mov	r0, r8
 800525c:	f7ff fee2 	bl	8005024 <_printf_common>
 8005260:	3001      	adds	r0, #1
 8005262:	d14c      	bne.n	80052fe <_printf_i+0x1fe>
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	b004      	add	sp, #16
 800526a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526e:	4835      	ldr	r0, [pc, #212]	; (8005344 <_printf_i+0x244>)
 8005270:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005274:	6829      	ldr	r1, [r5, #0]
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	f851 6b04 	ldr.w	r6, [r1], #4
 800527c:	6029      	str	r1, [r5, #0]
 800527e:	061d      	lsls	r5, r3, #24
 8005280:	d514      	bpl.n	80052ac <_printf_i+0x1ac>
 8005282:	07df      	lsls	r7, r3, #31
 8005284:	bf44      	itt	mi
 8005286:	f043 0320 	orrmi.w	r3, r3, #32
 800528a:	6023      	strmi	r3, [r4, #0]
 800528c:	b91e      	cbnz	r6, 8005296 <_printf_i+0x196>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	f023 0320 	bic.w	r3, r3, #32
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	2310      	movs	r3, #16
 8005298:	e7b0      	b.n	80051fc <_printf_i+0xfc>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	f043 0320 	orr.w	r3, r3, #32
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	2378      	movs	r3, #120	; 0x78
 80052a4:	4828      	ldr	r0, [pc, #160]	; (8005348 <_printf_i+0x248>)
 80052a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052aa:	e7e3      	b.n	8005274 <_printf_i+0x174>
 80052ac:	0659      	lsls	r1, r3, #25
 80052ae:	bf48      	it	mi
 80052b0:	b2b6      	uxthmi	r6, r6
 80052b2:	e7e6      	b.n	8005282 <_printf_i+0x182>
 80052b4:	4615      	mov	r5, r2
 80052b6:	e7bb      	b.n	8005230 <_printf_i+0x130>
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	6826      	ldr	r6, [r4, #0]
 80052bc:	6961      	ldr	r1, [r4, #20]
 80052be:	1d18      	adds	r0, r3, #4
 80052c0:	6028      	str	r0, [r5, #0]
 80052c2:	0635      	lsls	r5, r6, #24
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	d501      	bpl.n	80052cc <_printf_i+0x1cc>
 80052c8:	6019      	str	r1, [r3, #0]
 80052ca:	e002      	b.n	80052d2 <_printf_i+0x1d2>
 80052cc:	0670      	lsls	r0, r6, #25
 80052ce:	d5fb      	bpl.n	80052c8 <_printf_i+0x1c8>
 80052d0:	8019      	strh	r1, [r3, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	6123      	str	r3, [r4, #16]
 80052d6:	4615      	mov	r5, r2
 80052d8:	e7ba      	b.n	8005250 <_printf_i+0x150>
 80052da:	682b      	ldr	r3, [r5, #0]
 80052dc:	1d1a      	adds	r2, r3, #4
 80052de:	602a      	str	r2, [r5, #0]
 80052e0:	681d      	ldr	r5, [r3, #0]
 80052e2:	6862      	ldr	r2, [r4, #4]
 80052e4:	2100      	movs	r1, #0
 80052e6:	4628      	mov	r0, r5
 80052e8:	f7fa ff7a 	bl	80001e0 <memchr>
 80052ec:	b108      	cbz	r0, 80052f2 <_printf_i+0x1f2>
 80052ee:	1b40      	subs	r0, r0, r5
 80052f0:	6060      	str	r0, [r4, #4]
 80052f2:	6863      	ldr	r3, [r4, #4]
 80052f4:	6123      	str	r3, [r4, #16]
 80052f6:	2300      	movs	r3, #0
 80052f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052fc:	e7a8      	b.n	8005250 <_printf_i+0x150>
 80052fe:	6923      	ldr	r3, [r4, #16]
 8005300:	462a      	mov	r2, r5
 8005302:	4649      	mov	r1, r9
 8005304:	4640      	mov	r0, r8
 8005306:	47d0      	blx	sl
 8005308:	3001      	adds	r0, #1
 800530a:	d0ab      	beq.n	8005264 <_printf_i+0x164>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	079b      	lsls	r3, r3, #30
 8005310:	d413      	bmi.n	800533a <_printf_i+0x23a>
 8005312:	68e0      	ldr	r0, [r4, #12]
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	4298      	cmp	r0, r3
 8005318:	bfb8      	it	lt
 800531a:	4618      	movlt	r0, r3
 800531c:	e7a4      	b.n	8005268 <_printf_i+0x168>
 800531e:	2301      	movs	r3, #1
 8005320:	4632      	mov	r2, r6
 8005322:	4649      	mov	r1, r9
 8005324:	4640      	mov	r0, r8
 8005326:	47d0      	blx	sl
 8005328:	3001      	adds	r0, #1
 800532a:	d09b      	beq.n	8005264 <_printf_i+0x164>
 800532c:	3501      	adds	r5, #1
 800532e:	68e3      	ldr	r3, [r4, #12]
 8005330:	9903      	ldr	r1, [sp, #12]
 8005332:	1a5b      	subs	r3, r3, r1
 8005334:	42ab      	cmp	r3, r5
 8005336:	dcf2      	bgt.n	800531e <_printf_i+0x21e>
 8005338:	e7eb      	b.n	8005312 <_printf_i+0x212>
 800533a:	2500      	movs	r5, #0
 800533c:	f104 0619 	add.w	r6, r4, #25
 8005340:	e7f5      	b.n	800532e <_printf_i+0x22e>
 8005342:	bf00      	nop
 8005344:	08005b83 	.word	0x08005b83
 8005348:	08005b94 	.word	0x08005b94

0800534c <memmove>:
 800534c:	4288      	cmp	r0, r1
 800534e:	b510      	push	{r4, lr}
 8005350:	eb01 0402 	add.w	r4, r1, r2
 8005354:	d902      	bls.n	800535c <memmove+0x10>
 8005356:	4284      	cmp	r4, r0
 8005358:	4623      	mov	r3, r4
 800535a:	d807      	bhi.n	800536c <memmove+0x20>
 800535c:	1e43      	subs	r3, r0, #1
 800535e:	42a1      	cmp	r1, r4
 8005360:	d008      	beq.n	8005374 <memmove+0x28>
 8005362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800536a:	e7f8      	b.n	800535e <memmove+0x12>
 800536c:	4402      	add	r2, r0
 800536e:	4601      	mov	r1, r0
 8005370:	428a      	cmp	r2, r1
 8005372:	d100      	bne.n	8005376 <memmove+0x2a>
 8005374:	bd10      	pop	{r4, pc}
 8005376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800537a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800537e:	e7f7      	b.n	8005370 <memmove+0x24>

08005380 <_free_r>:
 8005380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005382:	2900      	cmp	r1, #0
 8005384:	d044      	beq.n	8005410 <_free_r+0x90>
 8005386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800538a:	9001      	str	r0, [sp, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f1a1 0404 	sub.w	r4, r1, #4
 8005392:	bfb8      	it	lt
 8005394:	18e4      	addlt	r4, r4, r3
 8005396:	f000 f913 	bl	80055c0 <__malloc_lock>
 800539a:	4a1e      	ldr	r2, [pc, #120]	; (8005414 <_free_r+0x94>)
 800539c:	9801      	ldr	r0, [sp, #4]
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	b933      	cbnz	r3, 80053b0 <_free_r+0x30>
 80053a2:	6063      	str	r3, [r4, #4]
 80053a4:	6014      	str	r4, [r2, #0]
 80053a6:	b003      	add	sp, #12
 80053a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ac:	f000 b90e 	b.w	80055cc <__malloc_unlock>
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	d908      	bls.n	80053c6 <_free_r+0x46>
 80053b4:	6825      	ldr	r5, [r4, #0]
 80053b6:	1961      	adds	r1, r4, r5
 80053b8:	428b      	cmp	r3, r1
 80053ba:	bf01      	itttt	eq
 80053bc:	6819      	ldreq	r1, [r3, #0]
 80053be:	685b      	ldreq	r3, [r3, #4]
 80053c0:	1949      	addeq	r1, r1, r5
 80053c2:	6021      	streq	r1, [r4, #0]
 80053c4:	e7ed      	b.n	80053a2 <_free_r+0x22>
 80053c6:	461a      	mov	r2, r3
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	b10b      	cbz	r3, 80053d0 <_free_r+0x50>
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	d9fa      	bls.n	80053c6 <_free_r+0x46>
 80053d0:	6811      	ldr	r1, [r2, #0]
 80053d2:	1855      	adds	r5, r2, r1
 80053d4:	42a5      	cmp	r5, r4
 80053d6:	d10b      	bne.n	80053f0 <_free_r+0x70>
 80053d8:	6824      	ldr	r4, [r4, #0]
 80053da:	4421      	add	r1, r4
 80053dc:	1854      	adds	r4, r2, r1
 80053de:	42a3      	cmp	r3, r4
 80053e0:	6011      	str	r1, [r2, #0]
 80053e2:	d1e0      	bne.n	80053a6 <_free_r+0x26>
 80053e4:	681c      	ldr	r4, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	6053      	str	r3, [r2, #4]
 80053ea:	4421      	add	r1, r4
 80053ec:	6011      	str	r1, [r2, #0]
 80053ee:	e7da      	b.n	80053a6 <_free_r+0x26>
 80053f0:	d902      	bls.n	80053f8 <_free_r+0x78>
 80053f2:	230c      	movs	r3, #12
 80053f4:	6003      	str	r3, [r0, #0]
 80053f6:	e7d6      	b.n	80053a6 <_free_r+0x26>
 80053f8:	6825      	ldr	r5, [r4, #0]
 80053fa:	1961      	adds	r1, r4, r5
 80053fc:	428b      	cmp	r3, r1
 80053fe:	bf04      	itt	eq
 8005400:	6819      	ldreq	r1, [r3, #0]
 8005402:	685b      	ldreq	r3, [r3, #4]
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	bf04      	itt	eq
 8005408:	1949      	addeq	r1, r1, r5
 800540a:	6021      	streq	r1, [r4, #0]
 800540c:	6054      	str	r4, [r2, #4]
 800540e:	e7ca      	b.n	80053a6 <_free_r+0x26>
 8005410:	b003      	add	sp, #12
 8005412:	bd30      	pop	{r4, r5, pc}
 8005414:	20000250 	.word	0x20000250

08005418 <sbrk_aligned>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	4e0e      	ldr	r6, [pc, #56]	; (8005454 <sbrk_aligned+0x3c>)
 800541c:	460c      	mov	r4, r1
 800541e:	6831      	ldr	r1, [r6, #0]
 8005420:	4605      	mov	r5, r0
 8005422:	b911      	cbnz	r1, 800542a <sbrk_aligned+0x12>
 8005424:	f000 f8bc 	bl	80055a0 <_sbrk_r>
 8005428:	6030      	str	r0, [r6, #0]
 800542a:	4621      	mov	r1, r4
 800542c:	4628      	mov	r0, r5
 800542e:	f000 f8b7 	bl	80055a0 <_sbrk_r>
 8005432:	1c43      	adds	r3, r0, #1
 8005434:	d00a      	beq.n	800544c <sbrk_aligned+0x34>
 8005436:	1cc4      	adds	r4, r0, #3
 8005438:	f024 0403 	bic.w	r4, r4, #3
 800543c:	42a0      	cmp	r0, r4
 800543e:	d007      	beq.n	8005450 <sbrk_aligned+0x38>
 8005440:	1a21      	subs	r1, r4, r0
 8005442:	4628      	mov	r0, r5
 8005444:	f000 f8ac 	bl	80055a0 <_sbrk_r>
 8005448:	3001      	adds	r0, #1
 800544a:	d101      	bne.n	8005450 <sbrk_aligned+0x38>
 800544c:	f04f 34ff 	mov.w	r4, #4294967295
 8005450:	4620      	mov	r0, r4
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	20000254 	.word	0x20000254

08005458 <_malloc_r>:
 8005458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545c:	1ccd      	adds	r5, r1, #3
 800545e:	f025 0503 	bic.w	r5, r5, #3
 8005462:	3508      	adds	r5, #8
 8005464:	2d0c      	cmp	r5, #12
 8005466:	bf38      	it	cc
 8005468:	250c      	movcc	r5, #12
 800546a:	2d00      	cmp	r5, #0
 800546c:	4607      	mov	r7, r0
 800546e:	db01      	blt.n	8005474 <_malloc_r+0x1c>
 8005470:	42a9      	cmp	r1, r5
 8005472:	d905      	bls.n	8005480 <_malloc_r+0x28>
 8005474:	230c      	movs	r3, #12
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	2600      	movs	r6, #0
 800547a:	4630      	mov	r0, r6
 800547c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005480:	4e2e      	ldr	r6, [pc, #184]	; (800553c <_malloc_r+0xe4>)
 8005482:	f000 f89d 	bl	80055c0 <__malloc_lock>
 8005486:	6833      	ldr	r3, [r6, #0]
 8005488:	461c      	mov	r4, r3
 800548a:	bb34      	cbnz	r4, 80054da <_malloc_r+0x82>
 800548c:	4629      	mov	r1, r5
 800548e:	4638      	mov	r0, r7
 8005490:	f7ff ffc2 	bl	8005418 <sbrk_aligned>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	4604      	mov	r4, r0
 8005498:	d14d      	bne.n	8005536 <_malloc_r+0xde>
 800549a:	6834      	ldr	r4, [r6, #0]
 800549c:	4626      	mov	r6, r4
 800549e:	2e00      	cmp	r6, #0
 80054a0:	d140      	bne.n	8005524 <_malloc_r+0xcc>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	4631      	mov	r1, r6
 80054a6:	4638      	mov	r0, r7
 80054a8:	eb04 0803 	add.w	r8, r4, r3
 80054ac:	f000 f878 	bl	80055a0 <_sbrk_r>
 80054b0:	4580      	cmp	r8, r0
 80054b2:	d13a      	bne.n	800552a <_malloc_r+0xd2>
 80054b4:	6821      	ldr	r1, [r4, #0]
 80054b6:	3503      	adds	r5, #3
 80054b8:	1a6d      	subs	r5, r5, r1
 80054ba:	f025 0503 	bic.w	r5, r5, #3
 80054be:	3508      	adds	r5, #8
 80054c0:	2d0c      	cmp	r5, #12
 80054c2:	bf38      	it	cc
 80054c4:	250c      	movcc	r5, #12
 80054c6:	4629      	mov	r1, r5
 80054c8:	4638      	mov	r0, r7
 80054ca:	f7ff ffa5 	bl	8005418 <sbrk_aligned>
 80054ce:	3001      	adds	r0, #1
 80054d0:	d02b      	beq.n	800552a <_malloc_r+0xd2>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	442b      	add	r3, r5
 80054d6:	6023      	str	r3, [r4, #0]
 80054d8:	e00e      	b.n	80054f8 <_malloc_r+0xa0>
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	1b52      	subs	r2, r2, r5
 80054de:	d41e      	bmi.n	800551e <_malloc_r+0xc6>
 80054e0:	2a0b      	cmp	r2, #11
 80054e2:	d916      	bls.n	8005512 <_malloc_r+0xba>
 80054e4:	1961      	adds	r1, r4, r5
 80054e6:	42a3      	cmp	r3, r4
 80054e8:	6025      	str	r5, [r4, #0]
 80054ea:	bf18      	it	ne
 80054ec:	6059      	strne	r1, [r3, #4]
 80054ee:	6863      	ldr	r3, [r4, #4]
 80054f0:	bf08      	it	eq
 80054f2:	6031      	streq	r1, [r6, #0]
 80054f4:	5162      	str	r2, [r4, r5]
 80054f6:	604b      	str	r3, [r1, #4]
 80054f8:	4638      	mov	r0, r7
 80054fa:	f104 060b 	add.w	r6, r4, #11
 80054fe:	f000 f865 	bl	80055cc <__malloc_unlock>
 8005502:	f026 0607 	bic.w	r6, r6, #7
 8005506:	1d23      	adds	r3, r4, #4
 8005508:	1af2      	subs	r2, r6, r3
 800550a:	d0b6      	beq.n	800547a <_malloc_r+0x22>
 800550c:	1b9b      	subs	r3, r3, r6
 800550e:	50a3      	str	r3, [r4, r2]
 8005510:	e7b3      	b.n	800547a <_malloc_r+0x22>
 8005512:	6862      	ldr	r2, [r4, #4]
 8005514:	42a3      	cmp	r3, r4
 8005516:	bf0c      	ite	eq
 8005518:	6032      	streq	r2, [r6, #0]
 800551a:	605a      	strne	r2, [r3, #4]
 800551c:	e7ec      	b.n	80054f8 <_malloc_r+0xa0>
 800551e:	4623      	mov	r3, r4
 8005520:	6864      	ldr	r4, [r4, #4]
 8005522:	e7b2      	b.n	800548a <_malloc_r+0x32>
 8005524:	4634      	mov	r4, r6
 8005526:	6876      	ldr	r6, [r6, #4]
 8005528:	e7b9      	b.n	800549e <_malloc_r+0x46>
 800552a:	230c      	movs	r3, #12
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4638      	mov	r0, r7
 8005530:	f000 f84c 	bl	80055cc <__malloc_unlock>
 8005534:	e7a1      	b.n	800547a <_malloc_r+0x22>
 8005536:	6025      	str	r5, [r4, #0]
 8005538:	e7de      	b.n	80054f8 <_malloc_r+0xa0>
 800553a:	bf00      	nop
 800553c:	20000250 	.word	0x20000250

08005540 <_realloc_r>:
 8005540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005544:	4680      	mov	r8, r0
 8005546:	4614      	mov	r4, r2
 8005548:	460e      	mov	r6, r1
 800554a:	b921      	cbnz	r1, 8005556 <_realloc_r+0x16>
 800554c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005550:	4611      	mov	r1, r2
 8005552:	f7ff bf81 	b.w	8005458 <_malloc_r>
 8005556:	b92a      	cbnz	r2, 8005564 <_realloc_r+0x24>
 8005558:	f7ff ff12 	bl	8005380 <_free_r>
 800555c:	4625      	mov	r5, r4
 800555e:	4628      	mov	r0, r5
 8005560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005564:	f000 f838 	bl	80055d8 <_malloc_usable_size_r>
 8005568:	4284      	cmp	r4, r0
 800556a:	4607      	mov	r7, r0
 800556c:	d802      	bhi.n	8005574 <_realloc_r+0x34>
 800556e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005572:	d812      	bhi.n	800559a <_realloc_r+0x5a>
 8005574:	4621      	mov	r1, r4
 8005576:	4640      	mov	r0, r8
 8005578:	f7ff ff6e 	bl	8005458 <_malloc_r>
 800557c:	4605      	mov	r5, r0
 800557e:	2800      	cmp	r0, #0
 8005580:	d0ed      	beq.n	800555e <_realloc_r+0x1e>
 8005582:	42bc      	cmp	r4, r7
 8005584:	4622      	mov	r2, r4
 8005586:	4631      	mov	r1, r6
 8005588:	bf28      	it	cs
 800558a:	463a      	movcs	r2, r7
 800558c:	f7ff fbb8 	bl	8004d00 <memcpy>
 8005590:	4631      	mov	r1, r6
 8005592:	4640      	mov	r0, r8
 8005594:	f7ff fef4 	bl	8005380 <_free_r>
 8005598:	e7e1      	b.n	800555e <_realloc_r+0x1e>
 800559a:	4635      	mov	r5, r6
 800559c:	e7df      	b.n	800555e <_realloc_r+0x1e>
	...

080055a0 <_sbrk_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d06      	ldr	r5, [pc, #24]	; (80055bc <_sbrk_r+0x1c>)
 80055a4:	2300      	movs	r3, #0
 80055a6:	4604      	mov	r4, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	f7fb fa52 	bl	8000a54 <_sbrk>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_sbrk_r+0x1a>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_sbrk_r+0x1a>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	20000258 	.word	0x20000258

080055c0 <__malloc_lock>:
 80055c0:	4801      	ldr	r0, [pc, #4]	; (80055c8 <__malloc_lock+0x8>)
 80055c2:	f000 b811 	b.w	80055e8 <__retarget_lock_acquire_recursive>
 80055c6:	bf00      	nop
 80055c8:	2000025c 	.word	0x2000025c

080055cc <__malloc_unlock>:
 80055cc:	4801      	ldr	r0, [pc, #4]	; (80055d4 <__malloc_unlock+0x8>)
 80055ce:	f000 b80c 	b.w	80055ea <__retarget_lock_release_recursive>
 80055d2:	bf00      	nop
 80055d4:	2000025c 	.word	0x2000025c

080055d8 <_malloc_usable_size_r>:
 80055d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055dc:	1f18      	subs	r0, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bfbc      	itt	lt
 80055e2:	580b      	ldrlt	r3, [r1, r0]
 80055e4:	18c0      	addlt	r0, r0, r3
 80055e6:	4770      	bx	lr

080055e8 <__retarget_lock_acquire_recursive>:
 80055e8:	4770      	bx	lr

080055ea <__retarget_lock_release_recursive>:
 80055ea:	4770      	bx	lr

080055ec <_init>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr

080055f8 <_fini>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	bf00      	nop
 80055fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fe:	bc08      	pop	{r3}
 8005600:	469e      	mov	lr, r3
 8005602:	4770      	bx	lr
