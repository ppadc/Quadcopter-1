%implements s20_b0_7htti_Projection "C"

%function Projection(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

NeslSimulationData *simulationData;
NeuDiagnosticManager *diagnosticManager;
NeuDiagnosticTree *diagnosticTree;
real_T tmp_0[40];
real_T time;
int32_T tmp_2;
int_T tmp_1[11];
boolean_T tmp;
%closefile localVarDecl
/* {S!d390}Projection for SimscapeExecutionBlock: '<S50>/STATE_1' */
simulationData = (NeslSimulationData *)simcape_real_time_V2_DW.STATE_1_SimData;
time = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time;
simulationData->mData->mContStates.mN = 8;
simulationData->mData->mContStates.mX = &simcape_real_time_V2_X.simcape_real_time_V2Revolute_Jo[0];
simulationData->mData->mDiscStates.mN = 0;
simulationData->mData->mDiscStates.mX = &simcape_real_time_V2_DW.STATE_1_Discrete;
simulationData->mData->mModeVector.mN = 0;
simulationData->mData->mModeVector.mX = &simcape_real_time_V2_DW.STATE_1_Modes;
tmp = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = tmp;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
tmp = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = tmp;
simulationData->mData->mIsSolverCheckingCIC = false;
tmp = %<(SLibCG_SE(RTMIsSolverComputingJacobian()))>;
simulationData->mData->mIsComputingJacobian = tmp;
simulationData->mData->mIsEvaluatingF0 = false;
simulationData->mData->mIsSolverRequestingReset = false;
simulationData->mData->mIsModeUpdateTimeStep = %<(SLibCG_SE(RTMGetIsModeUpdateTimeStep()))>;
tmp_1[0] = 0;
tmp_0[0] = simcape_real_time_V2_B.INPUT_5_1_1[0];
tmp_0[1] = simcape_real_time_V2_B.INPUT_5_1_1[1];
tmp_0[2] = simcape_real_time_V2_B.INPUT_5_1_1[2];
tmp_0[3] = simcape_real_time_V2_B.INPUT_5_1_1[3];
tmp_1[1] = 4;
tmp_0[4] = simcape_real_time_V2_B.INPUT_10_1_1[0];
tmp_0[5] = simcape_real_time_V2_B.INPUT_10_1_1[1];
tmp_0[6] = simcape_real_time_V2_B.INPUT_10_1_1[2];
tmp_0[7] = simcape_real_time_V2_B.INPUT_10_1_1[3];
tmp_1[2] = 8;
tmp_0[8] = simcape_real_time_V2_B.INPUT_9_1_1[0];
tmp_0[9] = simcape_real_time_V2_B.INPUT_9_1_1[1];
tmp_0[10] = simcape_real_time_V2_B.INPUT_9_1_1[2];
tmp_0[11] = simcape_real_time_V2_B.INPUT_9_1_1[3];
tmp_1[3] = 12;
tmp_0[12] = simcape_real_time_V2_B.INPUT_6_1_1[0];
tmp_0[13] = simcape_real_time_V2_B.INPUT_6_1_1[1];
tmp_0[14] = simcape_real_time_V2_B.INPUT_6_1_1[2];
tmp_0[15] = simcape_real_time_V2_B.INPUT_6_1_1[3];
tmp_1[4] = 16;
tmp_0[16] = simcape_real_time_V2_B.INPUT_7_1_1[0];
tmp_0[17] = simcape_real_time_V2_B.INPUT_7_1_1[1];
tmp_0[18] = simcape_real_time_V2_B.INPUT_7_1_1[2];
tmp_0[19] = simcape_real_time_V2_B.INPUT_7_1_1[3];
tmp_1[5] = 20;
tmp_0[20] = simcape_real_time_V2_B.INPUT_8_1_1[0];
tmp_0[21] = simcape_real_time_V2_B.INPUT_8_1_1[1];
tmp_0[22] = simcape_real_time_V2_B.INPUT_8_1_1[2];
tmp_0[23] = simcape_real_time_V2_B.INPUT_8_1_1[3];
tmp_1[6] = 24;
tmp_0[24] = simcape_real_time_V2_B.INPUT_1_1_1[0];
tmp_0[25] = simcape_real_time_V2_B.INPUT_1_1_1[1];
tmp_0[26] = simcape_real_time_V2_B.INPUT_1_1_1[2];
tmp_0[27] = simcape_real_time_V2_B.INPUT_1_1_1[3];
tmp_1[7] = 28;
tmp_0[28] = simcape_real_time_V2_B.INPUT_2_1_1[0];
tmp_0[29] = simcape_real_time_V2_B.INPUT_2_1_1[1];
tmp_0[30] = simcape_real_time_V2_B.INPUT_2_1_1[2];
tmp_0[31] = simcape_real_time_V2_B.INPUT_2_1_1[3];
tmp_1[8] = 32;
tmp_0[32] = simcape_real_time_V2_B.INPUT_3_1_1[0];
tmp_0[33] = simcape_real_time_V2_B.INPUT_3_1_1[1];
tmp_0[34] = simcape_real_time_V2_B.INPUT_3_1_1[2];
tmp_0[35] = simcape_real_time_V2_B.INPUT_3_1_1[3];
tmp_1[9] = 36;
tmp_0[36] = simcape_real_time_V2_B.INPUT_4_1_1[0];
tmp_0[37] = simcape_real_time_V2_B.INPUT_4_1_1[1];
tmp_0[38] = simcape_real_time_V2_B.INPUT_4_1_1[2];
tmp_0[39] = simcape_real_time_V2_B.INPUT_4_1_1[3];
tmp_1[10] = 40;
simulationData->mData->mInputValues.mN = 40;
simulationData->mData->mInputValues.mX = &tmp_0[0];
simulationData->mData->mInputOffsets.mN = 11;
simulationData->mData->mInputOffsets.mX = &tmp_1[0];
diagnosticManager = (NeuDiagnosticManager *)simcape_real_time_V2_DW.STATE_1_DiagMgr;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
tmp_2 = ne_simulator_method((NeslSimulator *)simcape_real_time_V2_DW.STATE_1_Simulator, NESL_SIM_PROJECTION, simulationData, diagnosticManager);
if (tmp_2 != 0) {
    tmp = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (tmp) {
        char *msg;
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
/* {E!d390}End of Projection for SimscapeExecutionBlock: '<S50>/STATE_1' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedProjectionLocalVars", localVarDecl)>
%endfunction
%function ProjectionFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Projection(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(2, 6, fcnProtoType)>
%endfunction
