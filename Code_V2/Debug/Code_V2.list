
Code_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  0800bb68  0800bb68  0001bb68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1f0  0800c1f0  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1f0  0800c1f0  0001c1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1f8  0800c1f8  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1f8  0800c1f8  0001c1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1fc  0800c1fc  0001c1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  0800c200  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201b0  2**0
                  CONTENTS
 10 .bss          0000043c  200001b0  200001b0  000201b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200005ec  200005ec  000201b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001712e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030f5  00000000  00000000  0003730e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0003a408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a0  00000000  00000000  0003b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e4e  00000000  00000000  0003ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c57  00000000  00000000  000608e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1ca7  00000000  00000000  0007a53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c1e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e80  00000000  00000000  0014c234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b0 	.word	0x200001b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb4c 	.word	0x0800bb4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b4 	.word	0x200001b4
 80001cc:	0800bb4c 	.word	0x0800bb4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	4b45      	ldr	r3, [pc, #276]	; (800107c <MX_GPIO_Init+0x130>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a44      	ldr	r2, [pc, #272]	; (800107c <MX_GPIO_Init+0x130>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b42      	ldr	r3, [pc, #264]	; (800107c <MX_GPIO_Init+0x130>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	4b3e      	ldr	r3, [pc, #248]	; (800107c <MX_GPIO_Init+0x130>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a3d      	ldr	r2, [pc, #244]	; (800107c <MX_GPIO_Init+0x130>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <MX_GPIO_Init+0x130>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <MX_GPIO_Init+0x130>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a36      	ldr	r2, [pc, #216]	; (800107c <MX_GPIO_Init+0x130>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b34      	ldr	r3, [pc, #208]	; (800107c <MX_GPIO_Init+0x130>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <MX_GPIO_Init+0x130>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	; (800107c <MX_GPIO_Init+0x130>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <MX_GPIO_Init+0x130>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <MX_GPIO_Init+0x130>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a28      	ldr	r2, [pc, #160]	; (800107c <MX_GPIO_Init+0x130>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_GPIO_Init+0x130>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <MX_GPIO_Init+0x130>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <MX_GPIO_Init+0x130>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_GPIO_Init+0x130>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2103      	movs	r1, #3
 800100e:	481c      	ldr	r0, [pc, #112]	; (8001080 <MX_GPIO_Init+0x134>)
 8001010:	f001 fcac 	bl	800296c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800101a:	481a      	ldr	r0, [pc, #104]	; (8001084 <MX_GPIO_Init+0x138>)
 800101c:	f001 fca6 	bl	800296c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4815      	ldr	r0, [pc, #84]	; (8001088 <MX_GPIO_Init+0x13c>)
 8001034:	f001 fafe 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001038:	2303      	movs	r3, #3
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <MX_GPIO_Init+0x134>)
 8001050:	f001 faf0 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001054:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_GPIO_Init+0x138>)
 800106e:	f001 fae1 	bl	8002634 <HAL_GPIO_Init>

}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	; 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40020400 	.word	0x40020400
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40020000 	.word	0x40020000

0800108c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_I2C1_Init+0x50>)
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_I2C1_Init+0x54>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_I2C1_Init+0x50>)
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x58>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_I2C1_Init+0x50>)
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_I2C1_Init+0x50>)
 80010ca:	f001 fc83 	bl	80029d4 <HAL_I2C_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d4:	f000 fdb8 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200001cc 	.word	0x200001cc
 80010e0:	40005400 	.word	0x40005400
 80010e4:	00061a80 	.word	0x00061a80

080010e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_I2C_MspInit+0x84>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d12c      	bne.n	8001164 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001138:	2304      	movs	r3, #4
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <HAL_I2C_MspInit+0x8c>)
 8001144:	f001 fa76 	bl	8002634 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001152:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40005400 	.word	0x40005400
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400

08001178 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800117c:	b09b      	sub	sp, #108	; 0x6c
 800117e:	af16      	add	r7, sp, #88	; 0x58
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001180:	f001 f8b0 	bl	80022e4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001184:	f000 f8e4 	bl	8001350 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001188:	f7ff fee0 	bl	8000f4c <MX_GPIO_Init>
    MX_I2C1_Init();
 800118c:	f7ff ff7e 	bl	800108c <MX_I2C1_Init>
    MX_SPI1_Init();
 8001190:	f000 fd60 	bl	8001c54 <MX_SPI1_Init>
    MX_TIM1_Init();
 8001194:	f000 fe80 	bl	8001e98 <MX_TIM1_Init>
    MX_TIM2_Init();
 8001198:	f000 ff44 	bl	8002024 <MX_TIM2_Init>
    MX_USART6_UART_Init();
 800119c:	f001 f806 	bl	80021ac <MX_USART6_UART_Init>
     * @param hspi1 The SPI handle.
     * @param TxpipeAddrs The address of the transmitting pipe.
     *
     * @returns None
     */
    HAL_UART_Transmit(&huart6, (uint8_t *)q, strlen(q), 10);
 80011a0:	485a      	ldr	r0, [pc, #360]	; (800130c <main+0x194>)
 80011a2:	f7ff f815 	bl	80001d0 <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	230a      	movs	r3, #10
 80011ac:	4957      	ldr	r1, [pc, #348]	; (800130c <main+0x194>)
 80011ae:	4858      	ldr	r0, [pc, #352]	; (8001310 <main+0x198>)
 80011b0:	f004 feab 	bl	8005f0a <HAL_UART_Transmit>
    // Begin setup Rf24
    NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi1);
 80011b4:	4e57      	ldr	r6, [pc, #348]	; (8001314 <main+0x19c>)
 80011b6:	4668      	mov	r0, sp
 80011b8:	1d31      	adds	r1, r6, #4
 80011ba:	2354      	movs	r3, #84	; 0x54
 80011bc:	461a      	mov	r2, r3
 80011be:	f008 fa7f 	bl	80096c0 <memcpy>
 80011c2:	6833      	ldr	r3, [r6, #0]
 80011c4:	2202      	movs	r2, #2
 80011c6:	2101      	movs	r1, #1
 80011c8:	4853      	ldr	r0, [pc, #332]	; (8001318 <main+0x1a0>)
 80011ca:	f007 fa4f 	bl	800866c <NRF24_begin>
    NRF24_stopListening();
 80011ce:	f007 fb2d 	bl	800882c <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 80011d2:	4b52      	ldr	r3, [pc, #328]	; (800131c <main+0x1a4>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f007 fba6 	bl	800892c <NRF24_openWritingPipe>
    NRF24_setAutoAck(true);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f007 fc9b 	bl	8008b1c <NRF24_setAutoAck>
    NRF24_enableDynamicPayloads();
 80011e6:	f007 fc4f 	bl	8008a88 <NRF24_enableDynamicPayloads>
    NRF24_enableAckPayload();
 80011ea:	f007 fc1f 	bl	8008a2c <NRF24_enableAckPayload>
     * @param hi2c1 The I2C handle for communication with the sensors.
     *
     * @returns None
     */
    // Begin setup GY86
    while (MPU6050_Init(&hi2c1) == 1);
 80011ee:	bf00      	nop
 80011f0:	484b      	ldr	r0, [pc, #300]	; (8001320 <main+0x1a8>)
 80011f2:	f005 fa55 	bl	80066a0 <MPU6050_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d0f9      	beq.n	80011f0 <main+0x78>
    MPU6050_Bypass(&hi2c1);
 80011fc:	4848      	ldr	r0, [pc, #288]	; (8001320 <main+0x1a8>)
 80011fe:	f005 fac4 	bl	800678a <MPU6050_Bypass>
    HMC5883L_Init(&hi2c1);
 8001202:	4847      	ldr	r0, [pc, #284]	; (8001320 <main+0x1a8>)
 8001204:	f005 fc72 	bl	8006aec <HMC5883L_Init>
    MPU6050_Master(&hi2c1);
 8001208:	4845      	ldr	r0, [pc, #276]	; (8001320 <main+0x1a8>)
 800120a:	f005 fae4 	bl	80067d6 <MPU6050_Master>
    MPU6050_Addslave(&hi2c1);
 800120e:	4844      	ldr	r0, [pc, #272]	; (8001320 <main+0x1a8>)
 8001210:	f005 fb07 	bl	8006822 <MPU6050_Addslave>
    MS5611_init(&hi2c1, &MS5611);
 8001214:	4943      	ldr	r1, [pc, #268]	; (8001324 <main+0x1ac>)
 8001216:	4842      	ldr	r0, [pc, #264]	; (8001320 <main+0x1a8>)
 8001218:	f005 fd24 	bl	8006c64 <MS5611_init>
     * @param htim1 The timer used for the ESC.
     *
     * @returns None
     */
    //	 Begin setup ESC
    setupESC(&htim1);
 800121c:	4842      	ldr	r0, [pc, #264]	; (8001328 <main+0x1b0>)
 800121e:	f005 f9e9 	bl	80065f4 <setupESC>
     * @param htim2 A pointer to the TIM2 handle.
     *
     * @returns None
     */
    //	 RUN
    HAL_TIM_Base_Start_IT(&htim2);
 8001222:	4842      	ldr	r0, [pc, #264]	; (800132c <main+0x1b4>)
 8001224:	f003 fde6 	bl	8004df4 <HAL_TIM_Base_Start_IT>
         * The data is sent every 20ms and the enable flag is set to 1.
         * If the enable flag is set to 0, the data is not sent.
         * If there is a response from the receiver, the enable flag is set to 1 if the response is '1' and 0 if the response is '0'.
         * If there is no response from the receiver for 1 second, the enable flag is set to 0.
         */
        if (HAL_GetTick() - value >= 20)
 8001228:	f001 f8c2 	bl	80023b0 <HAL_GetTick>
 800122c:	4603      	mov	r3, r0
 800122e:	2200      	movs	r2, #0
 8001230:	469a      	mov	sl, r3
 8001232:	4693      	mov	fp, r2
 8001234:	4b3e      	ldr	r3, [pc, #248]	; (8001330 <main+0x1b8>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	ebba 0402 	subs.w	r4, sl, r2
 800123e:	eb6b 0503 	sbc.w	r5, fp, r3
 8001242:	2c14      	cmp	r4, #20
 8001244:	f175 0300 	sbcs.w	r3, r5, #0
 8001248:	d346      	bcc.n	80012d8 <main+0x160>
        {
            value = HAL_GetTick();
 800124a:	f001 f8b1 	bl	80023b0 <HAL_GetTick>
 800124e:	4603      	mov	r3, r0
 8001250:	2200      	movs	r2, #0
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	4b36      	ldr	r3, [pc, #216]	; (8001330 <main+0x1b8>)
 8001258:	e9d7 1200 	ldrd	r1, r2, [r7]
 800125c:	e9c3 1200 	strd	r1, r2, [r3]
            floatToString(Madgwick.roll, q);
 8001260:	4b34      	ldr	r3, [pc, #208]	; (8001334 <main+0x1bc>)
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	4829      	ldr	r0, [pc, #164]	; (800130c <main+0x194>)
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	f000 f8d8 	bl	8001420 <floatToString>
            floatToString(Madgwick.pitch, w);
 8001270:	4b30      	ldr	r3, [pc, #192]	; (8001334 <main+0x1bc>)
 8001272:	edd3 7a01 	vldr	s15, [r3, #4]
 8001276:	4830      	ldr	r0, [pc, #192]	; (8001338 <main+0x1c0>)
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	f000 f8d0 	bl	8001420 <floatToString>
            ;
            floatToString(Madgwick.yaw, e);
 8001280:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <main+0x1bc>)
 8001282:	edd3 7a02 	vldr	s15, [r3, #8]
 8001286:	482d      	ldr	r0, [pc, #180]	; (800133c <main+0x1c4>)
 8001288:	eeb0 0a67 	vmov.f32	s0, s15
 800128c:	f000 f8c8 	bl	8001420 <floatToString>

            sprintf(TxData, "%s;%s;%s;%d;", q, w, e, enable);
 8001290:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <main+0x1c8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <main+0x1c4>)
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	4b27      	ldr	r3, [pc, #156]	; (8001338 <main+0x1c0>)
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <main+0x194>)
 800129e:	4929      	ldr	r1, [pc, #164]	; (8001344 <main+0x1cc>)
 80012a0:	4829      	ldr	r0, [pc, #164]	; (8001348 <main+0x1d0>)
 80012a2:	f008 fa23 	bl	80096ec <siprintf>
            if (NRF24_write(TxData, 32))
 80012a6:	2120      	movs	r1, #32
 80012a8:	4827      	ldr	r0, [pc, #156]	; (8001348 <main+0x1d0>)
 80012aa:	f007 facb 	bl	8008844 <NRF24_write>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d011      	beq.n	80012d8 <main+0x160>
            {
                // Receive
                NRF24_read(RxData, 32);
 80012b4:	2120      	movs	r1, #32
 80012b6:	4825      	ldr	r0, [pc, #148]	; (800134c <main+0x1d4>)
 80012b8:	f007 fb18 	bl	80088ec <NRF24_read>
                if (RxData[0] == '1')
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <main+0x1d4>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b31      	cmp	r3, #49	; 0x31
 80012c2:	d102      	bne.n	80012ca <main+0x152>
                    enable = 1;
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <main+0x1c8>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
                if (RxData[0] == '0')
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <main+0x1d4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b30      	cmp	r3, #48	; 0x30
 80012d0:	d102      	bne.n	80012d8 <main+0x160>
                    enable = 0;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <main+0x1c8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
            }
        }
        if (HAL_GetTick() - value > 1000)
 80012d8:	f001 f86a 	bl	80023b0 <HAL_GetTick>
 80012dc:	4603      	mov	r3, r0
 80012de:	2200      	movs	r2, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	60fa      	str	r2, [r7, #12]
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <main+0x1b8>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	ebb1 0802 	subs.w	r8, r1, r2
 80012f0:	68f9      	ldr	r1, [r7, #12]
 80012f2:	eb61 0903 	sbc.w	r9, r1, r3
 80012f6:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80012fa:	4598      	cmp	r8, r3
 80012fc:	f179 0300 	sbcs.w	r3, r9, #0
 8001300:	d392      	bcc.n	8001228 <main+0xb0>
            enable = 0;
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <main+0x1c8>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
        if (HAL_GetTick() - value >= 20)
 8001308:	e78e      	b.n	8001228 <main+0xb0>
 800130a:	bf00      	nop
 800130c:	20000130 	.word	0x20000130
 8001310:	200004e4 	.word	0x200004e4
 8001314:	200003f8 	.word	0x200003f8
 8001318:	40020400 	.word	0x40020400
 800131c:	20000060 	.word	0x20000060
 8001320:	200001cc 	.word	0x200001cc
 8001324:	200002b0 	.word	0x200002b0
 8001328:	20000454 	.word	0x20000454
 800132c:	2000049c 	.word	0x2000049c
 8001330:	20000368 	.word	0x20000368
 8001334:	20000304 	.word	0x20000304
 8001338:	200003e0 	.word	0x200003e0
 800133c:	200003ec 	.word	0x200003ec
 8001340:	20000220 	.word	0x20000220
 8001344:	0800bb68 	.word	0x0800bb68
 8001348:	20000328 	.word	0x20000328
 800134c:	20000348 	.word	0x20000348

08001350 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	; 0x50
 8001354:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	2230      	movs	r2, #48	; 0x30
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f008 f9bc 	bl	80096dc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <SystemClock_Config+0xc8>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a26      	ldr	r2, [pc, #152]	; (8001418 <SystemClock_Config+0xc8>)
 800137e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <SystemClock_Config+0xc8>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <SystemClock_Config+0xcc>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <SystemClock_Config+0xcc>)
 800139a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <SystemClock_Config+0xcc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ac:	2302      	movs	r3, #2
 80013ae:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b0:	2301      	movs	r3, #1
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b4:	2310      	movs	r3, #16
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	2302      	movs	r3, #2
 80013ba:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013bc:	2300      	movs	r3, #0
 80013be:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 80013c0:	2308      	movs	r3, #8
 80013c2:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 72;
 80013c4:	2348      	movs	r3, #72	; 0x48
 80013c6:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80013cc:	2304      	movs	r3, #4
 80013ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 fabd 	bl	8003954 <HAL_RCC_OscConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0x94>
    {
        Error_Handler();
 80013e0:	f000 fc32 	bl	8001c48 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013e4:	230f      	movs	r3, #15
 80013e6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e8:	2302      	movs	r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2102      	movs	r1, #2
 8001400:	4618      	mov	r0, r3
 8001402:	f002 fd1f 	bl	8003e44 <HAL_RCC_ClockConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0xc0>
    {
        Error_Handler();
 800140c:	f000 fc1c 	bl	8001c48 <Error_Handler>
    }
}
 8001410:	bf00      	nop
 8001412:	3750      	adds	r7, #80	; 0x50
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000

08001420 <floatToString>:

/* USER CODE BEGIN 4 */
// Hàm chuyển float sang string
void floatToString(float num, char *target)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	ed87 0a01 	vstr	s0, [r7, #4]
 800142a:	6038      	str	r0, [r7, #0]
    int intPart = (int)num;                              // phần nguyên của số float
 800142c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001434:	ee17 3a90 	vmov	r3, s15
 8001438:	61fb      	str	r3, [r7, #28]
    float fracPart = num - intPart;                      // phần thập phân của số float
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001444:	ed97 7a01 	vldr	s14, [r7, #4]
 8001448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144c:	edc7 7a06 	vstr	s15, [r7, #24]
    char intStr[5];                                      // chuỗi chứa phần nguyên
    char fracStr[5];                                     // chuỗi chứa phần thập phân
    sprintf(intStr, "%d", intPart);                      // gọi hàm chuyển phần nguyên sang string
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	4911      	ldr	r1, [pc, #68]	; (800149c <floatToString+0x7c>)
 8001458:	4618      	mov	r0, r3
 800145a:	f008 f947 	bl	80096ec <siprintf>
    sprintf(fracStr, "%d", (int16_t)(fracPart * 10000)); // gọi hàm chuyển phần thập phân sang string với độ chính xác là 6 chữ số sau dấu phẩy
 800145e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001462:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80014a0 <floatToString+0x80>
 8001466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146e:	ee17 3a90 	vmov	r3, s15
 8001472:	b21b      	sxth	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <floatToString+0x7c>)
 800147c:	4618      	mov	r0, r3
 800147e:	f008 f935 	bl	80096ec <siprintf>
    sprintf(target, "%s.%s", intStr, fracStr);           // nối hai chuỗi lại với nhau và thêm dấu chấm vào giữa
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	f107 0210 	add.w	r2, r7, #16
 800148a:	4906      	ldr	r1, [pc, #24]	; (80014a4 <floatToString+0x84>)
 800148c:	6838      	ldr	r0, [r7, #0]
 800148e:	f008 f92d 	bl	80096ec <siprintf>
}
 8001492:	bf00      	nop
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	0800bb78 	.word	0x0800bb78
 80014a0:	461c4000 	.word	0x461c4000
 80014a4:	0800bb7c 	.word	0x0800bb7c

080014a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	b091      	sub	sp, #68	; 0x44
 80014ac:	af0e      	add	r7, sp, #56	; 0x38
 80014ae:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim2.Instance)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4bb6      	ldr	r3, [pc, #728]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	f040 83ae 	bne.w	8001c1a <HAL_TIM_PeriodElapsedCallback+0x772>
    {
        /**
         * Reads data from the MPU6050 and MS5611 sensors, applies low-pass filtering and calculates the orientation and altitude.
         */
        // Read Data
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80014be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c2:	48b4      	ldr	r0, [pc, #720]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80014c4:	f001 fa6b 	bl	800299e <HAL_GPIO_TogglePin>
        MPU6050_Read_All(&hi2c1, &MPU6050);
 80014c8:	49b3      	ldr	r1, [pc, #716]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80014ca:	48b4      	ldr	r0, [pc, #720]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80014cc:	f005 f9f0 	bl	80068b0 <MPU6050_Read_All>
        MS5611_calculate(&hi2c1, &MS5611);
 80014d0:	49b3      	ldr	r1, [pc, #716]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80014d2:	48b2      	ldr	r0, [pc, #712]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80014d4:	f005 fc38 	bl	8006d48 <MS5611_calculate>
        // Filter
        Lowpass4MPU(MPU6050, &MPU6050_LP);
 80014d8:	4eaf      	ldr	r6, [pc, #700]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80014da:	4bb2      	ldr	r3, [pc, #712]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80014dc:	930d      	str	r3, [sp, #52]	; 0x34
 80014de:	466d      	mov	r5, sp
 80014e0:	f106 0410 	add.w	r4, r6, #16
 80014e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	602b      	str	r3, [r5, #0]
 80014f4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014f8:	f006 f92c 	bl	8007754 <Lowpass4MPU>
        Lowpass(MS5611.P, &LP_height, 0.5);
 80014fc:	4ba8      	ldr	r3, [pc, #672]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80014fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001500:	ee07 3a90 	vmov	s15, r3
 8001504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001508:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800150c:	48a6      	ldr	r0, [pc, #664]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800150e:	eeb0 0a67 	vmov.f32	s0, s15
 8001512:	f006 f8d5 	bl	80076c0 <Lowpass>
        MPU2Angle(MPU6050_LP, &angle);
 8001516:	4ea3      	ldr	r6, [pc, #652]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001518:	4ba4      	ldr	r3, [pc, #656]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x304>)
 800151a:	930d      	str	r3, [sp, #52]	; 0x34
 800151c:	466d      	mov	r5, sp
 800151e:	f106 0410 	add.w	r4, r6, #16
 8001522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	602b      	str	r3, [r5, #0]
 8001532:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001536:	f005 ffc7 	bl	80074c8 <MPU2Angle>
        Madgwick_imu(&MPU6050_LP, &Q_est);
 800153a:	499d      	ldr	r1, [pc, #628]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800153c:	4899      	ldr	r0, [pc, #612]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800153e:	f006 fb85 	bl	8007c4c <Madgwick_imu>
        // Caculator
        Quat2Angle(Q_est, &Madgwick);
 8001542:	4b9b      	ldr	r3, [pc, #620]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001544:	ed93 6a00 	vldr	s12, [r3]
 8001548:	edd3 6a01 	vldr	s13, [r3, #4]
 800154c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001550:	edd3 7a03 	vldr	s15, [r3, #12]
 8001554:	4897      	ldr	r0, [pc, #604]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001556:	eeb0 0a46 	vmov.f32	s0, s12
 800155a:	eef0 0a66 	vmov.f32	s1, s13
 800155e:	eeb0 1a47 	vmov.f32	s2, s14
 8001562:	eef0 1a67 	vmov.f32	s3, s15
 8001566:	f006 fda3 	bl	80080b0 <Quat2Angle>
        OffsetAngle(&Madgwick, Offset);
 800156a:	4b93      	ldr	r3, [pc, #588]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800156c:	edd3 6a00 	vldr	s13, [r3]
 8001570:	ed93 7a01 	vldr	s14, [r3, #4]
 8001574:	edd3 7a02 	vldr	s15, [r3, #8]
 8001578:	eeb0 0a66 	vmov.f32	s0, s13
 800157c:	eef0 0a47 	vmov.f32	s1, s14
 8001580:	eeb0 1a67 	vmov.f32	s2, s15
 8001584:	488b      	ldr	r0, [pc, #556]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001586:	f006 f817 	bl	80075b8 <OffsetAngle>
        height = getAltitude(LP_height.out, 101325);
 800158a:	4b87      	ldr	r3, [pc, #540]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffda 	bl	8000548 <__aeabi_f2d>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8001778 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 800159c:	ec43 2b10 	vmov	d0, r2, r3
 80015a0:	f005 ff52 	bl	8007448 <getAltitude>
 80015a4:	eeb0 7a40 	vmov.f32	s14, s0
 80015a8:	eef0 7a60 	vmov.f32	s15, s1
 80015ac:	4b83      	ldr	r3, [pc, #524]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x314>)
 80015ae:	ed83 7b00 	vstr	d7, [r3]
        /**
         * Computes the control signals for a quadcopter based on the difference between the setpoint and the current orientation.
         * The control signals are then used to adjust the duty cycle of the motors to achieve the desired orientation.
         */
        // r()
        x[0] = Setpoint.roll - Madgwick.roll;
 80015b2:	4b83      	ldr	r3, [pc, #524]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80015b4:	ed93 7a00 	vldr	s14, [r3]
 80015b8:	4b7e      	ldr	r3, [pc, #504]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c2:	ee17 0a90 	vmov	r0, s15
 80015c6:	f7fe ffbf 	bl	8000548 <__aeabi_f2d>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	497d      	ldr	r1, [pc, #500]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80015d0:	e9c1 2300 	strd	r2, r3, [r1]
        x[1] = Setpoint.pitch - Madgwick.pitch;
 80015d4:	4b7a      	ldr	r3, [pc, #488]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80015d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80015da:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80015dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80015e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e4:	ee17 0a90 	vmov	r0, s15
 80015e8:	f7fe ffae 	bl	8000548 <__aeabi_f2d>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4974      	ldr	r1, [pc, #464]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80015f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        x[2] = Setpoint.yaw - Madgwick.yaw;
 80015f6:	4b72      	ldr	r3, [pc, #456]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80015f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80015fc:	4b6d      	ldr	r3, [pc, #436]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80015fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001606:	ee17 0a90 	vmov	r0, s15
 800160a:	f7fe ff9d 	bl	8000548 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	496c      	ldr	r1, [pc, #432]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001614:	e9c1 2304 	strd	r2, r3, [r1, #16]
        x[3] = Setpoint_dot.roll - MPU6050.Gx;
 8001618:	4b6b      	ldr	r3, [pc, #428]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001620:	edd3 7a07 	vldr	s15, [r3, #28]
 8001624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001628:	ee17 0a90 	vmov	r0, s15
 800162c:	f7fe ff8c 	bl	8000548 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4963      	ldr	r1, [pc, #396]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001636:	e9c1 2306 	strd	r2, r3, [r1, #24]
        x[4] = Setpoint_dot.pitch - MPU6050.Gy;
 800163a:	4b63      	ldr	r3, [pc, #396]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800163c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001640:	4b55      	ldr	r3, [pc, #340]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001642:	edd3 7a08 	vldr	s15, [r3, #32]
 8001646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164a:	ee17 0a90 	vmov	r0, s15
 800164e:	f7fe ff7b 	bl	8000548 <__aeabi_f2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	495b      	ldr	r1, [pc, #364]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001658:	e9c1 2308 	strd	r2, r3, [r1, #32]
        x[5] = Setpoint_dot.yaw - MPU6050.Gz;
 800165c:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800165e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001662:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001664:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166c:	ee17 0a90 	vmov	r0, s15
 8001670:	f7fe ff6a 	bl	8000548 <__aeabi_f2d>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4952      	ldr	r1, [pc, #328]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800167a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        //
        //		x[0] = 0;
        //		x[1] = 0;
        x[2] = 0;
 800167e:	4951      	ldr	r1, [pc, #324]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	e9c1 2304 	strd	r2, r3, [r1, #16]
        //		x[3] = 0;
        //		x[4] = 0;
        x[5] = 0;
 800168c:	494d      	ldr	r1, [pc, #308]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

        // LQR
        compute_control(x, K, u);
 800169a:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 800169c:	494c      	ldr	r1, [pc, #304]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800169e:	4849      	ldr	r0, [pc, #292]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80016a0:	f005 ffbe 	bl	8007620 <compute_control>
        // Limit
        if (u[0] > 8.7969)
 80016a4:	4b49      	ldr	r3, [pc, #292]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016aa:	a335      	add	r3, pc, #212	; (adr r3, 8001780 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7ff fa32 	bl	8000b18 <__aeabi_dcmpgt>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x21e>
            u[0] = 8.7969;
 80016ba:	4944      	ldr	r1, [pc, #272]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016bc:	a330      	add	r3, pc, #192	; (adr r3, 8001780 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	e9c1 2300 	strd	r2, r3, [r1]
        if (u[0] < -16.677)
 80016c6:	4b41      	ldr	r3, [pc, #260]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016cc:	a32e      	add	r3, pc, #184	; (adr r3, 8001788 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7ff fa03 	bl	8000adc <__aeabi_dcmplt>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_TIM_PeriodElapsedCallback+0x240>
            u[0] = -16.677;
 80016dc:	493b      	ldr	r1, [pc, #236]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016de:	a32a      	add	r3, pc, #168	; (adr r3, 8001788 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	e9c1 2300 	strd	r2, r3, [r1]
        if (u[1] > 11.5)
 80016e8:	4b38      	ldr	r3, [pc, #224]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016f4:	f7ff fa10 	bl	8000b18 <__aeabi_dcmpgt>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_TIM_PeriodElapsedCallback+0x262>
            u[1] = 11.5;
 80016fe:	4933      	ldr	r1, [pc, #204]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001706:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (u[1] < -11.5)
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 800170c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001716:	f7ff f9e1 	bl	8000adc <__aeabi_dcmplt>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_TIM_PeriodElapsedCallback+0x284>
            u[1] = -11.5;
 8001720:	492a      	ldr	r1, [pc, #168]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001728:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (u[2] > 11.5)
 800172c:	4b27      	ldr	r3, [pc, #156]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 800172e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001738:	f7ff f9ee 	bl	8000b18 <__aeabi_dcmpgt>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <HAL_TIM_PeriodElapsedCallback+0x2a6>
            u[2] = 11.5;
 8001742:	4922      	ldr	r1, [pc, #136]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800174a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        if (u[2] < -11.5)
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001750:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800175a:	f7ff f9bf 	bl	8000adc <__aeabi_dcmplt>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d03b      	beq.n	80017dc <HAL_TIM_PeriodElapsedCallback+0x334>
            u[2] = -11.5;
 8001764:	4919      	ldr	r1, [pc, #100]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800176c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001770:	e034      	b.n	80017dc <HAL_TIM_PeriodElapsedCallback+0x334>
 8001772:	bf00      	nop
 8001774:	f3af 8000 	nop.w
 8001778:	00000000 	.word	0x00000000
 800177c:	40f8bcd0 	.word	0x40f8bcd0
 8001780:	46dc5d64 	.word	0x46dc5d64
 8001784:	40219803 	.word	0x40219803
 8001788:	df3b645a 	.word	0xdf3b645a
 800178c:	c030ad4f 	.word	0xc030ad4f
 8001790:	2000049c 	.word	0x2000049c
 8001794:	40020c00 	.word	0x40020c00
 8001798:	20000224 	.word	0x20000224
 800179c:	200001cc 	.word	0x200001cc
 80017a0:	200002b0 	.word	0x200002b0
 80017a4:	20000268 	.word	0x20000268
 80017a8:	200002e8 	.word	0x200002e8
 80017ac:	200002f8 	.word	0x200002f8
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000304 	.word	0x20000304
 80017b8:	20000050 	.word	0x20000050
 80017bc:	200002f0 	.word	0x200002f0
 80017c0:	20000310 	.word	0x20000310
 80017c4:	20000370 	.word	0x20000370
 80017c8:	2000031c 	.word	0x2000031c
 80017cc:	200003a0 	.word	0x200003a0
 80017d0:	20000068 	.word	0x20000068
 80017d4:	40270000 	.word	0x40270000
 80017d8:	c0270000 	.word	0xc0270000
        if (u[3] > 11.5)
 80017dc:	4bba      	ldr	r3, [pc, #744]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80017de:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4bb9      	ldr	r3, [pc, #740]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x624>)
 80017e8:	f7ff f996 	bl	8000b18 <__aeabi_dcmpgt>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <HAL_TIM_PeriodElapsedCallback+0x356>
            u[3] = 11.5;
 80017f2:	49b5      	ldr	r1, [pc, #724]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4bb4      	ldr	r3, [pc, #720]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x624>)
 80017fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
        if (u[3] < -11.5)
 80017fe:	4bb2      	ldr	r3, [pc, #712]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001800:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4bb1      	ldr	r3, [pc, #708]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800180a:	f7ff f967 	bl	8000adc <__aeabi_dcmplt>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_TIM_PeriodElapsedCallback+0x378>
            u[3] = -11.5;
 8001814:	49ac      	ldr	r1, [pc, #688]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4bad      	ldr	r3, [pc, #692]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800181c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        u[1] = u[1] * 0.3;
 8001820:	4ba9      	ldr	r3, [pc, #676]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001822:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001826:	a3a4      	add	r3, pc, #656	; (adr r3, 8001ab8 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7fe fee4 	bl	80005f8 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	49a4      	ldr	r1, [pc, #656]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001836:	e9c1 2302 	strd	r2, r3, [r1, #8]
        u[2] = u[2] * 0.3;
 800183a:	4ba3      	ldr	r3, [pc, #652]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800183c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001840:	a39d      	add	r3, pc, #628	; (adr r3, 8001ab8 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe fed7 	bl	80005f8 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	499e      	ldr	r1, [pc, #632]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001850:	e9c1 2304 	strd	r2, r3, [r1, #16]
        u[3] = u[3] * 0.1;
 8001854:	4b9c      	ldr	r3, [pc, #624]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001856:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800185a:	a399      	add	r3, pc, #612	; (adr r3, 8001ac0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe feca 	bl	80005f8 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4997      	ldr	r1, [pc, #604]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800186a:	e9c1 2306 	strd	r2, r3, [r1, #24]

        // U -> T
        T1 = T_base + u[0] * 0.25 + u[3] * 0.25 - u[2] * 0.5; // T = Khối lượng/4 + độ cao + yaw - pitch;
 800186e:	4b96      	ldr	r3, [pc, #600]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b96      	ldr	r3, [pc, #600]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800187a:	f7fe febd 	bl	80005f8 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	4b94      	ldr	r3, [pc, #592]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe fcfe 	bl	800028c <__adddf3>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4614      	mov	r4, r2
 8001896:	461d      	mov	r5, r3
 8001898:	4b8b      	ldr	r3, [pc, #556]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800189a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	4b8c      	ldr	r3, [pc, #560]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80018a4:	f7fe fea8 	bl	80005f8 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4620      	mov	r0, r4
 80018ae:	4629      	mov	r1, r5
 80018b0:	f7fe fcec 	bl	800028c <__adddf3>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4614      	mov	r4, r2
 80018ba:	461d      	mov	r5, r3
 80018bc:	4b82      	ldr	r3, [pc, #520]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80018be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b85      	ldr	r3, [pc, #532]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x634>)
 80018c8:	f7fe fe96 	bl	80005f8 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4620      	mov	r0, r4
 80018d2:	4629      	mov	r1, r5
 80018d4:	f7fe fcd8 	bl	8000288 <__aeabi_dsub>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4980      	ldr	r1, [pc, #512]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80018de:	e9c1 2300 	strd	r2, r3, [r1]
        T2 = T_base + u[0] * 0.25 - u[3] * 0.25 + u[1] * 0.5; // T = Khối lượng/4 + độ cao - yaw + sin;
 80018e2:	4b79      	ldr	r3, [pc, #484]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80018e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80018ee:	f7fe fe83 	bl	80005f8 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	4b77      	ldr	r3, [pc, #476]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fcc4 	bl	800028c <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4614      	mov	r4, r2
 800190a:	461d      	mov	r5, r3
 800190c:	4b6e      	ldr	r3, [pc, #440]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800190e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b6f      	ldr	r3, [pc, #444]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001918:	f7fe fe6e 	bl	80005f8 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7fe fcb0 	bl	8000288 <__aeabi_dsub>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001932:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	4b68      	ldr	r3, [pc, #416]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x634>)
 800193c:	f7fe fe5c 	bl	80005f8 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4620      	mov	r0, r4
 8001946:	4629      	mov	r1, r5
 8001948:	f7fe fca0 	bl	800028c <__adddf3>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4964      	ldr	r1, [pc, #400]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8001952:	e9c1 2300 	strd	r2, r3, [r1]
        T3 = T_base + u[0] * 0.25 - u[3] * 0.25 + u[2] * 0.5; // T = Khối lượng/4 + độ cao - yaw + pitch;
 8001956:	4b5c      	ldr	r3, [pc, #368]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001958:	e9d3 0100 	ldrd	r0, r1, [r3]
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	4b5c      	ldr	r3, [pc, #368]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001962:	f7fe fe49 	bl	80005f8 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	4b5a      	ldr	r3, [pc, #360]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fc8a 	bl	800028c <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4614      	mov	r4, r2
 800197e:	461d      	mov	r5, r3
 8001980:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001982:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b52      	ldr	r3, [pc, #328]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800198c:	f7fe fe34 	bl	80005f8 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4620      	mov	r0, r4
 8001996:	4629      	mov	r1, r5
 8001998:	f7fe fc76 	bl	8000288 <__aeabi_dsub>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4614      	mov	r4, r2
 80019a2:	461d      	mov	r5, r3
 80019a4:	4b48      	ldr	r3, [pc, #288]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80019a6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b4b      	ldr	r3, [pc, #300]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x634>)
 80019b0:	f7fe fe22 	bl	80005f8 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4620      	mov	r0, r4
 80019ba:	4629      	mov	r1, r5
 80019bc:	f7fe fc66 	bl	800028c <__adddf3>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4948      	ldr	r1, [pc, #288]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80019c6:	e9c1 2300 	strd	r2, r3, [r1]
        T4 = T_base + u[0] * 0.25 - u[3] * 0.25 - u[1] * 0.5; // T = Khối lượng/4 + độ cao - yaw - sin;
 80019ca:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80019cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	4b3f      	ldr	r3, [pc, #252]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80019d6:	f7fe fe0f 	bl	80005f8 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fc50 	bl	800028c <__adddf3>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4614      	mov	r4, r2
 80019f2:	461d      	mov	r5, r3
 80019f4:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80019f6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001a00:	f7fe fdfa 	bl	80005f8 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fc3c 	bl	8000288 <__aeabi_dsub>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4614      	mov	r4, r2
 8001a16:	461d      	mov	r5, r3
 8001a18:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001a1a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001a24:	f7fe fde8 	bl	80005f8 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4629      	mov	r1, r5
 8001a30:	f7fe fc2a 	bl	8000288 <__aeabi_dsub>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	492c      	ldr	r1, [pc, #176]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x644>)
 8001a3a:	e9c1 2300 	strd	r2, r3, [r1]

        // T -> Duty
        M1.Duty = T1 / 11.5 * 1000;
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001a40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001a4a:	f7fe feff 	bl	800084c <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001a5c:	f7fe fdcc 	bl	80005f8 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f89e 	bl	8000ba8 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a21      	ldr	r2, [pc, #132]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8001a70:	6013      	str	r3, [r2, #0]
        M2.Duty = T2 / 11.5 * 1000;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8001a74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001a7e:	f7fe fee5 	bl	800084c <__aeabi_ddiv>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001a90:	f7fe fdb2 	bl	80005f8 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f7ff f884 	bl	8000ba8 <__aeabi_d2f>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8001aa4:	6013      	str	r3, [r2, #0]
        M3.Duty = T3 / 11.5 * 1000;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8001aa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001ab2:	f7fe fecb 	bl	800084c <__aeabi_ddiv>
 8001ab6:	e021      	b.n	8001afc <HAL_TIM_PeriodElapsedCallback+0x654>
 8001ab8:	33333333 	.word	0x33333333
 8001abc:	3fd33333 	.word	0x3fd33333
 8001ac0:	9999999a 	.word	0x9999999a
 8001ac4:	3fb99999 	.word	0x3fb99999
 8001ac8:	200003a0 	.word	0x200003a0
 8001acc:	40270000 	.word	0x40270000
 8001ad0:	c0270000 	.word	0xc0270000
 8001ad4:	3fd00000 	.word	0x3fd00000
 8001ad8:	20000128 	.word	0x20000128
 8001adc:	3fe00000 	.word	0x3fe00000
 8001ae0:	200003c0 	.word	0x200003c0
 8001ae4:	200003c8 	.word	0x200003c8
 8001ae8:	200003d0 	.word	0x200003d0
 8001aec:	200003d8 	.word	0x200003d8
 8001af0:	408f4000 	.word	0x408f4000
 8001af4:	20000010 	.word	0x20000010
 8001af8:	20000020 	.word	0x20000020
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001b0a:	f7fe fd75 	bl	80005f8 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7ff f847 	bl	8000ba8 <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a42      	ldr	r2, [pc, #264]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001b1e:	6013      	str	r3, [r2, #0]
        M4.Duty = T4 / 11.5 * 1000;
 8001b20:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x784>)
 8001b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x788>)
 8001b2c:	f7fe fe8e 	bl	800084c <__aeabi_ddiv>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001b3e:	f7fe fd5b 	bl	80005f8 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff f82d 	bl	8000ba8 <__aeabi_d2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a38      	ldr	r2, [pc, #224]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001b52:	6013      	str	r3, [r2, #0]

        // Enable output PID
        if (enable)
 8001b54:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d039      	beq.n	8001bd0 <HAL_TIM_PeriodElapsedCallback+0x728>
        {
            ESC_Control(&htim1, M1.Duty + M1.Duty_base, M2.Duty + M2.Duty_base, M3.Duty + M3.Duty_base, M4.Duty + M4.Duty_base); // Duty + Duty_base
 8001b5c:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001b5e:	ed93 7a00 	vldr	s14, [r3]
 8001b62:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001b64:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b70:	ee17 3a90 	vmov	r3, s15
 8001b74:	b299      	uxth	r1, r3
 8001b76:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001b7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b8a:	ee17 3a90 	vmov	r3, s15
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001b92:	ed93 7a00 	vldr	s14, [r3]
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001b98:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba4:	ee17 3a90 	vmov	r3, s15
 8001ba8:	b298      	uxth	r0, r3
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001bac:	ed93 7a00 	vldr	s14, [r3]
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001bb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bbe:	ee17 3a90 	vmov	r3, s15
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	481e      	ldr	r0, [pc, #120]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8001bca:	f004 fd46 	bl	800665a <ESC_Control>
        else
        {
            ESC_Control(&htim1, M1.Duty_min, M2.Duty_min, M3.Duty_min, M4.Duty_min); // Duty_min
        }
    }
}
 8001bce:	e024      	b.n	8001c1a <HAL_TIM_PeriodElapsedCallback+0x772>
            ESC_Control(&htim1, M1.Duty_min, M2.Duty_min, M3.Duty_min, M4.Duty_min); // Duty_min
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x794>)
 8001bd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bda:	ee17 3a90 	vmov	r3, s15
 8001bde:	b299      	uxth	r1, r3
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x798>)
 8001be2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bea:	ee17 3a90 	vmov	r3, s15
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001bf2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfa:	ee17 3a90 	vmov	r3, s15
 8001bfe:	b298      	uxth	r0, r3
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8001c02:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c0a:	ee17 3a90 	vmov	r3, s15
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	4603      	mov	r3, r0
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8001c16:	f004 fd20 	bl	800665a <ESC_Control>
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c22:	bf00      	nop
 8001c24:	408f4000 	.word	0x408f4000
 8001c28:	20000030 	.word	0x20000030
 8001c2c:	200003d8 	.word	0x200003d8
 8001c30:	40270000 	.word	0x40270000
 8001c34:	20000040 	.word	0x20000040
 8001c38:	20000220 	.word	0x20000220
 8001c3c:	20000010 	.word	0x20000010
 8001c40:	20000020 	.word	0x20000020
 8001c44:	20000454 	.word	0x20000454

08001c48 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c4c:	b672      	cpsid	i
}
 8001c4e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001c50:	e7fe      	b.n	8001c50 <Error_Handler+0x8>
	...

08001c54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <MX_SPI1_Init+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001c88:	2210      	movs	r2, #16
 8001c8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001ca0:	220a      	movs	r2, #10
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ca4:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <MX_SPI1_Init+0x64>)
 8001ca6:	f002 faad 	bl	8004204 <HAL_SPI_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cb0:	f7ff ffca 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200003f8 	.word	0x200003f8
 8001cbc:	40013000 	.word	0x40013000

08001cc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_SPI_MspInit+0x84>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d12b      	bne.n	8001d3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d1a:	23e0      	movs	r3, #224	; 0xe0
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	4805      	ldr	r0, [pc, #20]	; (8001d4c <HAL_SPI_MspInit+0x8c>)
 8001d36:	f000 fc7d 	bl	8002634 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40013000 	.word	0x40013000
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000

08001d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <NMI_Handler+0x4>

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler+0x4>

08001db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dec:	f000 facc 	bl	8002388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <TIM2_IRQHandler+0x10>)
 8001dfa:	f003 f98d 	bl	8005118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000049c 	.word	0x2000049c

08001e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e10:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <_sbrk+0x5c>)
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <_sbrk+0x60>)
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <_sbrk+0x64>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <_sbrk+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d207      	bcs.n	8001e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e38:	f007 fc18 	bl	800966c <__errno>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	220c      	movs	r2, #12
 8001e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e009      	b.n	8001e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <_sbrk+0x64>)
 8001e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20020000 	.word	0x20020000
 8001e68:	00000400 	.word	0x00000400
 8001e6c:	20000450 	.word	0x20000450
 8001e70:	200005f0 	.word	0x200005f0

08001e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <SystemInit+0x20>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <SystemInit+0x20>)
 8001e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b096      	sub	sp, #88	; 0x58
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	615a      	str	r2, [r3, #20]
 8001ec8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2220      	movs	r2, #32
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f007 fc03 	bl	80096dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ed6:	4b51      	ldr	r3, [pc, #324]	; (800201c <MX_TIM1_Init+0x184>)
 8001ed8:	4a51      	ldr	r2, [pc, #324]	; (8002020 <MX_TIM1_Init+0x188>)
 8001eda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8001edc:	4b4f      	ldr	r3, [pc, #316]	; (800201c <MX_TIM1_Init+0x184>)
 8001ede:	2248      	movs	r2, #72	; 0x48
 8001ee0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b4e      	ldr	r3, [pc, #312]	; (800201c <MX_TIM1_Init+0x184>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001ee8:	4b4c      	ldr	r3, [pc, #304]	; (800201c <MX_TIM1_Init+0x184>)
 8001eea:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001eee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef0:	4b4a      	ldr	r3, [pc, #296]	; (800201c <MX_TIM1_Init+0x184>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ef6:	4b49      	ldr	r3, [pc, #292]	; (800201c <MX_TIM1_Init+0x184>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001efc:	4b47      	ldr	r3, [pc, #284]	; (800201c <MX_TIM1_Init+0x184>)
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f02:	4846      	ldr	r0, [pc, #280]	; (800201c <MX_TIM1_Init+0x184>)
 8001f04:	f002 ff26 	bl	8004d54 <HAL_TIM_Base_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f0e:	f7ff fe9b 	bl	8001c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	483f      	ldr	r0, [pc, #252]	; (800201c <MX_TIM1_Init+0x184>)
 8001f20:	f003 fac4 	bl	80054ac <HAL_TIM_ConfigClockSource>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f2a:	f7ff fe8d 	bl	8001c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f2e:	483b      	ldr	r0, [pc, #236]	; (800201c <MX_TIM1_Init+0x184>)
 8001f30:	f002 ffd0 	bl	8004ed4 <HAL_TIM_PWM_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f3a:	f7ff fe85 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4833      	ldr	r0, [pc, #204]	; (800201c <MX_TIM1_Init+0x184>)
 8001f4e:	f003 fead 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f58:	f7ff fe76 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5c:	2360      	movs	r3, #96	; 0x60
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 800;
 8001f60:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7e:	2200      	movs	r2, #0
 8001f80:	4619      	mov	r1, r3
 8001f82:	4826      	ldr	r0, [pc, #152]	; (800201c <MX_TIM1_Init+0x184>)
 8001f84:	f003 f9d0 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001f8e:	f7ff fe5b 	bl	8001c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f96:	2204      	movs	r2, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4820      	ldr	r0, [pc, #128]	; (800201c <MX_TIM1_Init+0x184>)
 8001f9c:	f003 f9c4 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001fa6:	f7ff fe4f 	bl	8001c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fae:	2208      	movs	r2, #8
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	481a      	ldr	r0, [pc, #104]	; (800201c <MX_TIM1_Init+0x184>)
 8001fb4:	f003 f9b8 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001fbe:	f7ff fe43 	bl	8001c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4814      	ldr	r0, [pc, #80]	; (800201c <MX_TIM1_Init+0x184>)
 8001fcc:	f003 f9ac 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001fd6:	f7ff fe37 	bl	8001c48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4807      	ldr	r0, [pc, #28]	; (800201c <MX_TIM1_Init+0x184>)
 8001ffe:	f003 fed1 	bl	8005da4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8002008:	f7ff fe1e 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800200c:	4803      	ldr	r0, [pc, #12]	; (800201c <MX_TIM1_Init+0x184>)
 800200e:	f000 f893 	bl	8002138 <HAL_TIM_MspPostInit>

}
 8002012:	bf00      	nop
 8002014:	3758      	adds	r7, #88	; 0x58
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000454 	.word	0x20000454
 8002020:	40010000 	.word	0x40010000

08002024 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002038:	463b      	mov	r3, r7
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002040:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <MX_TIM2_Init+0x94>)
 8002042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002046:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <MX_TIM2_Init+0x94>)
 800204a:	2200      	movs	r2, #0
 800204c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <MX_TIM2_Init+0x94>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72000000;
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <MX_TIM2_Init+0x94>)
 8002056:	4a19      	ldr	r2, [pc, #100]	; (80020bc <MX_TIM2_Init+0x98>)
 8002058:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <MX_TIM2_Init+0x94>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002060:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <MX_TIM2_Init+0x94>)
 8002062:	2280      	movs	r2, #128	; 0x80
 8002064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002066:	4814      	ldr	r0, [pc, #80]	; (80020b8 <MX_TIM2_Init+0x94>)
 8002068:	f002 fe74 	bl	8004d54 <HAL_TIM_Base_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002072:	f7ff fde9 	bl	8001c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800207a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800207c:	f107 0308 	add.w	r3, r7, #8
 8002080:	4619      	mov	r1, r3
 8002082:	480d      	ldr	r0, [pc, #52]	; (80020b8 <MX_TIM2_Init+0x94>)
 8002084:	f003 fa12 	bl	80054ac <HAL_TIM_ConfigClockSource>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800208e:	f7ff fddb 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800209a:	463b      	mov	r3, r7
 800209c:	4619      	mov	r1, r3
 800209e:	4806      	ldr	r0, [pc, #24]	; (80020b8 <MX_TIM2_Init+0x94>)
 80020a0:	f003 fe04 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80020aa:	f7ff fdcd 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000049c 	.word	0x2000049c
 80020bc:	044aa200 	.word	0x044aa200

080020c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a18      	ldr	r2, [pc, #96]	; (8002130 <HAL_TIM_Base_MspInit+0x70>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HAL_TIM_Base_MspInit+0x74>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a16      	ldr	r2, [pc, #88]	; (8002134 <HAL_TIM_Base_MspInit+0x74>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_TIM_Base_MspInit+0x74>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020ee:	e01a      	b.n	8002126 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f8:	d115      	bne.n	8002126 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_TIM_Base_MspInit+0x74>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <HAL_TIM_Base_MspInit+0x74>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_TIM_Base_MspInit+0x74>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	201c      	movs	r0, #28
 800211c:	f000 fa53 	bl	80025c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002120:	201c      	movs	r0, #28
 8002122:	f000 fa6c 	bl	80025fe <HAL_NVIC_EnableIRQ>
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40010000 	.word	0x40010000
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <HAL_TIM_MspPostInit+0x68>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d11e      	bne.n	8002198 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_TIM_MspPostInit+0x6c>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_TIM_MspPostInit+0x6c>)
 8002164:	f043 0310 	orr.w	r3, r3, #16
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_TIM_MspPostInit+0x6c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002176:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800217a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002188:	2301      	movs	r3, #1
 800218a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4619      	mov	r1, r3
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <HAL_TIM_MspPostInit+0x70>)
 8002194:	f000 fa4e 	bl	8002634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002198:	bf00      	nop
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40010000 	.word	0x40010000
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40021000 	.word	0x40021000

080021ac <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <MX_USART6_UART_Init+0x50>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_USART6_UART_Init+0x4c>)
 80021e4:	f003 fe44 	bl	8005e70 <HAL_UART_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80021ee:	f7ff fd2b 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200004e4 	.word	0x200004e4
 80021fc:	40011400 	.word	0x40011400

08002200 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a19      	ldr	r2, [pc, #100]	; (8002284 <HAL_UART_MspInit+0x84>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12b      	bne.n	800227a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_UART_MspInit+0x88>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4a17      	ldr	r2, [pc, #92]	; (8002288 <HAL_UART_MspInit+0x88>)
 800222c:	f043 0320 	orr.w	r3, r3, #32
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_UART_MspInit+0x88>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_UART_MspInit+0x88>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_UART_MspInit+0x88>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_UART_MspInit+0x88>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800225a:	23c0      	movs	r3, #192	; 0xc0
 800225c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800226a:	2308      	movs	r3, #8
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	; (800228c <HAL_UART_MspInit+0x8c>)
 8002276:	f000 f9dd 	bl	8002634 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800227a:	bf00      	nop
 800227c:	3728      	adds	r7, #40	; 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40011400 	.word	0x40011400
 8002288:	40023800 	.word	0x40023800
 800228c:	40020800 	.word	0x40020800

08002290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002294:	480d      	ldr	r0, [pc, #52]	; (80022cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002296:	490e      	ldr	r1, [pc, #56]	; (80022d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800229c:	e002      	b.n	80022a4 <LoopCopyDataInit>

0800229e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a2:	3304      	adds	r3, #4

080022a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a8:	d3f9      	bcc.n	800229e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022ac:	4c0b      	ldr	r4, [pc, #44]	; (80022dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b0:	e001      	b.n	80022b6 <LoopFillZerobss>

080022b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b4:	3204      	adds	r2, #4

080022b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b8:	d3fb      	bcc.n	80022b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022ba:	f7ff fddb 	bl	8001e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022be:	f007 f9db 	bl	8009678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c2:	f7fe ff59 	bl	8001178 <main>
  bx  lr    
 80022c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 80022d4:	0800c200 	.word	0x0800c200
  ldr r2, =_sbss
 80022d8:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80022dc:	200005ec 	.word	0x200005ec

080022e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC_IRQHandler>
	...

080022e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <HAL_Init+0x40>)
 80022ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_Init+0x40>)
 80022fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a07      	ldr	r2, [pc, #28]	; (8002324 <HAL_Init+0x40>)
 8002306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230c:	2003      	movs	r0, #3
 800230e:	f000 f94f 	bl	80025b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002312:	200f      	movs	r0, #15
 8002314:	f000 f808 	bl	8002328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002318:	f7ff fd1a 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023c00 	.word	0x40023c00

08002328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_InitTick+0x54>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_InitTick+0x58>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f967 	bl	800261a <HAL_SYSTICK_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e00e      	b.n	8002374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b0f      	cmp	r3, #15
 800235a:	d80a      	bhi.n	8002372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800235c:	2200      	movs	r2, #0
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f000 f92f 	bl	80025c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002368:	4a06      	ldr	r2, [pc, #24]	; (8002384 <HAL_InitTick+0x5c>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000013c 	.word	0x2000013c
 8002380:	20000144 	.word	0x20000144
 8002384:	20000140 	.word	0x20000140

08002388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_IncTick+0x20>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_IncTick+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_IncTick+0x24>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000144 	.word	0x20000144
 80023ac:	20000528 	.word	0x20000528

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000528 	.word	0x20000528

080023c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff ffee 	bl	80023b0 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d005      	beq.n	80023ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_Delay+0x44>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ee:	bf00      	nop
 80023f0:	f7ff ffde 	bl	80023b0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d8f7      	bhi.n	80023f0 <HAL_Delay+0x28>
  {
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000144 	.word	0x20000144

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800243c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002442:	4a04      	ldr	r2, [pc, #16]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	60d3      	str	r3, [r2, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db0b      	blt.n	800249e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4907      	ldr	r1, [pc, #28]	; (80024ac <__NVIC_EnableIRQ+0x38>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	; (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	; (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800257c:	d301      	bcc.n	8002582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257e:	2301      	movs	r3, #1
 8002580:	e00f      	b.n	80025a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <SysTick_Config+0x40>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258a:	210f      	movs	r1, #15
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f7ff ff8e 	bl	80024b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <SysTick_Config+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259a:	4b04      	ldr	r3, [pc, #16]	; (80025ac <SysTick_Config+0x40>)
 800259c:	2207      	movs	r2, #7
 800259e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000e010 	.word	0xe000e010

080025b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff29 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d8:	f7ff ff3e 	bl	8002458 <__NVIC_GetPriorityGrouping>
 80025dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	f7ff ff8e 	bl	8002504 <NVIC_EncodePriority>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff5d 	bl	80024b0 <__NVIC_SetPriority>
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff31 	bl	8002474 <__NVIC_EnableIRQ>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ffa2 	bl	800256c <SysTick_Config>
 8002628:	4603      	mov	r3, r0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e16b      	b.n	8002928 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002650:	2201      	movs	r2, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	f040 815a 	bne.w	8002922 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d005      	beq.n	8002686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002682:	2b02      	cmp	r3, #2
 8002684:	d130      	bne.n	80026e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026bc:	2201      	movs	r2, #1
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 0201 	and.w	r2, r3, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d017      	beq.n	8002724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d123      	bne.n	8002778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	08da      	lsrs	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3208      	adds	r2, #8
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0203 	and.w	r2, r3, #3
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80b4 	beq.w	8002922 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b60      	ldr	r3, [pc, #384]	; (8002940 <HAL_GPIO_Init+0x30c>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a5f      	ldr	r2, [pc, #380]	; (8002940 <HAL_GPIO_Init+0x30c>)
 80027c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b5d      	ldr	r3, [pc, #372]	; (8002940 <HAL_GPIO_Init+0x30c>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027d6:	4a5b      	ldr	r2, [pc, #364]	; (8002944 <HAL_GPIO_Init+0x310>)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	220f      	movs	r2, #15
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_GPIO_Init+0x314>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d02b      	beq.n	800285a <HAL_GPIO_Init+0x226>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a51      	ldr	r2, [pc, #324]	; (800294c <HAL_GPIO_Init+0x318>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d025      	beq.n	8002856 <HAL_GPIO_Init+0x222>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a50      	ldr	r2, [pc, #320]	; (8002950 <HAL_GPIO_Init+0x31c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01f      	beq.n	8002852 <HAL_GPIO_Init+0x21e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4f      	ldr	r2, [pc, #316]	; (8002954 <HAL_GPIO_Init+0x320>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d019      	beq.n	800284e <HAL_GPIO_Init+0x21a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4e      	ldr	r2, [pc, #312]	; (8002958 <HAL_GPIO_Init+0x324>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_GPIO_Init+0x216>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4d      	ldr	r2, [pc, #308]	; (800295c <HAL_GPIO_Init+0x328>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00d      	beq.n	8002846 <HAL_GPIO_Init+0x212>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4c      	ldr	r2, [pc, #304]	; (8002960 <HAL_GPIO_Init+0x32c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <HAL_GPIO_Init+0x20e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4b      	ldr	r2, [pc, #300]	; (8002964 <HAL_GPIO_Init+0x330>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d101      	bne.n	800283e <HAL_GPIO_Init+0x20a>
 800283a:	2307      	movs	r3, #7
 800283c:	e00e      	b.n	800285c <HAL_GPIO_Init+0x228>
 800283e:	2308      	movs	r3, #8
 8002840:	e00c      	b.n	800285c <HAL_GPIO_Init+0x228>
 8002842:	2306      	movs	r3, #6
 8002844:	e00a      	b.n	800285c <HAL_GPIO_Init+0x228>
 8002846:	2305      	movs	r3, #5
 8002848:	e008      	b.n	800285c <HAL_GPIO_Init+0x228>
 800284a:	2304      	movs	r3, #4
 800284c:	e006      	b.n	800285c <HAL_GPIO_Init+0x228>
 800284e:	2303      	movs	r3, #3
 8002850:	e004      	b.n	800285c <HAL_GPIO_Init+0x228>
 8002852:	2302      	movs	r3, #2
 8002854:	e002      	b.n	800285c <HAL_GPIO_Init+0x228>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_GPIO_Init+0x228>
 800285a:	2300      	movs	r3, #0
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f002 0203 	and.w	r2, r2, #3
 8002862:	0092      	lsls	r2, r2, #2
 8002864:	4093      	lsls	r3, r2
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800286c:	4935      	ldr	r1, [pc, #212]	; (8002944 <HAL_GPIO_Init+0x310>)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	3302      	adds	r3, #2
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287a:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_GPIO_Init+0x334>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800289e:	4a32      	ldr	r2, [pc, #200]	; (8002968 <HAL_GPIO_Init+0x334>)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a4:	4b30      	ldr	r3, [pc, #192]	; (8002968 <HAL_GPIO_Init+0x334>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c8:	4a27      	ldr	r2, [pc, #156]	; (8002968 <HAL_GPIO_Init+0x334>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <HAL_GPIO_Init+0x334>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028f2:	4a1d      	ldr	r2, [pc, #116]	; (8002968 <HAL_GPIO_Init+0x334>)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_GPIO_Init+0x334>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800291c:	4a12      	ldr	r2, [pc, #72]	; (8002968 <HAL_GPIO_Init+0x334>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3301      	adds	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b0f      	cmp	r3, #15
 800292c:	f67f ae90 	bls.w	8002650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	3724      	adds	r7, #36	; 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40013800 	.word	0x40013800
 8002948:	40020000 	.word	0x40020000
 800294c:	40020400 	.word	0x40020400
 8002950:	40020800 	.word	0x40020800
 8002954:	40020c00 	.word	0x40020c00
 8002958:	40021000 	.word	0x40021000
 800295c:	40021400 	.word	0x40021400
 8002960:	40021800 	.word	0x40021800
 8002964:	40021c00 	.word	0x40021c00
 8002968:	40013c00 	.word	0x40013c00

0800296c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]
 8002978:	4613      	mov	r3, r2
 800297a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800297c:	787b      	ldrb	r3, [r7, #1]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002988:	e003      	b.n	8002992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800298a:	887b      	ldrh	r3, [r7, #2]
 800298c:	041a      	lsls	r2, r3, #16
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	619a      	str	r2, [r3, #24]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029b0:	887a      	ldrh	r2, [r7, #2]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4013      	ands	r3, r2
 80029b6:	041a      	lsls	r2, r3, #16
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	43d9      	mvns	r1, r3
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	400b      	ands	r3, r1
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	619a      	str	r2, [r3, #24]
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e12b      	b.n	8002c3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe fb74 	bl	80010e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2224      	movs	r2, #36	; 0x24
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0201 	bic.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a38:	f001 fbbc 	bl	80041b4 <HAL_RCC_GetPCLK1Freq>
 8002a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4a81      	ldr	r2, [pc, #516]	; (8002c48 <HAL_I2C_Init+0x274>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d807      	bhi.n	8002a58 <HAL_I2C_Init+0x84>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a80      	ldr	r2, [pc, #512]	; (8002c4c <HAL_I2C_Init+0x278>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	bf94      	ite	ls
 8002a50:	2301      	movls	r3, #1
 8002a52:	2300      	movhi	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e006      	b.n	8002a66 <HAL_I2C_Init+0x92>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a7d      	ldr	r2, [pc, #500]	; (8002c50 <HAL_I2C_Init+0x27c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	bf94      	ite	ls
 8002a60:	2301      	movls	r3, #1
 8002a62:	2300      	movhi	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0e7      	b.n	8002c3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a78      	ldr	r2, [pc, #480]	; (8002c54 <HAL_I2C_Init+0x280>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0c9b      	lsrs	r3, r3, #18
 8002a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4a6a      	ldr	r2, [pc, #424]	; (8002c48 <HAL_I2C_Init+0x274>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d802      	bhi.n	8002aa8 <HAL_I2C_Init+0xd4>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	e009      	b.n	8002abc <HAL_I2C_Init+0xe8>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	4a69      	ldr	r2, [pc, #420]	; (8002c58 <HAL_I2C_Init+0x284>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	3301      	adds	r3, #1
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ace:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	495c      	ldr	r1, [pc, #368]	; (8002c48 <HAL_I2C_Init+0x274>)
 8002ad8:	428b      	cmp	r3, r1
 8002ada:	d819      	bhi.n	8002b10 <HAL_I2C_Init+0x13c>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e59      	subs	r1, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aea:	1c59      	adds	r1, r3, #1
 8002aec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002af0:	400b      	ands	r3, r1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_I2C_Init+0x138>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1e59      	subs	r1, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0a:	e051      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	e04f      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d111      	bne.n	8002b3c <HAL_I2C_Init+0x168>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	440b      	add	r3, r1
 8002b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e012      	b.n	8002b62 <HAL_I2C_Init+0x18e>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e58      	subs	r0, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	0099      	lsls	r1, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b52:	3301      	adds	r3, #1
 8002b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Init+0x196>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e022      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10e      	bne.n	8002b90 <HAL_I2C_Init+0x1bc>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1e58      	subs	r0, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6859      	ldr	r1, [r3, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	440b      	add	r3, r1
 8002b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8e:	e00f      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1e58      	subs	r0, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	0099      	lsls	r1, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	6809      	ldr	r1, [r1, #0]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6911      	ldr	r1, [r2, #16]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68d2      	ldr	r2, [r2, #12]
 8002bea:	4311      	orrs	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	000186a0 	.word	0x000186a0
 8002c4c:	001e847f 	.word	0x001e847f
 8002c50:	003d08ff 	.word	0x003d08ff
 8002c54:	431bde83 	.word	0x431bde83
 8002c58:	10624dd3 	.word	0x10624dd3

08002c5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	4608      	mov	r0, r1
 8002c66:	4611      	mov	r1, r2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	817b      	strh	r3, [r7, #10]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	813b      	strh	r3, [r7, #8]
 8002c72:	4613      	mov	r3, r2
 8002c74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c76:	f7ff fb9b 	bl	80023b0 <HAL_GetTick>
 8002c7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	f040 80d9 	bne.w	8002e3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	2319      	movs	r3, #25
 8002c90:	2201      	movs	r2, #1
 8002c92:	496d      	ldr	r1, [pc, #436]	; (8002e48 <HAL_I2C_Mem_Write+0x1ec>)
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fc7f 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e0cc      	b.n	8002e3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Mem_Write+0x56>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0c5      	b.n	8002e3e <HAL_I2C_Mem_Write+0x1e2>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d007      	beq.n	8002cd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2221      	movs	r2, #33	; 0x21
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2240      	movs	r2, #64	; 0x40
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a3a      	ldr	r2, [r7, #32]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a4d      	ldr	r2, [pc, #308]	; (8002e4c <HAL_I2C_Mem_Write+0x1f0>)
 8002d18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d1a:	88f8      	ldrh	r0, [r7, #6]
 8002d1c:	893a      	ldrh	r2, [r7, #8]
 8002d1e:	8979      	ldrh	r1, [r7, #10]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	4603      	mov	r3, r0
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fab6 	bl	800329c <I2C_RequestMemoryWrite>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d052      	beq.n	8002ddc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e081      	b.n	8002e3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fd00 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00d      	beq.n	8002d66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d107      	bne.n	8002d62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06b      	b.n	8002e3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	781a      	ldrb	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d11b      	bne.n	8002ddc <HAL_I2C_Mem_Write+0x180>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d017      	beq.n	8002ddc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1aa      	bne.n	8002d3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fcec 	bl	80037c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00d      	beq.n	8002e10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d107      	bne.n	8002e0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e016      	b.n	8002e3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	00100002 	.word	0x00100002
 8002e4c:	ffff0000 	.word	0xffff0000

08002e50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08c      	sub	sp, #48	; 0x30
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	4608      	mov	r0, r1
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	817b      	strh	r3, [r7, #10]
 8002e62:	460b      	mov	r3, r1
 8002e64:	813b      	strh	r3, [r7, #8]
 8002e66:	4613      	mov	r3, r2
 8002e68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e6a:	f7ff faa1 	bl	80023b0 <HAL_GetTick>
 8002e6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	f040 8208 	bne.w	800328e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2319      	movs	r3, #25
 8002e84:	2201      	movs	r2, #1
 8002e86:	497b      	ldr	r1, [pc, #492]	; (8003074 <HAL_I2C_Mem_Read+0x224>)
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fb85 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
 8002e96:	e1fb      	b.n	8003290 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_I2C_Mem_Read+0x56>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e1f4      	b.n	8003290 <HAL_I2C_Mem_Read+0x440>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d007      	beq.n	8002ecc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2222      	movs	r2, #34	; 0x22
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2240      	movs	r2, #64	; 0x40
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a5b      	ldr	r2, [pc, #364]	; (8003078 <HAL_I2C_Mem_Read+0x228>)
 8002f0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f0e:	88f8      	ldrh	r0, [r7, #6]
 8002f10:	893a      	ldrh	r2, [r7, #8]
 8002f12:	8979      	ldrh	r1, [r7, #10]
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fa52 	bl	80033c8 <I2C_RequestMemoryRead>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e1b0      	b.n	8003290 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d113      	bne.n	8002f5e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	623b      	str	r3, [r7, #32]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	623b      	str	r3, [r7, #32]
 8002f4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e184      	b.n	8003268 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d11b      	bne.n	8002f9e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e164      	b.n	8003268 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d11b      	bne.n	8002fde <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	e144      	b.n	8003268 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ff4:	e138      	b.n	8003268 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	f200 80f1 	bhi.w	80031e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	2b01      	cmp	r3, #1
 8003006:	d123      	bne.n	8003050 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fc1b 	bl	8003848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e139      	b.n	8003290 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800304e:	e10b      	b.n	8003268 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	2b02      	cmp	r3, #2
 8003056:	d14e      	bne.n	80030f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305e:	2200      	movs	r2, #0
 8003060:	4906      	ldr	r1, [pc, #24]	; (800307c <HAL_I2C_Mem_Read+0x22c>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fa98 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e10e      	b.n	8003290 <HAL_I2C_Mem_Read+0x440>
 8003072:	bf00      	nop
 8003074:	00100002 	.word	0x00100002
 8003078:	ffff0000 	.word	0xffff0000
 800307c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030f4:	e0b8      	b.n	8003268 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fc:	2200      	movs	r2, #0
 80030fe:	4966      	ldr	r1, [pc, #408]	; (8003298 <HAL_I2C_Mem_Read+0x448>)
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fa49 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0bf      	b.n	8003290 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	2200      	movs	r2, #0
 800315a:	494f      	ldr	r1, [pc, #316]	; (8003298 <HAL_I2C_Mem_Read+0x448>)
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fa1b 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e091      	b.n	8003290 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031e0:	e042      	b.n	8003268 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fb2e 	bl	8003848 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e04c      	b.n	8003290 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b04      	cmp	r3, #4
 8003234:	d118      	bne.n	8003268 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	f47f aec2 	bne.w	8002ff6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e000      	b.n	8003290 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800328e:	2302      	movs	r3, #2
  }
}
 8003290:	4618      	mov	r0, r3
 8003292:	3728      	adds	r7, #40	; 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	00010004 	.word	0x00010004

0800329c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	4608      	mov	r0, r1
 80032a6:	4611      	mov	r1, r2
 80032a8:	461a      	mov	r2, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	817b      	strh	r3, [r7, #10]
 80032ae:	460b      	mov	r3, r1
 80032b0:	813b      	strh	r3, [r7, #8]
 80032b2:	4613      	mov	r3, r2
 80032b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f960 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00d      	beq.n	80032fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ec:	d103      	bne.n	80032f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e05f      	b.n	80033ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003308:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	6a3a      	ldr	r2, [r7, #32]
 800330e:	492d      	ldr	r1, [pc, #180]	; (80033c4 <I2C_RequestMemoryWrite+0x128>)
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f998 	bl	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e04c      	b.n	80033ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003338:	6a39      	ldr	r1, [r7, #32]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fa02 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00d      	beq.n	8003362 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b04      	cmp	r3, #4
 800334c:	d107      	bne.n	800335e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e02b      	b.n	80033ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d105      	bne.n	8003374 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003368:	893b      	ldrh	r3, [r7, #8]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	611a      	str	r2, [r3, #16]
 8003372:	e021      	b.n	80033b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003374:	893b      	ldrh	r3, [r7, #8]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	b29b      	uxth	r3, r3
 800337a:	b2da      	uxtb	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003384:	6a39      	ldr	r1, [r7, #32]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f9dc 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	2b04      	cmp	r3, #4
 8003398:	d107      	bne.n	80033aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e005      	b.n	80033ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033ae:	893b      	ldrh	r3, [r7, #8]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	00010002 	.word	0x00010002

080033c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	4608      	mov	r0, r1
 80033d2:	4611      	mov	r1, r2
 80033d4:	461a      	mov	r2, r3
 80033d6:	4603      	mov	r3, r0
 80033d8:	817b      	strh	r3, [r7, #10]
 80033da:	460b      	mov	r3, r1
 80033dc:	813b      	strh	r3, [r7, #8]
 80033de:	4613      	mov	r3, r2
 80033e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	2200      	movs	r2, #0
 800340a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f8c2 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003428:	d103      	bne.n	8003432 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e0aa      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003436:	897b      	ldrh	r3, [r7, #10]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	6a3a      	ldr	r2, [r7, #32]
 800344a:	4952      	ldr	r1, [pc, #328]	; (8003594 <I2C_RequestMemoryRead+0x1cc>)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f8fa 	bl	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e097      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003474:	6a39      	ldr	r1, [r7, #32]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f964 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00d      	beq.n	800349e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b04      	cmp	r3, #4
 8003488:	d107      	bne.n	800349a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e076      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d105      	bne.n	80034b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034a4:	893b      	ldrh	r3, [r7, #8]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	611a      	str	r2, [r3, #16]
 80034ae:	e021      	b.n	80034f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034b0:	893b      	ldrh	r3, [r7, #8]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c0:	6a39      	ldr	r1, [r7, #32]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f93e 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00d      	beq.n	80034ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d107      	bne.n	80034e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e050      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ea:	893b      	ldrh	r3, [r7, #8]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f6:	6a39      	ldr	r1, [r7, #32]
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f923 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00d      	beq.n	8003520 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	2b04      	cmp	r3, #4
 800350a:	d107      	bne.n	800351c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e035      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	2200      	movs	r2, #0
 8003538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f82b 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003556:	d103      	bne.n	8003560 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e013      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003564:	897b      	ldrh	r3, [r7, #10]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	6a3a      	ldr	r2, [r7, #32]
 8003578:	4906      	ldr	r1, [pc, #24]	; (8003594 <I2C_RequestMemoryRead+0x1cc>)
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f863 	bl	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	00010002 	.word	0x00010002

08003598 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a8:	e025      	b.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d021      	beq.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7fe fefd 	bl	80023b0 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d116      	bne.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f043 0220 	orr.w	r2, r3, #32
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e023      	b.n	800363e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d10d      	bne.n	800361c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf0c      	ite	eq
 8003612:	2301      	moveq	r3, #1
 8003614:	2300      	movne	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	e00c      	b.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	43da      	mvns	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4013      	ands	r3, r2
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	429a      	cmp	r2, r3
 800363a:	d0b6      	beq.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003654:	e051      	b.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d123      	bne.n	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003674:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800367e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f043 0204 	orr.w	r2, r3, #4
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e046      	b.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d021      	beq.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fe fe7b 	bl	80023b0 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d116      	bne.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f043 0220 	orr.w	r2, r3, #32
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e020      	b.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	0c1b      	lsrs	r3, r3, #16
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d10c      	bne.n	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	2300      	moveq	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e00b      	b.n	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	43da      	mvns	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d18d      	bne.n	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003750:	e02d      	b.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f8ce 	bl	80038f4 <I2C_IsAcknowledgeFailed>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e02d      	b.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d021      	beq.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376a:	f7fe fe21 	bl	80023b0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	429a      	cmp	r2, r3
 8003778:	d302      	bcc.n	8003780 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d116      	bne.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e007      	b.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b80      	cmp	r3, #128	; 0x80
 80037ba:	d1ca      	bne.n	8003752 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037d2:	e02d      	b.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f88d 	bl	80038f4 <I2C_IsAcknowledgeFailed>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e02d      	b.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d021      	beq.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ec:	f7fe fde0 	bl	80023b0 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d302      	bcc.n	8003802 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d116      	bne.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e007      	b.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d1ca      	bne.n	80037d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003854:	e042      	b.n	80038dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b10      	cmp	r3, #16
 8003862:	d119      	bne.n	8003898 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0210 	mvn.w	r2, #16
 800386c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e029      	b.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003898:	f7fe fd8a 	bl	80023b0 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d302      	bcc.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d116      	bne.n	80038dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e007      	b.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d1b5      	bne.n	8003856 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390a:	d11b      	bne.n	8003944 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003914:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e267      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d075      	beq.n	8003a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003972:	4b88      	ldr	r3, [pc, #544]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d00c      	beq.n	8003998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4b85      	ldr	r3, [pc, #532]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003986:	2b08      	cmp	r3, #8
 8003988:	d112      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b82      	ldr	r3, [pc, #520]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003996:	d10b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	4b7e      	ldr	r3, [pc, #504]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x108>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d157      	bne.n	8003a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e242      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x74>
 80039ba:	4b76      	ldr	r3, [pc, #472]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a75      	ldr	r2, [pc, #468]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x98>
 80039d2:	4b70      	ldr	r3, [pc, #448]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6f      	ldr	r2, [pc, #444]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b6d      	ldr	r3, [pc, #436]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6c      	ldr	r2, [pc, #432]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039ec:	4b69      	ldr	r3, [pc, #420]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a68      	ldr	r2, [pc, #416]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b66      	ldr	r3, [pc, #408]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a65      	ldr	r2, [pc, #404]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fcd0 	bl	80023b0 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe fccc 	bl	80023b0 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e207      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xc0>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe fcbc 	bl	80023b0 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe fcb8 	bl	80023b0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1f3      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	4b51      	ldr	r3, [pc, #324]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0xe8>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11c      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b44      	ldr	r3, [pc, #272]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e1c7      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4937      	ldr	r1, [pc, #220]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	e03a      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_RCC_OscConfig+0x244>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fe fc71 	bl	80023b0 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fc6d 	bl	80023b0 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1a8      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4925      	ldr	r1, [pc, #148]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <HAL_RCC_OscConfig+0x244>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fc50 	bl	80023b0 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fe fc4c 	bl	80023b0 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e187      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d036      	beq.n	8003bac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <HAL_RCC_OscConfig+0x248>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fe fc30 	bl	80023b0 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fe fc2c 	bl	80023b0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e167      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x200>
 8003b72:	e01b      	b.n	8003bac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_OscConfig+0x248>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7a:	f7fe fc19 	bl	80023b0 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	e00e      	b.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fe fc15 	bl	80023b0 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d907      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e150      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
 8003b94:	40023800 	.word	0x40023800
 8003b98:	42470000 	.word	0x42470000
 8003b9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ea      	bne.n	8003b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8097 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbe:	4b81      	ldr	r3, [pc, #516]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10f      	bne.n	8003bea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	4b7d      	ldr	r3, [pc, #500]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	4a7c      	ldr	r2, [pc, #496]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bda:	4b7a      	ldr	r3, [pc, #488]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	4b77      	ldr	r3, [pc, #476]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf6:	4b74      	ldr	r3, [pc, #464]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a73      	ldr	r2, [pc, #460]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c02:	f7fe fbd5 	bl	80023b0 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0a:	f7fe fbd1 	bl	80023b0 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e10c      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x2ea>
 8003c30:	4b64      	ldr	r3, [pc, #400]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a63      	ldr	r2, [pc, #396]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3c:	e01c      	b.n	8003c78 <HAL_RCC_OscConfig+0x324>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x30c>
 8003c46:	4b5f      	ldr	r3, [pc, #380]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4a5e      	ldr	r2, [pc, #376]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	f043 0304 	orr.w	r3, r3, #4
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
 8003c52:	4b5c      	ldr	r3, [pc, #368]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a5b      	ldr	r2, [pc, #364]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0x324>
 8003c60:	4b58      	ldr	r3, [pc, #352]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a57      	ldr	r2, [pc, #348]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	4b55      	ldr	r3, [pc, #340]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a54      	ldr	r2, [pc, #336]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f023 0304 	bic.w	r3, r3, #4
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fe fb96 	bl	80023b0 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fe fb92 	bl	80023b0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0cb      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	4b49      	ldr	r3, [pc, #292]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ee      	beq.n	8003c88 <HAL_RCC_OscConfig+0x334>
 8003caa:	e014      	b.n	8003cd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cac:	f7fe fb80 	bl	80023b0 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fe fb7c 	bl	80023b0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0b5      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1ee      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	4a38      	ldr	r2, [pc, #224]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a1 	beq.w	8003e34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf2:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d05c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d141      	bne.n	8003d8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fb50 	bl	80023b0 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fe fb4c 	bl	80023b0 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e087      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	491b      	ldr	r1, [pc, #108]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fe fb25 	bl	80023b0 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fe fb21 	bl	80023b0 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e05c      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x416>
 8003d88:	e054      	b.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fe fb0e 	bl	80023b0 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fe fb0a 	bl	80023b0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e045      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x444>
 8003db6:	e03d      	b.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e038      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <HAL_RCC_OscConfig+0x4ec>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d028      	beq.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d121      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d11a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e00:	4013      	ands	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800

08003e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0cc      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e58:	4b68      	ldr	r3, [pc, #416]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d90c      	bls.n	8003e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b65      	ldr	r3, [pc, #404]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b63      	ldr	r3, [pc, #396]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0b8      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d020      	beq.n	8003ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e98:	4b59      	ldr	r3, [pc, #356]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a58      	ldr	r2, [pc, #352]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb0:	4b53      	ldr	r3, [pc, #332]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4a52      	ldr	r2, [pc, #328]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ebc:	4b50      	ldr	r3, [pc, #320]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	494d      	ldr	r1, [pc, #308]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d044      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	4b47      	ldr	r3, [pc, #284]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d119      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e07f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e06f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e067      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f22:	4b37      	ldr	r3, [pc, #220]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4934      	ldr	r1, [pc, #208]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f34:	f7fe fa3c 	bl	80023b0 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fe fa38 	bl	80023b0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e04f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 020c 	and.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1eb      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d20c      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e032      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4916      	ldr	r1, [pc, #88]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	490e      	ldr	r1, [pc, #56]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fca:	f000 f821 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	490a      	ldr	r1, [pc, #40]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	5ccb      	ldrb	r3, [r1, r3]
 8003fde:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe2:	4a09      	ldr	r2, [pc, #36]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe f99c 	bl	8002328 <HAL_InitTick>

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023c00 	.word	0x40023c00
 8004000:	40023800 	.word	0x40023800
 8004004:	0800c0d0 	.word	0x0800c0d0
 8004008:	2000013c 	.word	0x2000013c
 800400c:	20000140 	.word	0x20000140

08004010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004014:	b090      	sub	sp, #64	; 0x40
 8004016:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	637b      	str	r3, [r7, #52]	; 0x34
 800401c:	2300      	movs	r3, #0
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004020:	2300      	movs	r3, #0
 8004022:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004028:	4b59      	ldr	r3, [pc, #356]	; (8004190 <HAL_RCC_GetSysClockFreq+0x180>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b08      	cmp	r3, #8
 8004032:	d00d      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x40>
 8004034:	2b08      	cmp	r3, #8
 8004036:	f200 80a1 	bhi.w	800417c <HAL_RCC_GetSysClockFreq+0x16c>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x34>
 800403e:	2b04      	cmp	r3, #4
 8004040:	d003      	beq.n	800404a <HAL_RCC_GetSysClockFreq+0x3a>
 8004042:	e09b      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004044:	4b53      	ldr	r3, [pc, #332]	; (8004194 <HAL_RCC_GetSysClockFreq+0x184>)
 8004046:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004048:	e09b      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800404a:	4b53      	ldr	r3, [pc, #332]	; (8004198 <HAL_RCC_GetSysClockFreq+0x188>)
 800404c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800404e:	e098      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004050:	4b4f      	ldr	r3, [pc, #316]	; (8004190 <HAL_RCC_GetSysClockFreq+0x180>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800405a:	4b4d      	ldr	r3, [pc, #308]	; (8004190 <HAL_RCC_GetSysClockFreq+0x180>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d028      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004066:	4b4a      	ldr	r3, [pc, #296]	; (8004190 <HAL_RCC_GetSysClockFreq+0x180>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	099b      	lsrs	r3, r3, #6
 800406c:	2200      	movs	r2, #0
 800406e:	623b      	str	r3, [r7, #32]
 8004070:	627a      	str	r2, [r7, #36]	; 0x24
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004078:	2100      	movs	r1, #0
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCC_GetSysClockFreq+0x188>)
 800407c:	fb03 f201 	mul.w	r2, r3, r1
 8004080:	2300      	movs	r3, #0
 8004082:	fb00 f303 	mul.w	r3, r0, r3
 8004086:	4413      	add	r3, r2
 8004088:	4a43      	ldr	r2, [pc, #268]	; (8004198 <HAL_RCC_GetSysClockFreq+0x188>)
 800408a:	fba0 1202 	umull	r1, r2, r0, r2
 800408e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004090:	460a      	mov	r2, r1
 8004092:	62ba      	str	r2, [r7, #40]	; 0x28
 8004094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004096:	4413      	add	r3, r2
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800409a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409c:	2200      	movs	r2, #0
 800409e:	61bb      	str	r3, [r7, #24]
 80040a0:	61fa      	str	r2, [r7, #28]
 80040a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040aa:	f7fc fdcd 	bl	8000c48 <__aeabi_uldivmod>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4613      	mov	r3, r2
 80040b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b6:	e053      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b8:	4b35      	ldr	r3, [pc, #212]	; (8004190 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	099b      	lsrs	r3, r3, #6
 80040be:	2200      	movs	r2, #0
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	617a      	str	r2, [r7, #20]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040ca:	f04f 0b00 	mov.w	fp, #0
 80040ce:	4652      	mov	r2, sl
 80040d0:	465b      	mov	r3, fp
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f04f 0100 	mov.w	r1, #0
 80040da:	0159      	lsls	r1, r3, #5
 80040dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e0:	0150      	lsls	r0, r2, #5
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	ebb2 080a 	subs.w	r8, r2, sl
 80040ea:	eb63 090b 	sbc.w	r9, r3, fp
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004102:	ebb2 0408 	subs.w	r4, r2, r8
 8004106:	eb63 0509 	sbc.w	r5, r3, r9
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	00eb      	lsls	r3, r5, #3
 8004114:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004118:	00e2      	lsls	r2, r4, #3
 800411a:	4614      	mov	r4, r2
 800411c:	461d      	mov	r5, r3
 800411e:	eb14 030a 	adds.w	r3, r4, sl
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	eb45 030b 	adc.w	r3, r5, fp
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004136:	4629      	mov	r1, r5
 8004138:	028b      	lsls	r3, r1, #10
 800413a:	4621      	mov	r1, r4
 800413c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004140:	4621      	mov	r1, r4
 8004142:	028a      	lsls	r2, r1, #10
 8004144:	4610      	mov	r0, r2
 8004146:	4619      	mov	r1, r3
 8004148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414a:	2200      	movs	r2, #0
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	60fa      	str	r2, [r7, #12]
 8004150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004154:	f7fc fd78 	bl	8000c48 <__aeabi_uldivmod>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4613      	mov	r3, r2
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_GetSysClockFreq+0x180>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	3301      	adds	r3, #1
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800417a:	e002      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetSysClockFreq+0x184>)
 800417e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004184:	4618      	mov	r0, r3
 8004186:	3740      	adds	r7, #64	; 0x40
 8004188:	46bd      	mov	sp, r7
 800418a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	00f42400 	.word	0x00f42400
 8004198:	017d7840 	.word	0x017d7840

0800419c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a0:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041a2:	681b      	ldr	r3, [r3, #0]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	2000013c 	.word	0x2000013c

080041b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041b8:	f7ff fff0 	bl	800419c <HAL_RCC_GetHCLKFreq>
 80041bc:	4602      	mov	r2, r0
 80041be:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	0a9b      	lsrs	r3, r3, #10
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	4903      	ldr	r1, [pc, #12]	; (80041d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ca:	5ccb      	ldrb	r3, [r1, r3]
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40023800 	.word	0x40023800
 80041d8:	0800c0e0 	.word	0x0800c0e0

080041dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041e0:	f7ff ffdc 	bl	800419c <HAL_RCC_GetHCLKFreq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	0b5b      	lsrs	r3, r3, #13
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	4903      	ldr	r1, [pc, #12]	; (8004200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40023800 	.word	0x40023800
 8004200:	0800c0e0 	.word	0x0800c0e0

08004204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e07b      	b.n	800430e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d108      	bne.n	8004230 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004226:	d009      	beq.n	800423c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	61da      	str	r2, [r3, #28]
 800422e:	e005      	b.n	800423c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd fd32 	bl	8001cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004272:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	ea42 0103 	orr.w	r1, r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	f003 0104 	and.w	r1, r3, #4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	f003 0210 	and.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b088      	sub	sp, #32
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	4613      	mov	r3, r2
 8004324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_SPI_Transmit+0x22>
 8004334:	2302      	movs	r3, #2
 8004336:	e126      	b.n	8004586 <HAL_SPI_Transmit+0x270>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004340:	f7fe f836 	bl	80023b0 <HAL_GetTick>
 8004344:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d002      	beq.n	800435c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004356:	2302      	movs	r3, #2
 8004358:	77fb      	strb	r3, [r7, #31]
    goto error;
 800435a:	e10b      	b.n	8004574 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_SPI_Transmit+0x52>
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d102      	bne.n	800436e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800436c:	e102      	b.n	8004574 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2203      	movs	r2, #3
 8004372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	88fa      	ldrh	r2, [r7, #6]
 8004386:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b4:	d10f      	bne.n	80043d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d007      	beq.n	80043f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043fc:	d14b      	bne.n	8004496 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_SPI_Transmit+0xf6>
 8004406:	8afb      	ldrh	r3, [r7, #22]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d13e      	bne.n	800448a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	881a      	ldrh	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	1c9a      	adds	r2, r3, #2
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004430:	e02b      	b.n	800448a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d112      	bne.n	8004466 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	881a      	ldrh	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	86da      	strh	r2, [r3, #54]	; 0x36
 8004464:	e011      	b.n	800448a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004466:	f7fd ffa3 	bl	80023b0 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d803      	bhi.n	800447e <HAL_SPI_Transmit+0x168>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d102      	bne.n	8004484 <HAL_SPI_Transmit+0x16e>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004488:	e074      	b.n	8004574 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1ce      	bne.n	8004432 <HAL_SPI_Transmit+0x11c>
 8004494:	e04c      	b.n	8004530 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_Transmit+0x18e>
 800449e:	8afb      	ldrh	r3, [r7, #22]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d140      	bne.n	8004526 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	7812      	ldrb	r2, [r2, #0]
 80044b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044ca:	e02c      	b.n	8004526 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d113      	bne.n	8004502 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	7812      	ldrb	r2, [r2, #0]
 80044e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004500:	e011      	b.n	8004526 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004502:	f7fd ff55 	bl	80023b0 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d803      	bhi.n	800451a <HAL_SPI_Transmit+0x204>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d102      	bne.n	8004520 <HAL_SPI_Transmit+0x20a>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004524:	e026      	b.n	8004574 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1cd      	bne.n	80044cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	6839      	ldr	r1, [r7, #0]
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fbcb 	bl	8004cd0 <SPI_EndRxTxTransaction>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	77fb      	strb	r3, [r7, #31]
 8004570:	e000      	b.n	8004574 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004572:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004584:	7ffb      	ldrb	r3, [r7, #31]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b088      	sub	sp, #32
 8004592:	af02      	add	r7, sp, #8
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4613      	mov	r3, r2
 800459c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045aa:	d112      	bne.n	80045d2 <HAL_SPI_Receive+0x44>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10e      	bne.n	80045d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2204      	movs	r2, #4
 80045b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045bc:	88fa      	ldrh	r2, [r7, #6]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	4613      	mov	r3, r2
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f8f1 	bl	80047b0 <HAL_SPI_TransmitReceive>
 80045ce:	4603      	mov	r3, r0
 80045d0:	e0ea      	b.n	80047a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_SPI_Receive+0x52>
 80045dc:	2302      	movs	r3, #2
 80045de:	e0e3      	b.n	80047a8 <HAL_SPI_Receive+0x21a>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045e8:	f7fd fee2 	bl	80023b0 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d002      	beq.n	8004600 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
 80045fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045fe:	e0ca      	b.n	8004796 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_SPI_Receive+0x7e>
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004610:	e0c1      	b.n	8004796 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2204      	movs	r2, #4
 8004616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	88fa      	ldrh	r2, [r7, #6]
 800462a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004658:	d10f      	bne.n	800467a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004668:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004678:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d007      	beq.n	8004698 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004696:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d162      	bne.n	8004766 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046a0:	e02e      	b.n	8004700 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d115      	bne.n	80046dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f103 020c 	add.w	r2, r3, #12
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046da:	e011      	b.n	8004700 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046dc:	f7fd fe68 	bl	80023b0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d803      	bhi.n	80046f4 <HAL_SPI_Receive+0x166>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d102      	bne.n	80046fa <HAL_SPI_Receive+0x16c>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046fe:	e04a      	b.n	8004796 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1cb      	bne.n	80046a2 <HAL_SPI_Receive+0x114>
 800470a:	e031      	b.n	8004770 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b01      	cmp	r3, #1
 8004718:	d113      	bne.n	8004742 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	b292      	uxth	r2, r2
 8004726:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	1c9a      	adds	r2, r3, #2
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004740:	e011      	b.n	8004766 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004742:	f7fd fe35 	bl	80023b0 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d803      	bhi.n	800475a <HAL_SPI_Receive+0x1cc>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004758:	d102      	bne.n	8004760 <HAL_SPI_Receive+0x1d2>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004764:	e017      	b.n	8004796 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1cd      	bne.n	800470c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	6839      	ldr	r1, [r7, #0]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fa45 	bl	8004c04 <SPI_EndRxTransaction>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	75fb      	strb	r3, [r7, #23]
 8004792:	e000      	b.n	8004796 <HAL_SPI_Receive+0x208>
  }

error :
 8004794:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08c      	sub	sp, #48	; 0x30
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047be:	2301      	movs	r3, #1
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x26>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e18a      	b.n	8004aec <HAL_SPI_TransmitReceive+0x33c>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047de:	f7fd fde7 	bl	80023b0 <HAL_GetTick>
 80047e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047f4:	887b      	ldrh	r3, [r7, #2]
 80047f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d00f      	beq.n	8004820 <HAL_SPI_TransmitReceive+0x70>
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004806:	d107      	bne.n	8004818 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d103      	bne.n	8004818 <HAL_SPI_TransmitReceive+0x68>
 8004810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004814:	2b04      	cmp	r3, #4
 8004816:	d003      	beq.n	8004820 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004818:	2302      	movs	r3, #2
 800481a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800481e:	e15b      	b.n	8004ad8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_SPI_TransmitReceive+0x82>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_SPI_TransmitReceive+0x82>
 800482c:	887b      	ldrh	r3, [r7, #2]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004838:	e14e      	b.n	8004ad8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b04      	cmp	r3, #4
 8004844:	d003      	beq.n	800484e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2205      	movs	r2, #5
 800484a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	887a      	ldrh	r2, [r7, #2]
 800485e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	887a      	ldrh	r2, [r7, #2]
 8004864:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	887a      	ldrh	r2, [r7, #2]
 8004870:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	887a      	ldrh	r2, [r7, #2]
 8004876:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d007      	beq.n	80048a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048aa:	d178      	bne.n	800499e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x10a>
 80048b4:	8b7b      	ldrh	r3, [r7, #26]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d166      	bne.n	8004988 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	881a      	ldrh	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	1c9a      	adds	r2, r3, #2
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048de:	e053      	b.n	8004988 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d11b      	bne.n	8004926 <HAL_SPI_TransmitReceive+0x176>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d016      	beq.n	8004926 <HAL_SPI_TransmitReceive+0x176>
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d113      	bne.n	8004926 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	881a      	ldrh	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	1c9a      	adds	r2, r3, #2
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b01      	cmp	r3, #1
 8004932:	d119      	bne.n	8004968 <HAL_SPI_TransmitReceive+0x1b8>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d014      	beq.n	8004968 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	b292      	uxth	r2, r2
 800494a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004964:	2301      	movs	r3, #1
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004968:	f7fd fd22 	bl	80023b0 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004974:	429a      	cmp	r2, r3
 8004976:	d807      	bhi.n	8004988 <HAL_SPI_TransmitReceive+0x1d8>
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d003      	beq.n	8004988 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004986:	e0a7      	b.n	8004ad8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1a6      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x130>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1a1      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x130>
 800499c:	e07c      	b.n	8004a98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_SPI_TransmitReceive+0x1fc>
 80049a6:	8b7b      	ldrh	r3, [r7, #26]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d16b      	bne.n	8004a84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	7812      	ldrb	r2, [r2, #0]
 80049b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d2:	e057      	b.n	8004a84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d11c      	bne.n	8004a1c <HAL_SPI_TransmitReceive+0x26c>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d017      	beq.n	8004a1c <HAL_SPI_TransmitReceive+0x26c>
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d114      	bne.n	8004a1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	7812      	ldrb	r2, [r2, #0]
 80049fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d119      	bne.n	8004a5e <HAL_SPI_TransmitReceive+0x2ae>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d014      	beq.n	8004a5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a5e:	f7fd fca7 	bl	80023b0 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d803      	bhi.n	8004a76 <HAL_SPI_TransmitReceive+0x2c6>
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d102      	bne.n	8004a7c <HAL_SPI_TransmitReceive+0x2cc>
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d103      	bne.n	8004a84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a82:	e029      	b.n	8004ad8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1a2      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x224>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d19d      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f917 	bl	8004cd0 <SPI_EndRxTxTransaction>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d006      	beq.n	8004ab6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ab4:	e010      	b.n	8004ad8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	e000      	b.n	8004ad8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ad6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ae8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3730      	adds	r7, #48	; 0x30
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b04:	f7fd fc54 	bl	80023b0 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	4413      	add	r3, r2
 8004b12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b14:	f7fd fc4c 	bl	80023b0 <HAL_GetTick>
 8004b18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b1a:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	015b      	lsls	r3, r3, #5
 8004b20:	0d1b      	lsrs	r3, r3, #20
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	fb02 f303 	mul.w	r3, r2, r3
 8004b28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b2a:	e054      	b.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b32:	d050      	beq.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b34:	f7fd fc3c 	bl	80023b0 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d902      	bls.n	8004b4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d13d      	bne.n	8004bc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b62:	d111      	bne.n	8004b88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6c:	d004      	beq.n	8004b78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b76:	d107      	bne.n	8004b88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b90:	d10f      	bne.n	8004bb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e017      	b.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4013      	ands	r3, r2
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	bf0c      	ite	eq
 8004be6:	2301      	moveq	r3, #1
 8004be8:	2300      	movne	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d19b      	bne.n	8004b2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	2000013c 	.word	0x2000013c

08004c04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c18:	d111      	bne.n	8004c3e <SPI_EndRxTransaction+0x3a>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c22:	d004      	beq.n	8004c2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2c:	d107      	bne.n	8004c3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c46:	d12a      	bne.n	8004c9e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c50:	d012      	beq.n	8004c78 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2180      	movs	r1, #128	; 0x80
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff ff49 	bl	8004af4 <SPI_WaitFlagStateUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d02d      	beq.n	8004cc4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	f043 0220 	orr.w	r2, r3, #32
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e026      	b.n	8004cc6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2101      	movs	r1, #1
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff ff36 	bl	8004af4 <SPI_WaitFlagStateUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d01a      	beq.n	8004cc4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	f043 0220 	orr.w	r2, r3, #32
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e013      	b.n	8004cc6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f7ff ff23 	bl	8004af4 <SPI_WaitFlagStateUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb8:	f043 0220 	orr.w	r2, r3, #32
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e000      	b.n	8004cc6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cdc:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <SPI_EndRxTxTransaction+0x7c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1b      	ldr	r2, [pc, #108]	; (8004d50 <SPI_EndRxTxTransaction+0x80>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	0d5b      	lsrs	r3, r3, #21
 8004ce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cec:	fb02 f303 	mul.w	r3, r2, r3
 8004cf0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfa:	d112      	bne.n	8004d22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2200      	movs	r2, #0
 8004d04:	2180      	movs	r1, #128	; 0x80
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff fef4 	bl	8004af4 <SPI_WaitFlagStateUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d016      	beq.n	8004d40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	f043 0220 	orr.w	r2, r3, #32
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e00f      	b.n	8004d42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d0f2      	beq.n	8004d22 <SPI_EndRxTxTransaction+0x52>
 8004d3c:	e000      	b.n	8004d40 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d3e:	bf00      	nop
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	2000013c 	.word	0x2000013c
 8004d50:	165e9f81 	.word	0x165e9f81

08004d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e041      	b.n	8004dea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fd f9a0 	bl	80020c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4619      	mov	r1, r3
 8004d92:	4610      	mov	r0, r2
 8004d94:	f000 fc7a 	bl	800568c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d001      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e04e      	b.n	8004eaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a23      	ldr	r2, [pc, #140]	; (8004eb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d022      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d01d      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	; (8004ebc <HAL_TIM_Base_Start_IT+0xc8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d018      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d013      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00e      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a19      	ldr	r2, [pc, #100]	; (8004ecc <HAL_TIM_Base_Start_IT+0xd8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d111      	bne.n	8004e98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b06      	cmp	r3, #6
 8004e84:	d010      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e96:	e007      	b.n	8004ea8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40010400 	.word	0x40010400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40001800 	.word	0x40001800

08004ed4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e041      	b.n	8004f6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f839 	bl	8004f72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f000 fbba 	bl	800568c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d109      	bne.n	8004fac <HAL_TIM_PWM_Start+0x24>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	bf14      	ite	ne
 8004fa4:	2301      	movne	r3, #1
 8004fa6:	2300      	moveq	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	e022      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x6a>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d109      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0x3e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	bf14      	ite	ne
 8004fbe:	2301      	movne	r3, #1
 8004fc0:	2300      	moveq	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	e015      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x6a>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d109      	bne.n	8004fe0 <HAL_TIM_PWM_Start+0x58>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	e008      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x6a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	bf14      	ite	ne
 8004fec:	2301      	movne	r3, #1
 8004fee:	2300      	moveq	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e07c      	b.n	80050f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_PWM_Start+0x82>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005008:	e013      	b.n	8005032 <HAL_TIM_PWM_Start+0xaa>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b04      	cmp	r3, #4
 800500e:	d104      	bne.n	800501a <HAL_TIM_PWM_Start+0x92>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005018:	e00b      	b.n	8005032 <HAL_TIM_PWM_Start+0xaa>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d104      	bne.n	800502a <HAL_TIM_PWM_Start+0xa2>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005028:	e003      	b.n	8005032 <HAL_TIM_PWM_Start+0xaa>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2201      	movs	r2, #1
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fe10 	bl	8005c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a2d      	ldr	r2, [pc, #180]	; (80050fc <HAL_TIM_PWM_Start+0x174>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <HAL_TIM_PWM_Start+0xcc>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a2c      	ldr	r2, [pc, #176]	; (8005100 <HAL_TIM_PWM_Start+0x178>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d101      	bne.n	8005058 <HAL_TIM_PWM_Start+0xd0>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <HAL_TIM_PWM_Start+0xd2>
 8005058:	2300      	movs	r3, #0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d007      	beq.n	800506e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a22      	ldr	r2, [pc, #136]	; (80050fc <HAL_TIM_PWM_Start+0x174>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d022      	beq.n	80050be <HAL_TIM_PWM_Start+0x136>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005080:	d01d      	beq.n	80050be <HAL_TIM_PWM_Start+0x136>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1f      	ldr	r2, [pc, #124]	; (8005104 <HAL_TIM_PWM_Start+0x17c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d018      	beq.n	80050be <HAL_TIM_PWM_Start+0x136>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1d      	ldr	r2, [pc, #116]	; (8005108 <HAL_TIM_PWM_Start+0x180>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <HAL_TIM_PWM_Start+0x136>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1c      	ldr	r2, [pc, #112]	; (800510c <HAL_TIM_PWM_Start+0x184>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00e      	beq.n	80050be <HAL_TIM_PWM_Start+0x136>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a16      	ldr	r2, [pc, #88]	; (8005100 <HAL_TIM_PWM_Start+0x178>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d009      	beq.n	80050be <HAL_TIM_PWM_Start+0x136>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a18      	ldr	r2, [pc, #96]	; (8005110 <HAL_TIM_PWM_Start+0x188>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d004      	beq.n	80050be <HAL_TIM_PWM_Start+0x136>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a16      	ldr	r2, [pc, #88]	; (8005114 <HAL_TIM_PWM_Start+0x18c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d111      	bne.n	80050e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b06      	cmp	r3, #6
 80050ce:	d010      	beq.n	80050f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e0:	e007      	b.n	80050f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0201 	orr.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40010000 	.word	0x40010000
 8005100:	40010400 	.word	0x40010400
 8005104:	40000400 	.word	0x40000400
 8005108:	40000800 	.word	0x40000800
 800510c:	40000c00 	.word	0x40000c00
 8005110:	40014000 	.word	0x40014000
 8005114:	40001800 	.word	0x40001800

08005118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b02      	cmp	r3, #2
 800512c:	d122      	bne.n	8005174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b02      	cmp	r3, #2
 800513a:	d11b      	bne.n	8005174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0202 	mvn.w	r2, #2
 8005144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fa77 	bl	800564e <HAL_TIM_IC_CaptureCallback>
 8005160:	e005      	b.n	800516e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fa69 	bl	800563a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fa7a 	bl	8005662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b04      	cmp	r3, #4
 8005180:	d122      	bne.n	80051c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b04      	cmp	r3, #4
 800518e:	d11b      	bne.n	80051c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0204 	mvn.w	r2, #4
 8005198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fa4d 	bl	800564e <HAL_TIM_IC_CaptureCallback>
 80051b4:	e005      	b.n	80051c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fa3f 	bl	800563a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fa50 	bl	8005662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d122      	bne.n	800521c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d11b      	bne.n	800521c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0208 	mvn.w	r2, #8
 80051ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2204      	movs	r2, #4
 80051f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa23 	bl	800564e <HAL_TIM_IC_CaptureCallback>
 8005208:	e005      	b.n	8005216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa15 	bl	800563a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fa26 	bl	8005662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2b10      	cmp	r3, #16
 8005228:	d122      	bne.n	8005270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b10      	cmp	r3, #16
 8005236:	d11b      	bne.n	8005270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0210 	mvn.w	r2, #16
 8005240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2208      	movs	r2, #8
 8005246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f9f9 	bl	800564e <HAL_TIM_IC_CaptureCallback>
 800525c:	e005      	b.n	800526a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f9eb 	bl	800563a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f9fc 	bl	8005662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b01      	cmp	r3, #1
 800527c:	d10e      	bne.n	800529c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b01      	cmp	r3, #1
 800528a:	d107      	bne.n	800529c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0201 	mvn.w	r2, #1
 8005294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc f906 	bl	80014a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a6:	2b80      	cmp	r3, #128	; 0x80
 80052a8:	d10e      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b4:	2b80      	cmp	r3, #128	; 0x80
 80052b6:	d107      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fdca 	bl	8005e5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d2:	2b40      	cmp	r3, #64	; 0x40
 80052d4:	d10e      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d107      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f9c1 	bl	8005676 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d10e      	bne.n	8005320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b20      	cmp	r3, #32
 800530e:	d107      	bne.n	8005320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0220 	mvn.w	r2, #32
 8005318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fd94 	bl	8005e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005342:	2302      	movs	r3, #2
 8005344:	e0ae      	b.n	80054a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b0c      	cmp	r3, #12
 8005352:	f200 809f 	bhi.w	8005494 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005356:	a201      	add	r2, pc, #4	; (adr r2, 800535c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	08005391 	.word	0x08005391
 8005360:	08005495 	.word	0x08005495
 8005364:	08005495 	.word	0x08005495
 8005368:	08005495 	.word	0x08005495
 800536c:	080053d1 	.word	0x080053d1
 8005370:	08005495 	.word	0x08005495
 8005374:	08005495 	.word	0x08005495
 8005378:	08005495 	.word	0x08005495
 800537c:	08005413 	.word	0x08005413
 8005380:	08005495 	.word	0x08005495
 8005384:	08005495 	.word	0x08005495
 8005388:	08005495 	.word	0x08005495
 800538c:	08005453 	.word	0x08005453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fa18 	bl	80057cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0208 	orr.w	r2, r2, #8
 80053aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0204 	bic.w	r2, r2, #4
 80053ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6999      	ldr	r1, [r3, #24]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	619a      	str	r2, [r3, #24]
      break;
 80053ce:	e064      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fa68 	bl	80058ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	021a      	lsls	r2, r3, #8
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	619a      	str	r2, [r3, #24]
      break;
 8005410:	e043      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fabd 	bl	8005998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0208 	orr.w	r2, r2, #8
 800542c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0204 	bic.w	r2, r2, #4
 800543c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69d9      	ldr	r1, [r3, #28]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	61da      	str	r2, [r3, #28]
      break;
 8005450:	e023      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fb11 	bl	8005a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800546c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800547c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	021a      	lsls	r2, r3, #8
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	61da      	str	r2, [r3, #28]
      break;
 8005492:	e002      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	75fb      	strb	r3, [r7, #23]
      break;
 8005498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_TIM_ConfigClockSource+0x1c>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e0b4      	b.n	8005632 <HAL_TIM_ConfigClockSource+0x186>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005500:	d03e      	beq.n	8005580 <HAL_TIM_ConfigClockSource+0xd4>
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005506:	f200 8087 	bhi.w	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 800550a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550e:	f000 8086 	beq.w	800561e <HAL_TIM_ConfigClockSource+0x172>
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005516:	d87f      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005518:	2b70      	cmp	r3, #112	; 0x70
 800551a:	d01a      	beq.n	8005552 <HAL_TIM_ConfigClockSource+0xa6>
 800551c:	2b70      	cmp	r3, #112	; 0x70
 800551e:	d87b      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b60      	cmp	r3, #96	; 0x60
 8005522:	d050      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005524:	2b60      	cmp	r3, #96	; 0x60
 8005526:	d877      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005528:	2b50      	cmp	r3, #80	; 0x50
 800552a:	d03c      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0xfa>
 800552c:	2b50      	cmp	r3, #80	; 0x50
 800552e:	d873      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d058      	beq.n	80055e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005534:	2b40      	cmp	r3, #64	; 0x40
 8005536:	d86f      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005538:	2b30      	cmp	r3, #48	; 0x30
 800553a:	d064      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0x15a>
 800553c:	2b30      	cmp	r3, #48	; 0x30
 800553e:	d86b      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005540:	2b20      	cmp	r3, #32
 8005542:	d060      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0x15a>
 8005544:	2b20      	cmp	r3, #32
 8005546:	d867      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005548:	2b00      	cmp	r3, #0
 800554a:	d05c      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0x15a>
 800554c:	2b10      	cmp	r3, #16
 800554e:	d05a      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0x15a>
 8005550:	e062      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6899      	ldr	r1, [r3, #8]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f000 fb5d 	bl	8005c20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	609a      	str	r2, [r3, #8]
      break;
 800557e:	e04f      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	6899      	ldr	r1, [r3, #8]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f000 fb46 	bl	8005c20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055a2:	609a      	str	r2, [r3, #8]
      break;
 80055a4:	e03c      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	6859      	ldr	r1, [r3, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f000 faba 	bl	8005b2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2150      	movs	r1, #80	; 0x50
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fb13 	bl	8005bea <TIM_ITRx_SetConfig>
      break;
 80055c4:	e02c      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6859      	ldr	r1, [r3, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	461a      	mov	r2, r3
 80055d4:	f000 fad9 	bl	8005b8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2160      	movs	r1, #96	; 0x60
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fb03 	bl	8005bea <TIM_ITRx_SetConfig>
      break;
 80055e4:	e01c      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	6859      	ldr	r1, [r3, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	461a      	mov	r2, r3
 80055f4:	f000 fa9a 	bl	8005b2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2140      	movs	r1, #64	; 0x40
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 faf3 	bl	8005bea <TIM_ITRx_SetConfig>
      break;
 8005604:	e00c      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f000 faea 	bl	8005bea <TIM_ITRx_SetConfig>
      break;
 8005616:	e003      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	73fb      	strb	r3, [r7, #15]
      break;
 800561c:	e000      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800561e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a40      	ldr	r2, [pc, #256]	; (80057a0 <TIM_Base_SetConfig+0x114>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056aa:	d00f      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3d      	ldr	r2, [pc, #244]	; (80057a4 <TIM_Base_SetConfig+0x118>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00b      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a3c      	ldr	r2, [pc, #240]	; (80057a8 <TIM_Base_SetConfig+0x11c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a3b      	ldr	r2, [pc, #236]	; (80057ac <TIM_Base_SetConfig+0x120>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a3a      	ldr	r2, [pc, #232]	; (80057b0 <TIM_Base_SetConfig+0x124>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d108      	bne.n	80056de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2f      	ldr	r2, [pc, #188]	; (80057a0 <TIM_Base_SetConfig+0x114>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d02b      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ec:	d027      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2c      	ldr	r2, [pc, #176]	; (80057a4 <TIM_Base_SetConfig+0x118>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d023      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a2b      	ldr	r2, [pc, #172]	; (80057a8 <TIM_Base_SetConfig+0x11c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d01f      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a2a      	ldr	r2, [pc, #168]	; (80057ac <TIM_Base_SetConfig+0x120>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01b      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a29      	ldr	r2, [pc, #164]	; (80057b0 <TIM_Base_SetConfig+0x124>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d017      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a28      	ldr	r2, [pc, #160]	; (80057b4 <TIM_Base_SetConfig+0x128>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a27      	ldr	r2, [pc, #156]	; (80057b8 <TIM_Base_SetConfig+0x12c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00f      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a26      	ldr	r2, [pc, #152]	; (80057bc <TIM_Base_SetConfig+0x130>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00b      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a25      	ldr	r2, [pc, #148]	; (80057c0 <TIM_Base_SetConfig+0x134>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a24      	ldr	r2, [pc, #144]	; (80057c4 <TIM_Base_SetConfig+0x138>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d003      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a23      	ldr	r2, [pc, #140]	; (80057c8 <TIM_Base_SetConfig+0x13c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d108      	bne.n	8005750 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a0a      	ldr	r2, [pc, #40]	; (80057a0 <TIM_Base_SetConfig+0x114>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <TIM_Base_SetConfig+0xf8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a0c      	ldr	r2, [pc, #48]	; (80057b0 <TIM_Base_SetConfig+0x124>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d103      	bne.n	800578c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	615a      	str	r2, [r3, #20]
}
 8005792:	bf00      	nop
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40000c00 	.word	0x40000c00
 80057b0:	40010400 	.word	0x40010400
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40014800 	.word	0x40014800
 80057c0:	40001800 	.word	0x40001800
 80057c4:	40001c00 	.word	0x40001c00
 80057c8:	40002000 	.word	0x40002000

080057cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f023 0201 	bic.w	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0303 	bic.w	r3, r3, #3
 8005802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f023 0302 	bic.w	r3, r3, #2
 8005814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a20      	ldr	r2, [pc, #128]	; (80058a4 <TIM_OC1_SetConfig+0xd8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_OC1_SetConfig+0x64>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <TIM_OC1_SetConfig+0xdc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d10c      	bne.n	800584a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 0308 	bic.w	r3, r3, #8
 8005836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f023 0304 	bic.w	r3, r3, #4
 8005848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a15      	ldr	r2, [pc, #84]	; (80058a4 <TIM_OC1_SetConfig+0xd8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d003      	beq.n	800585a <TIM_OC1_SetConfig+0x8e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a14      	ldr	r2, [pc, #80]	; (80058a8 <TIM_OC1_SetConfig+0xdc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d111      	bne.n	800587e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	621a      	str	r2, [r3, #32]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40010400 	.word	0x40010400

080058ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f023 0210 	bic.w	r2, r3, #16
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f023 0320 	bic.w	r3, r3, #32
 80058f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a22      	ldr	r2, [pc, #136]	; (8005990 <TIM_OC2_SetConfig+0xe4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d003      	beq.n	8005914 <TIM_OC2_SetConfig+0x68>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a21      	ldr	r2, [pc, #132]	; (8005994 <TIM_OC2_SetConfig+0xe8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d10d      	bne.n	8005930 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800591a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a17      	ldr	r2, [pc, #92]	; (8005990 <TIM_OC2_SetConfig+0xe4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_OC2_SetConfig+0x94>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a16      	ldr	r2, [pc, #88]	; (8005994 <TIM_OC2_SetConfig+0xe8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d113      	bne.n	8005968 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800594e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40010000 	.word	0x40010000
 8005994:	40010400 	.word	0x40010400

08005998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0303 	bic.w	r3, r3, #3
 80059ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	021b      	lsls	r3, r3, #8
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a21      	ldr	r2, [pc, #132]	; (8005a78 <TIM_OC3_SetConfig+0xe0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_OC3_SetConfig+0x66>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a20      	ldr	r2, [pc, #128]	; (8005a7c <TIM_OC3_SetConfig+0xe4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d10d      	bne.n	8005a1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a16      	ldr	r2, [pc, #88]	; (8005a78 <TIM_OC3_SetConfig+0xe0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_OC3_SetConfig+0x92>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a15      	ldr	r2, [pc, #84]	; (8005a7c <TIM_OC3_SetConfig+0xe4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d113      	bne.n	8005a52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	621a      	str	r2, [r3, #32]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40010400 	.word	0x40010400

08005a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	031b      	lsls	r3, r3, #12
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a12      	ldr	r2, [pc, #72]	; (8005b24 <TIM_OC4_SetConfig+0xa4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_OC4_SetConfig+0x68>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a11      	ldr	r2, [pc, #68]	; (8005b28 <TIM_OC4_SetConfig+0xa8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d109      	bne.n	8005afc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	019b      	lsls	r3, r3, #6
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	621a      	str	r2, [r3, #32]
}
 8005b16:	bf00      	nop
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40010400 	.word	0x40010400

08005b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f023 0201 	bic.w	r2, r3, #1
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f023 030a 	bic.w	r3, r3, #10
 8005b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b087      	sub	sp, #28
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f023 0210 	bic.w	r2, r3, #16
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	031b      	lsls	r3, r3, #12
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f043 0307 	orr.w	r3, r3, #7
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	609a      	str	r2, [r3, #8]
}
 8005c54:	bf00      	nop
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	2201      	movs	r2, #1
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	401a      	ands	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1a      	ldr	r2, [r3, #32]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	fa01 f303 	lsl.w	r3, r1, r3
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e05a      	b.n	8005d7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d022      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d10:	d01d      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d018      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00e      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d009      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a17      	ldr	r2, [pc, #92]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d10c      	bne.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40010000 	.word	0x40010000
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40000800 	.word	0x40000800
 8005d94:	40000c00 	.word	0x40000c00
 8005d98:	40010400 	.word	0x40010400
 8005d9c:	40014000 	.word	0x40014000
 8005da0:	40001800 	.word	0x40001800

08005da4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e03d      	b.n	8005e3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e03f      	b.n	8005f02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fc f9b2 	bl	8002200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2224      	movs	r2, #36	; 0x24
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f929 	bl	800610c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b08a      	sub	sp, #40	; 0x28
 8005f0e:	af02      	add	r7, sp, #8
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d17c      	bne.n	8006024 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_UART_Transmit+0x2c>
 8005f30:	88fb      	ldrh	r3, [r7, #6]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e075      	b.n	8006026 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_UART_Transmit+0x3e>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e06e      	b.n	8006026 <HAL_UART_Transmit+0x11c>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2221      	movs	r2, #33	; 0x21
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f5e:	f7fc fa27 	bl	80023b0 <HAL_GetTick>
 8005f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	88fa      	ldrh	r2, [r7, #6]
 8005f68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	88fa      	ldrh	r2, [r7, #6]
 8005f6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f78:	d108      	bne.n	8005f8c <HAL_UART_Transmit+0x82>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d104      	bne.n	8005f8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	e003      	b.n	8005f94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f9c:	e02a      	b.n	8005ff4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2180      	movs	r1, #128	; 0x80
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f840 	bl	800602e <UART_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e036      	b.n	8006026 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10b      	bne.n	8005fd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	e007      	b.n	8005fe6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1cf      	bne.n	8005f9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2200      	movs	r2, #0
 8006006:	2140      	movs	r1, #64	; 0x40
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f810 	bl	800602e <UART_WaitOnFlagUntilTimeout>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e006      	b.n	8006026 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	e000      	b.n	8006026 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006024:	2302      	movs	r3, #2
  }
}
 8006026:	4618      	mov	r0, r3
 8006028:	3720      	adds	r7, #32
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b090      	sub	sp, #64	; 0x40
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603e:	e050      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	d04c      	beq.n	80060e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0x30>
 800604e:	f7fc f9af 	bl	80023b0 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800605a:	429a      	cmp	r2, r3
 800605c:	d241      	bcs.n	80060e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	330c      	adds	r3, #12
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330c      	adds	r3, #12
 800607c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800607e:	637a      	str	r2, [r7, #52]	; 0x34
 8006080:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800608c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e5      	bne.n	800605e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3314      	adds	r3, #20
 8006098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	613b      	str	r3, [r7, #16]
   return(result);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f023 0301 	bic.w	r3, r3, #1
 80060a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3314      	adds	r3, #20
 80060b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b2:	623a      	str	r2, [r7, #32]
 80060b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	69f9      	ldr	r1, [r7, #28]
 80060b8:	6a3a      	ldr	r2, [r7, #32]
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	61bb      	str	r3, [r7, #24]
   return(result);
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e5      	bne.n	8006092 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e00f      	b.n	8006102 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4013      	ands	r3, r2
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	bf0c      	ite	eq
 80060f2:	2301      	moveq	r3, #1
 80060f4:	2300      	movne	r3, #0
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d09f      	beq.n	8006040 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3740      	adds	r7, #64	; 0x40
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800610c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006110:	b0c0      	sub	sp, #256	; 0x100
 8006112:	af00      	add	r7, sp, #0
 8006114:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006128:	68d9      	ldr	r1, [r3, #12]
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	ea40 0301 	orr.w	r3, r0, r1
 8006134:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	431a      	orrs	r2, r3
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	431a      	orrs	r2, r3
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	4313      	orrs	r3, r2
 8006154:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006164:	f021 010c 	bic.w	r1, r1, #12
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006172:	430b      	orrs	r3, r1
 8006174:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006186:	6999      	ldr	r1, [r3, #24]
 8006188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	ea40 0301 	orr.w	r3, r0, r1
 8006192:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	4b8f      	ldr	r3, [pc, #572]	; (80063d8 <UART_SetConfig+0x2cc>)
 800619c:	429a      	cmp	r2, r3
 800619e:	d005      	beq.n	80061ac <UART_SetConfig+0xa0>
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b8d      	ldr	r3, [pc, #564]	; (80063dc <UART_SetConfig+0x2d0>)
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d104      	bne.n	80061b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061ac:	f7fe f816 	bl	80041dc <HAL_RCC_GetPCLK2Freq>
 80061b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061b4:	e003      	b.n	80061be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061b6:	f7fd fffd 	bl	80041b4 <HAL_RCC_GetPCLK1Freq>
 80061ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c8:	f040 810c 	bne.w	80063e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061de:	4622      	mov	r2, r4
 80061e0:	462b      	mov	r3, r5
 80061e2:	1891      	adds	r1, r2, r2
 80061e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80061e6:	415b      	adcs	r3, r3
 80061e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061ee:	4621      	mov	r1, r4
 80061f0:	eb12 0801 	adds.w	r8, r2, r1
 80061f4:	4629      	mov	r1, r5
 80061f6:	eb43 0901 	adc.w	r9, r3, r1
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	f04f 0300 	mov.w	r3, #0
 8006202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800620a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800620e:	4690      	mov	r8, r2
 8006210:	4699      	mov	r9, r3
 8006212:	4623      	mov	r3, r4
 8006214:	eb18 0303 	adds.w	r3, r8, r3
 8006218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800621c:	462b      	mov	r3, r5
 800621e:	eb49 0303 	adc.w	r3, r9, r3
 8006222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006232:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006236:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800623a:	460b      	mov	r3, r1
 800623c:	18db      	adds	r3, r3, r3
 800623e:	653b      	str	r3, [r7, #80]	; 0x50
 8006240:	4613      	mov	r3, r2
 8006242:	eb42 0303 	adc.w	r3, r2, r3
 8006246:	657b      	str	r3, [r7, #84]	; 0x54
 8006248:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800624c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006250:	f7fa fcfa 	bl	8000c48 <__aeabi_uldivmod>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4b61      	ldr	r3, [pc, #388]	; (80063e0 <UART_SetConfig+0x2d4>)
 800625a:	fba3 2302 	umull	r2, r3, r3, r2
 800625e:	095b      	lsrs	r3, r3, #5
 8006260:	011c      	lsls	r4, r3, #4
 8006262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006266:	2200      	movs	r2, #0
 8006268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800626c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006270:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	1891      	adds	r1, r2, r2
 800627a:	64b9      	str	r1, [r7, #72]	; 0x48
 800627c:	415b      	adcs	r3, r3
 800627e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006280:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006284:	4641      	mov	r1, r8
 8006286:	eb12 0a01 	adds.w	sl, r2, r1
 800628a:	4649      	mov	r1, r9
 800628c:	eb43 0b01 	adc.w	fp, r3, r1
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800629c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062a4:	4692      	mov	sl, r2
 80062a6:	469b      	mov	fp, r3
 80062a8:	4643      	mov	r3, r8
 80062aa:	eb1a 0303 	adds.w	r3, sl, r3
 80062ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062b2:	464b      	mov	r3, r9
 80062b4:	eb4b 0303 	adc.w	r3, fp, r3
 80062b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062d0:	460b      	mov	r3, r1
 80062d2:	18db      	adds	r3, r3, r3
 80062d4:	643b      	str	r3, [r7, #64]	; 0x40
 80062d6:	4613      	mov	r3, r2
 80062d8:	eb42 0303 	adc.w	r3, r2, r3
 80062dc:	647b      	str	r3, [r7, #68]	; 0x44
 80062de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062e6:	f7fa fcaf 	bl	8000c48 <__aeabi_uldivmod>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4611      	mov	r1, r2
 80062f0:	4b3b      	ldr	r3, [pc, #236]	; (80063e0 <UART_SetConfig+0x2d4>)
 80062f2:	fba3 2301 	umull	r2, r3, r3, r1
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	2264      	movs	r2, #100	; 0x64
 80062fa:	fb02 f303 	mul.w	r3, r2, r3
 80062fe:	1acb      	subs	r3, r1, r3
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006306:	4b36      	ldr	r3, [pc, #216]	; (80063e0 <UART_SetConfig+0x2d4>)
 8006308:	fba3 2302 	umull	r2, r3, r3, r2
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006314:	441c      	add	r4, r3
 8006316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800631a:	2200      	movs	r2, #0
 800631c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006320:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006324:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006328:	4642      	mov	r2, r8
 800632a:	464b      	mov	r3, r9
 800632c:	1891      	adds	r1, r2, r2
 800632e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006330:	415b      	adcs	r3, r3
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006334:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006338:	4641      	mov	r1, r8
 800633a:	1851      	adds	r1, r2, r1
 800633c:	6339      	str	r1, [r7, #48]	; 0x30
 800633e:	4649      	mov	r1, r9
 8006340:	414b      	adcs	r3, r1
 8006342:	637b      	str	r3, [r7, #52]	; 0x34
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	f04f 0300 	mov.w	r3, #0
 800634c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006350:	4659      	mov	r1, fp
 8006352:	00cb      	lsls	r3, r1, #3
 8006354:	4651      	mov	r1, sl
 8006356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800635a:	4651      	mov	r1, sl
 800635c:	00ca      	lsls	r2, r1, #3
 800635e:	4610      	mov	r0, r2
 8006360:	4619      	mov	r1, r3
 8006362:	4603      	mov	r3, r0
 8006364:	4642      	mov	r2, r8
 8006366:	189b      	adds	r3, r3, r2
 8006368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800636c:	464b      	mov	r3, r9
 800636e:	460a      	mov	r2, r1
 8006370:	eb42 0303 	adc.w	r3, r2, r3
 8006374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006384:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006388:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800638c:	460b      	mov	r3, r1
 800638e:	18db      	adds	r3, r3, r3
 8006390:	62bb      	str	r3, [r7, #40]	; 0x28
 8006392:	4613      	mov	r3, r2
 8006394:	eb42 0303 	adc.w	r3, r2, r3
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800639a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800639e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063a2:	f7fa fc51 	bl	8000c48 <__aeabi_uldivmod>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <UART_SetConfig+0x2d4>)
 80063ac:	fba3 1302 	umull	r1, r3, r3, r2
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	2164      	movs	r1, #100	; 0x64
 80063b4:	fb01 f303 	mul.w	r3, r1, r3
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	3332      	adds	r3, #50	; 0x32
 80063be:	4a08      	ldr	r2, [pc, #32]	; (80063e0 <UART_SetConfig+0x2d4>)
 80063c0:	fba2 2303 	umull	r2, r3, r2, r3
 80063c4:	095b      	lsrs	r3, r3, #5
 80063c6:	f003 0207 	and.w	r2, r3, #7
 80063ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4422      	add	r2, r4
 80063d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063d4:	e105      	b.n	80065e2 <UART_SetConfig+0x4d6>
 80063d6:	bf00      	nop
 80063d8:	40011000 	.word	0x40011000
 80063dc:	40011400 	.word	0x40011400
 80063e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063f6:	4642      	mov	r2, r8
 80063f8:	464b      	mov	r3, r9
 80063fa:	1891      	adds	r1, r2, r2
 80063fc:	6239      	str	r1, [r7, #32]
 80063fe:	415b      	adcs	r3, r3
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
 8006402:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006406:	4641      	mov	r1, r8
 8006408:	1854      	adds	r4, r2, r1
 800640a:	4649      	mov	r1, r9
 800640c:	eb43 0501 	adc.w	r5, r3, r1
 8006410:	f04f 0200 	mov.w	r2, #0
 8006414:	f04f 0300 	mov.w	r3, #0
 8006418:	00eb      	lsls	r3, r5, #3
 800641a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800641e:	00e2      	lsls	r2, r4, #3
 8006420:	4614      	mov	r4, r2
 8006422:	461d      	mov	r5, r3
 8006424:	4643      	mov	r3, r8
 8006426:	18e3      	adds	r3, r4, r3
 8006428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800642c:	464b      	mov	r3, r9
 800642e:	eb45 0303 	adc.w	r3, r5, r3
 8006432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006442:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	f04f 0300 	mov.w	r3, #0
 800644e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006452:	4629      	mov	r1, r5
 8006454:	008b      	lsls	r3, r1, #2
 8006456:	4621      	mov	r1, r4
 8006458:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800645c:	4621      	mov	r1, r4
 800645e:	008a      	lsls	r2, r1, #2
 8006460:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006464:	f7fa fbf0 	bl	8000c48 <__aeabi_uldivmod>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4b60      	ldr	r3, [pc, #384]	; (80065f0 <UART_SetConfig+0x4e4>)
 800646e:	fba3 2302 	umull	r2, r3, r3, r2
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	011c      	lsls	r4, r3, #4
 8006476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800647a:	2200      	movs	r2, #0
 800647c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006480:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006484:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006488:	4642      	mov	r2, r8
 800648a:	464b      	mov	r3, r9
 800648c:	1891      	adds	r1, r2, r2
 800648e:	61b9      	str	r1, [r7, #24]
 8006490:	415b      	adcs	r3, r3
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006498:	4641      	mov	r1, r8
 800649a:	1851      	adds	r1, r2, r1
 800649c:	6139      	str	r1, [r7, #16]
 800649e:	4649      	mov	r1, r9
 80064a0:	414b      	adcs	r3, r1
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064b0:	4659      	mov	r1, fp
 80064b2:	00cb      	lsls	r3, r1, #3
 80064b4:	4651      	mov	r1, sl
 80064b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ba:	4651      	mov	r1, sl
 80064bc:	00ca      	lsls	r2, r1, #3
 80064be:	4610      	mov	r0, r2
 80064c0:	4619      	mov	r1, r3
 80064c2:	4603      	mov	r3, r0
 80064c4:	4642      	mov	r2, r8
 80064c6:	189b      	adds	r3, r3, r2
 80064c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064cc:	464b      	mov	r3, r9
 80064ce:	460a      	mov	r2, r1
 80064d0:	eb42 0303 	adc.w	r3, r2, r3
 80064d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80064e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064f0:	4649      	mov	r1, r9
 80064f2:	008b      	lsls	r3, r1, #2
 80064f4:	4641      	mov	r1, r8
 80064f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064fa:	4641      	mov	r1, r8
 80064fc:	008a      	lsls	r2, r1, #2
 80064fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006502:	f7fa fba1 	bl	8000c48 <__aeabi_uldivmod>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4b39      	ldr	r3, [pc, #228]	; (80065f0 <UART_SetConfig+0x4e4>)
 800650c:	fba3 1302 	umull	r1, r3, r3, r2
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	2164      	movs	r1, #100	; 0x64
 8006514:	fb01 f303 	mul.w	r3, r1, r3
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	011b      	lsls	r3, r3, #4
 800651c:	3332      	adds	r3, #50	; 0x32
 800651e:	4a34      	ldr	r2, [pc, #208]	; (80065f0 <UART_SetConfig+0x4e4>)
 8006520:	fba2 2303 	umull	r2, r3, r2, r3
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800652a:	441c      	add	r4, r3
 800652c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006530:	2200      	movs	r2, #0
 8006532:	673b      	str	r3, [r7, #112]	; 0x70
 8006534:	677a      	str	r2, [r7, #116]	; 0x74
 8006536:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800653a:	4642      	mov	r2, r8
 800653c:	464b      	mov	r3, r9
 800653e:	1891      	adds	r1, r2, r2
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	415b      	adcs	r3, r3
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800654a:	4641      	mov	r1, r8
 800654c:	1851      	adds	r1, r2, r1
 800654e:	6039      	str	r1, [r7, #0]
 8006550:	4649      	mov	r1, r9
 8006552:	414b      	adcs	r3, r1
 8006554:	607b      	str	r3, [r7, #4]
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006562:	4659      	mov	r1, fp
 8006564:	00cb      	lsls	r3, r1, #3
 8006566:	4651      	mov	r1, sl
 8006568:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800656c:	4651      	mov	r1, sl
 800656e:	00ca      	lsls	r2, r1, #3
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	4603      	mov	r3, r0
 8006576:	4642      	mov	r2, r8
 8006578:	189b      	adds	r3, r3, r2
 800657a:	66bb      	str	r3, [r7, #104]	; 0x68
 800657c:	464b      	mov	r3, r9
 800657e:	460a      	mov	r2, r1
 8006580:	eb42 0303 	adc.w	r3, r2, r3
 8006584:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	663b      	str	r3, [r7, #96]	; 0x60
 8006590:	667a      	str	r2, [r7, #100]	; 0x64
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800659e:	4649      	mov	r1, r9
 80065a0:	008b      	lsls	r3, r1, #2
 80065a2:	4641      	mov	r1, r8
 80065a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065a8:	4641      	mov	r1, r8
 80065aa:	008a      	lsls	r2, r1, #2
 80065ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065b0:	f7fa fb4a 	bl	8000c48 <__aeabi_uldivmod>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <UART_SetConfig+0x4e4>)
 80065ba:	fba3 1302 	umull	r1, r3, r3, r2
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	2164      	movs	r1, #100	; 0x64
 80065c2:	fb01 f303 	mul.w	r3, r1, r3
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	3332      	adds	r3, #50	; 0x32
 80065cc:	4a08      	ldr	r2, [pc, #32]	; (80065f0 <UART_SetConfig+0x4e4>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	f003 020f 	and.w	r2, r3, #15
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4422      	add	r2, r4
 80065e0:	609a      	str	r2, [r3, #8]
}
 80065e2:	bf00      	nop
 80065e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065e8:	46bd      	mov	sp, r7
 80065ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ee:	bf00      	nop
 80065f0:	51eb851f 	.word	0x51eb851f

080065f4 <setupESC>:
 *
 * @returns None
 */
//1. Setup ESC function
void setupESC(TIM_HandleTypeDef *HTIMx)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(HTIMx);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7fe fbf9 	bl	8004df4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_1);
 8006602:	2100      	movs	r1, #0
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7fe fcbf 	bl	8004f88 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_1, 20000 * 0.04);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006612:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_2);
 8006614:	2104      	movs	r1, #4
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fe fcb6 	bl	8004f88 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_2, 20000 * 0.04);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_3);
 8006626:	2108      	movs	r1, #8
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fe fcad 	bl	8004f88 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_3, 20000 * 0.04);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006636:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(HTIMx, TIM_CHANNEL_4);
 8006638:	210c      	movs	r1, #12
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fe fca4 	bl	8004f88 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_4, 20000 * 0.04);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006648:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(2000);
 800664a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800664e:	f7fb febb 	bl	80023c8 <HAL_Delay>
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <ESC_Control>:
 *
 * @returns None
 */
//2. ESC control function
void ESC_Control(TIM_HandleTypeDef *HTIMx, uint16_t Duty1,uint16_t Duty2,uint16_t Duty3,uint16_t Duty4)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	4608      	mov	r0, r1
 8006664:	4611      	mov	r1, r2
 8006666:	461a      	mov	r2, r3
 8006668:	4603      	mov	r3, r0
 800666a:	817b      	strh	r3, [r7, #10]
 800666c:	460b      	mov	r3, r1
 800666e:	813b      	strh	r3, [r7, #8]
 8006670:	4613      	mov	r3, r2
 8006672:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_1, Duty1); // 1000 to 2000
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	897a      	ldrh	r2, [r7, #10]
 800667a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_2, Duty2); // 1000 to 2000
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	893a      	ldrh	r2, [r7, #8]
 8006682:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_3, Duty3); // 1000 to 2000
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	88fa      	ldrh	r2, [r7, #6]
 800668a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(HTIMx, TIM_CHANNEL_4, Duty4); // 1000 to 2000
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	8b3a      	ldrh	r2, [r7, #24]
 8006692:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006694:	bf00      	nop
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <MPU6050_Init>:
 *
 * @returns 0 if initialization is successful, 1 otherwise.
 */
//1. Init MPU6050 sensor function
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af04      	add	r7, sp, #16
 80066a6:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &check, 1, TIMEOUT);
 80066a8:	2364      	movs	r3, #100	; 0x64
 80066aa:	9302      	str	r3, [sp, #8]
 80066ac:	2301      	movs	r3, #1
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	f107 030f 	add.w	r3, r7, #15
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	2301      	movs	r3, #1
 80066b8:	2275      	movs	r2, #117	; 0x75
 80066ba:	21d0      	movs	r1, #208	; 0xd0
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fc fbc7 	bl	8002e50 <HAL_I2C_Mem_Read>
	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	2b68      	cmp	r3, #104	; 0x68
 80066c6:	d15b      	bne.n	8006780 <MPU6050_Init+0xe0>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up, gyroscope based clock
		Data = MPU6050_WAKEUP << 6 | MPU6050_CLKSEL_PLLX;
 80066c8:	2301      	movs	r3, #1
 80066ca:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &Data, 1, TIMEOUT);
 80066cc:	2364      	movs	r3, #100	; 0x64
 80066ce:	9302      	str	r3, [sp, #8]
 80066d0:	2301      	movs	r3, #1
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	f107 030e 	add.w	r3, r7, #14
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	2301      	movs	r3, #1
 80066dc:	226b      	movs	r2, #107	; 0x6b
 80066de:	21d0      	movs	r1, #208	; 0xd0
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7fc fabb 	bl	8002c5c <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = MPU6050_SMPLRT_DIV_1;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_SMPLRT_DIV, 1, &Data, 1, TIMEOUT);
 80066ea:	2364      	movs	r3, #100	; 0x64
 80066ec:	9302      	str	r3, [sp, #8]
 80066ee:	2301      	movs	r3, #1
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	f107 030e 	add.w	r3, r7, #14
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	2301      	movs	r3, #1
 80066fa:	2219      	movs	r2, #25
 80066fc:	21d0      	movs	r1, #208	; 0xd0
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fc faac 	bl	8002c5c <HAL_I2C_Mem_Write>

		// This register configures the external Frame Synchronization (FSYNC) pin sampling
		// the Digital Low Pass Filter (DLPF) setting for both the gyroscopes and accelerometers
		Data = MPU6050_EXT_SYNC_SET << 3 | MPU6050_DLPF_CFG;
 8006704:	2301      	movs	r3, #1
 8006706:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_CONFIG, 1, &Data, 1, TIMEOUT);
 8006708:	2364      	movs	r3, #100	; 0x64
 800670a:	9302      	str	r3, [sp, #8]
 800670c:	2301      	movs	r3, #1
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	f107 030e 	add.w	r3, r7, #14
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	2301      	movs	r3, #1
 8006718:	221a      	movs	r2, #26
 800671a:	21d0      	movs	r1, #208	; 0xd0
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7fc fa9d 	bl	8002c5c <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> +- 2000 degree/s
		Data = MPU6050_FS_SEL_2000 << 3 | 0x00;
 8006722:	2318      	movs	r3, #24
 8006724:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, &Data, 1, TIMEOUT);
 8006726:	2364      	movs	r3, #100	; 0x64
 8006728:	9302      	str	r3, [sp, #8]
 800672a:	2301      	movs	r3, #1
 800672c:	9301      	str	r3, [sp, #4]
 800672e:	f107 030e 	add.w	r3, r7, #14
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	2301      	movs	r3, #1
 8006736:	221b      	movs	r2, #27
 8006738:	21d0      	movs	r1, #208	; 0xd0
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fc fa8e 	bl	8002c5c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> +- 2g
		Data = MPU6050_AFS_SEL_2 << 3 | 0x00;
 8006740:	2300      	movs	r3, #0
 8006742:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1, &Data, 1, TIMEOUT);
 8006744:	2364      	movs	r3, #100	; 0x64
 8006746:	9302      	str	r3, [sp, #8]
 8006748:	2301      	movs	r3, #1
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	f107 030e 	add.w	r3, r7, #14
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	2301      	movs	r3, #1
 8006754:	221c      	movs	r2, #28
 8006756:	21d0      	movs	r1, #208	; 0xd0
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fc fa7f 	bl	8002c5c <HAL_I2C_Mem_Write>

		// sets the I2C master clock speed
		Data = MPU6050_I2C_MST_CLK_400;
 800675e:	230d      	movs	r3, #13
 8006760:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_MST_CTRL, 1, &Data, 1, TIMEOUT);
 8006762:	2364      	movs	r3, #100	; 0x64
 8006764:	9302      	str	r3, [sp, #8]
 8006766:	2301      	movs	r3, #1
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	f107 030e 	add.w	r3, r7, #14
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	2301      	movs	r3, #1
 8006772:	2224      	movs	r2, #36	; 0x24
 8006774:	21d0      	movs	r1, #208	; 0xd0
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fc fa70 	bl	8002c5c <HAL_I2C_Mem_Write>
		return 0;
 800677c:	2300      	movs	r3, #0
 800677e:	e000      	b.n	8006782 <MPU6050_Init+0xe2>
	}
	return 1;
 8006780:	2301      	movs	r3, #1
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <MPU6050_Bypass>:
 *
 * @returns None
 */
//2.Enable Bypass MPU6050 function
void MPU6050_Bypass(I2C_HandleTypeDef *I2Cx)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b088      	sub	sp, #32
 800678e:	af04      	add	r7, sp, #16
 8006790:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// disable i2c master mode
	Data = 0x00;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_USER_CTRL, 1, &Data, 1, TIMEOUT);
 8006796:	2364      	movs	r3, #100	; 0x64
 8006798:	9302      	str	r3, [sp, #8]
 800679a:	2301      	movs	r3, #1
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	f107 030f 	add.w	r3, r7, #15
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	2301      	movs	r3, #1
 80067a6:	226a      	movs	r2, #106	; 0x6a
 80067a8:	21d0      	movs	r1, #208	; 0xd0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fc fa56 	bl	8002c5c <HAL_I2C_Mem_Write>
	// enable i2c master bypass mode
	Data = 0x02;
 80067b0:	2302      	movs	r3, #2
 80067b2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_INT_PIN_CFG, 1, &Data, 1, TIMEOUT);
 80067b4:	2364      	movs	r3, #100	; 0x64
 80067b6:	9302      	str	r3, [sp, #8]
 80067b8:	2301      	movs	r3, #1
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	f107 030f 	add.w	r3, r7, #15
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	2301      	movs	r3, #1
 80067c4:	2237      	movs	r2, #55	; 0x37
 80067c6:	21d0      	movs	r1, #208	; 0xd0
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7fc fa47 	bl	8002c5c <HAL_I2C_Mem_Write>
}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <MPU6050_Master>:
 *
 * @returns None
 */
//3. Enable Master MPU6050 function
void MPU6050_Master(I2C_HandleTypeDef *I2Cx)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b088      	sub	sp, #32
 80067da:	af04      	add	r7, sp, #16
 80067dc:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// disable i2c master bypass mode
	Data = 0x00;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_INT_PIN_CFG, 1, &Data, 1, TIMEOUT);
 80067e2:	2364      	movs	r3, #100	; 0x64
 80067e4:	9302      	str	r3, [sp, #8]
 80067e6:	2301      	movs	r3, #1
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	f107 030f 	add.w	r3, r7, #15
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	2301      	movs	r3, #1
 80067f2:	2237      	movs	r2, #55	; 0x37
 80067f4:	21d0      	movs	r1, #208	; 0xd0
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fc fa30 	bl	8002c5c <HAL_I2C_Mem_Write>
	// enable i2c master mode
	Data = 0x20;
 80067fc:	2320      	movs	r3, #32
 80067fe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_USER_CTRL, 1, &Data, 1, TIMEOUT);
 8006800:	2364      	movs	r3, #100	; 0x64
 8006802:	9302      	str	r3, [sp, #8]
 8006804:	2301      	movs	r3, #1
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	f107 030f 	add.w	r3, r7, #15
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	2301      	movs	r3, #1
 8006810:	226a      	movs	r2, #106	; 0x6a
 8006812:	21d0      	movs	r1, #208	; 0xd0
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7fc fa21 	bl	8002c5c <HAL_I2C_Mem_Write>
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <MPU6050_Addslave>:
 *
 * @returns None
 */
//4. Configure the MPU6050 to automatically read the magnetometer
void MPU6050_Addslave(I2C_HandleTypeDef *I2Cx)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b088      	sub	sp, #32
 8006826:	af04      	add	r7, sp, #16
 8006828:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// slave 0 i2c address, read mode
	Data = HMC5883L_ADDRESS | 0x80;
 800682a:	239e      	movs	r3, #158	; 0x9e
 800682c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_SLV0_ADDR, 1, &Data, 1, TIMEOUT);
 800682e:	2364      	movs	r3, #100	; 0x64
 8006830:	9302      	str	r3, [sp, #8]
 8006832:	2301      	movs	r3, #1
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	f107 030f 	add.w	r3, r7, #15
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	2301      	movs	r3, #1
 800683e:	2225      	movs	r2, #37	; 0x25
 8006840:	21d0      	movs	r1, #208	; 0xd0
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7fc fa0a 	bl	8002c5c <HAL_I2C_Mem_Write>
	// slave 0 register = 0x03 (x axis)
	Data = HMC5883L_DATAX_H;
 8006848:	2303      	movs	r3, #3
 800684a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_SLV0_REG, 1, &Data, 1, TIMEOUT);
 800684c:	2364      	movs	r3, #100	; 0x64
 800684e:	9302      	str	r3, [sp, #8]
 8006850:	2301      	movs	r3, #1
 8006852:	9301      	str	r3, [sp, #4]
 8006854:	f107 030f 	add.w	r3, r7, #15
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	2301      	movs	r3, #1
 800685c:	2226      	movs	r2, #38	; 0x26
 800685e:	21d0      	movs	r1, #208	; 0xd0
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7fc f9fb 	bl	8002c5c <HAL_I2C_Mem_Write>
	// slave 0 transfer size = 6, enabled
	Data = 0x06 | 0x80;
 8006866:	2386      	movs	r3, #134	; 0x86
 8006868:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_SLV0_CTRL, 1, &Data, 1, TIMEOUT);
 800686a:	2364      	movs	r3, #100	; 0x64
 800686c:	9302      	str	r3, [sp, #8]
 800686e:	2301      	movs	r3, #1
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	f107 030f 	add.w	r3, r7, #15
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	2301      	movs	r3, #1
 800687a:	2227      	movs	r2, #39	; 0x27
 800687c:	21d0      	movs	r1, #208	; 0xd0
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fc f9ec 	bl	8002c5c <HAL_I2C_Mem_Write>
	// enable slave 0 delay
	Data = MPU6050_I2C_SLV0_DLY_EN;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_I2C_MST_DELAY_CTRL, 1, &Data, 1, TIMEOUT);
 8006888:	2364      	movs	r3, #100	; 0x64
 800688a:	9302      	str	r3, [sp, #8]
 800688c:	2301      	movs	r3, #1
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	f107 030f 	add.w	r3, r7, #15
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	2301      	movs	r3, #1
 8006898:	2267      	movs	r2, #103	; 0x67
 800689a:	21d0      	movs	r1, #208	; 0xd0
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7fc f9dd 	bl	8002c5c <HAL_I2C_Mem_Write>
}
 80068a2:	bf00      	nop
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	0000      	movs	r0, r0
 80068ac:	0000      	movs	r0, r0
	...

080068b0 <MPU6050_Read_All>:
 *
 * @returns None
 */
//5. Read data from MPU6050
void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08c      	sub	sp, #48	; 0x30
 80068b4:	af04      	add	r7, sp, #16
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[20];

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, Rec_Data, 20, TIMEOUT);
 80068ba:	2364      	movs	r3, #100	; 0x64
 80068bc:	9302      	str	r3, [sp, #8]
 80068be:	2314      	movs	r3, #20
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	f107 030c 	add.w	r3, r7, #12
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	2301      	movs	r3, #1
 80068ca:	223b      	movs	r2, #59	; 0x3b
 80068cc:	21d0      	movs	r1, #208	; 0xd0
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fc fabe 	bl	8002e50 <HAL_I2C_Mem_Read>

	DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80068d4:	7b3b      	ldrb	r3, [r7, #12]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	b21a      	sxth	r2, r3
 80068da:	7b7b      	ldrb	r3, [r7, #13]
 80068dc:	b21b      	sxth	r3, r3
 80068de:	4313      	orrs	r3, r2
 80068e0:	b21a      	sxth	r2, r3
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80068e6:	7bbb      	ldrb	r3, [r7, #14]
 80068e8:	021b      	lsls	r3, r3, #8
 80068ea:	b21a      	sxth	r2, r3
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	b21b      	sxth	r3, r3
 80068f0:	4313      	orrs	r3, r2
 80068f2:	b21a      	sxth	r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80068f8:	7c3b      	ldrb	r3, [r7, #16]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	b21a      	sxth	r2, r3
 80068fe:	7c7b      	ldrb	r3, [r7, #17]
 8006900:	b21b      	sxth	r3, r3
 8006902:	4313      	orrs	r3, r2
 8006904:	b21a      	sxth	r2, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	809a      	strh	r2, [r3, #4]

	//DataStruct->Temp_RAW = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);

	DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800690a:	7d3b      	ldrb	r3, [r7, #20]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	b21a      	sxth	r2, r3
 8006910:	7d7b      	ldrb	r3, [r7, #21]
 8006912:	b21b      	sxth	r3, r3
 8006914:	4313      	orrs	r3, r2
 8006916:	b21a      	sxth	r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800691c:	7dbb      	ldrb	r3, [r7, #22]
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	b21a      	sxth	r2, r3
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	b21b      	sxth	r3, r3
 8006926:	4313      	orrs	r3, r2
 8006928:	b21a      	sxth	r2, r3
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800692e:	7e3b      	ldrb	r3, [r7, #24]
 8006930:	021b      	lsls	r3, r3, #8
 8006932:	b21a      	sxth	r2, r3
 8006934:	7e7b      	ldrb	r3, [r7, #25]
 8006936:	b21b      	sxth	r3, r3
 8006938:	4313      	orrs	r3, r2
 800693a:	b21a      	sxth	r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	831a      	strh	r2, [r3, #24]

	DataStruct->Magn_X_RAW = (int16_t)(Rec_Data[14] << 8 | Rec_Data[15]);
 8006940:	7ebb      	ldrb	r3, [r7, #26]
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	b21a      	sxth	r2, r3
 8006946:	7efb      	ldrb	r3, [r7, #27]
 8006948:	b21b      	sxth	r3, r3
 800694a:	4313      	orrs	r3, r2
 800694c:	b21a      	sxth	r2, r3
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	851a      	strh	r2, [r3, #40]	; 0x28
	DataStruct->Magn_Z_RAW = (int16_t)(Rec_Data[16] << 8 | Rec_Data[17]);
 8006952:	7f3b      	ldrb	r3, [r7, #28]
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	b21a      	sxth	r2, r3
 8006958:	7f7b      	ldrb	r3, [r7, #29]
 800695a:	b21b      	sxth	r3, r3
 800695c:	4313      	orrs	r3, r2
 800695e:	b21a      	sxth	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Magn_Y_RAW = (int16_t)(Rec_Data[18] << 8 | Rec_Data[19]);
 8006964:	7fbb      	ldrb	r3, [r7, #30]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	b21a      	sxth	r2, r3
 800696a:	7ffb      	ldrb	r3, [r7, #31]
 800696c:	b21b      	sxth	r3, r3
 800696e:	4313      	orrs	r3, r2
 8006970:	b21a      	sxth	r2, r3
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	855a      	strh	r2, [r3, #42]	; 0x2a

	DataStruct->Ax = DataStruct->Accel_X_RAW / MPU6050_ACCE_SENS_2;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006984:	eddf 6a56 	vldr	s13, [pc, #344]	; 8006ae0 <MPU6050_Read_All+0x230>
 8006988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / MPU6050_ACCE_SENS_2;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006998:	ee07 3a90 	vmov	s15, r3
 800699c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069a0:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ae0 <MPU6050_Read_All+0x230>
 80069a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Accel_Z_RAW / MPU6050_ACCE_SENS_2;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80069b4:	ee07 3a90 	vmov	s15, r3
 80069b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069bc:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006ae0 <MPU6050_Read_All+0x230>
 80069c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	edc3 7a04 	vstr	s15, [r3, #16]

	//DataStruct->Temperature = DataStruct->Temp_RAW / 340.0 + 36.53;

	DataStruct->Gx = DataStruct->Gyro_X_RAW / MPU6050_GYRO_SENS_2000 * DEG_TO_RAD;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80069d0:	ee07 3a90 	vmov	s15, r3
 80069d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069d8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006ae4 <MPU6050_Read_All+0x234>
 80069dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80069e0:	ee16 0a90 	vmov	r0, s13
 80069e4:	f7f9 fdb0 	bl	8000548 <__aeabi_f2d>
 80069e8:	a33b      	add	r3, pc, #236	; (adr r3, 8006ad8 <MPU6050_Read_All+0x228>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f7f9 fe03 	bl	80005f8 <__aeabi_dmul>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	f7fa f8d5 	bl	8000ba8 <__aeabi_d2f>
 80069fe:	4602      	mov	r2, r0
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	61da      	str	r2, [r3, #28]
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / MPU6050_GYRO_SENS_2000 * DEG_TO_RAD;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a12:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006ae4 <MPU6050_Read_All+0x234>
 8006a16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a1a:	ee16 0a90 	vmov	r0, s13
 8006a1e:	f7f9 fd93 	bl	8000548 <__aeabi_f2d>
 8006a22:	a32d      	add	r3, pc, #180	; (adr r3, 8006ad8 <MPU6050_Read_All+0x228>)
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f7f9 fde6 	bl	80005f8 <__aeabi_dmul>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4610      	mov	r0, r2
 8006a32:	4619      	mov	r1, r3
 8006a34:	f7fa f8b8 	bl	8000ba8 <__aeabi_d2f>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	621a      	str	r2, [r3, #32]
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / MPU6050_GYRO_SENS_2000 * DEG_TO_RAD;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006a44:	ee07 3a90 	vmov	s15, r3
 8006a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a4c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006ae4 <MPU6050_Read_All+0x234>
 8006a50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a54:	ee16 0a90 	vmov	r0, s13
 8006a58:	f7f9 fd76 	bl	8000548 <__aeabi_f2d>
 8006a5c:	a31e      	add	r3, pc, #120	; (adr r3, 8006ad8 <MPU6050_Read_All+0x228>)
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	f7f9 fdc9 	bl	80005f8 <__aeabi_dmul>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	f7fa f89b 	bl	8000ba8 <__aeabi_d2f>
 8006a72:	4602      	mov	r2, r0
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	625a      	str	r2, [r3, #36]	; 0x24

	DataStruct->Mx = DataStruct->Magn_X_RAW / HMC5883L_MAGN_SENS_1P3;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a86:	eddf 6a18 	vldr	s13, [pc, #96]	; 8006ae8 <MPU6050_Read_All+0x238>
 8006a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->My = DataStruct->Magn_Y_RAW / HMC5883L_MAGN_SENS_1P3;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006aa2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8006ae8 <MPU6050_Read_All+0x238>
 8006aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Mz = DataStruct->Magn_Z_RAW / HMC5883L_MAGN_SENS_1P3;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006abe:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006ae8 <MPU6050_Read_All+0x238>
 8006ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8006acc:	bf00      	nop
 8006ace:	3720      	adds	r7, #32
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	f3af 8000 	nop.w
 8006ad8:	a252dd11 	.word	0xa252dd11
 8006adc:	3f91df46 	.word	0x3f91df46
 8006ae0:	46800000 	.word	0x46800000
 8006ae4:	41833333 	.word	0x41833333
 8006ae8:	44884000 	.word	0x44884000

08006aec <HMC5883L_Init>:
 *
 * @returns None
 */
//6. Init HMC5883L sensor
void HMC5883L_Init(I2C_HandleTypeDef *I2Cx)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af04      	add	r7, sp, #16
 8006af2:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	// write CONFIG_A register
	Data = HMC5883L_AVERAGING_1 << 5 | HMC5883L_RATE_75 << 2 | HMC5883L_BIAS_NORMAL;
 8006af4:	2318      	movs	r3, #24
 8006af6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDR, HMC5883L_CONFIG_A, 1, &Data, 1, TIMEOUT);
 8006af8:	2364      	movs	r3, #100	; 0x64
 8006afa:	9302      	str	r3, [sp, #8]
 8006afc:	2301      	movs	r3, #1
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	f107 030f 	add.w	r3, r7, #15
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	2301      	movs	r3, #1
 8006b08:	2200      	movs	r2, #0
 8006b0a:	213c      	movs	r1, #60	; 0x3c
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7fc f8a5 	bl	8002c5c <HAL_I2C_Mem_Write>
	// write CONFIG_B register
	Data = HMC5883L_SEL_1P3 << 5 | 0x00;
 8006b12:	2320      	movs	r3, #32
 8006b14:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDR, HMC5883L_CONFIG_B, 1, &Data, 1, TIMEOUT);
 8006b16:	2364      	movs	r3, #100	; 0x64
 8006b18:	9302      	str	r3, [sp, #8]
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	f107 030f 	add.w	r3, r7, #15
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	2301      	movs	r3, #1
 8006b26:	2201      	movs	r2, #1
 8006b28:	213c      	movs	r1, #60	; 0x3c
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fc f896 	bl	8002c5c <HAL_I2C_Mem_Write>
	// write MODE register
	Data = HMC5883L_MODE_CONTINUOUS;
 8006b30:	2300      	movs	r3, #0
 8006b32:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDR, HMC5883L_MODE, 1, &Data, 1, TIMEOUT);
 8006b34:	2364      	movs	r3, #100	; 0x64
 8006b36:	9302      	str	r3, [sp, #8]
 8006b38:	2301      	movs	r3, #1
 8006b3a:	9301      	str	r3, [sp, #4]
 8006b3c:	f107 030f 	add.w	r3, r7, #15
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	2301      	movs	r3, #1
 8006b44:	2202      	movs	r2, #2
 8006b46:	213c      	movs	r1, #60	; 0x3c
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7fc f887 	bl	8002c5c <HAL_I2C_Mem_Write>
}
 8006b4e:	bf00      	nop
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <MS5611_Rest>:
 *
 * @returns None
 */
//7. Reset MS5611 sensor
void MS5611_Rest(I2C_HandleTypeDef *I2Cx)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b088      	sub	sp, #32
 8006b5a:	af04      	add	r7, sp, #16
 8006b5c:	6078      	str	r0, [r7, #4]
	uint8_t Data;

	Data = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MS5611_ADDR, MS5611_CMD_REST, 1, &Data, 1, TIMEOUT);
 8006b62:	2364      	movs	r3, #100	; 0x64
 8006b64:	9302      	str	r3, [sp, #8]
 8006b66:	2301      	movs	r3, #1
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	f107 030f 	add.w	r3, r7, #15
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	2301      	movs	r3, #1
 8006b72:	221e      	movs	r2, #30
 8006b74:	21ee      	movs	r1, #238	; 0xee
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fc f870 	bl	8002c5c <HAL_I2C_Mem_Write>
	HAL_Delay(4);
 8006b7c:	2004      	movs	r0, #4
 8006b7e:	f7fb fc23 	bl	80023c8 <HAL_Delay>
}
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <MS5611_PROM_read>:
 *
 * @returns MS5611_OK if the operation was successful.
 */
//8. Read PROM from MS5611 sensor
uint8_t MS5611_PROM_read(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08a      	sub	sp, #40	; 0x28
 8006b90:	af04      	add	r7, sp, #16
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint8_t data[2];
	uint8_t PROM[8] = {	MS5611_PROM_READ_0,
 8006b96:	4a32      	ldr	r2, [pc, #200]	; (8006c60 <MS5611_PROM_read+0xd4>)
 8006b98:	f107 030c 	add.w	r3, r7, #12
 8006b9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ba0:	e883 0003 	stmia.w	r3, {r0, r1}
						MS5611_PROM_READ_4,
						MS5611_PROM_READ_5,
						MS5611_PROM_READ_6,
						MS5611_PROM_READ_7};
	//Address 0 contains factory data and the setup
	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, PROM[0], 1, data, 2, TIMEOUT);
 8006ba4:	7b3b      	ldrb	r3, [r7, #12]
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	2364      	movs	r3, #100	; 0x64
 8006baa:	9302      	str	r3, [sp, #8]
 8006bac:	2302      	movs	r3, #2
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	f107 0314 	add.w	r3, r7, #20
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	21ee      	movs	r1, #238	; 0xee
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7fc f948 	bl	8002e50 <HAL_I2C_Mem_Read>
	datastruct->reserve = (uint16_t)(data[0] << 8 | data[1]);
 8006bc0:	7d3b      	ldrb	r3, [r7, #20]
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	b21a      	sxth	r2, r3
 8006bc6:	7d7b      	ldrb	r3, [r7, #21]
 8006bc8:	b21b      	sxth	r3, r3
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	b21b      	sxth	r3, r3
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	819a      	strh	r2, [r3, #12]
	// Addresses 1-6 calibration coefficients
	for (i = 1; i < 7; i++)
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	75fb      	strb	r3, [r7, #23]
 8006bd8:	e021      	b.n	8006c1e <MS5611_PROM_read+0x92>
	{
		HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, PROM[i], 1, data, 2, TIMEOUT);
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	3318      	adds	r3, #24
 8006bde:	443b      	add	r3, r7
 8006be0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	2364      	movs	r3, #100	; 0x64
 8006be8:	9302      	str	r3, [sp, #8]
 8006bea:	2302      	movs	r3, #2
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	f107 0314 	add.w	r3, r7, #20
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	21ee      	movs	r1, #238	; 0xee
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7fc f929 	bl	8002e50 <HAL_I2C_Mem_Read>
		datastruct->C[i - 1] = (uint16_t)(data[0] << 8 | data[1]);
 8006bfe:	7d3b      	ldrb	r3, [r7, #20]
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	b21a      	sxth	r2, r3
 8006c04:	7d7b      	ldrb	r3, [r7, #21]
 8006c06:	b21b      	sxth	r3, r3
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	b219      	sxth	r1, r3
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
 8006c0e:	1e5a      	subs	r2, r3, #1
 8006c10:	b289      	uxth	r1, r1
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 1; i < 7; i++)
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	75fb      	strb	r3, [r7, #23]
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	2b06      	cmp	r3, #6
 8006c22:	d9da      	bls.n	8006bda <MS5611_PROM_read+0x4e>
	}
	//Address 7 contains the serial code and CRC
	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, PROM[7], 1, data, 2, TIMEOUT);
 8006c24:	7cfb      	ldrb	r3, [r7, #19]
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	2364      	movs	r3, #100	; 0x64
 8006c2a:	9302      	str	r3, [sp, #8]
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	f107 0314 	add.w	r3, r7, #20
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	2301      	movs	r3, #1
 8006c38:	21ee      	movs	r1, #238	; 0xee
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fc f908 	bl	8002e50 <HAL_I2C_Mem_Read>
	datastruct->crc = (uint16_t)(data[0] << 8 | data[1]);
 8006c40:	7d3b      	ldrb	r3, [r7, #20]
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	b21a      	sxth	r2, r3
 8006c46:	7d7b      	ldrb	r3, [r7, #21]
 8006c48:	b21b      	sxth	r3, r3
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	b21b      	sxth	r3, r3
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	81da      	strh	r2, [r3, #14]

	return MS5611_OK;
 8006c54:	2301      	movs	r3, #1
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	0800bb84 	.word	0x0800bb84

08006c64 <MS5611_init>:
 *
 * @returns MS5611_OK if initialization is successful.
 */
//9. Init MS5611 sensor
uint8_t MS5611_init(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
	MS5611_Rest(I2Cx);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff ff71 	bl	8006b56 <MS5611_Rest>
	MS5611_PROM_read(I2Cx, datastruct);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7ff ff88 	bl	8006b8c <MS5611_PROM_read>
	return MS5611_OK;
 8006c7c:	2301      	movs	r3, #1
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <MS5611_read_temp>:
 *
 * @returns MS5611_OK if the temperature was successfully read.
 */
//10. Read temp from MS5611 sensor
uint8_t MS5611_read_temp(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b088      	sub	sp, #32
 8006c8a:	af04      	add	r7, sp, #16
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
	uint8_t data[3];
	uint8_t Data;

	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, MS6511_ADC_READ, 1, data, 3, TIMEOUT);
 8006c90:	2364      	movs	r3, #100	; 0x64
 8006c92:	9302      	str	r3, [sp, #8]
 8006c94:	2303      	movs	r3, #3
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	f107 030c 	add.w	r3, r7, #12
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	21ee      	movs	r1, #238	; 0xee
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7fc f8d3 	bl	8002e50 <HAL_I2C_Mem_Read>
	datastruct->D[1] = (data[0] << 16 | data[1] << 8 | data[2]);
 8006caa:	7b3b      	ldrb	r3, [r7, #12]
 8006cac:	041a      	lsls	r2, r3, #16
 8006cae:	7b7b      	ldrb	r3, [r7, #13]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	7bba      	ldrb	r2, [r7, #14]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	461a      	mov	r2, r3
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	615a      	str	r2, [r3, #20]
	Data = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(I2Cx, MS5611_ADDR, MS5611_CMD_CONVERT_D1_2048, 1, &Data, 1, TIMEOUT);// delay 4.13ms read press
 8006cc2:	2364      	movs	r3, #100	; 0x64
 8006cc4:	9302      	str	r3, [sp, #8]
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	f107 030b 	add.w	r3, r7, #11
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	2246      	movs	r2, #70	; 0x46
 8006cd4:	21ee      	movs	r1, #238	; 0xee
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fb ffc0 	bl	8002c5c <HAL_I2C_Mem_Write>
	return MS5611_OK;
 8006cdc:	2301      	movs	r3, #1
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <MS5611_read_press>:
 *
 * @returns MS5611_OK if the operation was successful.
 */
//11. Read pressure from MS5611 sensor
uint8_t MS5611_read_press(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b088      	sub	sp, #32
 8006cea:	af04      	add	r7, sp, #16
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
	uint8_t data[3];
	uint8_t Data;
	
	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR, MS6511_ADC_READ, 1, data, 3, TIMEOUT);
 8006cf0:	2364      	movs	r3, #100	; 0x64
 8006cf2:	9302      	str	r3, [sp, #8]
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	f107 030c 	add.w	r3, r7, #12
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	2301      	movs	r3, #1
 8006d00:	2200      	movs	r2, #0
 8006d02:	21ee      	movs	r1, #238	; 0xee
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fc f8a3 	bl	8002e50 <HAL_I2C_Mem_Read>
	datastruct->D[0] = (data[0] << 16 | data[1] << 8 | data[2]);
 8006d0a:	7b3b      	ldrb	r3, [r7, #12]
 8006d0c:	041a      	lsls	r2, r3, #16
 8006d0e:	7b7b      	ldrb	r3, [r7, #13]
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	4313      	orrs	r3, r2
 8006d14:	7bba      	ldrb	r2, [r7, #14]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	611a      	str	r2, [r3, #16]
	Data = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(I2Cx, MS5611_ADDR, MS5611_CMD_CONVERT_D2_2048, 1, &Data, 1, TIMEOUT);// delay 4.13ms read temp
 8006d22:	2364      	movs	r3, #100	; 0x64
 8006d24:	9302      	str	r3, [sp, #8]
 8006d26:	2301      	movs	r3, #1
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	f107 030b 	add.w	r3, r7, #11
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	2301      	movs	r3, #1
 8006d32:	2256      	movs	r2, #86	; 0x56
 8006d34:	21ee      	movs	r1, #238	; 0xee
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fb ff90 	bl	8002c5c <HAL_I2C_Mem_Write>
	return MS5611_OK;
 8006d3c:	2301      	movs	r3, #1
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <MS5611_calculate>:
 *
 * @returns MS5611_OK if the operation was successful.
 */
//12. Caculator pressure
uint8_t MS5611_calculate(I2C_HandleTypeDef *I2Cx, MS5611_t *datastruct)
{
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	b0e1      	sub	sp, #388	; 0x184
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8006d54:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
	static int time = 0;
	static int8_t mode = 0;
	int64_t dT = 0, TEMP = 0, T2 = 0, OFF = 0, OFF2 = 0, SENS2 = 0, SENS = 0, PRES = 0;
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
 8006da0:	f04f 0200 	mov.w	r2, #0
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	time++;
 8006db8:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <MS5611_calculate+0xa8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <MS5611_calculate+0xa8>)
 8006dc0:	601a      	str	r2, [r3, #0]
	if(time>2)
 8006dc2:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <MS5611_calculate+0xa8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	f340 8334 	ble.w	8007434 <MS5611_calculate+0x6ec>
	{
	time = 0;
 8006dcc:	4a08      	ldr	r2, [pc, #32]	; (8006df0 <MS5611_calculate+0xa8>)
 8006dce:	2300      	movs	r3, #0
 8006dd0:	6013      	str	r3, [r2, #0]
	if (mode)
 8006dd2:	4b08      	ldr	r3, [pc, #32]	; (8006df4 <MS5611_calculate+0xac>)
 8006dd4:	f993 3000 	ldrsb.w	r3, [r3]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00d      	beq.n	8006df8 <MS5611_calculate+0xb0>
	{
		MS5611_read_temp(I2Cx,datastruct);
 8006ddc:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8006de0:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006de4:	f7ff ff4f 	bl	8006c86 <MS5611_read_temp>
		mode = 0;
 8006de8:	4a02      	ldr	r2, [pc, #8]	; (8006df4 <MS5611_calculate+0xac>)
 8006dea:	2300      	movs	r3, #0
 8006dec:	7013      	strb	r3, [r2, #0]
 8006dee:	e00c      	b.n	8006e0a <MS5611_calculate+0xc2>
 8006df0:	2000052c 	.word	0x2000052c
 8006df4:	20000530 	.word	0x20000530
	}
	else 
	{
		MS5611_read_press(I2Cx,datastruct);
 8006df8:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8006dfc:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006e00:	f7ff ff71 	bl	8006ce6 <MS5611_read_press>
		mode = 1;
 8006e04:	4ad5      	ldr	r2, [pc, #852]	; (800715c <MS5611_calculate+0x414>)
 8006e06:	2301      	movs	r3, #1
 8006e08:	7013      	strb	r3, [r2, #0]
	}
	if(mode == 0)
 8006e0a:	4bd4      	ldr	r3, [pc, #848]	; (800715c <MS5611_calculate+0x414>)
 8006e0c:	f993 3000 	ldrsb.w	r3, [r3]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 830f 	bne.w	8007434 <MS5611_calculate+0x6ec>
	{
	dT = datastruct->D[1] - ((int32_t)(datastruct->C[4]) << 8);
 8006e16:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006e1a:	695a      	ldr	r2, [r3, #20]
 8006e1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006e20:	891b      	ldrh	r3, [r3, #8]
 8006e22:	021b      	lsls	r3, r3, #8
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2200      	movs	r2, #0
 8006e28:	663b      	str	r3, [r7, #96]	; 0x60
 8006e2a:	667a      	str	r2, [r7, #100]	; 0x64
 8006e2c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006e30:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	TEMP = 2000 + ((int32_t)(dT * (datastruct->C[5])) >> 23);
 8006e34:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8006e38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006e3c:	895b      	ldrh	r3, [r3, #10]
 8006e3e:	fb02 f303 	mul.w	r3, r2, r3
 8006e42:	15db      	asrs	r3, r3, #23
 8006e44:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006e48:	17da      	asrs	r2, r3, #31
 8006e4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e4c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006e4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e52:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	OFF = (((int64_t)(datastruct->C[1])) << 16) + (((datastruct->C[3]) * dT) >> 7);
 8006e56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006e5a:	885b      	ldrh	r3, [r3, #2]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e64:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006e68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	0c1b      	lsrs	r3, r3, #16
 8006e70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e74:	460b      	mov	r3, r1
 8006e76:	041b      	lsls	r3, r3, #16
 8006e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006e80:	88db      	ldrh	r3, [r3, #6]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2200      	movs	r2, #0
 8006e86:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006e8a:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8006e8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006e92:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8006e96:	460a      	mov	r2, r1
 8006e98:	fb02 f203 	mul.w	r2, r2, r3
 8006e9c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006ea0:	e9c7 014c 	strd	r0, r1, [r7, #304]	; 0x130
 8006ea4:	4601      	mov	r1, r0
 8006ea6:	fb01 f303 	mul.w	r3, r1, r3
 8006eaa:	441a      	add	r2, r3
 8006eac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006eb0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8006eb4:	fba3 4501 	umull	r4, r5, r3, r1
 8006eb8:	1953      	adds	r3, r2, r5
 8006eba:	461d      	mov	r5, r3
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	09e2      	lsrs	r2, r4, #7
 8006ec6:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8006eca:	11eb      	asrs	r3, r5, #7
 8006ecc:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	1889      	adds	r1, r1, r2
 8006ed4:	6539      	str	r1, [r7, #80]	; 0x50
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	eb43 0101 	adc.w	r1, r3, r1
 8006edc:	6579      	str	r1, [r7, #84]	; 0x54
 8006ede:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006ee2:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	SENS = (((int64_t)(datastruct->C[0])) << 15) + (((datastruct->C[2]) * dT) >> 8);
 8006ee6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ef4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006ef8:	f04f 0000 	mov.w	r0, #0
 8006efc:	f04f 0100 	mov.w	r1, #0
 8006f00:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8006f04:	462b      	mov	r3, r5
 8006f06:	03d9      	lsls	r1, r3, #15
 8006f08:	4623      	mov	r3, r4
 8006f0a:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 8006f0e:	4623      	mov	r3, r4
 8006f10:	03d8      	lsls	r0, r3, #15
 8006f12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006f16:	889b      	ldrh	r3, [r3, #4]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f20:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f24:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f28:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	; 0xe8
 8006f2c:	4632      	mov	r2, r6
 8006f2e:	fb02 f203 	mul.w	r2, r2, r3
 8006f32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006f36:	462c      	mov	r4, r5
 8006f38:	fb04 f303 	mul.w	r3, r4, r3
 8006f3c:	441a      	add	r2, r3
 8006f3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f42:	462c      	mov	r4, r5
 8006f44:	fba3 8904 	umull	r8, r9, r3, r4
 8006f48:	eb02 0309 	add.w	r3, r2, r9
 8006f4c:	4699      	mov	r9, r3
 8006f4e:	f04f 0200 	mov.w	r2, #0
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006f5a:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8006f5e:	ea4f 2329 	mov.w	r3, r9, asr #8
 8006f62:	1884      	adds	r4, r0, r2
 8006f64:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f66:	eb41 0303 	adc.w	r3, r1, r3
 8006f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f6c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006f70:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148

	if (TEMP < 2000)
 8006f74:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8006f78:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8006f7c:	f173 0300 	sbcs.w	r3, r3, #0
 8006f80:	f280 81ce 	bge.w	8007320 <MS5611_calculate+0x5d8>
	{ // temperature < 20�C
		T2 = (dT * dT) >> 31;
 8006f84:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8006f88:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f8c:	fb03 f102 	mul.w	r1, r3, r2
 8006f90:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8006f94:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006f98:	fb02 f303 	mul.w	r3, r2, r3
 8006f9c:	18ca      	adds	r2, r1, r3
 8006f9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006fa2:	fba3 ab03 	umull	sl, fp, r3, r3
 8006fa6:	eb02 030b 	add.w	r3, r2, fp
 8006faa:	469b      	mov	fp, r3
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	f04f 0300 	mov.w	r3, #0
 8006fb4:	ea4f 72da 	mov.w	r2, sl, lsr #31
 8006fb8:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
 8006fbc:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8006fc0:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2;
 8006fc4:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8006fc8:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8006fcc:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8006fd0:	f143 33ff 	adc.w	r3, r3, #4294967295
 8006fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fd8:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8006fdc:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8006fe0:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006fe4:	f143 33ff 	adc.w	r3, r3, #4294967295
 8006fe8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fec:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8006ff0:	462b      	mov	r3, r5
 8006ff2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8006ff6:	4642      	mov	r2, r8
 8006ff8:	fb02 f203 	mul.w	r2, r2, r3
 8006ffc:	464b      	mov	r3, r9
 8006ffe:	4621      	mov	r1, r4
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	4413      	add	r3, r2
 8007006:	4622      	mov	r2, r4
 8007008:	4641      	mov	r1, r8
 800700a:	fba2 1201 	umull	r1, r2, r2, r1
 800700e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8007012:	460a      	mov	r2, r1
 8007014:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8007018:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800701c:	4413      	add	r3, r2
 800701e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007022:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8007026:	4622      	mov	r2, r4
 8007028:	462b      	mov	r3, r5
 800702a:	f04f 0000 	mov.w	r0, #0
 800702e:	f04f 0100 	mov.w	r1, #0
 8007032:	0099      	lsls	r1, r3, #2
 8007034:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8007038:	0090      	lsls	r0, r2, #2
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4621      	mov	r1, r4
 8007040:	1851      	adds	r1, r2, r1
 8007042:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8007046:	4629      	mov	r1, r5
 8007048:	eb43 0101 	adc.w	r1, r3, r1
 800704c:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8007050:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007054:	460b      	mov	r3, r1
 8007056:	0fdb      	lsrs	r3, r3, #31
 8007058:	2200      	movs	r2, #0
 800705a:	643b      	str	r3, [r7, #64]	; 0x40
 800705c:	647a      	str	r2, [r7, #68]	; 0x44
 800705e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8007062:	4623      	mov	r3, r4
 8007064:	4602      	mov	r2, r0
 8007066:	189b      	adds	r3, r3, r2
 8007068:	63bb      	str	r3, [r7, #56]	; 0x38
 800706a:	460b      	mov	r3, r1
 800706c:	462a      	mov	r2, r5
 800706e:	eb42 0303 	adc.w	r3, r2, r3
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007080:	4621      	mov	r1, r4
 8007082:	084a      	lsrs	r2, r1, #1
 8007084:	4629      	mov	r1, r5
 8007086:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800708a:	4629      	mov	r1, r5
 800708c:	104b      	asrs	r3, r1, #1
 800708e:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
		SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 4;
 8007092:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8007096:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 800709a:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800709e:	f143 33ff 	adc.w	r3, r3, #4294967295
 80070a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070a6:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80070aa:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80070ae:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80070b2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80070b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070ba:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80070be:	462b      	mov	r3, r5
 80070c0:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80070c4:	4642      	mov	r2, r8
 80070c6:	fb02 f203 	mul.w	r2, r2, r3
 80070ca:	464b      	mov	r3, r9
 80070cc:	4621      	mov	r1, r4
 80070ce:	fb01 f303 	mul.w	r3, r1, r3
 80070d2:	4413      	add	r3, r2
 80070d4:	4622      	mov	r2, r4
 80070d6:	4641      	mov	r1, r8
 80070d8:	fba2 1201 	umull	r1, r2, r2, r1
 80070dc:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80070e0:	460a      	mov	r2, r1
 80070e2:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80070e6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80070ea:	4413      	add	r3, r2
 80070ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80070f0:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80070f4:	4622      	mov	r2, r4
 80070f6:	462b      	mov	r3, r5
 80070f8:	f04f 0000 	mov.w	r0, #0
 80070fc:	f04f 0100 	mov.w	r1, #0
 8007100:	0099      	lsls	r1, r3, #2
 8007102:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8007106:	0090      	lsls	r0, r2, #2
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4621      	mov	r1, r4
 800710e:	1851      	adds	r1, r2, r1
 8007110:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8007114:	4629      	mov	r1, r5
 8007116:	eb43 0101 	adc.w	r1, r3, r1
 800711a:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 800711e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007122:	2b00      	cmp	r3, #0
 8007124:	da06      	bge.n	8007134 <MS5611_calculate+0x3ec>
 8007126:	1cd1      	adds	r1, r2, #3
 8007128:	6339      	str	r1, [r7, #48]	; 0x30
 800712a:	f143 0300 	adc.w	r3, r3, #0
 800712e:	637b      	str	r3, [r7, #52]	; 0x34
 8007130:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007134:	f04f 0000 	mov.w	r0, #0
 8007138:	f04f 0100 	mov.w	r1, #0
 800713c:	0890      	lsrs	r0, r2, #2
 800713e:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8007142:	1099      	asrs	r1, r3, #2
 8007144:	e9c7 015a 	strd	r0, r1, [r7, #360]	; 0x168

		if (TEMP < -1500)
 8007148:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800714c:	4904      	ldr	r1, [pc, #16]	; (8007160 <MS5611_calculate+0x418>)
 800714e:	428a      	cmp	r2, r1
 8007150:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8007154:	f280 80f6 	bge.w	8007344 <MS5611_calculate+0x5fc>
 8007158:	e004      	b.n	8007164 <MS5611_calculate+0x41c>
 800715a:	bf00      	nop
 800715c:	20000530 	.word	0x20000530
 8007160:	fffffa24 	.word	0xfffffa24
		{ // temperature < -15�C
			OFF2 = OFF2 + (7 * (TEMP + 1500) * (TEMP + 1500));
 8007164:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8007168:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800716c:	1851      	adds	r1, r2, r1
 800716e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8007172:	f143 0300 	adc.w	r3, r3, #0
 8007176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800717a:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800717e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8007182:	1851      	adds	r1, r2, r1
 8007184:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8007188:	f143 0300 	adc.w	r3, r3, #0
 800718c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007190:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8007194:	462b      	mov	r3, r5
 8007196:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800719a:	4642      	mov	r2, r8
 800719c:	fb02 f203 	mul.w	r2, r2, r3
 80071a0:	464b      	mov	r3, r9
 80071a2:	4621      	mov	r1, r4
 80071a4:	fb01 f303 	mul.w	r3, r1, r3
 80071a8:	4413      	add	r3, r2
 80071aa:	4622      	mov	r2, r4
 80071ac:	4641      	mov	r1, r8
 80071ae:	fba2 1201 	umull	r1, r2, r2, r1
 80071b2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80071b6:	460a      	mov	r2, r1
 80071b8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80071bc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80071c0:	4413      	add	r3, r2
 80071c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80071c6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80071ca:	4622      	mov	r2, r4
 80071cc:	462b      	mov	r3, r5
 80071ce:	f04f 0000 	mov.w	r0, #0
 80071d2:	f04f 0100 	mov.w	r1, #0
 80071d6:	00d9      	lsls	r1, r3, #3
 80071d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071dc:	00d0      	lsls	r0, r2, #3
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	4621      	mov	r1, r4
 80071e4:	1a51      	subs	r1, r2, r1
 80071e6:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80071ea:	4629      	mov	r1, r5
 80071ec:	eb63 0301 	sbc.w	r3, r3, r1
 80071f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071f4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80071f8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80071fc:	4621      	mov	r1, r4
 80071fe:	1851      	adds	r1, r2, r1
 8007200:	62b9      	str	r1, [r7, #40]	; 0x28
 8007202:	4629      	mov	r1, r5
 8007204:	eb43 0101 	adc.w	r1, r3, r1
 8007208:	62f9      	str	r1, [r7, #44]	; 0x2c
 800720a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800720e:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
			SENS2 = SENS2 + (11 * (TEMP + 1500) * (TEMP + 1500) / 2);
 8007212:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8007216:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800721a:	1851      	adds	r1, r2, r1
 800721c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8007220:	f143 0300 	adc.w	r3, r3, #0
 8007224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007228:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800722c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8007230:	1851      	adds	r1, r2, r1
 8007232:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8007236:	f143 0300 	adc.w	r3, r3, #0
 800723a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800723e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8007242:	462b      	mov	r3, r5
 8007244:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8007248:	4642      	mov	r2, r8
 800724a:	fb02 f203 	mul.w	r2, r2, r3
 800724e:	464b      	mov	r3, r9
 8007250:	4621      	mov	r1, r4
 8007252:	fb01 f303 	mul.w	r3, r1, r3
 8007256:	4413      	add	r3, r2
 8007258:	4622      	mov	r2, r4
 800725a:	4641      	mov	r1, r8
 800725c:	fba2 1201 	umull	r1, r2, r2, r1
 8007260:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8007264:	460a      	mov	r2, r1
 8007266:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800726a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800726e:	4413      	add	r3, r2
 8007270:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007274:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8007278:	4622      	mov	r2, r4
 800727a:	462b      	mov	r3, r5
 800727c:	1891      	adds	r1, r2, r2
 800727e:	6239      	str	r1, [r7, #32]
 8007280:	415b      	adcs	r3, r3
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
 8007284:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007288:	4621      	mov	r1, r4
 800728a:	1851      	adds	r1, r2, r1
 800728c:	61b9      	str	r1, [r7, #24]
 800728e:	4629      	mov	r1, r5
 8007290:	414b      	adcs	r3, r1
 8007292:	61fb      	str	r3, [r7, #28]
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80072a0:	4649      	mov	r1, r9
 80072a2:	008b      	lsls	r3, r1, #2
 80072a4:	4641      	mov	r1, r8
 80072a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072aa:	4641      	mov	r1, r8
 80072ac:	008a      	lsls	r2, r1, #2
 80072ae:	4610      	mov	r0, r2
 80072b0:	4619      	mov	r1, r3
 80072b2:	4603      	mov	r3, r0
 80072b4:	4622      	mov	r2, r4
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072bc:	460b      	mov	r3, r1
 80072be:	462a      	mov	r2, r5
 80072c0:	eb63 0302 	sbc.w	r3, r3, r2
 80072c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072c8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80072cc:	460b      	mov	r3, r1
 80072ce:	0fdb      	lsrs	r3, r3, #31
 80072d0:	2200      	movs	r2, #0
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	617a      	str	r2, [r7, #20]
 80072d6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80072da:	4623      	mov	r3, r4
 80072dc:	4602      	mov	r2, r0
 80072de:	189b      	adds	r3, r3, r2
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	460b      	mov	r3, r1
 80072e4:	462a      	mov	r2, r5
 80072e6:	eb42 0303 	adc.w	r3, r2, r3
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	f04f 0300 	mov.w	r3, #0
 80072f4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072f8:	4621      	mov	r1, r4
 80072fa:	084a      	lsrs	r2, r1, #1
 80072fc:	4629      	mov	r1, r5
 80072fe:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8007302:	4629      	mov	r1, r5
 8007304:	104b      	asrs	r3, r1, #1
 8007306:	4610      	mov	r0, r2
 8007308:	4619      	mov	r1, r3
 800730a:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800730e:	1814      	adds	r4, r2, r0
 8007310:	603c      	str	r4, [r7, #0]
 8007312:	414b      	adcs	r3, r1
 8007314:	607b      	str	r3, [r7, #4]
 8007316:	e9d7 3400 	ldrd	r3, r4, [r7]
 800731a:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
 800731e:	e011      	b.n	8007344 <MS5611_calculate+0x5fc>
		}
	}
	else
	{ // temperature > 20�C
		T2 = 0;
 8007320:	f04f 0200 	mov.w	r2, #0
 8007324:	f04f 0300 	mov.w	r3, #0
 8007328:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		OFF2 = 0;
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
		SENS2 = 0;
 8007338:	f04f 0200 	mov.w	r2, #0
 800733c:	f04f 0300 	mov.w	r3, #0
 8007340:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
	}

	datastruct->dT = dT;
 8007344:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8007348:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800734c:	619a      	str	r2, [r3, #24]
	datastruct->OFF = OFF - OFF2;
 800734e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8007352:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8007356:	1a84      	subs	r4, r0, r2
 8007358:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800735c:	eb61 0303 	sbc.w	r3, r1, r3
 8007360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007364:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007368:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800736c:	e9c3 1208 	strd	r1, r2, [r3, #32]
	datastruct->TEMP = TEMP - T2;
 8007370:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8007374:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	461a      	mov	r2, r3
 800737c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007380:	631a      	str	r2, [r3, #48]	; 0x30
	datastruct->SENS = SENS - SENS2;
 8007382:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8007386:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800738a:	1a84      	subs	r4, r0, r2
 800738c:	67bc      	str	r4, [r7, #120]	; 0x78
 800738e:	eb61 0303 	sbc.w	r3, r1, r3
 8007392:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007394:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007398:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800739c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

	PRES = ((((int32_t)(datastruct->D[0]) * (datastruct->SENS)) >> 21) - (datastruct->OFF)) >> 15;
 80073a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	17da      	asrs	r2, r3, #31
 80073a8:	673b      	str	r3, [r7, #112]	; 0x70
 80073aa:	677a      	str	r2, [r7, #116]	; 0x74
 80073ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80073b0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80073b4:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80073b8:	4629      	mov	r1, r5
 80073ba:	fb02 f001 	mul.w	r0, r2, r1
 80073be:	4621      	mov	r1, r4
 80073c0:	fb01 f103 	mul.w	r1, r1, r3
 80073c4:	4401      	add	r1, r0
 80073c6:	4620      	mov	r0, r4
 80073c8:	fba0 2302 	umull	r2, r3, r0, r2
 80073cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80073d0:	4613      	mov	r3, r2
 80073d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80073d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073da:	18cb      	adds	r3, r1, r3
 80073dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	f04f 0300 	mov.w	r3, #0
 80073e8:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80073ec:	4621      	mov	r1, r4
 80073ee:	0d4a      	lsrs	r2, r1, #21
 80073f0:	4629      	mov	r1, r5
 80073f2:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80073f6:	4629      	mov	r1, r5
 80073f8:	154b      	asrs	r3, r1, #21
 80073fa:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80073fe:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8007402:	1a14      	subs	r4, r2, r0
 8007404:	66bc      	str	r4, [r7, #104]	; 0x68
 8007406:	eb63 0301 	sbc.w	r3, r3, r1
 800740a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8007418:	4621      	mov	r1, r4
 800741a:	0bca      	lsrs	r2, r1, #15
 800741c:	4629      	mov	r1, r5
 800741e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8007422:	4629      	mov	r1, r5
 8007424:	13cb      	asrs	r3, r1, #15
 8007426:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	datastruct->P = PRES;
 800742a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800742e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007432:	635a      	str	r2, [r3, #52]	; 0x34
	}
	}
	return MS5611_OK;
 8007434:	2301      	movs	r3, #1
}
 8007436:	4618      	mov	r0, r3
 8007438:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 800743c:	46bd      	mov	sp, r7
 800743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007442:	bf00      	nop
 8007444:	0000      	movs	r0, r0
	...

08007448 <getAltitude>:
 *
 * @returns The altitude in meters.
 */
//13. Calculator height
double getAltitude(double pressure, double referencePressure)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	ed87 0b02 	vstr	d0, [r7, #8]
 8007452:	ed87 1b00 	vstr	d1, [r7]
    return (44330.0f * (1.0f - pow((double)pressure / (double)referencePressure, 0.1902949f)));
 8007456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800745a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800745e:	f7f9 f9f5 	bl	800084c <__aeabi_ddiv>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	ec43 2b17 	vmov	d7, r2, r3
 800746a:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80074b0 <getAltitude+0x68>
 800746e:	eeb0 0a47 	vmov.f32	s0, s14
 8007472:	eef0 0a67 	vmov.f32	s1, s15
 8007476:	f002 fe17 	bl	800a0a8 <pow>
 800747a:	ec53 2b10 	vmov	r2, r3, d0
 800747e:	f04f 0000 	mov.w	r0, #0
 8007482:	490f      	ldr	r1, [pc, #60]	; (80074c0 <getAltitude+0x78>)
 8007484:	f7f8 ff00 	bl	8000288 <__aeabi_dsub>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4610      	mov	r0, r2
 800748e:	4619      	mov	r1, r3
 8007490:	a309      	add	r3, pc, #36	; (adr r3, 80074b8 <getAltitude+0x70>)
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f7f9 f8af 	bl	80005f8 <__aeabi_dmul>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	ec43 2b17 	vmov	d7, r2, r3
}
 80074a2:	eeb0 0a47 	vmov.f32	s0, s14
 80074a6:	eef0 0a67 	vmov.f32	s1, s15
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	60000000 	.word	0x60000000
 80074b4:	3fc85b95 	.word	0x3fc85b95
 80074b8:	00000000 	.word	0x00000000
 80074bc:	40e5a540 	.word	0x40e5a540
 80074c0:	3ff00000 	.word	0x3ff00000
 80074c4:	00000000 	.word	0x00000000

080074c8 <MPU2Angle>:
 *
 * @returns None
 */
//14. Calculator Euler angle
void MPU2Angle(MPU6050_t DataStruct, Euler_t *Angle)
{
 80074c8:	b084      	sub	sp, #16
 80074ca:	b5b0      	push	{r4, r5, r7, lr}
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	f107 0410 	add.w	r4, r7, #16
 80074d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Angle->roll 	= RAD_TO_DEG*atan2(DataStruct.Ay, DataStruct.Az);
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	4618      	mov	r0, r3
 80074da:	f7f9 f835 	bl	8000548 <__aeabi_f2d>
 80074de:	4604      	mov	r4, r0
 80074e0:	460d      	mov	r5, r1
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7f9 f82f 	bl	8000548 <__aeabi_f2d>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	ec43 2b11 	vmov	d1, r2, r3
 80074f2:	ec45 4b10 	vmov	d0, r4, r5
 80074f6:	f002 fd8d 	bl	800a014 <atan2>
 80074fa:	ec51 0b10 	vmov	r0, r1, d0
 80074fe:	a32c      	add	r3, pc, #176	; (adr r3, 80075b0 <MPU2Angle+0xe8>)
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	f7f9 f878 	bl	80005f8 <__aeabi_dmul>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4610      	mov	r0, r2
 800750e:	4619      	mov	r1, r3
 8007510:	f7f9 fb4a 	bl	8000ba8 <__aeabi_d2f>
 8007514:	4602      	mov	r2, r0
 8007516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007518:	601a      	str	r2, [r3, #0]
	Angle->pitch 	= RAD_TO_DEG*atan2(-DataStruct.Ax, sqrt(DataStruct.Ay*DataStruct.Ay + DataStruct.Az*DataStruct.Az));
 800751a:	edd7 7a06 	vldr	s15, [r7, #24]
 800751e:	eef1 7a67 	vneg.f32	s15, s15
 8007522:	ee17 3a90 	vmov	r3, s15
 8007526:	4618      	mov	r0, r3
 8007528:	f7f9 f80e 	bl	8000548 <__aeabi_f2d>
 800752c:	4604      	mov	r4, r0
 800752e:	460d      	mov	r5, r1
 8007530:	ed97 7a07 	vldr	s14, [r7, #28]
 8007534:	edd7 7a07 	vldr	s15, [r7, #28]
 8007538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800753c:	edd7 6a08 	vldr	s13, [r7, #32]
 8007540:	edd7 7a08 	vldr	s15, [r7, #32]
 8007544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800754c:	ee17 0a90 	vmov	r0, s15
 8007550:	f7f8 fffa 	bl	8000548 <__aeabi_f2d>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	ec43 2b10 	vmov	d0, r2, r3
 800755c:	f002 fe14 	bl	800a188 <sqrt>
 8007560:	eeb0 7a40 	vmov.f32	s14, s0
 8007564:	eef0 7a60 	vmov.f32	s15, s1
 8007568:	eeb0 1a47 	vmov.f32	s2, s14
 800756c:	eef0 1a67 	vmov.f32	s3, s15
 8007570:	ec45 4b10 	vmov	d0, r4, r5
 8007574:	f002 fd4e 	bl	800a014 <atan2>
 8007578:	ec51 0b10 	vmov	r0, r1, d0
 800757c:	a30c      	add	r3, pc, #48	; (adr r3, 80075b0 <MPU2Angle+0xe8>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f7f9 f839 	bl	80005f8 <__aeabi_dmul>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4610      	mov	r0, r2
 800758c:	4619      	mov	r1, r3
 800758e:	f7f9 fb0b 	bl	8000ba8 <__aeabi_d2f>
 8007592:	4602      	mov	r2, r0
 8007594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007596:	605a      	str	r2, [r3, #4]
	Angle->yaw		= 0;
 8007598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800759a:	f04f 0200 	mov.w	r2, #0
 800759e:	609a      	str	r2, [r3, #8]
}
 80075a0:	bf00      	nop
 80075a2:	46bd      	mov	sp, r7
 80075a4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80075a8:	b004      	add	sp, #16
 80075aa:	4770      	bx	lr
 80075ac:	f3af 8000 	nop.w
 80075b0:	1a6394b6 	.word	0x1a6394b6
 80075b4:	404ca5dc 	.word	0x404ca5dc

080075b8 <OffsetAngle>:
 *
 * @returns None
 */
//15. Offset euler angle
void OffsetAngle(Euler_t *Angle, Euler_t Offset)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	eef0 6a40 	vmov.f32	s13, s0
 80075c4:	eeb0 7a60 	vmov.f32	s14, s1
 80075c8:	eef0 7a41 	vmov.f32	s15, s2
 80075cc:	edc7 6a00 	vstr	s13, [r7]
 80075d0:	ed87 7a01 	vstr	s14, [r7, #4]
 80075d4:	edc7 7a02 	vstr	s15, [r7, #8]
    Angle->roll += Offset.roll;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	ed93 7a00 	vldr	s14, [r3]
 80075de:	edd7 7a00 	vldr	s15, [r7]
 80075e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	edc3 7a00 	vstr	s15, [r3]
    Angle->pitch += Offset.pitch;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80075f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80075f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	edc3 7a01 	vstr	s15, [r3, #4]
    Angle->yaw += Offset.yaw;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	ed93 7a02 	vldr	s14, [r3, #8]
 8007606:	edd7 7a02 	vldr	s15, [r7, #8]
 800760a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8007614:	bf00      	nop
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <compute_control>:
 *
 * @returns None
 */
//1. LQR controller
void compute_control(double x[6], double K[4][6], double u[4])
{
 8007620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007622:	b089      	sub	sp, #36	; 0x24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
    int m = 4, n = 6;
 800762c:	2304      	movs	r3, #4
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	2306      	movs	r3, #6
 8007632:	613b      	str	r3, [r7, #16]
    // Compute u = -K * x
    for (int i = 0; i < m; i++)
 8007634:	2300      	movs	r3, #0
 8007636:	61fb      	str	r3, [r7, #28]
 8007638:	e039      	b.n	80076ae <compute_control+0x8e>
    {
        for (int j = 0; j < n; j++)
 800763a:	2300      	movs	r3, #0
 800763c:	61bb      	str	r3, [r7, #24]
 800763e:	e02f      	b.n	80076a0 <compute_control+0x80>
        {
            u[i] += K[i][j] * x[j];
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4413      	add	r3, r2
 8007648:	e9d3 4500 	ldrd	r4, r5, [r3]
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	4613      	mov	r3, r2
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	4413      	add	r3, r2
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	461a      	mov	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	441a      	add	r2, r3
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	4413      	add	r3, r2
 8007662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4413      	add	r3, r2
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f7f8 ffc1 	bl	80005f8 <__aeabi_dmul>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4610      	mov	r0, r2
 800767c:	4619      	mov	r1, r3
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	18d6      	adds	r6, r2, r3
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	4620      	mov	r0, r4
 800768c:	4629      	mov	r1, r5
 800768e:	f7f8 fdfd 	bl	800028c <__adddf3>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	e9c6 2300 	strd	r2, r3, [r6]
        for (int j = 0; j < n; j++)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	3301      	adds	r3, #1
 800769e:	61bb      	str	r3, [r7, #24]
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	dbcb      	blt.n	8007640 <compute_control+0x20>
    for (int i = 0; i < m; i++)
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	3301      	adds	r3, #1
 80076ac:	61fb      	str	r3, [r7, #28]
 80076ae:	69fa      	ldr	r2, [r7, #28]
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	dbc1      	blt.n	800763a <compute_control+0x1a>
        }
    }
}
 80076b6:	bf00      	nop
 80076b8:	bf00      	nop
 80076ba:	3724      	adds	r7, #36	; 0x24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076c0 <Lowpass>:
 *
 * @returns None
 */
//1 Lowpass filter
void Lowpass(float in,Lowpass_t *filter, float iCutOffFrequency)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80076ca:	60b8      	str	r0, [r7, #8]
 80076cc:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->ePow = (1-exp(-DELTA_T * 2 * PI * iCutOffFrequency));
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7f8 ff39 	bl	8000548 <__aeabi_f2d>
 80076d6:	a31d      	add	r3, pc, #116	; (adr r3, 800774c <Lowpass+0x8c>)
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	f7f8 ff8c 	bl	80005f8 <__aeabi_dmul>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	ec43 2b17 	vmov	d7, r2, r3
 80076e8:	eeb0 0a47 	vmov.f32	s0, s14
 80076ec:	eef0 0a67 	vmov.f32	s1, s15
 80076f0:	f002 fc92 	bl	800a018 <exp>
 80076f4:	ec53 2b10 	vmov	r2, r3, d0
 80076f8:	f04f 0000 	mov.w	r0, #0
 80076fc:	4912      	ldr	r1, [pc, #72]	; (8007748 <Lowpass+0x88>)
 80076fe:	f7f8 fdc3 	bl	8000288 <__aeabi_dsub>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4610      	mov	r0, r2
 8007708:	4619      	mov	r1, r3
 800770a:	f7f9 fa4d 	bl	8000ba8 <__aeabi_d2f>
 800770e:	4602      	mov	r2, r0
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	605a      	str	r2, [r3, #4]
	filter->out += (in - filter->out) * filter->ePow;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	ed93 7a00 	vldr	s14, [r3]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	edd3 7a00 	vldr	s15, [r3]
 8007720:	edd7 6a03 	vldr	s13, [r7, #12]
 8007724:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	edd3 7a01 	vldr	s15, [r3, #4]
 800772e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	edc3 7a00 	vstr	s15, [r3]
}
 800773c:	bf00      	nop
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	f3af 8000 	nop.w
 8007748:	3ff00000 	.word	0x3ff00000
 800774c:	b68b71bc 	.word	0xb68b71bc
 8007750:	bf89bc65 	.word	0xbf89bc65

08007754 <Lowpass4MPU>:
//2. Lowpass filter for Accel
void Lowpass4MPU(MPU6050_t input,MPU6050_t *output)
{
 8007754:	b084      	sub	sp, #16
 8007756:	b490      	push	{r4, r7}
 8007758:	af00      	add	r7, sp, #0
 800775a:	f107 0408 	add.w	r4, r7, #8
 800775e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	static float ePow_Accel = 1-exp(-DELTA_T * 2 * PI * 2);
//	float ePow_Gyro 	=	1-exp(-DELTA_T * 2 * PI * 1.5);
//	float ePow_Magn	= 1-exp(-DELTA_T * 2 * PI * 1);

	output->Ax += (input.Ax - output->Ax) * ePow_Accel;
 8007762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007764:	ed93 7a02 	vldr	s14, [r3, #8]
 8007768:	edd7 6a04 	vldr	s13, [r7, #16]
 800776c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007772:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007776:	4b24      	ldr	r3, [pc, #144]	; (8007808 <Lowpass4MPU+0xb4>)
 8007778:	edd3 7a00 	vldr	s15, [r3]
 800777c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007786:	edc3 7a02 	vstr	s15, [r3, #8]
	output->Ay += (input.Ay - output->Ay) * ePow_Accel;
 800778a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778c:	ed93 7a03 	vldr	s14, [r3, #12]
 8007790:	edd7 6a05 	vldr	s13, [r7, #20]
 8007794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007796:	edd3 7a03 	vldr	s15, [r3, #12]
 800779a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800779e:	4b1a      	ldr	r3, [pc, #104]	; (8007808 <Lowpass4MPU+0xb4>)
 80077a0:	edd3 7a00 	vldr	s15, [r3]
 80077a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ae:	edc3 7a03 	vstr	s15, [r3, #12]
	output->Az += (input.Az - output->Az) * ePow_Accel;
 80077b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80077b8:	edd7 6a06 	vldr	s13, [r7, #24]
 80077bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077be:	edd3 7a04 	vldr	s15, [r3, #16]
 80077c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80077c6:	4b10      	ldr	r3, [pc, #64]	; (8007808 <Lowpass4MPU+0xb4>)
 80077c8:	edd3 7a00 	vldr	s15, [r3]
 80077cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d6:	edc3 7a04 	vstr	s15, [r3, #16]
//
//	output->Mx += (input.Mx - output->Mx) * ePow_Magn;
//	output->My += (input.My - output->My) * ePow_Magn;
//	output->Mz += (input.Mz - output->Mz) * ePow_Magn;

	output->Gx = input.Gx;
 80077da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077de:	61da      	str	r2, [r3, #28]
	output->Gy = input.Gy;
 80077e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e4:	621a      	str	r2, [r3, #32]
	output->Gz = input.Gz;
 80077e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ea:	625a      	str	r2, [r3, #36]	; 0x24

	output->Mx = input.Mx;
 80077ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f0:	631a      	str	r2, [r3, #48]	; 0x30
	output->My = input.My;
 80077f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f6:	635a      	str	r2, [r3, #52]	; 0x34
	output->Mz = input.Mz;
 80077f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80077fe:	bf00      	nop
 8007800:	46bd      	mov	sp, r7
 8007802:	bc90      	pop	{r4, r7}
 8007804:	b004      	add	sp, #16
 8007806:	4770      	bx	lr
 8007808:	20000148 	.word	0x20000148

0800780c <quat_mult>:
 *
 * @returns The product of the two quaternions.
 */
//1. Multiply two quaternions and return a copy of the result, prod = L * R
Quaternion_t quat_mult(Quaternion_t L, Quaternion_t R)
{
 800780c:	b490      	push	{r4, r7}
 800780e:	b094      	sub	sp, #80	; 0x50
 8007810:	af00      	add	r7, sp, #0
 8007812:	eeb0 4a40 	vmov.f32	s8, s0
 8007816:	eef0 4a60 	vmov.f32	s9, s1
 800781a:	eeb0 5a41 	vmov.f32	s10, s2
 800781e:	eef0 5a61 	vmov.f32	s11, s3
 8007822:	eeb0 6a42 	vmov.f32	s12, s4
 8007826:	eef0 6a62 	vmov.f32	s13, s5
 800782a:	eeb0 7a43 	vmov.f32	s14, s6
 800782e:	eef0 7a63 	vmov.f32	s15, s7
 8007832:	ed87 4a08 	vstr	s8, [r7, #32]
 8007836:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800783a:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800783e:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8007842:	ed87 6a04 	vstr	s12, [r7, #16]
 8007846:	edc7 6a05 	vstr	s13, [r7, #20]
 800784a:	ed87 7a06 	vstr	s14, [r7, #24]
 800784e:	edc7 7a07 	vstr	s15, [r7, #28]
    Quaternion_t product;
    product.q1 = (L.q1 * R.q1) - (L.q2 * R.q2) - (L.q3 * R.q3) - (L.q4 * R.q4);
 8007852:	ed97 7a08 	vldr	s14, [r7, #32]
 8007856:	edd7 7a04 	vldr	s15, [r7, #16]
 800785a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800785e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007862:	edd7 7a05 	vldr	s15, [r7, #20]
 8007866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800786a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800786e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007872:	edd7 7a06 	vldr	s15, [r7, #24]
 8007876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800787a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800787e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007882:	edd7 7a07 	vldr	s15, [r7, #28]
 8007886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800788a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800788e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
 8007892:	ed97 7a08 	vldr	s14, [r7, #32]
 8007896:	edd7 7a05 	vldr	s15, [r7, #20]
 800789a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800789e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80078a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80078a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078ae:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80078b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80078b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078be:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80078c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80078c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078ce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
 80078d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80078d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80078da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078de:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80078e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80078e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078ee:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80078f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80078f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078fe:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007902:	edd7 7a05 	vldr	s15, [r7, #20]
 8007906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800790a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800790e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
 8007912:	ed97 7a08 	vldr	s14, [r7, #32]
 8007916:	edd7 7a07 	vldr	s15, [r7, #28]
 800791a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800791e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007922:	edd7 7a06 	vldr	s15, [r7, #24]
 8007926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800792a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800792e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007932:	edd7 7a05 	vldr	s15, [r7, #20]
 8007936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800793a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800793e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007942:	edd7 7a04 	vldr	s15, [r7, #16]
 8007946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800794a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800794e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    return product;
 8007952:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800795a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800795c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007960:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007962:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007968:	ee06 0a10 	vmov	s12, r0
 800796c:	ee06 1a90 	vmov	s13, r1
 8007970:	ee07 2a10 	vmov	s14, r2
 8007974:	ee07 3a90 	vmov	s15, r3
}
 8007978:	eeb0 0a46 	vmov.f32	s0, s12
 800797c:	eef0 0a66 	vmov.f32	s1, s13
 8007980:	eeb0 1a47 	vmov.f32	s2, s14
 8007984:	eef0 1a67 	vmov.f32	s3, s15
 8007988:	3750      	adds	r7, #80	; 0x50
 800798a:	46bd      	mov	sp, r7
 800798c:	bc90      	pop	{r4, r7}
 800798e:	4770      	bx	lr

08007990 <quat_scalar>:
 *
 * @returns None
 */
//2. Multiply a reference of a quaternion by a scalar, q = s*q
void quat_scalar(Quaternion_t *q, float scalar)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	ed87 0a00 	vstr	s0, [r7]
    q->q1 *= scalar;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	ed93 7a00 	vldr	s14, [r3]
 80079a2:	edd7 7a00 	vldr	s15, [r7]
 80079a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	edc3 7a00 	vstr	s15, [r3]
    q->q2 *= scalar;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80079b6:	edd7 7a00 	vldr	s15, [r7]
 80079ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	edc3 7a01 	vstr	s15, [r3, #4]
    q->q3 *= scalar;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80079ca:	edd7 7a00 	vldr	s15, [r7]
 80079ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	edc3 7a02 	vstr	s15, [r3, #8]
    q->q4 *= scalar;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	ed93 7a03 	vldr	s14, [r3, #12]
 80079de:	edd7 7a00 	vldr	s15, [r7]
 80079e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <quat_add>:
 *
 * @returns None
 */
//3. Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
void quat_add(Quaternion_t *Sum, Quaternion_t L, Quaternion_t R)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b08b      	sub	sp, #44	; 0x2c
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6278      	str	r0, [r7, #36]	; 0x24
 8007a00:	eeb0 4a40 	vmov.f32	s8, s0
 8007a04:	eef0 4a60 	vmov.f32	s9, s1
 8007a08:	eeb0 5a41 	vmov.f32	s10, s2
 8007a0c:	eef0 5a61 	vmov.f32	s11, s3
 8007a10:	eeb0 6a42 	vmov.f32	s12, s4
 8007a14:	eef0 6a62 	vmov.f32	s13, s5
 8007a18:	eeb0 7a43 	vmov.f32	s14, s6
 8007a1c:	eef0 7a63 	vmov.f32	s15, s7
 8007a20:	ed87 4a05 	vstr	s8, [r7, #20]
 8007a24:	edc7 4a06 	vstr	s9, [r7, #24]
 8007a28:	ed87 5a07 	vstr	s10, [r7, #28]
 8007a2c:	edc7 5a08 	vstr	s11, [r7, #32]
 8007a30:	ed87 6a01 	vstr	s12, [r7, #4]
 8007a34:	edc7 6a02 	vstr	s13, [r7, #8]
 8007a38:	ed87 7a03 	vstr	s14, [r7, #12]
 8007a3c:	edc7 7a04 	vstr	s15, [r7, #16]
    Sum->q1 = L.q1 + R.q1;
 8007a40:	ed97 7a05 	vldr	s14, [r7, #20]
 8007a44:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	edc3 7a00 	vstr	s15, [r3]
    Sum->q2 = L.q2 + R.q2;
 8007a52:	ed97 7a06 	vldr	s14, [r7, #24]
 8007a56:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	edc3 7a01 	vstr	s15, [r3, #4]
    Sum->q3 = L.q3 + R.q3;
 8007a64:	ed97 7a07 	vldr	s14, [r7, #28]
 8007a68:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	edc3 7a02 	vstr	s15, [r3, #8]
    Sum->q4 = L.q4 + R.q4;
 8007a76:	ed97 7a08 	vldr	s14, [r7, #32]
 8007a7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8007a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007a88:	bf00      	nop
 8007a8a:	372c      	adds	r7, #44	; 0x2c
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <quat_sub>:
 *
 * @returns None
 */
//4. Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
void quat_sub(Quaternion_t *Sum, Quaternion_t L, Quaternion_t R)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b08b      	sub	sp, #44	; 0x2c
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6278      	str	r0, [r7, #36]	; 0x24
 8007a9c:	eeb0 4a40 	vmov.f32	s8, s0
 8007aa0:	eef0 4a60 	vmov.f32	s9, s1
 8007aa4:	eeb0 5a41 	vmov.f32	s10, s2
 8007aa8:	eef0 5a61 	vmov.f32	s11, s3
 8007aac:	eeb0 6a42 	vmov.f32	s12, s4
 8007ab0:	eef0 6a62 	vmov.f32	s13, s5
 8007ab4:	eeb0 7a43 	vmov.f32	s14, s6
 8007ab8:	eef0 7a63 	vmov.f32	s15, s7
 8007abc:	ed87 4a05 	vstr	s8, [r7, #20]
 8007ac0:	edc7 4a06 	vstr	s9, [r7, #24]
 8007ac4:	ed87 5a07 	vstr	s10, [r7, #28]
 8007ac8:	edc7 5a08 	vstr	s11, [r7, #32]
 8007acc:	ed87 6a01 	vstr	s12, [r7, #4]
 8007ad0:	edc7 6a02 	vstr	s13, [r7, #8]
 8007ad4:	ed87 7a03 	vstr	s14, [r7, #12]
 8007ad8:	edc7 7a04 	vstr	s15, [r7, #16]
    Sum->q1 = L.q1 - R.q1;
 8007adc:	ed97 7a05 	vldr	s14, [r7, #20]
 8007ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	edc3 7a00 	vstr	s15, [r3]
    Sum->q2 = L.q2 - R.q2;
 8007aee:	ed97 7a06 	vldr	s14, [r7, #24]
 8007af2:	edd7 7a02 	vldr	s15, [r7, #8]
 8007af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	edc3 7a01 	vstr	s15, [r3, #4]
    Sum->q3 = L.q3 - R.q3;
 8007b00:	ed97 7a07 	vldr	s14, [r7, #28]
 8007b04:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	edc3 7a02 	vstr	s15, [r3, #8]
    Sum->q4 = L.q4 - R.q4;
 8007b12:	ed97 7a08 	vldr	s14, [r7, #32]
 8007b16:	edd7 7a04 	vldr	s15, [r7, #16]
 8007b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007b24:	bf00      	nop
 8007b26:	372c      	adds	r7, #44	; 0x2c
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <quat_Norm>:
 *
 * @returns The norm of the quaternion.
 */
//6. norm of a quaternion is the same as a complex number
float quat_Norm(Quaternion_t q)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	eeb0 6a40 	vmov.f32	s12, s0
 8007b3a:	eef0 6a60 	vmov.f32	s13, s1
 8007b3e:	eeb0 7a41 	vmov.f32	s14, s2
 8007b42:	eef0 7a61 	vmov.f32	s15, s3
 8007b46:	ed87 6a00 	vstr	s12, [r7]
 8007b4a:	edc7 6a01 	vstr	s13, [r7, #4]
 8007b4e:	ed87 7a02 	vstr	s14, [r7, #8]
 8007b52:	edc7 7a03 	vstr	s15, [r7, #12]
    return sqrt(q.q1 * q.q1 + q.q2 * q.q2 + q.q3 * q.q3 + q.q4 * q.q4);
 8007b56:	ed97 7a00 	vldr	s14, [r7]
 8007b5a:	edd7 7a00 	vldr	s15, [r7]
 8007b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b62:	edd7 6a01 	vldr	s13, [r7, #4]
 8007b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b72:	edd7 6a02 	vldr	s13, [r7, #8]
 8007b76:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b82:	edd7 6a03 	vldr	s13, [r7, #12]
 8007b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b92:	ee17 0a90 	vmov	r0, s15
 8007b96:	f7f8 fcd7 	bl	8000548 <__aeabi_f2d>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	ec43 2b10 	vmov	d0, r2, r3
 8007ba2:	f002 faf1 	bl	800a188 <sqrt>
 8007ba6:	ec53 2b10 	vmov	r2, r3, d0
 8007baa:	4610      	mov	r0, r2
 8007bac:	4619      	mov	r1, r3
 8007bae:	f7f8 fffb 	bl	8000ba8 <__aeabi_d2f>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	ee07 3a90 	vmov	s15, r3
}
 8007bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <quat_Normalization>:
 *
 * @returns None
 */
//7. Normalizes pointer q by calling quat_Norm(q),
void quat_Normalization(Quaternion_t *q)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
    float norm = quat_Norm(*q);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	ed93 6a00 	vldr	s12, [r3]
 8007bd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8007bd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8007bd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8007bdc:	eeb0 0a46 	vmov.f32	s0, s12
 8007be0:	eef0 0a66 	vmov.f32	s1, s13
 8007be4:	eeb0 1a47 	vmov.f32	s2, s14
 8007be8:	eef0 1a67 	vmov.f32	s3, s15
 8007bec:	f7ff ffa0 	bl	8007b30 <quat_Norm>
 8007bf0:	ed87 0a03 	vstr	s0, [r7, #12]
    q->q1 /= norm;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	edd3 6a00 	vldr	s13, [r3]
 8007bfa:	ed97 7a03 	vldr	s14, [r7, #12]
 8007bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	edc3 7a00 	vstr	s15, [r3]
    q->q2 /= norm;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	edd3 6a01 	vldr	s13, [r3, #4]
 8007c0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	edc3 7a01 	vstr	s15, [r3, #4]
    q->q3 /= norm;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	edd3 6a02 	vldr	s13, [r3, #8]
 8007c22:	ed97 7a03 	vldr	s14, [r7, #12]
 8007c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	edc3 7a02 	vstr	s15, [r3, #8]
    q->q4 /= norm;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	edd3 6a03 	vldr	s13, [r3, #12]
 8007c36:	ed97 7a03 	vldr	s14, [r7, #12]
 8007c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007c44:	bf00      	nop
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <Madgwick_imu>:
 *
 * @returns None
 */
//9. Madgwick filter for IMU
void Madgwick_imu(MPU6050_t *DataStruct, Quaternion_t *q_est)
{
 8007c4c:	b5b0      	push	{r4, r5, r7, lr}
 8007c4e:	b0ac      	sub	sp, #176	; 0xb0
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
    float ax = DataStruct->Ax;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    float ay = DataStruct->Ay;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    float az = DataStruct->Az;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    float gx = DataStruct->Gx;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float gy = DataStruct->Gy;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float gz = DataStruct->Gz;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    // Variables and constants
    float F_g[3] = {0};    // eq(15/21/25) objective function for gravity
 8007c86:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	605a      	str	r2, [r3, #4]
 8007c90:	609a      	str	r2, [r3, #8]
    float J_g[3][4] = {0}; // jacobian matrix for gravity
 8007c92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007c96:	2230      	movs	r2, #48	; 0x30
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f001 fd1e 	bl	80096dc <memset>
    Quaternion_t q_est_prev = *q_est;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8007ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Quaternion_t q_est_dot = {0}; // eq 42 and 43
 8007cac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	605a      	str	r2, [r3, #4]
 8007cb6:	609a      	str	r2, [r3, #8]
 8007cb8:	60da      	str	r2, [r3, #12]
    Quaternion_t gradient = {0};
 8007cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	605a      	str	r2, [r3, #4]
 8007cc4:	609a      	str	r2, [r3, #8]
 8007cc6:	60da      	str	r2, [r3, #12]
    // const Quaternion_t q_g_ref = {0, 0, 0, 1};// eq (23) not needed because I used eq 25 instead of eq 21

    Quaternion_t q_a = {0, ax, ay, az}; // eq (24) raw acceleration values, needs to be normalized
 8007cc8:	f04f 0300 	mov.w	r3, #0
 8007ccc:	61fb      	str	r3, [r7, #28]
 8007cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cd2:	623b      	str	r3, [r7, #32]
 8007cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28
    if (quat_Norm(q_a) == 0)
 8007ce0:	ed97 6a07 	vldr	s12, [r7, #28]
 8007ce4:	edd7 6a08 	vldr	s13, [r7, #32]
 8007ce8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007cec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007cf0:	eeb0 0a46 	vmov.f32	s0, s12
 8007cf4:	eef0 0a66 	vmov.f32	s1, s13
 8007cf8:	eeb0 1a47 	vmov.f32	s2, s14
 8007cfc:	eef0 1a67 	vmov.f32	s3, s15
 8007d00:	f7ff ff16 	bl	8007b30 <quat_Norm>
 8007d04:	eef0 7a40 	vmov.f32	s15, s0
 8007d08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d10:	f000 81c4 	beq.w	800809c <Madgwick_imu+0x450>
        return;
    quat_Normalization(&q_a); // normalize the acceleration quaternion to be a unit quaternion
 8007d14:	f107 031c 	add.w	r3, r7, #28
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff ff52 	bl	8007bc2 <quat_Normalization>

    Quaternion_t q_w = {0, gx, gy, gz}; // equation (10), places gyroscope readings in a quaternion
 8007d1e:	f04f 0300 	mov.w	r3, #0
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d2e:	617b      	str	r3, [r7, #20]
 8007d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d34:	61bb      	str	r3, [r7, #24]

    quat_scalar(&q_w, 0.5);           // equation (12) dq/dt = (1/2)q*w
 8007d36:	f107 030c 	add.w	r3, r7, #12
 8007d3a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff fe26 	bl	8007990 <quat_scalar>
    q_w = quat_mult(q_est_prev, q_w); // equation (12)
 8007d44:	ed97 4a03 	vldr	s8, [r7, #12]
 8007d48:	edd7 4a04 	vldr	s9, [r7, #16]
 8007d4c:	ed97 5a05 	vldr	s10, [r7, #20]
 8007d50:	edd7 5a06 	vldr	s11, [r7, #24]
 8007d54:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8007d58:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8007d5c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8007d60:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007d64:	eeb0 2a44 	vmov.f32	s4, s8
 8007d68:	eef0 2a64 	vmov.f32	s5, s9
 8007d6c:	eeb0 3a45 	vmov.f32	s6, s10
 8007d70:	eef0 3a65 	vmov.f32	s7, s11
 8007d74:	eeb0 0a46 	vmov.f32	s0, s12
 8007d78:	eef0 0a66 	vmov.f32	s1, s13
 8007d7c:	eeb0 1a47 	vmov.f32	s2, s14
 8007d80:	eef0 1a67 	vmov.f32	s3, s15
 8007d84:	f7ff fd42 	bl	800780c <quat_mult>
 8007d88:	eeb0 6a40 	vmov.f32	s12, s0
 8007d8c:	eef0 6a60 	vmov.f32	s13, s1
 8007d90:	eeb0 7a41 	vmov.f32	s14, s2
 8007d94:	eef0 7a61 	vmov.f32	s15, s3
 8007d98:	ed87 6a03 	vstr	s12, [r7, #12]
 8007d9c:	edc7 6a04 	vstr	s13, [r7, #16]
 8007da0:	ed87 7a05 	vstr	s14, [r7, #20]
 8007da4:	edc7 7a06 	vstr	s15, [r7, #24]

    // quat_scalar(&q_w, deltaT);             // eq (13) integrates the angles velocity to position
    // quat_add(&q_w, q_w, q_est_prev);       // addition part of equation (13)

    // Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2 * (q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 8007da8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007dac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007db4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8007db8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dc4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007dc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8007dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dd0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    F_g[1] = 2 * (q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3 * q_est_prev.q4) - q_a.q3;
 8007dd4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007dd8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007de0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8007de4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007df0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007df4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dfc:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    F_g[2] = 2 * (0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 8007e00:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007e04:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e0c:	ee17 0a90 	vmov	r0, s15
 8007e10:	f7f8 fb9a 	bl	8000548 <__aeabi_f2d>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	f04f 0000 	mov.w	r0, #0
 8007e1c:	49a1      	ldr	r1, [pc, #644]	; (80080a4 <Madgwick_imu+0x458>)
 8007e1e:	f7f8 fa33 	bl	8000288 <__aeabi_dsub>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4614      	mov	r4, r2
 8007e28:	461d      	mov	r5, r3
 8007e2a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8007e2e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e36:	ee17 0a90 	vmov	r0, s15
 8007e3a:	f7f8 fb85 	bl	8000548 <__aeabi_f2d>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4620      	mov	r0, r4
 8007e44:	4629      	mov	r1, r5
 8007e46:	f7f8 fa1f 	bl	8000288 <__aeabi_dsub>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4610      	mov	r0, r2
 8007e50:	4619      	mov	r1, r3
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	f7f8 fa19 	bl	800028c <__adddf3>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4614      	mov	r4, r2
 8007e60:	461d      	mov	r5, r3
 8007e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7f8 fb6f 	bl	8000548 <__aeabi_f2d>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4620      	mov	r0, r4
 8007e70:	4629      	mov	r1, r5
 8007e72:	f7f8 fa09 	bl	8000288 <__aeabi_dsub>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	f7f8 fe93 	bl	8000ba8 <__aeabi_d2f>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2 * q_est_prev.q3;
 8007e88:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007e8c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8007e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e94:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    J_g[0][1] = 2 * q_est_prev.q4;
 8007e98:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007e9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007ea0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    J_g[0][2] = -2 * q_est_prev.q1;
 8007ea4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007ea8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8007eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007eb0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    J_g[0][3] = 2 * q_est_prev.q2;
 8007eb4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007eb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007ebc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    J_g[1][0] = 2 * q_est_prev.q2;
 8007ec0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007ec4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007ec8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    J_g[1][1] = 2 * q_est_prev.q1;
 8007ecc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007ed0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007ed4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    J_g[1][2] = 2 * q_est_prev.q4;
 8007ed8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007edc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007ee0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    J_g[1][3] = 2 * q_est_prev.q3;
 8007ee4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007ee8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007eec:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    J_g[2][0] = 0;
 8007ef0:	f04f 0300 	mov.w	r3, #0
 8007ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
    J_g[2][1] = -4 * q_est_prev.q2;
 8007ef6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007efa:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8007efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007f02:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    J_g[2][2] = -4 * q_est_prev.q3;
 8007f06:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007f0a:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8007f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007f12:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    J_g[2][3] = 0;
 8007f16:	f04f 0300 	mov.w	r3, #0
 8007f1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8007f1e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007f22:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f2a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8007f2e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f3a:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8007f3e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f4a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8007f4e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8007f52:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007f56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f5a:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8007f5e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f6a:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8007f6e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f7a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8007f7e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8007f82:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f8a:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8007f8e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f9a:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8007f9e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007faa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    gradient.q4 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 8007fae:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8007fb2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007fb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007fba:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8007fbe:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fca:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8007fce:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fda:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    // Normalize the gradient, equation (44)
    quat_Normalization(&gradient);
 8007fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7ff fded 	bl	8007bc2 <quat_Normalization>
    // Combining
    quat_scalar(&gradient, BETA);        // multiply normalized gradient by beta
 8007fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007fec:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80080a8 <Madgwick_imu+0x45c>
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7ff fccd 	bl	8007990 <quat_scalar>
    quat_sub(&q_est_dot, q_w, gradient); // subtract above from q_w, the integrated gyro quaternion
 8007ff6:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8007ffa:	edd7 4a0c 	vldr	s9, [r7, #48]	; 0x30
 8007ffe:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 8008002:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 8008006:	ed97 6a03 	vldr	s12, [r7, #12]
 800800a:	edd7 6a04 	vldr	s13, [r7, #16]
 800800e:	ed97 7a05 	vldr	s14, [r7, #20]
 8008012:	edd7 7a06 	vldr	s15, [r7, #24]
 8008016:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800801a:	eeb0 2a44 	vmov.f32	s4, s8
 800801e:	eef0 2a64 	vmov.f32	s5, s9
 8008022:	eeb0 3a45 	vmov.f32	s6, s10
 8008026:	eef0 3a65 	vmov.f32	s7, s11
 800802a:	eeb0 0a46 	vmov.f32	s0, s12
 800802e:	eef0 0a66 	vmov.f32	s1, s13
 8008032:	eeb0 1a47 	vmov.f32	s2, s14
 8008036:	eef0 1a67 	vmov.f32	s3, s15
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff fd2a 	bl	8007a94 <quat_sub>
    quat_scalar(&q_est_dot, DELTA_T);
 8008040:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008044:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80080ac <Madgwick_imu+0x460>
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff fca1 	bl	8007990 <quat_scalar>
    quat_add(q_est, q_est_prev, q_est_dot); // Integrate orientation rate to find position
 800804e:	ed97 4a0f 	vldr	s8, [r7, #60]	; 0x3c
 8008052:	edd7 4a10 	vldr	s9, [r7, #64]	; 0x40
 8008056:	ed97 5a11 	vldr	s10, [r7, #68]	; 0x44
 800805a:	edd7 5a12 	vldr	s11, [r7, #72]	; 0x48
 800805e:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8008062:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8008066:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800806a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800806e:	eeb0 2a44 	vmov.f32	s4, s8
 8008072:	eef0 2a64 	vmov.f32	s5, s9
 8008076:	eeb0 3a45 	vmov.f32	s6, s10
 800807a:	eef0 3a65 	vmov.f32	s7, s11
 800807e:	eeb0 0a46 	vmov.f32	s0, s12
 8008082:	eef0 0a66 	vmov.f32	s1, s13
 8008086:	eeb0 1a47 	vmov.f32	s2, s14
 800808a:	eef0 1a67 	vmov.f32	s3, s15
 800808e:	6838      	ldr	r0, [r7, #0]
 8008090:	f7ff fcb2 	bl	80079f8 <quat_add>
    quat_Normalization(q_est);              // normalize the orientation of the estimate
 8008094:	6838      	ldr	r0, [r7, #0]
 8008096:	f7ff fd94 	bl	8007bc2 <quat_Normalization>
 800809a:	e000      	b.n	800809e <Madgwick_imu+0x452>
        return;
 800809c:	bf00      	nop
                                            //(shown in diagram, plus always use unit quaternions for orientation)
}
 800809e:	37b0      	adds	r7, #176	; 0xb0
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bdb0      	pop	{r4, r5, r7, pc}
 80080a4:	3fe00000 	.word	0x3fe00000
 80080a8:	3d27ef9e 	.word	0x3d27ef9e
 80080ac:	3b03126f 	.word	0x3b03126f

080080b0 <Quat2Angle>:
 *
 * @returns None
 */
//10. Calculator Euler angle from quaternions
void Quat2Angle(Quaternion_t q, Euler_t *Angle)
{
 80080b0:	b5b0      	push	{r4, r5, r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	eeb0 6a40 	vmov.f32	s12, s0
 80080ba:	eef0 6a60 	vmov.f32	s13, s1
 80080be:	eeb0 7a41 	vmov.f32	s14, s2
 80080c2:	eef0 7a61 	vmov.f32	s15, s3
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	ed87 6a02 	vstr	s12, [r7, #8]
 80080cc:	edc7 6a03 	vstr	s13, [r7, #12]
 80080d0:	ed87 7a04 	vstr	s14, [r7, #16]
 80080d4:	edc7 7a05 	vstr	s15, [r7, #20]
    Angle->roll = atan2(2 * (q.q1 * q.q2 + q.q3 * q.q4), q.q1 * q.q1 - q.q2 * q.q2 - q.q3 * q.q3 + q.q4 * q.q4);
 80080d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80080dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80080e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80080e4:	edd7 6a04 	vldr	s13, [r7, #16]
 80080e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80080ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80080f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80080f8:	ee17 0a90 	vmov	r0, s15
 80080fc:	f7f8 fa24 	bl	8000548 <__aeabi_f2d>
 8008100:	4604      	mov	r4, r0
 8008102:	460d      	mov	r5, r1
 8008104:	ed97 7a02 	vldr	s14, [r7, #8]
 8008108:	edd7 7a02 	vldr	s15, [r7, #8]
 800810c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008110:	edd7 6a03 	vldr	s13, [r7, #12]
 8008114:	edd7 7a03 	vldr	s15, [r7, #12]
 8008118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800811c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008120:	edd7 6a04 	vldr	s13, [r7, #16]
 8008124:	edd7 7a04 	vldr	s15, [r7, #16]
 8008128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800812c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008130:	edd7 6a05 	vldr	s13, [r7, #20]
 8008134:	edd7 7a05 	vldr	s15, [r7, #20]
 8008138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800813c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008140:	ee17 0a90 	vmov	r0, s15
 8008144:	f7f8 fa00 	bl	8000548 <__aeabi_f2d>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	ec43 2b11 	vmov	d1, r2, r3
 8008150:	ec45 4b10 	vmov	d0, r4, r5
 8008154:	f001 ff5e 	bl	800a014 <atan2>
 8008158:	ec53 2b10 	vmov	r2, r3, d0
 800815c:	4610      	mov	r0, r2
 800815e:	4619      	mov	r1, r3
 8008160:	f7f8 fd22 	bl	8000ba8 <__aeabi_d2f>
 8008164:	4602      	mov	r2, r0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	601a      	str	r2, [r3, #0]
    Angle->pitch = asin(2 * (q.q1 * q.q3 - q.q2 * q.q4));
 800816a:	ed97 7a02 	vldr	s14, [r7, #8]
 800816e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008176:	edd7 6a03 	vldr	s13, [r7, #12]
 800817a:	edd7 7a05 	vldr	s15, [r7, #20]
 800817e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008186:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800818a:	ee17 0a90 	vmov	r0, s15
 800818e:	f7f8 f9db 	bl	8000548 <__aeabi_f2d>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	ec43 2b10 	vmov	d0, r2, r3
 800819a:	f001 ff07 	bl	8009fac <asin>
 800819e:	ec53 2b10 	vmov	r2, r3, d0
 80081a2:	4610      	mov	r0, r2
 80081a4:	4619      	mov	r1, r3
 80081a6:	f7f8 fcff 	bl	8000ba8 <__aeabi_d2f>
 80081aa:	4602      	mov	r2, r0
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	605a      	str	r2, [r3, #4]
    Angle->yaw = atan2(2 * (q.q1 * q.q4 + q.q2 * q.q3), q.q1 * q.q1 + q.q2 * q.q2 - q.q3 * q.q3 - q.q4 * q.q4);
 80081b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80081b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80081b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80081bc:	edd7 6a03 	vldr	s13, [r7, #12]
 80081c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80081c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80081c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80081d0:	ee17 0a90 	vmov	r0, s15
 80081d4:	f7f8 f9b8 	bl	8000548 <__aeabi_f2d>
 80081d8:	4604      	mov	r4, r0
 80081da:	460d      	mov	r5, r1
 80081dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80081e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80081e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80081e8:	edd7 6a03 	vldr	s13, [r7, #12]
 80081ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80081f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80081f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80081f8:	edd7 6a04 	vldr	s13, [r7, #16]
 80081fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8008200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008204:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008208:	edd7 6a05 	vldr	s13, [r7, #20]
 800820c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008218:	ee17 0a90 	vmov	r0, s15
 800821c:	f7f8 f994 	bl	8000548 <__aeabi_f2d>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	ec43 2b11 	vmov	d1, r2, r3
 8008228:	ec45 4b10 	vmov	d0, r4, r5
 800822c:	f001 fef2 	bl	800a014 <atan2>
 8008230:	ec53 2b10 	vmov	r2, r3, d0
 8008234:	4610      	mov	r0, r2
 8008236:	4619      	mov	r1, r3
 8008238:	f7f8 fcb6 	bl	8000ba8 <__aeabi_d2f>
 800823c:	4602      	mov	r2, r0
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	609a      	str	r2, [r3, #8]
    if (Angle->pitch == PI / 2)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	4618      	mov	r0, r3
 8008248:	f7f8 f97e 	bl	8000548 <__aeabi_f2d>
 800824c:	a34e      	add	r3, pc, #312	; (adr r3, 8008388 <Quat2Angle+0x2d8>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f7f8 fc39 	bl	8000ac8 <__aeabi_dcmpeq>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d026      	beq.n	80082aa <Quat2Angle+0x1fa>
    {
        Angle->roll = 0;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f04f 0200 	mov.w	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
        Angle->yaw = -2 * atan2(q.q2, q.q1);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4618      	mov	r0, r3
 8008268:	f7f8 f96e 	bl	8000548 <__aeabi_f2d>
 800826c:	4604      	mov	r4, r0
 800826e:	460d      	mov	r5, r1
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4618      	mov	r0, r3
 8008274:	f7f8 f968 	bl	8000548 <__aeabi_f2d>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	ec43 2b11 	vmov	d1, r2, r3
 8008280:	ec45 4b10 	vmov	d0, r4, r5
 8008284:	f001 fec6 	bl	800a014 <atan2>
 8008288:	ec51 0b10 	vmov	r0, r1, d0
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8008294:	f7f8 f9b0 	bl	80005f8 <__aeabi_dmul>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4610      	mov	r0, r2
 800829e:	4619      	mov	r1, r3
 80082a0:	f7f8 fc82 	bl	8000ba8 <__aeabi_d2f>
 80082a4:	4602      	mov	r2, r0
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	609a      	str	r2, [r3, #8]
    }
    if (Angle->pitch == -PI / 2)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7f8 f94a 	bl	8000548 <__aeabi_f2d>
 80082b4:	a336      	add	r3, pc, #216	; (adr r3, 8008390 <Quat2Angle+0x2e0>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	f7f8 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d024      	beq.n	800830e <Quat2Angle+0x25e>
    {
        Angle->roll = 0;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f04f 0200 	mov.w	r2, #0
 80082ca:	601a      	str	r2, [r3, #0]
        Angle->yaw = 2 * atan2(q.q2, q.q1);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7f8 f93a 	bl	8000548 <__aeabi_f2d>
 80082d4:	4604      	mov	r4, r0
 80082d6:	460d      	mov	r5, r1
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	4618      	mov	r0, r3
 80082dc:	f7f8 f934 	bl	8000548 <__aeabi_f2d>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	ec43 2b11 	vmov	d1, r2, r3
 80082e8:	ec45 4b10 	vmov	d0, r4, r5
 80082ec:	f001 fe92 	bl	800a014 <atan2>
 80082f0:	ec51 0b10 	vmov	r0, r1, d0
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	f7f7 ffc8 	bl	800028c <__adddf3>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4610      	mov	r0, r2
 8008302:	4619      	mov	r1, r3
 8008304:	f7f8 fc50 	bl	8000ba8 <__aeabi_d2f>
 8008308:	4602      	mov	r2, r0
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	609a      	str	r2, [r3, #8]
    }
    Angle->roll *= RAD_TO_DEG;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4618      	mov	r0, r3
 8008314:	f7f8 f918 	bl	8000548 <__aeabi_f2d>
 8008318:	a31f      	add	r3, pc, #124	; (adr r3, 8008398 <Quat2Angle+0x2e8>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f7f8 f96b 	bl	80005f8 <__aeabi_dmul>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	4610      	mov	r0, r2
 8008328:	4619      	mov	r1, r3
 800832a:	f7f8 fc3d 	bl	8000ba8 <__aeabi_d2f>
 800832e:	4602      	mov	r2, r0
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	601a      	str	r2, [r3, #0]
    Angle->pitch *= RAD_TO_DEG;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	4618      	mov	r0, r3
 800833a:	f7f8 f905 	bl	8000548 <__aeabi_f2d>
 800833e:	a316      	add	r3, pc, #88	; (adr r3, 8008398 <Quat2Angle+0x2e8>)
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	f7f8 f958 	bl	80005f8 <__aeabi_dmul>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4610      	mov	r0, r2
 800834e:	4619      	mov	r1, r3
 8008350:	f7f8 fc2a 	bl	8000ba8 <__aeabi_d2f>
 8008354:	4602      	mov	r2, r0
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	605a      	str	r2, [r3, #4]
    Angle->yaw *= RAD_TO_DEG;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	4618      	mov	r0, r3
 8008360:	f7f8 f8f2 	bl	8000548 <__aeabi_f2d>
 8008364:	a30c      	add	r3, pc, #48	; (adr r3, 8008398 <Quat2Angle+0x2e8>)
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	f7f8 f945 	bl	80005f8 <__aeabi_dmul>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4610      	mov	r0, r2
 8008374:	4619      	mov	r1, r3
 8008376:	f7f8 fc17 	bl	8000ba8 <__aeabi_d2f>
 800837a:	4602      	mov	r2, r0
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	609a      	str	r2, [r3, #8]
}
 8008380:	bf00      	nop
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bdb0      	pop	{r4, r5, r7, pc}
 8008388:	54442d11 	.word	0x54442d11
 800838c:	3ff921fb 	.word	0x3ff921fb
 8008390:	54442d11 	.word	0x54442d11
 8008394:	bff921fb 	.word	0xbff921fb
 8008398:	1a6394b6 	.word	0x1a6394b6
 800839c:	404ca5dc 	.word	0x404ca5dc

080083a0 <NRF24_DelayMicroSeconds>:
 *
 * @returns None
 */
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80083ac:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <NRF24_DelayMicroSeconds+0x3c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a0b      	ldr	r2, [pc, #44]	; (80083e0 <NRF24_DelayMicroSeconds+0x40>)
 80083b2:	fba2 2303 	umull	r2, r3, r2, r3
 80083b6:	0c9a      	lsrs	r2, r3, #18
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	fb02 f303 	mul.w	r3, r2, r3
 80083be:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80083c0:	bf00      	nop
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	1e5a      	subs	r2, r3, #1
 80083c6:	60fa      	str	r2, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1fa      	bne.n	80083c2 <NRF24_DelayMicroSeconds+0x22>
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	2000013c 	.word	0x2000013c
 80083e0:	165e9f81 	.word	0x165e9f81

080083e4 <NRF24_csn>:
 *
 * @returns None
 */
//1. Chip Select function
void NRF24_csn(int state)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d008      	beq.n	8008404 <NRF24_csn+0x20>
 80083f2:	4b0a      	ldr	r3, [pc, #40]	; (800841c <NRF24_csn+0x38>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <NRF24_csn+0x3c>)
 80083f8:	8811      	ldrh	r1, [r2, #0]
 80083fa:	2201      	movs	r2, #1
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fa fab5 	bl	800296c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8008402:	e007      	b.n	8008414 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8008404:	4b05      	ldr	r3, [pc, #20]	; (800841c <NRF24_csn+0x38>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a05      	ldr	r2, [pc, #20]	; (8008420 <NRF24_csn+0x3c>)
 800840a:	8811      	ldrh	r1, [r2, #0]
 800840c:	2200      	movs	r2, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f7fa faac 	bl	800296c <HAL_GPIO_WritePin>
}
 8008414:	bf00      	nop
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20000538 	.word	0x20000538
 8008420:	2000053c 	.word	0x2000053c

08008424 <NRF24_ce>:
 *
 * @returns None
 */
//2. Chip Enable
void NRF24_ce(int state)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d008      	beq.n	8008444 <NRF24_ce+0x20>
 8008432:	4b0a      	ldr	r3, [pc, #40]	; (800845c <NRF24_ce+0x38>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a0a      	ldr	r2, [pc, #40]	; (8008460 <NRF24_ce+0x3c>)
 8008438:	8811      	ldrh	r1, [r2, #0]
 800843a:	2201      	movs	r2, #1
 800843c:	4618      	mov	r0, r3
 800843e:	f7fa fa95 	bl	800296c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8008442:	e007      	b.n	8008454 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8008444:	4b05      	ldr	r3, [pc, #20]	; (800845c <NRF24_ce+0x38>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a05      	ldr	r2, [pc, #20]	; (8008460 <NRF24_ce+0x3c>)
 800844a:	8811      	ldrh	r1, [r2, #0]
 800844c:	2200      	movs	r2, #0
 800844e:	4618      	mov	r0, r3
 8008450:	f7fa fa8c 	bl	800296c <HAL_GPIO_WritePin>
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20000538 	.word	0x20000538
 8008460:	2000053e 	.word	0x2000053e

08008464 <NRF24_read_register>:
 *
 * @returns The value of the specified register.
 */
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800846e:	2000      	movs	r0, #0
 8008470:	f7ff ffb8 	bl	80083e4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8008478:	f107 010c 	add.w	r1, r7, #12
 800847c:	2364      	movs	r3, #100	; 0x64
 800847e:	2201      	movs	r2, #1
 8008480:	480a      	ldr	r0, [pc, #40]	; (80084ac <NRF24_read_register+0x48>)
 8008482:	f7fb ff48 	bl	8004316 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8008486:	f107 030c 	add.w	r3, r7, #12
 800848a:	1c59      	adds	r1, r3, #1
 800848c:	2364      	movs	r3, #100	; 0x64
 800848e:	2201      	movs	r2, #1
 8008490:	4806      	ldr	r0, [pc, #24]	; (80084ac <NRF24_read_register+0x48>)
 8008492:	f7fc f87c 	bl	800458e <HAL_SPI_Receive>
	retData = spiBuf[1];
 8008496:	7b7b      	ldrb	r3, [r7, #13]
 8008498:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 800849a:	2001      	movs	r0, #1
 800849c:	f7ff ffa2 	bl	80083e4 <NRF24_csn>
	return retData;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000540 	.word	0x20000540

080084b0 <NRF24_read_registerN>:
 *
 * @returns None
 */
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	6039      	str	r1, [r7, #0]
 80084ba:	71fb      	strb	r3, [r7, #7]
 80084bc:	4613      	mov	r3, r2
 80084be:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80084c0:	2000      	movs	r0, #0
 80084c2:	f7ff ff8f 	bl	80083e4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg|0x00;
 80084c6:	79fb      	ldrb	r3, [r7, #7]
 80084c8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80084ca:	f107 010c 	add.w	r1, r7, #12
 80084ce:	2364      	movs	r3, #100	; 0x64
 80084d0:	2201      	movs	r2, #1
 80084d2:	4808      	ldr	r0, [pc, #32]	; (80084f4 <NRF24_read_registerN+0x44>)
 80084d4:	f7fb ff1f 	bl	8004316 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80084d8:	79bb      	ldrb	r3, [r7, #6]
 80084da:	b29a      	uxth	r2, r3
 80084dc:	2364      	movs	r3, #100	; 0x64
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	4804      	ldr	r0, [pc, #16]	; (80084f4 <NRF24_read_registerN+0x44>)
 80084e2:	f7fc f854 	bl	800458e <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80084e6:	2001      	movs	r0, #1
 80084e8:	f7ff ff7c 	bl	80083e4 <NRF24_csn>
}
 80084ec:	bf00      	nop
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20000540 	.word	0x20000540

080084f8 <NRF24_write_register>:
 *
 * @returns None
 */
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	460a      	mov	r2, r1
 8008502:	71fb      	strb	r3, [r7, #7]
 8008504:	4613      	mov	r3, r2
 8008506:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8008508:	2000      	movs	r0, #0
 800850a:	f7ff ff6b 	bl	80083e4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	f043 0320 	orr.w	r3, r3, #32
 8008514:	b2db      	uxtb	r3, r3
 8008516:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8008518:	79bb      	ldrb	r3, [r7, #6]
 800851a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800851c:	f107 010c 	add.w	r1, r7, #12
 8008520:	2364      	movs	r3, #100	; 0x64
 8008522:	2202      	movs	r2, #2
 8008524:	4804      	ldr	r0, [pc, #16]	; (8008538 <NRF24_write_register+0x40>)
 8008526:	f7fb fef6 	bl	8004316 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800852a:	2001      	movs	r0, #1
 800852c:	f7ff ff5a 	bl	80083e4 <NRF24_csn>
}
 8008530:	bf00      	nop
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	20000540 	.word	0x20000540

0800853c <NRF24_write_registerN>:
 *
 * @returns None
 */
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	6039      	str	r1, [r7, #0]
 8008546:	71fb      	strb	r3, [r7, #7]
 8008548:	4613      	mov	r3, r2
 800854a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800854c:	2000      	movs	r0, #0
 800854e:	f7ff ff49 	bl	80083e4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	f043 0320 	orr.w	r3, r3, #32
 8008558:	b2db      	uxtb	r3, r3
 800855a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800855c:	f107 010c 	add.w	r1, r7, #12
 8008560:	2364      	movs	r3, #100	; 0x64
 8008562:	2201      	movs	r2, #1
 8008564:	4808      	ldr	r0, [pc, #32]	; (8008588 <NRF24_write_registerN+0x4c>)
 8008566:	f7fb fed6 	bl	8004316 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800856a:	79bb      	ldrb	r3, [r7, #6]
 800856c:	b29a      	uxth	r2, r3
 800856e:	2364      	movs	r3, #100	; 0x64
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	4805      	ldr	r0, [pc, #20]	; (8008588 <NRF24_write_registerN+0x4c>)
 8008574:	f7fb fecf 	bl	8004316 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8008578:	2001      	movs	r0, #1
 800857a:	f7ff ff33 	bl	80083e4 <NRF24_csn>
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20000540 	.word	0x20000540

0800858c <NRF24_write_payload>:
 *
 * @returns None
 */
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8008598:	2000      	movs	r0, #0
 800859a:	f7ff ff23 	bl	80083e4 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800859e:	23a0      	movs	r3, #160	; 0xa0
 80085a0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80085a2:	f107 010f 	add.w	r1, r7, #15
 80085a6:	2364      	movs	r3, #100	; 0x64
 80085a8:	2201      	movs	r2, #1
 80085aa:	4808      	ldr	r0, [pc, #32]	; (80085cc <NRF24_write_payload+0x40>)
 80085ac:	f7fb feb3 	bl	8004316 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	2364      	movs	r3, #100	; 0x64
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	4804      	ldr	r0, [pc, #16]	; (80085cc <NRF24_write_payload+0x40>)
 80085ba:	f7fb feac 	bl	8004316 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80085be:	2001      	movs	r0, #1
 80085c0:	f7ff ff10 	bl	80083e4 <NRF24_csn>
}
 80085c4:	bf00      	nop
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	20000540 	.word	0x20000540

080085d0 <NRF24_read_payload>:
 *
 * @returns None
 */
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80085dc:	f000 fa12 	bl	8008a04 <NRF24_getPayloadSize>
 80085e0:	4603      	mov	r3, r0
 80085e2:	461a      	mov	r2, r3
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d303      	bcc.n	80085f2 <NRF24_read_payload+0x22>
 80085ea:	f000 fa0b 	bl	8008a04 <NRF24_getPayloadSize>
 80085ee:	4603      	mov	r3, r0
 80085f0:	e000      	b.n	80085f4 <NRF24_read_payload+0x24>
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80085f6:	2000      	movs	r0, #0
 80085f8:	f7ff fef4 	bl	80083e4 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80085fc:	2361      	movs	r3, #97	; 0x61
 80085fe:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8008600:	f107 010e 	add.w	r1, r7, #14
 8008604:	2364      	movs	r3, #100	; 0x64
 8008606:	2201      	movs	r2, #1
 8008608:	4808      	ldr	r0, [pc, #32]	; (800862c <NRF24_read_payload+0x5c>)
 800860a:	f7fb fe84 	bl	8004316 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	b29a      	uxth	r2, r3
 8008612:	2364      	movs	r3, #100	; 0x64
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	4805      	ldr	r0, [pc, #20]	; (800862c <NRF24_read_payload+0x5c>)
 8008618:	f7fb ffb9 	bl	800458e <HAL_SPI_Receive>
	NRF24_csn(1);
 800861c:	2001      	movs	r0, #1
 800861e:	f7ff fee1 	bl	80083e4 <NRF24_csn>
}
 8008622:	bf00      	nop
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20000540 	.word	0x20000540

08008630 <NRF24_flush_tx>:
 *
 * @returns None
 */
//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8008634:	21ff      	movs	r1, #255	; 0xff
 8008636:	20e1      	movs	r0, #225	; 0xe1
 8008638:	f7ff ff5e 	bl	80084f8 <NRF24_write_register>
}
 800863c:	bf00      	nop
 800863e:	bd80      	pop	{r7, pc}

08008640 <NRF24_flush_rx>:
 *
 * @returns None
 */
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8008644:	21ff      	movs	r1, #255	; 0xff
 8008646:	20e2      	movs	r0, #226	; 0xe2
 8008648:	f7ff ff56 	bl	80084f8 <NRF24_write_register>
}
 800864c:	bf00      	nop
 800864e:	bd80      	pop	{r7, pc}

08008650 <NRF24_get_status>:
 *
 * @returns The value of the status register.
 */
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8008656:	2007      	movs	r0, #7
 8008658:	f7ff ff04 	bl	8008464 <NRF24_read_register>
 800865c:	4603      	mov	r3, r0
 800865e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8008660:	79fb      	ldrb	r3, [r7, #7]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <NRF24_begin>:
 *
 * @returns None
 */
//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 800866c:	b082      	sub	sp, #8
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	460b      	mov	r3, r1
 800867a:	807b      	strh	r3, [r7, #2]
 800867c:	4613      	mov	r3, r2
 800867e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8008680:	4b66      	ldr	r3, [pc, #408]	; (800881c <NRF24_begin+0x1b0>)
 8008682:	4618      	mov	r0, r3
 8008684:	f107 031c 	add.w	r3, r7, #28
 8008688:	2258      	movs	r2, #88	; 0x58
 800868a:	4619      	mov	r1, r3
 800868c:	f001 f818 	bl	80096c0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8008690:	4a63      	ldr	r2, [pc, #396]	; (8008820 <NRF24_begin+0x1b4>)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8008696:	4a63      	ldr	r2, [pc, #396]	; (8008824 <NRF24_begin+0x1b8>)
 8008698:	887b      	ldrh	r3, [r7, #2]
 800869a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;  
 800869c:	4a62      	ldr	r2, [pc, #392]	; (8008828 <NRF24_begin+0x1bc>)
 800869e:	883b      	ldrh	r3, [r7, #0]
 80086a0:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80086a2:	2001      	movs	r0, #1
 80086a4:	f7ff fe9e 	bl	80083e4 <NRF24_csn>
	NRF24_ce(0);
 80086a8:	2000      	movs	r0, #0
 80086aa:	f7ff febb 	bl	8008424 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80086ae:	2005      	movs	r0, #5
 80086b0:	f7f9 fe8a 	bl	80023c8 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08); //0x08
 80086b4:	2108      	movs	r1, #8
 80086b6:	2000      	movs	r0, #0
 80086b8:	f7ff ff1e 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f); //0x3f
 80086bc:	213f      	movs	r1, #63	; 0x3f
 80086be:	2001      	movs	r0, #1
 80086c0:	f7ff ff1a 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03); //0x03
 80086c4:	2103      	movs	r1, #3
 80086c6:	2002      	movs	r0, #2
 80086c8:	f7ff ff16 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03); //0x03
 80086cc:	2103      	movs	r1, #3
 80086ce:	2003      	movs	r0, #3
 80086d0:	f7ff ff12 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03); //0x03
 80086d4:	2103      	movs	r1, #3
 80086d6:	2004      	movs	r0, #4
 80086d8:	f7ff ff0e 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02); //0x02
 80086dc:	2102      	movs	r1, #2
 80086de:	2005      	movs	r0, #5
 80086e0:	f7ff ff0a 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f); //0x0f
 80086e4:	210f      	movs	r1, #15
 80086e6:	2006      	movs	r0, #6
 80086e8:	f7ff ff06 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e); //0x0e
 80086ec:	210e      	movs	r1, #14
 80086ee:	2007      	movs	r0, #7
 80086f0:	f7ff ff02 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00); //0x00
 80086f4:	2100      	movs	r1, #0
 80086f6:	2008      	movs	r0, #8
 80086f8:	f7ff fefe 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00); //0x00
 80086fc:	2100      	movs	r1, #0
 80086fe:	2009      	movs	r0, #9
 8008700:	f7ff fefa 	bl	80084f8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8008704:	23e7      	movs	r3, #231	; 0xe7
 8008706:	733b      	strb	r3, [r7, #12]
 8008708:	23e7      	movs	r3, #231	; 0xe7
 800870a:	72fb      	strb	r3, [r7, #11]
 800870c:	23e7      	movs	r3, #231	; 0xe7
 800870e:	72bb      	strb	r3, [r7, #10]
 8008710:	23e7      	movs	r3, #231	; 0xe7
 8008712:	727b      	strb	r3, [r7, #9]
 8008714:	23e7      	movs	r3, #231	; 0xe7
 8008716:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8008718:	f107 0308 	add.w	r3, r7, #8
 800871c:	2205      	movs	r2, #5
 800871e:	4619      	mov	r1, r3
 8008720:	200a      	movs	r0, #10
 8008722:	f7ff ff0b 	bl	800853c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8008726:	23c2      	movs	r3, #194	; 0xc2
 8008728:	733b      	strb	r3, [r7, #12]
 800872a:	23c2      	movs	r3, #194	; 0xc2
 800872c:	72fb      	strb	r3, [r7, #11]
 800872e:	23c2      	movs	r3, #194	; 0xc2
 8008730:	72bb      	strb	r3, [r7, #10]
 8008732:	23c2      	movs	r3, #194	; 0xc2
 8008734:	727b      	strb	r3, [r7, #9]
 8008736:	23c2      	movs	r3, #194	; 0xc2
 8008738:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800873a:	f107 0308 	add.w	r3, r7, #8
 800873e:	2205      	movs	r2, #5
 8008740:	4619      	mov	r1, r3
 8008742:	200b      	movs	r0, #11
 8008744:	f7ff fefa 	bl	800853c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8008748:	21c3      	movs	r1, #195	; 0xc3
 800874a:	200c      	movs	r0, #12
 800874c:	f7ff fed4 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8008750:	21c4      	movs	r1, #196	; 0xc4
 8008752:	200d      	movs	r0, #13
 8008754:	f7ff fed0 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8008758:	21c5      	movs	r1, #197	; 0xc5
 800875a:	200e      	movs	r0, #14
 800875c:	f7ff fecc 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8008760:	21c6      	movs	r1, #198	; 0xc6
 8008762:	200f      	movs	r0, #15
 8008764:	f7ff fec8 	bl	80084f8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8008768:	23e7      	movs	r3, #231	; 0xe7
 800876a:	733b      	strb	r3, [r7, #12]
 800876c:	23e7      	movs	r3, #231	; 0xe7
 800876e:	72fb      	strb	r3, [r7, #11]
 8008770:	23e7      	movs	r3, #231	; 0xe7
 8008772:	72bb      	strb	r3, [r7, #10]
 8008774:	23e7      	movs	r3, #231	; 0xe7
 8008776:	727b      	strb	r3, [r7, #9]
 8008778:	23e7      	movs	r3, #231	; 0xe7
 800877a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800877c:	f107 0308 	add.w	r3, r7, #8
 8008780:	2205      	movs	r2, #5
 8008782:	4619      	mov	r1, r3
 8008784:	2010      	movs	r0, #16
 8008786:	f7ff fed9 	bl	800853c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800878a:	2100      	movs	r1, #0
 800878c:	2011      	movs	r0, #17
 800878e:	f7ff feb3 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8008792:	2100      	movs	r1, #0
 8008794:	2012      	movs	r0, #18
 8008796:	f7ff feaf 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800879a:	2100      	movs	r1, #0
 800879c:	2013      	movs	r0, #19
 800879e:	f7ff feab 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80087a2:	2100      	movs	r1, #0
 80087a4:	2014      	movs	r0, #20
 80087a6:	f7ff fea7 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80087aa:	2100      	movs	r1, #0
 80087ac:	2015      	movs	r0, #21
 80087ae:	f7ff fea3 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80087b2:	2100      	movs	r1, #0
 80087b4:	2016      	movs	r0, #22
 80087b6:	f7ff fe9f 	bl	80084f8 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80087ba:	f000 fb15 	bl	8008de8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80087be:	2100      	movs	r1, #0
 80087c0:	201c      	movs	r0, #28
 80087c2:	f7ff fe99 	bl	80084f8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80087c6:	2100      	movs	r1, #0
 80087c8:	201d      	movs	r0, #29
 80087ca:	f7ff fe95 	bl	80084f8 <NRF24_write_register>
	printRadioSettings();
 80087ce:	f000 fb25 	bl	8008e1c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80087d2:	210f      	movs	r1, #15
 80087d4:	200f      	movs	r0, #15
 80087d6:	f000 f8cd 	bl	8008974 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m18dB);
 80087da:	2000      	movs	r0, #0
 80087dc:	f000 f9b3 	bl	8008b46 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80087e0:	2001      	movs	r0, #1
 80087e2:	f000 f9e9 	bl	8008bb8 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80087e6:	2001      	movs	r0, #1
 80087e8:	f000 fa2c 	bl	8008c44 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80087ec:	f000 f97e 	bl	8008aec <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80087f0:	2020      	movs	r0, #32
 80087f2:	f000 f8ef 	bl	80089d4 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80087f6:	f000 faee 	bl	8008dd6 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(52);
 80087fa:	2034      	movs	r0, #52	; 0x34
 80087fc:	f000 f8d5 	bl	80089aa <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8008800:	f7ff ff16 	bl	8008630 <NRF24_flush_tx>
	NRF24_flush_rx();
 8008804:	f7ff ff1c 	bl	8008640 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8008808:	f000 fa44 	bl	8008c94 <NRF24_powerDown>
	
}
 800880c:	bf00      	nop
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008816:	b002      	add	sp, #8
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	20000540 	.word	0x20000540
 8008820:	20000538 	.word	0x20000538
 8008824:	2000053c 	.word	0x2000053c
 8008828:	2000053e 	.word	0x2000053e

0800882c <NRF24_stopListening>:
 *
 * @returns None
 */
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8008830:	2000      	movs	r0, #0
 8008832:	f7ff fdf7 	bl	8008424 <NRF24_ce>
	NRF24_flush_tx();
 8008836:	f7ff fefb 	bl	8008630 <NRF24_flush_tx>
	NRF24_flush_rx();
 800883a:	f7ff ff01 	bl	8008640 <NRF24_flush_rx>
}
 800883e:	bf00      	nop
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <NRF24_write>:
 *
 * @returns True if the data was successfully sent, false otherwise.
 */
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8008850:	f000 fac1 	bl	8008dd6 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fa5a 	bl	8008d12 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 800885e:	f7f9 fda7 	bl	80023b0 <HAL_GetTick>
 8008862:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8008864:	230a      	movs	r3, #10
 8008866:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8008868:	f107 030d 	add.w	r3, r7, #13
 800886c:	2201      	movs	r2, #1
 800886e:	4619      	mov	r1, r3
 8008870:	2008      	movs	r0, #8
 8008872:	f7ff fe1d 	bl	80084b0 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8008876:	f7ff feeb 	bl	8008650 <NRF24_get_status>
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008884:	2b00      	cmp	r3, #0
 8008886:	d107      	bne.n	8008898 <NRF24_write+0x54>
 8008888:	f7f9 fd92 	bl	80023b0 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	429a      	cmp	r2, r3
 8008896:	d8e7      	bhi.n	8008868 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8008898:	f107 010b 	add.w	r1, r7, #11
 800889c:	f107 030c 	add.w	r3, r7, #12
 80088a0:	4a0c      	ldr	r2, [pc, #48]	; (80088d4 <NRF24_write+0x90>)
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 fa64 	bl	8008d70 <NRF24_whatHappened>
	retStatus = tx_ok;
 80088a8:	7b3b      	ldrb	r3, [r7, #12]
 80088aa:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 80088ac:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <NRF24_write+0x90>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d005      	beq.n	80088c0 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 80088b4:	f000 f8b2 	bl	8008a1c <NRF24_getDynamicPayloadSize>
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <NRF24_write+0x94>)
 80088be:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 80088c0:	f000 f80c 	bl	80088dc <NRF24_available>
	NRF24_flush_tx();
 80088c4:	f7ff feb4 	bl	8008630 <NRF24_flush_tx>
	return retStatus;
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000531 	.word	0x20000531
 80088d8:	20000532 	.word	0x20000532

080088dc <NRF24_available>:
 *
 * @returns True if there is available data to read, false otherwise.
 */
//16. Check for available data to read
bool NRF24_available(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80088e0:	2000      	movs	r0, #0
 80088e2:	f000 f9e6 	bl	8008cb2 <NRF24_availablePipe>
 80088e6:	4603      	mov	r3, r0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	bd80      	pop	{r7, pc}

080088ec <NRF24_read>:
 *
 * @returns True if the read operation was successful, false otherwise.
 */
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff fe67 	bl	80085d0 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8008902:	2017      	movs	r0, #23
 8008904:	f7ff fdae 	bl	8008464 <NRF24_read_register>
 8008908:	4603      	mov	r3, r0
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8008910:	f7ff fe96 	bl	8008640 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8008914:	f000 f882 	bl	8008a1c <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8008918:	7bfb      	ldrb	r3, [r7, #15]
 800891a:	2b00      	cmp	r3, #0
 800891c:	bf14      	ite	ne
 800891e:	2301      	movne	r3, #1
 8008920:	2300      	moveq	r3, #0
 8008922:	b2db      	uxtb	r3, r3
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <NRF24_openWritingPipe>:
 *
 * @returns None
 */
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8008936:	463b      	mov	r3, r7
 8008938:	2205      	movs	r2, #5
 800893a:	4619      	mov	r1, r3
 800893c:	200a      	movs	r0, #10
 800893e:	f7ff fdfd 	bl	800853c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8008942:	463b      	mov	r3, r7
 8008944:	2205      	movs	r2, #5
 8008946:	4619      	mov	r1, r3
 8008948:	2010      	movs	r0, #16
 800894a:	f7ff fdf7 	bl	800853c <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 800894e:	2320      	movs	r3, #32
 8008950:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8008952:	4b07      	ldr	r3, [pc, #28]	; (8008970 <NRF24_openWritingPipe+0x44>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	7bfa      	ldrb	r2, [r7, #15]
 8008958:	4293      	cmp	r3, r2
 800895a:	bf28      	it	cs
 800895c:	4613      	movcs	r3, r2
 800895e:	b2db      	uxtb	r3, r3
 8008960:	4619      	mov	r1, r3
 8008962:	2011      	movs	r0, #17
 8008964:	f7ff fdc8 	bl	80084f8 <NRF24_write_register>
}
 8008968:	bf00      	nop
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20000533 	.word	0x20000533

08008974 <NRF24_setRetries>:
 *
 * @returns None
 */
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	460a      	mov	r2, r1
 800897e:	71fb      	strb	r3, [r7, #7]
 8008980:	4613      	mov	r3, r2
 8008982:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	b25a      	sxtb	r2, r3
 800898a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	b25b      	sxtb	r3, r3
 8008994:	4313      	orrs	r3, r2
 8008996:	b25b      	sxtb	r3, r3
 8008998:	b2db      	uxtb	r3, r3
 800899a:	4619      	mov	r1, r3
 800899c:	2004      	movs	r0, #4
 800899e:	f7ff fdab 	bl	80084f8 <NRF24_write_register>
}
 80089a2:	bf00      	nop
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <NRF24_setChannel>:
 *
 * @returns None
 */
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	4603      	mov	r3, r0
 80089b2:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80089b4:	237f      	movs	r3, #127	; 0x7f
 80089b6:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80089b8:	7bfa      	ldrb	r2, [r7, #15]
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	4293      	cmp	r3, r2
 80089be:	bf28      	it	cs
 80089c0:	4613      	movcs	r3, r2
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	4619      	mov	r1, r3
 80089c6:	2005      	movs	r0, #5
 80089c8:	f7ff fd96 	bl	80084f8 <NRF24_write_register>
}
 80089cc:	bf00      	nop
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <NRF24_setPayloadSize>:
 *
 * @returns None
 */
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80089de:	2320      	movs	r3, #32
 80089e0:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80089e2:	7bfa      	ldrb	r2, [r7, #15]
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	4293      	cmp	r3, r2
 80089e8:	bf28      	it	cs
 80089ea:	4613      	movcs	r3, r2
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	4b04      	ldr	r3, [pc, #16]	; (8008a00 <NRF24_setPayloadSize+0x2c>)
 80089f0:	701a      	strb	r2, [r3, #0]
}
 80089f2:	bf00      	nop
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	20000533 	.word	0x20000533

08008a04 <NRF24_getPayloadSize>:
 *
 * @returns The payload size of the NRF24 module.
 */
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8008a04:	b480      	push	{r7}
 8008a06:	af00      	add	r7, sp, #0
	return payload_size;
 8008a08:	4b03      	ldr	r3, [pc, #12]	; (8008a18 <NRF24_getPayloadSize+0x14>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	20000533 	.word	0x20000533

08008a1c <NRF24_getDynamicPayloadSize>:
 *
 * @returns The size of the dynamic payload.
 */
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8008a20:	2060      	movs	r0, #96	; 0x60
 8008a22:	f7ff fd1f 	bl	8008464 <NRF24_read_register>
 8008a26:	4603      	mov	r3, r0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <NRF24_enableAckPayload>:
 *
 * @returns None
 */
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8008a30:	201d      	movs	r0, #29
 8008a32:	f7ff fd17 	bl	8008464 <NRF24_read_register>
 8008a36:	4603      	mov	r3, r0
 8008a38:	f043 0306 	orr.w	r3, r3, #6
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	4619      	mov	r1, r3
 8008a40:	201d      	movs	r0, #29
 8008a42:	f7ff fd59 	bl	80084f8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8008a46:	201d      	movs	r0, #29
 8008a48:	f7ff fd0c 	bl	8008464 <NRF24_read_register>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10c      	bne.n	8008a6c <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8008a52:	f000 f9c9 	bl	8008de8 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8008a56:	201d      	movs	r0, #29
 8008a58:	f7ff fd04 	bl	8008464 <NRF24_read_register>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	f043 0306 	orr.w	r3, r3, #6
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	4619      	mov	r1, r3
 8008a66:	201d      	movs	r0, #29
 8008a68:	f7ff fd46 	bl	80084f8 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8008a6c:	201c      	movs	r0, #28
 8008a6e:	f7ff fcf9 	bl	8008464 <NRF24_read_register>
 8008a72:	4603      	mov	r3, r0
 8008a74:	f043 0303 	orr.w	r3, r3, #3
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	201c      	movs	r0, #28
 8008a7e:	f7ff fd3b 	bl	80084f8 <NRF24_write_register>
}
 8008a82:	bf00      	nop
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <NRF24_enableDynamicPayloads>:
 *
 * @returns None
 */
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8008a8c:	201d      	movs	r0, #29
 8008a8e:	f7ff fce9 	bl	8008464 <NRF24_read_register>
 8008a92:	4603      	mov	r3, r0
 8008a94:	f043 0304 	orr.w	r3, r3, #4
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	201d      	movs	r0, #29
 8008a9e:	f7ff fd2b 	bl	80084f8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8008aa2:	201d      	movs	r0, #29
 8008aa4:	f7ff fcde 	bl	8008464 <NRF24_read_register>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10c      	bne.n	8008ac8 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8008aae:	f000 f99b 	bl	8008de8 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8008ab2:	201d      	movs	r0, #29
 8008ab4:	f7ff fcd6 	bl	8008464 <NRF24_read_register>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f043 0304 	orr.w	r3, r3, #4
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	201d      	movs	r0, #29
 8008ac4:	f7ff fd18 	bl	80084f8 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8008ac8:	201c      	movs	r0, #28
 8008aca:	f7ff fccb 	bl	8008464 <NRF24_read_register>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	201c      	movs	r0, #28
 8008ada:	f7ff fd0d 	bl	80084f8 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8008ade:	4b02      	ldr	r3, [pc, #8]	; (8008ae8 <NRF24_enableDynamicPayloads+0x60>)
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	701a      	strb	r2, [r3, #0]
	
}
 8008ae4:	bf00      	nop
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	20000534 	.word	0x20000534

08008aec <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8008af0:	201d      	movs	r0, #29
 8008af2:	f7ff fcb7 	bl	8008464 <NRF24_read_register>
 8008af6:	4603      	mov	r3, r0
 8008af8:	f023 0304 	bic.w	r3, r3, #4
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	4619      	mov	r1, r3
 8008b00:	201d      	movs	r0, #29
 8008b02:	f7ff fcf9 	bl	80084f8 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8008b06:	2100      	movs	r1, #0
 8008b08:	201c      	movs	r0, #28
 8008b0a:	f7ff fcf5 	bl	80084f8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8008b0e:	4b02      	ldr	r3, [pc, #8]	; (8008b18 <NRF24_disableDynamicPayloads+0x2c>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
}
 8008b14:	bf00      	nop
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20000534 	.word	0x20000534

08008b1c <NRF24_setAutoAck>:
 *
 * @returns None
 */
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8008b26:	79fb      	ldrb	r3, [r7, #7]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d004      	beq.n	8008b36 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8008b2c:	213f      	movs	r1, #63	; 0x3f
 8008b2e:	2001      	movs	r0, #1
 8008b30:	f7ff fce2 	bl	80084f8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8008b34:	e003      	b.n	8008b3e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8008b36:	2100      	movs	r1, #0
 8008b38:	2001      	movs	r0, #1
 8008b3a:	f7ff fcdd 	bl	80084f8 <NRF24_write_register>
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <NRF24_setPALevel>:
 *
 * @returns None
 */
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8008b50:	2006      	movs	r0, #6
 8008b52:	f7ff fc87 	bl	8008464 <NRF24_read_register>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	f023 0306 	bic.w	r3, r3, #6
 8008b60:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8008b62:	79fb      	ldrb	r3, [r7, #7]
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d104      	bne.n	8008b72 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	f043 0306 	orr.w	r3, r3, #6
 8008b6e:	73fb      	strb	r3, [r7, #15]
 8008b70:	e019      	b.n	8008ba6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d104      	bne.n	8008b82 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	f043 0304 	orr.w	r3, r3, #4
 8008b7e:	73fb      	strb	r3, [r7, #15]
 8008b80:	e011      	b.n	8008ba6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d104      	bne.n	8008b92 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	f043 0302 	orr.w	r3, r3, #2
 8008b8e:	73fb      	strb	r3, [r7, #15]
 8008b90:	e009      	b.n	8008ba6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d006      	beq.n	8008ba6 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	2b04      	cmp	r3, #4
 8008b9c:	d103      	bne.n	8008ba6 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	f043 0306 	orr.w	r3, r3, #6
 8008ba4:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	2006      	movs	r0, #6
 8008bac:	f7ff fca4 	bl	80084f8 <NRF24_write_register>
}
 8008bb0:	bf00      	nop
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <NRF24_setDataRate>:
 *
 * @returns True if the data rate was successfully set, false otherwise.
 */
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8008bc6:	2006      	movs	r0, #6
 8008bc8:	f7ff fc4c 	bl	8008464 <NRF24_read_register>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8008bd0:	4b1b      	ldr	r3, [pc, #108]	; (8008c40 <NRF24_setDataRate+0x88>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
 8008bd8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8008bdc:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d107      	bne.n	8008bf4 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8008be4:	4b16      	ldr	r3, [pc, #88]	; (8008c40 <NRF24_setDataRate+0x88>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	f043 0320 	orr.w	r3, r3, #32
 8008bf0:	73bb      	strb	r3, [r7, #14]
 8008bf2:	e00d      	b.n	8008c10 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d107      	bne.n	8008c0a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8008bfa:	4b11      	ldr	r3, [pc, #68]	; (8008c40 <NRF24_setDataRate+0x88>)
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	f043 0308 	orr.w	r3, r3, #8
 8008c06:	73bb      	strb	r3, [r7, #14]
 8008c08:	e002      	b.n	8008c10 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8008c0a:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <NRF24_setDataRate+0x88>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	4619      	mov	r1, r3
 8008c14:	2006      	movs	r0, #6
 8008c16:	f7ff fc6f 	bl	80084f8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8008c1a:	2006      	movs	r0, #6
 8008c1c:	f7ff fc22 	bl	8008464 <NRF24_read_register>
 8008c20:	4603      	mov	r3, r0
 8008c22:	461a      	mov	r2, r3
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d102      	bne.n	8008c30 <NRF24_setDataRate+0x78>
  {
    result = true;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	73fb      	strb	r3, [r7, #15]
 8008c2e:	e002      	b.n	8008c36 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8008c30:	4b03      	ldr	r3, [pc, #12]	; (8008c40 <NRF24_setDataRate+0x88>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	20000535 	.word	0x20000535

08008c44 <NRF24_setCRCLength>:
 *
 * @returns None
 */
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8008c4e:	2000      	movs	r0, #0
 8008c50:	f7ff fc08 	bl	8008464 <NRF24_read_register>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f023 030c 	bic.w	r3, r3, #12
 8008c5a:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d00f      	beq.n	8008c82 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d104      	bne.n	8008c72 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	f043 0308 	orr.w	r3, r3, #8
 8008c6e:	73fb      	strb	r3, [r7, #15]
 8008c70:	e007      	b.n	8008c82 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	f043 0308 	orr.w	r3, r3, #8
 8008c78:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
 8008c7c:	f043 0304 	orr.w	r3, r3, #4
 8008c80:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	4619      	mov	r1, r3
 8008c86:	2000      	movs	r0, #0
 8008c88:	f7ff fc36 	bl	80084f8 <NRF24_write_register>
}
 8008c8c:	bf00      	nop
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <NRF24_powerDown>:
 *
 * @returns None
 */
//38. power down
void NRF24_powerDown(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8008c98:	2000      	movs	r0, #0
 8008c9a:	f7ff fbe3 	bl	8008464 <NRF24_read_register>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	f023 0302 	bic.w	r3, r3, #2
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f7ff fc25 	bl	80084f8 <NRF24_write_register>
}
 8008cae:	bf00      	nop
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <NRF24_availablePipe>:
 *
 * @returns True if data is available on any of the pipes, false otherwise.
 */
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8008cba:	f7ff fcc9 	bl	8008650 <NRF24_get_status>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	bf14      	ite	ne
 8008ccc:	2301      	movne	r3, #1
 8008cce:	2300      	moveq	r3, #0
 8008cd0:	73bb      	strb	r3, [r7, #14]

  if (result)
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d017      	beq.n	8008d08 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d007      	beq.n	8008cee <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	085b      	lsrs	r3, r3, #1
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	f003 0307 	and.w	r3, r3, #7
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8008cee:	2140      	movs	r1, #64	; 0x40
 8008cf0:	2007      	movs	r0, #7
 8008cf2:	f7ff fc01 	bl	80084f8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
 8008cf8:	f003 0320 	and.w	r3, r3, #32
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8008d00:	2120      	movs	r1, #32
 8008d02:	2007      	movs	r0, #7
 8008d04:	f7ff fbf8 	bl	80084f8 <NRF24_write_register>
    }
  }
  return result;
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <NRF24_startWrite>:
 *
 * @returns None
 */
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8008d1e:	2000      	movs	r0, #0
 8008d20:	f7ff fb80 	bl	8008424 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8008d24:	2000      	movs	r0, #0
 8008d26:	f7ff fb9d 	bl	8008464 <NRF24_read_register>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f043 0302 	orr.w	r3, r3, #2
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	f023 0301 	bic.w	r3, r3, #1
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	4619      	mov	r1, r3
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	f7ff fbdc 	bl	80084f8 <NRF24_write_register>
  NRF24_ce(1);
 8008d40:	2001      	movs	r0, #1
 8008d42:	f7ff fb6f 	bl	8008424 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8008d46:	2096      	movs	r0, #150	; 0x96
 8008d48:	f7ff fb2a 	bl	80083a0 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff fc1b 	bl	800858c <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8008d56:	2001      	movs	r0, #1
 8008d58:	f7ff fb64 	bl	8008424 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8008d5c:	200f      	movs	r0, #15
 8008d5e:	f7ff fb1f 	bl	80083a0 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8008d62:	2000      	movs	r0, #0
 8008d64:	f7ff fb5e 	bl	8008424 <NRF24_ce>
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <NRF24_whatHappened>:
 *
 * @returns None
 */
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8008d7c:	f7ff fc68 	bl	8008650 <NRF24_get_status>
 8008d80:	4603      	mov	r3, r0
 8008d82:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8008d8a:	2170      	movs	r1, #112	; 0x70
 8008d8c:	2007      	movs	r0, #7
 8008d8e:	f7ff fbb3 	bl	80084f8 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
 8008d94:	f003 0320 	and.w	r3, r3, #32
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	bf14      	ite	ne
 8008d9c:	2301      	movne	r3, #1
 8008d9e:	2300      	moveq	r3, #0
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	f003 0310 	and.w	r3, r3, #16
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bf14      	ite	ne
 8008db0:	2301      	movne	r3, #1
 8008db2:	2300      	moveq	r3, #0
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	bf14      	ite	ne
 8008dc4:	2301      	movne	r3, #1
 8008dc6:	2300      	moveq	r3, #0
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	701a      	strb	r2, [r3, #0]
}
 8008dce:	bf00      	nop
 8008dd0:	3718      	adds	r7, #24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <NRF24_resetStatus>:
 *
 * @returns None
 */
//46. Reset Status
void NRF24_resetStatus(void)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8008dda:	2170      	movs	r1, #112	; 0x70
 8008ddc:	2007      	movs	r0, #7
 8008dde:	f7ff fb8b 	bl	80084f8 <NRF24_write_register>
}
 8008de2:	bf00      	nop
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <NRF24_ACTIVATE_cmd>:
 *
 * @returns None
 */
//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8008dee:	2000      	movs	r0, #0
 8008df0:	f7ff faf8 	bl	80083e4 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8008df4:	2350      	movs	r3, #80	; 0x50
 8008df6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8008df8:	2373      	movs	r3, #115	; 0x73
 8008dfa:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8008dfc:	1d39      	adds	r1, r7, #4
 8008dfe:	2364      	movs	r3, #100	; 0x64
 8008e00:	2202      	movs	r2, #2
 8008e02:	4805      	ldr	r0, [pc, #20]	; (8008e18 <NRF24_ACTIVATE_cmd+0x30>)
 8008e04:	f7fb fa87 	bl	8004316 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8008e08:	2001      	movs	r0, #1
 8008e0a:	f7ff faeb 	bl	80083e4 <NRF24_csn>
}
 8008e0e:	bf00      	nop
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	20000540 	.word	0x20000540

08008e1c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8008e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e1e:	b0a1      	sub	sp, #132	; 0x84
 8008e20:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8008e22:	f107 0308 	add.w	r3, r7, #8
 8008e26:	49c3      	ldr	r1, [pc, #780]	; (8009134 <printRadioSettings+0x318>)
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 fc5f 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008e2e:	f107 0308 	add.w	r3, r7, #8
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7f7 f9cc 	bl	80001d0 <strlen>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	f107 0108 	add.w	r1, r7, #8
 8008e40:	230a      	movs	r3, #10
 8008e42:	48bd      	ldr	r0, [pc, #756]	; (8009138 <printRadioSettings+0x31c>)
 8008e44:	f7fd f861 	bl	8005f0a <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8008e48:	2000      	movs	r0, #0
 8008e4a:	f7ff fb0b 	bl	8008464 <NRF24_read_register>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8008e54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008e58:	f003 0308 	and.w	r3, r3, #8
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d013      	beq.n	8008e88 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8008e60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008e64:	f003 0304 	and.w	r3, r3, #4
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <printRadioSettings+0x5e>
 8008e6c:	f107 0308 	add.w	r3, r7, #8
 8008e70:	49b2      	ldr	r1, [pc, #712]	; (800913c <printRadioSettings+0x320>)
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fc3a 	bl	80096ec <siprintf>
 8008e78:	e00c      	b.n	8008e94 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8008e7a:	f107 0308 	add.w	r3, r7, #8
 8008e7e:	49b0      	ldr	r1, [pc, #704]	; (8009140 <printRadioSettings+0x324>)
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fc33 	bl	80096ec <siprintf>
 8008e86:	e005      	b.n	8008e94 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8008e88:	f107 0308 	add.w	r3, r7, #8
 8008e8c:	49ad      	ldr	r1, [pc, #692]	; (8009144 <printRadioSettings+0x328>)
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 fc2c 	bl	80096ec <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008e94:	f107 0308 	add.w	r3, r7, #8
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7f7 f999 	bl	80001d0 <strlen>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	f107 0108 	add.w	r1, r7, #8
 8008ea6:	230a      	movs	r3, #10
 8008ea8:	48a3      	ldr	r0, [pc, #652]	; (8009138 <printRadioSettings+0x31c>)
 8008eaa:	f7fd f82e 	bl	8005f0a <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8008eae:	2001      	movs	r0, #1
 8008eb0:	f7ff fad8 	bl	8008464 <NRF24_read_register>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008eba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008ebe:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	bfcc      	ite	gt
 8008ec6:	2301      	movgt	r3, #1
 8008ec8:	2300      	movle	r3, #0
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008ece:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008ed2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	bfcc      	ite	gt
 8008eda:	2301      	movgt	r3, #1
 8008edc:	2300      	movle	r3, #0
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008ee2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008ee6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	bfcc      	ite	gt
 8008eee:	2301      	movgt	r3, #1
 8008ef0:	2300      	movle	r3, #0
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008ef6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008efa:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	bfcc      	ite	gt
 8008f02:	2301      	movgt	r3, #1
 8008f04:	2300      	movle	r3, #0
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008f0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008f0e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	bfcc      	ite	gt
 8008f16:	2301      	movgt	r3, #1
 8008f18:	2300      	movle	r3, #0
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008f1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008f22:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bfcc      	ite	gt
 8008f2a:	2301      	movgt	r3, #1
 8008f2c:	2300      	movle	r3, #0
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f107 0008 	add.w	r0, r7, #8
 8008f34:	9303      	str	r3, [sp, #12]
 8008f36:	9402      	str	r4, [sp, #8]
 8008f38:	9101      	str	r1, [sp, #4]
 8008f3a:	9200      	str	r2, [sp, #0]
 8008f3c:	4633      	mov	r3, r6
 8008f3e:	462a      	mov	r2, r5
 8008f40:	4981      	ldr	r1, [pc, #516]	; (8009148 <printRadioSettings+0x32c>)
 8008f42:	f000 fbd3 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7f7 f940 	bl	80001d0 <strlen>
 8008f50:	4603      	mov	r3, r0
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	f107 0108 	add.w	r1, r7, #8
 8008f58:	230a      	movs	r3, #10
 8008f5a:	4877      	ldr	r0, [pc, #476]	; (8009138 <printRadioSettings+0x31c>)
 8008f5c:	f7fc ffd5 	bl	8005f0a <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8008f60:	2002      	movs	r0, #2
 8008f62:	f7ff fa7f 	bl	8008464 <NRF24_read_register>
 8008f66:	4603      	mov	r3, r0
 8008f68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008f6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008f70:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bfcc      	ite	gt
 8008f78:	2301      	movgt	r3, #1
 8008f7a:	2300      	movle	r3, #0
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008f80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008f84:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	bfcc      	ite	gt
 8008f8c:	2301      	movgt	r3, #1
 8008f8e:	2300      	movle	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008f94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008f98:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	bfcc      	ite	gt
 8008fa0:	2301      	movgt	r3, #1
 8008fa2:	2300      	movle	r3, #0
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008fa8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008fac:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	bfcc      	ite	gt
 8008fb4:	2301      	movgt	r3, #1
 8008fb6:	2300      	movle	r3, #0
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008fbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008fc0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bfcc      	ite	gt
 8008fc8:	2301      	movgt	r3, #1
 8008fca:	2300      	movle	r3, #0
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8008fd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008fd4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bfcc      	ite	gt
 8008fdc:	2301      	movgt	r3, #1
 8008fde:	2300      	movle	r3, #0
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	f107 0008 	add.w	r0, r7, #8
 8008fe6:	9303      	str	r3, [sp, #12]
 8008fe8:	9402      	str	r4, [sp, #8]
 8008fea:	9101      	str	r1, [sp, #4]
 8008fec:	9200      	str	r2, [sp, #0]
 8008fee:	4633      	mov	r3, r6
 8008ff0:	462a      	mov	r2, r5
 8008ff2:	4956      	ldr	r1, [pc, #344]	; (800914c <printRadioSettings+0x330>)
 8008ff4:	f000 fb7a 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8008ff8:	f107 0308 	add.w	r3, r7, #8
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7f7 f8e7 	bl	80001d0 <strlen>
 8009002:	4603      	mov	r3, r0
 8009004:	b29a      	uxth	r2, r3
 8009006:	f107 0108 	add.w	r1, r7, #8
 800900a:	230a      	movs	r3, #10
 800900c:	484a      	ldr	r0, [pc, #296]	; (8009138 <printRadioSettings+0x31c>)
 800900e:	f7fc ff7c 	bl	8005f0a <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8009012:	2003      	movs	r0, #3
 8009014:	f7ff fa26 	bl	8008464 <NRF24_read_register>
 8009018:	4603      	mov	r3, r0
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8009022:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009026:	3302      	adds	r3, #2
 8009028:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800902c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8009030:	f107 0308 	add.w	r3, r7, #8
 8009034:	4946      	ldr	r1, [pc, #280]	; (8009150 <printRadioSettings+0x334>)
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fb58 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800903c:	f107 0308 	add.w	r3, r7, #8
 8009040:	4618      	mov	r0, r3
 8009042:	f7f7 f8c5 	bl	80001d0 <strlen>
 8009046:	4603      	mov	r3, r0
 8009048:	b29a      	uxth	r2, r3
 800904a:	f107 0108 	add.w	r1, r7, #8
 800904e:	230a      	movs	r3, #10
 8009050:	4839      	ldr	r0, [pc, #228]	; (8009138 <printRadioSettings+0x31c>)
 8009052:	f7fc ff5a 	bl	8005f0a <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8009056:	2005      	movs	r0, #5
 8009058:	f7ff fa04 	bl	8008464 <NRF24_read_register>
 800905c:	4603      	mov	r3, r0
 800905e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8009062:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800906a:	f107 0308 	add.w	r3, r7, #8
 800906e:	4939      	ldr	r1, [pc, #228]	; (8009154 <printRadioSettings+0x338>)
 8009070:	4618      	mov	r0, r3
 8009072:	f000 fb3b 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009076:	f107 0308 	add.w	r3, r7, #8
 800907a:	4618      	mov	r0, r3
 800907c:	f7f7 f8a8 	bl	80001d0 <strlen>
 8009080:	4603      	mov	r3, r0
 8009082:	b29a      	uxth	r2, r3
 8009084:	f107 0108 	add.w	r1, r7, #8
 8009088:	230a      	movs	r3, #10
 800908a:	482b      	ldr	r0, [pc, #172]	; (8009138 <printRadioSettings+0x31c>)
 800908c:	f7fc ff3d 	bl	8005f0a <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8009090:	2006      	movs	r0, #6
 8009092:	f7ff f9e7 	bl	8008464 <NRF24_read_register>
 8009096:	4603      	mov	r3, r0
 8009098:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800909c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80090a0:	f003 0308 	and.w	r3, r3, #8
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d006      	beq.n	80090b6 <printRadioSettings+0x29a>
 80090a8:	f107 0308 	add.w	r3, r7, #8
 80090ac:	492a      	ldr	r1, [pc, #168]	; (8009158 <printRadioSettings+0x33c>)
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fb1c 	bl	80096ec <siprintf>
 80090b4:	e005      	b.n	80090c2 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80090b6:	f107 0308 	add.w	r3, r7, #8
 80090ba:	4928      	ldr	r1, [pc, #160]	; (800915c <printRadioSettings+0x340>)
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 fb15 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80090c2:	f107 0308 	add.w	r3, r7, #8
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f7 f882 	bl	80001d0 <strlen>
 80090cc:	4603      	mov	r3, r0
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	f107 0108 	add.w	r1, r7, #8
 80090d4:	230a      	movs	r3, #10
 80090d6:	4818      	ldr	r0, [pc, #96]	; (8009138 <printRadioSettings+0x31c>)
 80090d8:	f7fc ff17 	bl	8005f0a <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80090dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80090e0:	f003 0306 	and.w	r3, r3, #6
 80090e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80090e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80090ec:	085b      	lsrs	r3, r3, #1
 80090ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80090f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d106      	bne.n	8009108 <printRadioSettings+0x2ec>
 80090fa:	f107 0308 	add.w	r3, r7, #8
 80090fe:	4918      	ldr	r1, [pc, #96]	; (8009160 <printRadioSettings+0x344>)
 8009100:	4618      	mov	r0, r3
 8009102:	f000 faf3 	bl	80096ec <siprintf>
 8009106:	e03b      	b.n	8009180 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8009108:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800910c:	2b01      	cmp	r3, #1
 800910e:	d106      	bne.n	800911e <printRadioSettings+0x302>
 8009110:	f107 0308 	add.w	r3, r7, #8
 8009114:	4913      	ldr	r1, [pc, #76]	; (8009164 <printRadioSettings+0x348>)
 8009116:	4618      	mov	r0, r3
 8009118:	f000 fae8 	bl	80096ec <siprintf>
 800911c:	e030      	b.n	8009180 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800911e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009122:	2b02      	cmp	r3, #2
 8009124:	d122      	bne.n	800916c <printRadioSettings+0x350>
 8009126:	f107 0308 	add.w	r3, r7, #8
 800912a:	490f      	ldr	r1, [pc, #60]	; (8009168 <printRadioSettings+0x34c>)
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fadd 	bl	80096ec <siprintf>
 8009132:	e025      	b.n	8009180 <printRadioSettings+0x364>
 8009134:	0800bb8c 	.word	0x0800bb8c
 8009138:	20000598 	.word	0x20000598
 800913c:	0800bbc0 	.word	0x0800bbc0
 8009140:	0800bbdc 	.word	0x0800bbdc
 8009144:	0800bbf8 	.word	0x0800bbf8
 8009148:	0800bc0c 	.word	0x0800bc0c
 800914c:	0800bc50 	.word	0x0800bc50
 8009150:	0800bc9c 	.word	0x0800bc9c
 8009154:	0800bcb8 	.word	0x0800bcb8
 8009158:	0800bccc 	.word	0x0800bccc
 800915c:	0800bce4 	.word	0x0800bce4
 8009160:	0800bcfc 	.word	0x0800bcfc
 8009164:	0800bd10 	.word	0x0800bd10
 8009168:	0800bd24 	.word	0x0800bd24
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800916c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009170:	2b03      	cmp	r3, #3
 8009172:	d105      	bne.n	8009180 <printRadioSettings+0x364>
 8009174:	f107 0308 	add.w	r3, r7, #8
 8009178:	49d7      	ldr	r1, [pc, #860]	; (80094d8 <printRadioSettings+0x6bc>)
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fab6 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009180:	f107 0308 	add.w	r3, r7, #8
 8009184:	4618      	mov	r0, r3
 8009186:	f7f7 f823 	bl	80001d0 <strlen>
 800918a:	4603      	mov	r3, r0
 800918c:	b29a      	uxth	r2, r3
 800918e:	f107 0108 	add.w	r1, r7, #8
 8009192:	230a      	movs	r3, #10
 8009194:	48d1      	ldr	r0, [pc, #836]	; (80094dc <printRadioSettings+0x6c0>)
 8009196:	f7fc feb8 	bl	8005f0a <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800919a:	463b      	mov	r3, r7
 800919c:	2205      	movs	r2, #5
 800919e:	4619      	mov	r1, r3
 80091a0:	200a      	movs	r0, #10
 80091a2:	f7ff f985 	bl	80084b0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80091a6:	793b      	ldrb	r3, [r7, #4]
 80091a8:	461c      	mov	r4, r3
 80091aa:	78fb      	ldrb	r3, [r7, #3]
 80091ac:	461d      	mov	r5, r3
 80091ae:	78bb      	ldrb	r3, [r7, #2]
 80091b0:	787a      	ldrb	r2, [r7, #1]
 80091b2:	7839      	ldrb	r1, [r7, #0]
 80091b4:	f107 0008 	add.w	r0, r7, #8
 80091b8:	9102      	str	r1, [sp, #8]
 80091ba:	9201      	str	r2, [sp, #4]
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	462b      	mov	r3, r5
 80091c0:	4622      	mov	r2, r4
 80091c2:	49c7      	ldr	r1, [pc, #796]	; (80094e0 <printRadioSettings+0x6c4>)
 80091c4:	f000 fa92 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80091c8:	f107 0308 	add.w	r3, r7, #8
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7f6 ffff 	bl	80001d0 <strlen>
 80091d2:	4603      	mov	r3, r0
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	f107 0108 	add.w	r1, r7, #8
 80091da:	230a      	movs	r3, #10
 80091dc:	48bf      	ldr	r0, [pc, #764]	; (80094dc <printRadioSettings+0x6c0>)
 80091de:	f7fc fe94 	bl	8005f0a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80091e2:	463b      	mov	r3, r7
 80091e4:	2205      	movs	r2, #5
 80091e6:	4619      	mov	r1, r3
 80091e8:	200b      	movs	r0, #11
 80091ea:	f7ff f961 	bl	80084b0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80091ee:	793b      	ldrb	r3, [r7, #4]
 80091f0:	461c      	mov	r4, r3
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	461d      	mov	r5, r3
 80091f6:	78bb      	ldrb	r3, [r7, #2]
 80091f8:	787a      	ldrb	r2, [r7, #1]
 80091fa:	7839      	ldrb	r1, [r7, #0]
 80091fc:	f107 0008 	add.w	r0, r7, #8
 8009200:	9102      	str	r1, [sp, #8]
 8009202:	9201      	str	r2, [sp, #4]
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	462b      	mov	r3, r5
 8009208:	4622      	mov	r2, r4
 800920a:	49b6      	ldr	r1, [pc, #728]	; (80094e4 <printRadioSettings+0x6c8>)
 800920c:	f000 fa6e 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009210:	f107 0308 	add.w	r3, r7, #8
 8009214:	4618      	mov	r0, r3
 8009216:	f7f6 ffdb 	bl	80001d0 <strlen>
 800921a:	4603      	mov	r3, r0
 800921c:	b29a      	uxth	r2, r3
 800921e:	f107 0108 	add.w	r1, r7, #8
 8009222:	230a      	movs	r3, #10
 8009224:	48ad      	ldr	r0, [pc, #692]	; (80094dc <printRadioSettings+0x6c0>)
 8009226:	f7fc fe70 	bl	8005f0a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800922a:	463b      	mov	r3, r7
 800922c:	2201      	movs	r2, #1
 800922e:	4619      	mov	r1, r3
 8009230:	200c      	movs	r0, #12
 8009232:	f7ff f93d 	bl	80084b0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8009236:	783b      	ldrb	r3, [r7, #0]
 8009238:	461a      	mov	r2, r3
 800923a:	f107 0308 	add.w	r3, r7, #8
 800923e:	49aa      	ldr	r1, [pc, #680]	; (80094e8 <printRadioSettings+0x6cc>)
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fa53 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009246:	f107 0308 	add.w	r3, r7, #8
 800924a:	4618      	mov	r0, r3
 800924c:	f7f6 ffc0 	bl	80001d0 <strlen>
 8009250:	4603      	mov	r3, r0
 8009252:	b29a      	uxth	r2, r3
 8009254:	f107 0108 	add.w	r1, r7, #8
 8009258:	230a      	movs	r3, #10
 800925a:	48a0      	ldr	r0, [pc, #640]	; (80094dc <printRadioSettings+0x6c0>)
 800925c:	f7fc fe55 	bl	8005f0a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8009260:	463b      	mov	r3, r7
 8009262:	2201      	movs	r2, #1
 8009264:	4619      	mov	r1, r3
 8009266:	200d      	movs	r0, #13
 8009268:	f7ff f922 	bl	80084b0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800926c:	783b      	ldrb	r3, [r7, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	f107 0308 	add.w	r3, r7, #8
 8009274:	499d      	ldr	r1, [pc, #628]	; (80094ec <printRadioSettings+0x6d0>)
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fa38 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800927c:	f107 0308 	add.w	r3, r7, #8
 8009280:	4618      	mov	r0, r3
 8009282:	f7f6 ffa5 	bl	80001d0 <strlen>
 8009286:	4603      	mov	r3, r0
 8009288:	b29a      	uxth	r2, r3
 800928a:	f107 0108 	add.w	r1, r7, #8
 800928e:	230a      	movs	r3, #10
 8009290:	4892      	ldr	r0, [pc, #584]	; (80094dc <printRadioSettings+0x6c0>)
 8009292:	f7fc fe3a 	bl	8005f0a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8009296:	463b      	mov	r3, r7
 8009298:	2201      	movs	r2, #1
 800929a:	4619      	mov	r1, r3
 800929c:	200e      	movs	r0, #14
 800929e:	f7ff f907 	bl	80084b0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80092a2:	783b      	ldrb	r3, [r7, #0]
 80092a4:	461a      	mov	r2, r3
 80092a6:	f107 0308 	add.w	r3, r7, #8
 80092aa:	4991      	ldr	r1, [pc, #580]	; (80094f0 <printRadioSettings+0x6d4>)
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 fa1d 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80092b2:	f107 0308 	add.w	r3, r7, #8
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7f6 ff8a 	bl	80001d0 <strlen>
 80092bc:	4603      	mov	r3, r0
 80092be:	b29a      	uxth	r2, r3
 80092c0:	f107 0108 	add.w	r1, r7, #8
 80092c4:	230a      	movs	r3, #10
 80092c6:	4885      	ldr	r0, [pc, #532]	; (80094dc <printRadioSettings+0x6c0>)
 80092c8:	f7fc fe1f 	bl	8005f0a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80092cc:	463b      	mov	r3, r7
 80092ce:	2201      	movs	r2, #1
 80092d0:	4619      	mov	r1, r3
 80092d2:	200f      	movs	r0, #15
 80092d4:	f7ff f8ec 	bl	80084b0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80092d8:	783b      	ldrb	r3, [r7, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	f107 0308 	add.w	r3, r7, #8
 80092e0:	4984      	ldr	r1, [pc, #528]	; (80094f4 <printRadioSettings+0x6d8>)
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 fa02 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80092e8:	f107 0308 	add.w	r3, r7, #8
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7f6 ff6f 	bl	80001d0 <strlen>
 80092f2:	4603      	mov	r3, r0
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	f107 0108 	add.w	r1, r7, #8
 80092fa:	230a      	movs	r3, #10
 80092fc:	4877      	ldr	r0, [pc, #476]	; (80094dc <printRadioSettings+0x6c0>)
 80092fe:	f7fc fe04 	bl	8005f0a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8009302:	463b      	mov	r3, r7
 8009304:	2205      	movs	r2, #5
 8009306:	4619      	mov	r1, r3
 8009308:	2010      	movs	r0, #16
 800930a:	f7ff f8d1 	bl	80084b0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800930e:	793b      	ldrb	r3, [r7, #4]
 8009310:	461c      	mov	r4, r3
 8009312:	78fb      	ldrb	r3, [r7, #3]
 8009314:	461d      	mov	r5, r3
 8009316:	78bb      	ldrb	r3, [r7, #2]
 8009318:	787a      	ldrb	r2, [r7, #1]
 800931a:	7839      	ldrb	r1, [r7, #0]
 800931c:	f107 0008 	add.w	r0, r7, #8
 8009320:	9102      	str	r1, [sp, #8]
 8009322:	9201      	str	r2, [sp, #4]
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	462b      	mov	r3, r5
 8009328:	4622      	mov	r2, r4
 800932a:	4973      	ldr	r1, [pc, #460]	; (80094f8 <printRadioSettings+0x6dc>)
 800932c:	f000 f9de 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009330:	f107 0308 	add.w	r3, r7, #8
 8009334:	4618      	mov	r0, r3
 8009336:	f7f6 ff4b 	bl	80001d0 <strlen>
 800933a:	4603      	mov	r3, r0
 800933c:	b29a      	uxth	r2, r3
 800933e:	f107 0108 	add.w	r1, r7, #8
 8009342:	230a      	movs	r3, #10
 8009344:	4865      	ldr	r0, [pc, #404]	; (80094dc <printRadioSettings+0x6c0>)
 8009346:	f7fc fde0 	bl	8005f0a <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800934a:	2011      	movs	r0, #17
 800934c:	f7ff f88a 	bl	8008464 <NRF24_read_register>
 8009350:	4603      	mov	r3, r0
 8009352:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8009356:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800935a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800935e:	f107 0308 	add.w	r3, r7, #8
 8009362:	4966      	ldr	r1, [pc, #408]	; (80094fc <printRadioSettings+0x6e0>)
 8009364:	4618      	mov	r0, r3
 8009366:	f000 f9c1 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800936a:	f107 0308 	add.w	r3, r7, #8
 800936e:	4618      	mov	r0, r3
 8009370:	f7f6 ff2e 	bl	80001d0 <strlen>
 8009374:	4603      	mov	r3, r0
 8009376:	b29a      	uxth	r2, r3
 8009378:	f107 0108 	add.w	r1, r7, #8
 800937c:	230a      	movs	r3, #10
 800937e:	4857      	ldr	r0, [pc, #348]	; (80094dc <printRadioSettings+0x6c0>)
 8009380:	f7fc fdc3 	bl	8005f0a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8009384:	2012      	movs	r0, #18
 8009386:	f7ff f86d 	bl	8008464 <NRF24_read_register>
 800938a:	4603      	mov	r3, r0
 800938c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8009390:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009394:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009398:	f107 0308 	add.w	r3, r7, #8
 800939c:	4958      	ldr	r1, [pc, #352]	; (8009500 <printRadioSettings+0x6e4>)
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 f9a4 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80093a4:	f107 0308 	add.w	r3, r7, #8
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7f6 ff11 	bl	80001d0 <strlen>
 80093ae:	4603      	mov	r3, r0
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	f107 0108 	add.w	r1, r7, #8
 80093b6:	230a      	movs	r3, #10
 80093b8:	4848      	ldr	r0, [pc, #288]	; (80094dc <printRadioSettings+0x6c0>)
 80093ba:	f7fc fda6 	bl	8005f0a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80093be:	2013      	movs	r0, #19
 80093c0:	f7ff f850 	bl	8008464 <NRF24_read_register>
 80093c4:	4603      	mov	r3, r0
 80093c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80093ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80093ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80093d2:	f107 0308 	add.w	r3, r7, #8
 80093d6:	494b      	ldr	r1, [pc, #300]	; (8009504 <printRadioSettings+0x6e8>)
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 f987 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80093de:	f107 0308 	add.w	r3, r7, #8
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7f6 fef4 	bl	80001d0 <strlen>
 80093e8:	4603      	mov	r3, r0
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	f107 0108 	add.w	r1, r7, #8
 80093f0:	230a      	movs	r3, #10
 80093f2:	483a      	ldr	r0, [pc, #232]	; (80094dc <printRadioSettings+0x6c0>)
 80093f4:	f7fc fd89 	bl	8005f0a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80093f8:	2014      	movs	r0, #20
 80093fa:	f7ff f833 	bl	8008464 <NRF24_read_register>
 80093fe:	4603      	mov	r3, r0
 8009400:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8009404:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009408:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800940c:	f107 0308 	add.w	r3, r7, #8
 8009410:	493d      	ldr	r1, [pc, #244]	; (8009508 <printRadioSettings+0x6ec>)
 8009412:	4618      	mov	r0, r3
 8009414:	f000 f96a 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009418:	f107 0308 	add.w	r3, r7, #8
 800941c:	4618      	mov	r0, r3
 800941e:	f7f6 fed7 	bl	80001d0 <strlen>
 8009422:	4603      	mov	r3, r0
 8009424:	b29a      	uxth	r2, r3
 8009426:	f107 0108 	add.w	r1, r7, #8
 800942a:	230a      	movs	r3, #10
 800942c:	482b      	ldr	r0, [pc, #172]	; (80094dc <printRadioSettings+0x6c0>)
 800942e:	f7fc fd6c 	bl	8005f0a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8009432:	2015      	movs	r0, #21
 8009434:	f7ff f816 	bl	8008464 <NRF24_read_register>
 8009438:	4603      	mov	r3, r0
 800943a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800943e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009442:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009446:	f107 0308 	add.w	r3, r7, #8
 800944a:	4930      	ldr	r1, [pc, #192]	; (800950c <printRadioSettings+0x6f0>)
 800944c:	4618      	mov	r0, r3
 800944e:	f000 f94d 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009452:	f107 0308 	add.w	r3, r7, #8
 8009456:	4618      	mov	r0, r3
 8009458:	f7f6 feba 	bl	80001d0 <strlen>
 800945c:	4603      	mov	r3, r0
 800945e:	b29a      	uxth	r2, r3
 8009460:	f107 0108 	add.w	r1, r7, #8
 8009464:	230a      	movs	r3, #10
 8009466:	481d      	ldr	r0, [pc, #116]	; (80094dc <printRadioSettings+0x6c0>)
 8009468:	f7fc fd4f 	bl	8005f0a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800946c:	2016      	movs	r0, #22
 800946e:	f7fe fff9 	bl	8008464 <NRF24_read_register>
 8009472:	4603      	mov	r3, r0
 8009474:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8009478:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800947c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009480:	f107 0308 	add.w	r3, r7, #8
 8009484:	4922      	ldr	r1, [pc, #136]	; (8009510 <printRadioSettings+0x6f4>)
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f930 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800948c:	f107 0308 	add.w	r3, r7, #8
 8009490:	4618      	mov	r0, r3
 8009492:	f7f6 fe9d 	bl	80001d0 <strlen>
 8009496:	4603      	mov	r3, r0
 8009498:	b29a      	uxth	r2, r3
 800949a:	f107 0108 	add.w	r1, r7, #8
 800949e:	230a      	movs	r3, #10
 80094a0:	480e      	ldr	r0, [pc, #56]	; (80094dc <printRadioSettings+0x6c0>)
 80094a2:	f7fc fd32 	bl	8005f0a <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80094a6:	201c      	movs	r0, #28
 80094a8:	f7fe ffdc 	bl	8008464 <NRF24_read_register>
 80094ac:	4603      	mov	r3, r0
 80094ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80094b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80094b6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	bfcc      	ite	gt
 80094be:	2301      	movgt	r3, #1
 80094c0:	2300      	movle	r3, #0
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80094c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80094ca:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	bfcc      	ite	gt
 80094d2:	2301      	movgt	r3, #1
 80094d4:	2300      	movle	r3, #0
 80094d6:	e01d      	b.n	8009514 <printRadioSettings+0x6f8>
 80094d8:	0800bd38 	.word	0x0800bd38
 80094dc:	20000598 	.word	0x20000598
 80094e0:	0800bd4c 	.word	0x0800bd4c
 80094e4:	0800bd7c 	.word	0x0800bd7c
 80094e8:	0800bdac 	.word	0x0800bdac
 80094ec:	0800bdd4 	.word	0x0800bdd4
 80094f0:	0800bdfc 	.word	0x0800bdfc
 80094f4:	0800be24 	.word	0x0800be24
 80094f8:	0800be4c 	.word	0x0800be4c
 80094fc:	0800be78 	.word	0x0800be78
 8009500:	0800be94 	.word	0x0800be94
 8009504:	0800beb0 	.word	0x0800beb0
 8009508:	0800becc 	.word	0x0800becc
 800950c:	0800bee8 	.word	0x0800bee8
 8009510:	0800bf04 	.word	0x0800bf04
 8009514:	b2db      	uxtb	r3, r3
 8009516:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009518:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800951c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009520:	2b00      	cmp	r3, #0
 8009522:	bfcc      	ite	gt
 8009524:	2301      	movgt	r3, #1
 8009526:	2300      	movle	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800952c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009530:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009534:	2b00      	cmp	r3, #0
 8009536:	bfcc      	ite	gt
 8009538:	2301      	movgt	r3, #1
 800953a:	2300      	movle	r3, #0
 800953c:	b2db      	uxtb	r3, r3
 800953e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009540:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009544:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8009548:	2b00      	cmp	r3, #0
 800954a:	bfcc      	ite	gt
 800954c:	2301      	movgt	r3, #1
 800954e:	2300      	movle	r3, #0
 8009550:	b2db      	uxtb	r3, r3
 8009552:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8009554:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009558:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800955c:	2b00      	cmp	r3, #0
 800955e:	bfcc      	ite	gt
 8009560:	2301      	movgt	r3, #1
 8009562:	2300      	movle	r3, #0
 8009564:	b2db      	uxtb	r3, r3
 8009566:	f107 0008 	add.w	r0, r7, #8
 800956a:	9303      	str	r3, [sp, #12]
 800956c:	9402      	str	r4, [sp, #8]
 800956e:	9101      	str	r1, [sp, #4]
 8009570:	9200      	str	r2, [sp, #0]
 8009572:	4633      	mov	r3, r6
 8009574:	462a      	mov	r2, r5
 8009576:	4936      	ldr	r1, [pc, #216]	; (8009650 <printRadioSettings+0x834>)
 8009578:	f000 f8b8 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800957c:	f107 0308 	add.w	r3, r7, #8
 8009580:	4618      	mov	r0, r3
 8009582:	f7f6 fe25 	bl	80001d0 <strlen>
 8009586:	4603      	mov	r3, r0
 8009588:	b29a      	uxth	r2, r3
 800958a:	f107 0108 	add.w	r1, r7, #8
 800958e:	230a      	movs	r3, #10
 8009590:	4830      	ldr	r0, [pc, #192]	; (8009654 <printRadioSettings+0x838>)
 8009592:	f7fc fcba 	bl	8005f0a <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8009596:	201d      	movs	r0, #29
 8009598:	f7fe ff64 	bl	8008464 <NRF24_read_register>
 800959c:	4603      	mov	r3, r0
 800959e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80095a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80095a6:	f003 0304 	and.w	r3, r3, #4
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d006      	beq.n	80095bc <printRadioSettings+0x7a0>
 80095ae:	f107 0308 	add.w	r3, r7, #8
 80095b2:	4929      	ldr	r1, [pc, #164]	; (8009658 <printRadioSettings+0x83c>)
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 f899 	bl	80096ec <siprintf>
 80095ba:	e005      	b.n	80095c8 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80095bc:	f107 0308 	add.w	r3, r7, #8
 80095c0:	4926      	ldr	r1, [pc, #152]	; (800965c <printRadioSettings+0x840>)
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 f892 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80095c8:	f107 0308 	add.w	r3, r7, #8
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7f6 fdff 	bl	80001d0 <strlen>
 80095d2:	4603      	mov	r3, r0
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	f107 0108 	add.w	r1, r7, #8
 80095da:	230a      	movs	r3, #10
 80095dc:	481d      	ldr	r0, [pc, #116]	; (8009654 <printRadioSettings+0x838>)
 80095de:	f7fc fc94 	bl	8005f0a <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80095e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80095e6:	f003 0302 	and.w	r3, r3, #2
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d006      	beq.n	80095fc <printRadioSettings+0x7e0>
 80095ee:	f107 0308 	add.w	r3, r7, #8
 80095f2:	491b      	ldr	r1, [pc, #108]	; (8009660 <printRadioSettings+0x844>)
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 f879 	bl	80096ec <siprintf>
 80095fa:	e005      	b.n	8009608 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80095fc:	f107 0308 	add.w	r3, r7, #8
 8009600:	4918      	ldr	r1, [pc, #96]	; (8009664 <printRadioSettings+0x848>)
 8009602:	4618      	mov	r0, r3
 8009604:	f000 f872 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8009608:	f107 0308 	add.w	r3, r7, #8
 800960c:	4618      	mov	r0, r3
 800960e:	f7f6 fddf 	bl	80001d0 <strlen>
 8009612:	4603      	mov	r3, r0
 8009614:	b29a      	uxth	r2, r3
 8009616:	f107 0108 	add.w	r1, r7, #8
 800961a:	230a      	movs	r3, #10
 800961c:	480d      	ldr	r0, [pc, #52]	; (8009654 <printRadioSettings+0x838>)
 800961e:	f7fc fc74 	bl	8005f0a <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8009622:	f107 0308 	add.w	r3, r7, #8
 8009626:	4910      	ldr	r1, [pc, #64]	; (8009668 <printRadioSettings+0x84c>)
 8009628:	4618      	mov	r0, r3
 800962a:	f000 f85f 	bl	80096ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800962e:	f107 0308 	add.w	r3, r7, #8
 8009632:	4618      	mov	r0, r3
 8009634:	f7f6 fdcc 	bl	80001d0 <strlen>
 8009638:	4603      	mov	r3, r0
 800963a:	b29a      	uxth	r2, r3
 800963c:	f107 0108 	add.w	r1, r7, #8
 8009640:	230a      	movs	r3, #10
 8009642:	4804      	ldr	r0, [pc, #16]	; (8009654 <printRadioSettings+0x838>)
 8009644:	f7fc fc61 	bl	8005f0a <HAL_UART_Transmit>
}
 8009648:	bf00      	nop
 800964a:	3774      	adds	r7, #116	; 0x74
 800964c:	46bd      	mov	sp, r7
 800964e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009650:	0800bf20 	.word	0x0800bf20
 8009654:	20000598 	.word	0x20000598
 8009658:	0800bf6c 	.word	0x0800bf6c
 800965c:	0800bf84 	.word	0x0800bf84
 8009660:	0800bf9c 	.word	0x0800bf9c
 8009664:	0800bfb8 	.word	0x0800bfb8
 8009668:	0800bb8c 	.word	0x0800bb8c

0800966c <__errno>:
 800966c:	4b01      	ldr	r3, [pc, #4]	; (8009674 <__errno+0x8>)
 800966e:	6818      	ldr	r0, [r3, #0]
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	2000014c 	.word	0x2000014c

08009678 <__libc_init_array>:
 8009678:	b570      	push	{r4, r5, r6, lr}
 800967a:	4d0d      	ldr	r5, [pc, #52]	; (80096b0 <__libc_init_array+0x38>)
 800967c:	4c0d      	ldr	r4, [pc, #52]	; (80096b4 <__libc_init_array+0x3c>)
 800967e:	1b64      	subs	r4, r4, r5
 8009680:	10a4      	asrs	r4, r4, #2
 8009682:	2600      	movs	r6, #0
 8009684:	42a6      	cmp	r6, r4
 8009686:	d109      	bne.n	800969c <__libc_init_array+0x24>
 8009688:	4d0b      	ldr	r5, [pc, #44]	; (80096b8 <__libc_init_array+0x40>)
 800968a:	4c0c      	ldr	r4, [pc, #48]	; (80096bc <__libc_init_array+0x44>)
 800968c:	f002 fa5e 	bl	800bb4c <_init>
 8009690:	1b64      	subs	r4, r4, r5
 8009692:	10a4      	asrs	r4, r4, #2
 8009694:	2600      	movs	r6, #0
 8009696:	42a6      	cmp	r6, r4
 8009698:	d105      	bne.n	80096a6 <__libc_init_array+0x2e>
 800969a:	bd70      	pop	{r4, r5, r6, pc}
 800969c:	f855 3b04 	ldr.w	r3, [r5], #4
 80096a0:	4798      	blx	r3
 80096a2:	3601      	adds	r6, #1
 80096a4:	e7ee      	b.n	8009684 <__libc_init_array+0xc>
 80096a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096aa:	4798      	blx	r3
 80096ac:	3601      	adds	r6, #1
 80096ae:	e7f2      	b.n	8009696 <__libc_init_array+0x1e>
 80096b0:	0800c1f8 	.word	0x0800c1f8
 80096b4:	0800c1f8 	.word	0x0800c1f8
 80096b8:	0800c1f8 	.word	0x0800c1f8
 80096bc:	0800c1fc 	.word	0x0800c1fc

080096c0 <memcpy>:
 80096c0:	440a      	add	r2, r1
 80096c2:	4291      	cmp	r1, r2
 80096c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096c8:	d100      	bne.n	80096cc <memcpy+0xc>
 80096ca:	4770      	bx	lr
 80096cc:	b510      	push	{r4, lr}
 80096ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096d6:	4291      	cmp	r1, r2
 80096d8:	d1f9      	bne.n	80096ce <memcpy+0xe>
 80096da:	bd10      	pop	{r4, pc}

080096dc <memset>:
 80096dc:	4402      	add	r2, r0
 80096de:	4603      	mov	r3, r0
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d100      	bne.n	80096e6 <memset+0xa>
 80096e4:	4770      	bx	lr
 80096e6:	f803 1b01 	strb.w	r1, [r3], #1
 80096ea:	e7f9      	b.n	80096e0 <memset+0x4>

080096ec <siprintf>:
 80096ec:	b40e      	push	{r1, r2, r3}
 80096ee:	b500      	push	{lr}
 80096f0:	b09c      	sub	sp, #112	; 0x70
 80096f2:	ab1d      	add	r3, sp, #116	; 0x74
 80096f4:	9002      	str	r0, [sp, #8]
 80096f6:	9006      	str	r0, [sp, #24]
 80096f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096fc:	4809      	ldr	r0, [pc, #36]	; (8009724 <siprintf+0x38>)
 80096fe:	9107      	str	r1, [sp, #28]
 8009700:	9104      	str	r1, [sp, #16]
 8009702:	4909      	ldr	r1, [pc, #36]	; (8009728 <siprintf+0x3c>)
 8009704:	f853 2b04 	ldr.w	r2, [r3], #4
 8009708:	9105      	str	r1, [sp, #20]
 800970a:	6800      	ldr	r0, [r0, #0]
 800970c:	9301      	str	r3, [sp, #4]
 800970e:	a902      	add	r1, sp, #8
 8009710:	f000 f868 	bl	80097e4 <_svfiprintf_r>
 8009714:	9b02      	ldr	r3, [sp, #8]
 8009716:	2200      	movs	r2, #0
 8009718:	701a      	strb	r2, [r3, #0]
 800971a:	b01c      	add	sp, #112	; 0x70
 800971c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009720:	b003      	add	sp, #12
 8009722:	4770      	bx	lr
 8009724:	2000014c 	.word	0x2000014c
 8009728:	ffff0208 	.word	0xffff0208

0800972c <__ssputs_r>:
 800972c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009730:	688e      	ldr	r6, [r1, #8]
 8009732:	429e      	cmp	r6, r3
 8009734:	4682      	mov	sl, r0
 8009736:	460c      	mov	r4, r1
 8009738:	4690      	mov	r8, r2
 800973a:	461f      	mov	r7, r3
 800973c:	d838      	bhi.n	80097b0 <__ssputs_r+0x84>
 800973e:	898a      	ldrh	r2, [r1, #12]
 8009740:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009744:	d032      	beq.n	80097ac <__ssputs_r+0x80>
 8009746:	6825      	ldr	r5, [r4, #0]
 8009748:	6909      	ldr	r1, [r1, #16]
 800974a:	eba5 0901 	sub.w	r9, r5, r1
 800974e:	6965      	ldr	r5, [r4, #20]
 8009750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009758:	3301      	adds	r3, #1
 800975a:	444b      	add	r3, r9
 800975c:	106d      	asrs	r5, r5, #1
 800975e:	429d      	cmp	r5, r3
 8009760:	bf38      	it	cc
 8009762:	461d      	movcc	r5, r3
 8009764:	0553      	lsls	r3, r2, #21
 8009766:	d531      	bpl.n	80097cc <__ssputs_r+0xa0>
 8009768:	4629      	mov	r1, r5
 800976a:	f000 fb55 	bl	8009e18 <_malloc_r>
 800976e:	4606      	mov	r6, r0
 8009770:	b950      	cbnz	r0, 8009788 <__ssputs_r+0x5c>
 8009772:	230c      	movs	r3, #12
 8009774:	f8ca 3000 	str.w	r3, [sl]
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800977e:	81a3      	strh	r3, [r4, #12]
 8009780:	f04f 30ff 	mov.w	r0, #4294967295
 8009784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009788:	6921      	ldr	r1, [r4, #16]
 800978a:	464a      	mov	r2, r9
 800978c:	f7ff ff98 	bl	80096c0 <memcpy>
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800979a:	81a3      	strh	r3, [r4, #12]
 800979c:	6126      	str	r6, [r4, #16]
 800979e:	6165      	str	r5, [r4, #20]
 80097a0:	444e      	add	r6, r9
 80097a2:	eba5 0509 	sub.w	r5, r5, r9
 80097a6:	6026      	str	r6, [r4, #0]
 80097a8:	60a5      	str	r5, [r4, #8]
 80097aa:	463e      	mov	r6, r7
 80097ac:	42be      	cmp	r6, r7
 80097ae:	d900      	bls.n	80097b2 <__ssputs_r+0x86>
 80097b0:	463e      	mov	r6, r7
 80097b2:	6820      	ldr	r0, [r4, #0]
 80097b4:	4632      	mov	r2, r6
 80097b6:	4641      	mov	r1, r8
 80097b8:	f000 faa8 	bl	8009d0c <memmove>
 80097bc:	68a3      	ldr	r3, [r4, #8]
 80097be:	1b9b      	subs	r3, r3, r6
 80097c0:	60a3      	str	r3, [r4, #8]
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	4433      	add	r3, r6
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	2000      	movs	r0, #0
 80097ca:	e7db      	b.n	8009784 <__ssputs_r+0x58>
 80097cc:	462a      	mov	r2, r5
 80097ce:	f000 fb97 	bl	8009f00 <_realloc_r>
 80097d2:	4606      	mov	r6, r0
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d1e1      	bne.n	800979c <__ssputs_r+0x70>
 80097d8:	6921      	ldr	r1, [r4, #16]
 80097da:	4650      	mov	r0, sl
 80097dc:	f000 fab0 	bl	8009d40 <_free_r>
 80097e0:	e7c7      	b.n	8009772 <__ssputs_r+0x46>
	...

080097e4 <_svfiprintf_r>:
 80097e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e8:	4698      	mov	r8, r3
 80097ea:	898b      	ldrh	r3, [r1, #12]
 80097ec:	061b      	lsls	r3, r3, #24
 80097ee:	b09d      	sub	sp, #116	; 0x74
 80097f0:	4607      	mov	r7, r0
 80097f2:	460d      	mov	r5, r1
 80097f4:	4614      	mov	r4, r2
 80097f6:	d50e      	bpl.n	8009816 <_svfiprintf_r+0x32>
 80097f8:	690b      	ldr	r3, [r1, #16]
 80097fa:	b963      	cbnz	r3, 8009816 <_svfiprintf_r+0x32>
 80097fc:	2140      	movs	r1, #64	; 0x40
 80097fe:	f000 fb0b 	bl	8009e18 <_malloc_r>
 8009802:	6028      	str	r0, [r5, #0]
 8009804:	6128      	str	r0, [r5, #16]
 8009806:	b920      	cbnz	r0, 8009812 <_svfiprintf_r+0x2e>
 8009808:	230c      	movs	r3, #12
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	e0d1      	b.n	80099b6 <_svfiprintf_r+0x1d2>
 8009812:	2340      	movs	r3, #64	; 0x40
 8009814:	616b      	str	r3, [r5, #20]
 8009816:	2300      	movs	r3, #0
 8009818:	9309      	str	r3, [sp, #36]	; 0x24
 800981a:	2320      	movs	r3, #32
 800981c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009820:	f8cd 800c 	str.w	r8, [sp, #12]
 8009824:	2330      	movs	r3, #48	; 0x30
 8009826:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099d0 <_svfiprintf_r+0x1ec>
 800982a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800982e:	f04f 0901 	mov.w	r9, #1
 8009832:	4623      	mov	r3, r4
 8009834:	469a      	mov	sl, r3
 8009836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800983a:	b10a      	cbz	r2, 8009840 <_svfiprintf_r+0x5c>
 800983c:	2a25      	cmp	r2, #37	; 0x25
 800983e:	d1f9      	bne.n	8009834 <_svfiprintf_r+0x50>
 8009840:	ebba 0b04 	subs.w	fp, sl, r4
 8009844:	d00b      	beq.n	800985e <_svfiprintf_r+0x7a>
 8009846:	465b      	mov	r3, fp
 8009848:	4622      	mov	r2, r4
 800984a:	4629      	mov	r1, r5
 800984c:	4638      	mov	r0, r7
 800984e:	f7ff ff6d 	bl	800972c <__ssputs_r>
 8009852:	3001      	adds	r0, #1
 8009854:	f000 80aa 	beq.w	80099ac <_svfiprintf_r+0x1c8>
 8009858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800985a:	445a      	add	r2, fp
 800985c:	9209      	str	r2, [sp, #36]	; 0x24
 800985e:	f89a 3000 	ldrb.w	r3, [sl]
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 80a2 	beq.w	80099ac <_svfiprintf_r+0x1c8>
 8009868:	2300      	movs	r3, #0
 800986a:	f04f 32ff 	mov.w	r2, #4294967295
 800986e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009872:	f10a 0a01 	add.w	sl, sl, #1
 8009876:	9304      	str	r3, [sp, #16]
 8009878:	9307      	str	r3, [sp, #28]
 800987a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800987e:	931a      	str	r3, [sp, #104]	; 0x68
 8009880:	4654      	mov	r4, sl
 8009882:	2205      	movs	r2, #5
 8009884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009888:	4851      	ldr	r0, [pc, #324]	; (80099d0 <_svfiprintf_r+0x1ec>)
 800988a:	f7f6 fca9 	bl	80001e0 <memchr>
 800988e:	9a04      	ldr	r2, [sp, #16]
 8009890:	b9d8      	cbnz	r0, 80098ca <_svfiprintf_r+0xe6>
 8009892:	06d0      	lsls	r0, r2, #27
 8009894:	bf44      	itt	mi
 8009896:	2320      	movmi	r3, #32
 8009898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800989c:	0711      	lsls	r1, r2, #28
 800989e:	bf44      	itt	mi
 80098a0:	232b      	movmi	r3, #43	; 0x2b
 80098a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098a6:	f89a 3000 	ldrb.w	r3, [sl]
 80098aa:	2b2a      	cmp	r3, #42	; 0x2a
 80098ac:	d015      	beq.n	80098da <_svfiprintf_r+0xf6>
 80098ae:	9a07      	ldr	r2, [sp, #28]
 80098b0:	4654      	mov	r4, sl
 80098b2:	2000      	movs	r0, #0
 80098b4:	f04f 0c0a 	mov.w	ip, #10
 80098b8:	4621      	mov	r1, r4
 80098ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098be:	3b30      	subs	r3, #48	; 0x30
 80098c0:	2b09      	cmp	r3, #9
 80098c2:	d94e      	bls.n	8009962 <_svfiprintf_r+0x17e>
 80098c4:	b1b0      	cbz	r0, 80098f4 <_svfiprintf_r+0x110>
 80098c6:	9207      	str	r2, [sp, #28]
 80098c8:	e014      	b.n	80098f4 <_svfiprintf_r+0x110>
 80098ca:	eba0 0308 	sub.w	r3, r0, r8
 80098ce:	fa09 f303 	lsl.w	r3, r9, r3
 80098d2:	4313      	orrs	r3, r2
 80098d4:	9304      	str	r3, [sp, #16]
 80098d6:	46a2      	mov	sl, r4
 80098d8:	e7d2      	b.n	8009880 <_svfiprintf_r+0x9c>
 80098da:	9b03      	ldr	r3, [sp, #12]
 80098dc:	1d19      	adds	r1, r3, #4
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	9103      	str	r1, [sp, #12]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bfbb      	ittet	lt
 80098e6:	425b      	neglt	r3, r3
 80098e8:	f042 0202 	orrlt.w	r2, r2, #2
 80098ec:	9307      	strge	r3, [sp, #28]
 80098ee:	9307      	strlt	r3, [sp, #28]
 80098f0:	bfb8      	it	lt
 80098f2:	9204      	strlt	r2, [sp, #16]
 80098f4:	7823      	ldrb	r3, [r4, #0]
 80098f6:	2b2e      	cmp	r3, #46	; 0x2e
 80098f8:	d10c      	bne.n	8009914 <_svfiprintf_r+0x130>
 80098fa:	7863      	ldrb	r3, [r4, #1]
 80098fc:	2b2a      	cmp	r3, #42	; 0x2a
 80098fe:	d135      	bne.n	800996c <_svfiprintf_r+0x188>
 8009900:	9b03      	ldr	r3, [sp, #12]
 8009902:	1d1a      	adds	r2, r3, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	9203      	str	r2, [sp, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	bfb8      	it	lt
 800990c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009910:	3402      	adds	r4, #2
 8009912:	9305      	str	r3, [sp, #20]
 8009914:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099e0 <_svfiprintf_r+0x1fc>
 8009918:	7821      	ldrb	r1, [r4, #0]
 800991a:	2203      	movs	r2, #3
 800991c:	4650      	mov	r0, sl
 800991e:	f7f6 fc5f 	bl	80001e0 <memchr>
 8009922:	b140      	cbz	r0, 8009936 <_svfiprintf_r+0x152>
 8009924:	2340      	movs	r3, #64	; 0x40
 8009926:	eba0 000a 	sub.w	r0, r0, sl
 800992a:	fa03 f000 	lsl.w	r0, r3, r0
 800992e:	9b04      	ldr	r3, [sp, #16]
 8009930:	4303      	orrs	r3, r0
 8009932:	3401      	adds	r4, #1
 8009934:	9304      	str	r3, [sp, #16]
 8009936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800993a:	4826      	ldr	r0, [pc, #152]	; (80099d4 <_svfiprintf_r+0x1f0>)
 800993c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009940:	2206      	movs	r2, #6
 8009942:	f7f6 fc4d 	bl	80001e0 <memchr>
 8009946:	2800      	cmp	r0, #0
 8009948:	d038      	beq.n	80099bc <_svfiprintf_r+0x1d8>
 800994a:	4b23      	ldr	r3, [pc, #140]	; (80099d8 <_svfiprintf_r+0x1f4>)
 800994c:	bb1b      	cbnz	r3, 8009996 <_svfiprintf_r+0x1b2>
 800994e:	9b03      	ldr	r3, [sp, #12]
 8009950:	3307      	adds	r3, #7
 8009952:	f023 0307 	bic.w	r3, r3, #7
 8009956:	3308      	adds	r3, #8
 8009958:	9303      	str	r3, [sp, #12]
 800995a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995c:	4433      	add	r3, r6
 800995e:	9309      	str	r3, [sp, #36]	; 0x24
 8009960:	e767      	b.n	8009832 <_svfiprintf_r+0x4e>
 8009962:	fb0c 3202 	mla	r2, ip, r2, r3
 8009966:	460c      	mov	r4, r1
 8009968:	2001      	movs	r0, #1
 800996a:	e7a5      	b.n	80098b8 <_svfiprintf_r+0xd4>
 800996c:	2300      	movs	r3, #0
 800996e:	3401      	adds	r4, #1
 8009970:	9305      	str	r3, [sp, #20]
 8009972:	4619      	mov	r1, r3
 8009974:	f04f 0c0a 	mov.w	ip, #10
 8009978:	4620      	mov	r0, r4
 800997a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800997e:	3a30      	subs	r2, #48	; 0x30
 8009980:	2a09      	cmp	r2, #9
 8009982:	d903      	bls.n	800998c <_svfiprintf_r+0x1a8>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d0c5      	beq.n	8009914 <_svfiprintf_r+0x130>
 8009988:	9105      	str	r1, [sp, #20]
 800998a:	e7c3      	b.n	8009914 <_svfiprintf_r+0x130>
 800998c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009990:	4604      	mov	r4, r0
 8009992:	2301      	movs	r3, #1
 8009994:	e7f0      	b.n	8009978 <_svfiprintf_r+0x194>
 8009996:	ab03      	add	r3, sp, #12
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	462a      	mov	r2, r5
 800999c:	4b0f      	ldr	r3, [pc, #60]	; (80099dc <_svfiprintf_r+0x1f8>)
 800999e:	a904      	add	r1, sp, #16
 80099a0:	4638      	mov	r0, r7
 80099a2:	f3af 8000 	nop.w
 80099a6:	1c42      	adds	r2, r0, #1
 80099a8:	4606      	mov	r6, r0
 80099aa:	d1d6      	bne.n	800995a <_svfiprintf_r+0x176>
 80099ac:	89ab      	ldrh	r3, [r5, #12]
 80099ae:	065b      	lsls	r3, r3, #25
 80099b0:	f53f af2c 	bmi.w	800980c <_svfiprintf_r+0x28>
 80099b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099b6:	b01d      	add	sp, #116	; 0x74
 80099b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099bc:	ab03      	add	r3, sp, #12
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	462a      	mov	r2, r5
 80099c2:	4b06      	ldr	r3, [pc, #24]	; (80099dc <_svfiprintf_r+0x1f8>)
 80099c4:	a904      	add	r1, sp, #16
 80099c6:	4638      	mov	r0, r7
 80099c8:	f000 f87a 	bl	8009ac0 <_printf_i>
 80099cc:	e7eb      	b.n	80099a6 <_svfiprintf_r+0x1c2>
 80099ce:	bf00      	nop
 80099d0:	0800c0e8 	.word	0x0800c0e8
 80099d4:	0800c0f2 	.word	0x0800c0f2
 80099d8:	00000000 	.word	0x00000000
 80099dc:	0800972d 	.word	0x0800972d
 80099e0:	0800c0ee 	.word	0x0800c0ee

080099e4 <_printf_common>:
 80099e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e8:	4616      	mov	r6, r2
 80099ea:	4699      	mov	r9, r3
 80099ec:	688a      	ldr	r2, [r1, #8]
 80099ee:	690b      	ldr	r3, [r1, #16]
 80099f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099f4:	4293      	cmp	r3, r2
 80099f6:	bfb8      	it	lt
 80099f8:	4613      	movlt	r3, r2
 80099fa:	6033      	str	r3, [r6, #0]
 80099fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a00:	4607      	mov	r7, r0
 8009a02:	460c      	mov	r4, r1
 8009a04:	b10a      	cbz	r2, 8009a0a <_printf_common+0x26>
 8009a06:	3301      	adds	r3, #1
 8009a08:	6033      	str	r3, [r6, #0]
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	0699      	lsls	r1, r3, #26
 8009a0e:	bf42      	ittt	mi
 8009a10:	6833      	ldrmi	r3, [r6, #0]
 8009a12:	3302      	addmi	r3, #2
 8009a14:	6033      	strmi	r3, [r6, #0]
 8009a16:	6825      	ldr	r5, [r4, #0]
 8009a18:	f015 0506 	ands.w	r5, r5, #6
 8009a1c:	d106      	bne.n	8009a2c <_printf_common+0x48>
 8009a1e:	f104 0a19 	add.w	sl, r4, #25
 8009a22:	68e3      	ldr	r3, [r4, #12]
 8009a24:	6832      	ldr	r2, [r6, #0]
 8009a26:	1a9b      	subs	r3, r3, r2
 8009a28:	42ab      	cmp	r3, r5
 8009a2a:	dc26      	bgt.n	8009a7a <_printf_common+0x96>
 8009a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a30:	1e13      	subs	r3, r2, #0
 8009a32:	6822      	ldr	r2, [r4, #0]
 8009a34:	bf18      	it	ne
 8009a36:	2301      	movne	r3, #1
 8009a38:	0692      	lsls	r2, r2, #26
 8009a3a:	d42b      	bmi.n	8009a94 <_printf_common+0xb0>
 8009a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a40:	4649      	mov	r1, r9
 8009a42:	4638      	mov	r0, r7
 8009a44:	47c0      	blx	r8
 8009a46:	3001      	adds	r0, #1
 8009a48:	d01e      	beq.n	8009a88 <_printf_common+0xa4>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	68e5      	ldr	r5, [r4, #12]
 8009a4e:	6832      	ldr	r2, [r6, #0]
 8009a50:	f003 0306 	and.w	r3, r3, #6
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	bf08      	it	eq
 8009a58:	1aad      	subeq	r5, r5, r2
 8009a5a:	68a3      	ldr	r3, [r4, #8]
 8009a5c:	6922      	ldr	r2, [r4, #16]
 8009a5e:	bf0c      	ite	eq
 8009a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a64:	2500      	movne	r5, #0
 8009a66:	4293      	cmp	r3, r2
 8009a68:	bfc4      	itt	gt
 8009a6a:	1a9b      	subgt	r3, r3, r2
 8009a6c:	18ed      	addgt	r5, r5, r3
 8009a6e:	2600      	movs	r6, #0
 8009a70:	341a      	adds	r4, #26
 8009a72:	42b5      	cmp	r5, r6
 8009a74:	d11a      	bne.n	8009aac <_printf_common+0xc8>
 8009a76:	2000      	movs	r0, #0
 8009a78:	e008      	b.n	8009a8c <_printf_common+0xa8>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	4652      	mov	r2, sl
 8009a7e:	4649      	mov	r1, r9
 8009a80:	4638      	mov	r0, r7
 8009a82:	47c0      	blx	r8
 8009a84:	3001      	adds	r0, #1
 8009a86:	d103      	bne.n	8009a90 <_printf_common+0xac>
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a90:	3501      	adds	r5, #1
 8009a92:	e7c6      	b.n	8009a22 <_printf_common+0x3e>
 8009a94:	18e1      	adds	r1, r4, r3
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	2030      	movs	r0, #48	; 0x30
 8009a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a9e:	4422      	add	r2, r4
 8009aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009aa8:	3302      	adds	r3, #2
 8009aaa:	e7c7      	b.n	8009a3c <_printf_common+0x58>
 8009aac:	2301      	movs	r3, #1
 8009aae:	4622      	mov	r2, r4
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	47c0      	blx	r8
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d0e6      	beq.n	8009a88 <_printf_common+0xa4>
 8009aba:	3601      	adds	r6, #1
 8009abc:	e7d9      	b.n	8009a72 <_printf_common+0x8e>
	...

08009ac0 <_printf_i>:
 8009ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac4:	7e0f      	ldrb	r7, [r1, #24]
 8009ac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ac8:	2f78      	cmp	r7, #120	; 0x78
 8009aca:	4691      	mov	r9, r2
 8009acc:	4680      	mov	r8, r0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	469a      	mov	sl, r3
 8009ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ad6:	d807      	bhi.n	8009ae8 <_printf_i+0x28>
 8009ad8:	2f62      	cmp	r7, #98	; 0x62
 8009ada:	d80a      	bhi.n	8009af2 <_printf_i+0x32>
 8009adc:	2f00      	cmp	r7, #0
 8009ade:	f000 80d8 	beq.w	8009c92 <_printf_i+0x1d2>
 8009ae2:	2f58      	cmp	r7, #88	; 0x58
 8009ae4:	f000 80a3 	beq.w	8009c2e <_printf_i+0x16e>
 8009ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009af0:	e03a      	b.n	8009b68 <_printf_i+0xa8>
 8009af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009af6:	2b15      	cmp	r3, #21
 8009af8:	d8f6      	bhi.n	8009ae8 <_printf_i+0x28>
 8009afa:	a101      	add	r1, pc, #4	; (adr r1, 8009b00 <_printf_i+0x40>)
 8009afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b00:	08009b59 	.word	0x08009b59
 8009b04:	08009b6d 	.word	0x08009b6d
 8009b08:	08009ae9 	.word	0x08009ae9
 8009b0c:	08009ae9 	.word	0x08009ae9
 8009b10:	08009ae9 	.word	0x08009ae9
 8009b14:	08009ae9 	.word	0x08009ae9
 8009b18:	08009b6d 	.word	0x08009b6d
 8009b1c:	08009ae9 	.word	0x08009ae9
 8009b20:	08009ae9 	.word	0x08009ae9
 8009b24:	08009ae9 	.word	0x08009ae9
 8009b28:	08009ae9 	.word	0x08009ae9
 8009b2c:	08009c79 	.word	0x08009c79
 8009b30:	08009b9d 	.word	0x08009b9d
 8009b34:	08009c5b 	.word	0x08009c5b
 8009b38:	08009ae9 	.word	0x08009ae9
 8009b3c:	08009ae9 	.word	0x08009ae9
 8009b40:	08009c9b 	.word	0x08009c9b
 8009b44:	08009ae9 	.word	0x08009ae9
 8009b48:	08009b9d 	.word	0x08009b9d
 8009b4c:	08009ae9 	.word	0x08009ae9
 8009b50:	08009ae9 	.word	0x08009ae9
 8009b54:	08009c63 	.word	0x08009c63
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	1d1a      	adds	r2, r3, #4
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	602a      	str	r2, [r5, #0]
 8009b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e0a3      	b.n	8009cb4 <_printf_i+0x1f4>
 8009b6c:	6820      	ldr	r0, [r4, #0]
 8009b6e:	6829      	ldr	r1, [r5, #0]
 8009b70:	0606      	lsls	r6, r0, #24
 8009b72:	f101 0304 	add.w	r3, r1, #4
 8009b76:	d50a      	bpl.n	8009b8e <_printf_i+0xce>
 8009b78:	680e      	ldr	r6, [r1, #0]
 8009b7a:	602b      	str	r3, [r5, #0]
 8009b7c:	2e00      	cmp	r6, #0
 8009b7e:	da03      	bge.n	8009b88 <_printf_i+0xc8>
 8009b80:	232d      	movs	r3, #45	; 0x2d
 8009b82:	4276      	negs	r6, r6
 8009b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b88:	485e      	ldr	r0, [pc, #376]	; (8009d04 <_printf_i+0x244>)
 8009b8a:	230a      	movs	r3, #10
 8009b8c:	e019      	b.n	8009bc2 <_printf_i+0x102>
 8009b8e:	680e      	ldr	r6, [r1, #0]
 8009b90:	602b      	str	r3, [r5, #0]
 8009b92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b96:	bf18      	it	ne
 8009b98:	b236      	sxthne	r6, r6
 8009b9a:	e7ef      	b.n	8009b7c <_printf_i+0xbc>
 8009b9c:	682b      	ldr	r3, [r5, #0]
 8009b9e:	6820      	ldr	r0, [r4, #0]
 8009ba0:	1d19      	adds	r1, r3, #4
 8009ba2:	6029      	str	r1, [r5, #0]
 8009ba4:	0601      	lsls	r1, r0, #24
 8009ba6:	d501      	bpl.n	8009bac <_printf_i+0xec>
 8009ba8:	681e      	ldr	r6, [r3, #0]
 8009baa:	e002      	b.n	8009bb2 <_printf_i+0xf2>
 8009bac:	0646      	lsls	r6, r0, #25
 8009bae:	d5fb      	bpl.n	8009ba8 <_printf_i+0xe8>
 8009bb0:	881e      	ldrh	r6, [r3, #0]
 8009bb2:	4854      	ldr	r0, [pc, #336]	; (8009d04 <_printf_i+0x244>)
 8009bb4:	2f6f      	cmp	r7, #111	; 0x6f
 8009bb6:	bf0c      	ite	eq
 8009bb8:	2308      	moveq	r3, #8
 8009bba:	230a      	movne	r3, #10
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bc2:	6865      	ldr	r5, [r4, #4]
 8009bc4:	60a5      	str	r5, [r4, #8]
 8009bc6:	2d00      	cmp	r5, #0
 8009bc8:	bfa2      	ittt	ge
 8009bca:	6821      	ldrge	r1, [r4, #0]
 8009bcc:	f021 0104 	bicge.w	r1, r1, #4
 8009bd0:	6021      	strge	r1, [r4, #0]
 8009bd2:	b90e      	cbnz	r6, 8009bd8 <_printf_i+0x118>
 8009bd4:	2d00      	cmp	r5, #0
 8009bd6:	d04d      	beq.n	8009c74 <_printf_i+0x1b4>
 8009bd8:	4615      	mov	r5, r2
 8009bda:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bde:	fb03 6711 	mls	r7, r3, r1, r6
 8009be2:	5dc7      	ldrb	r7, [r0, r7]
 8009be4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009be8:	4637      	mov	r7, r6
 8009bea:	42bb      	cmp	r3, r7
 8009bec:	460e      	mov	r6, r1
 8009bee:	d9f4      	bls.n	8009bda <_printf_i+0x11a>
 8009bf0:	2b08      	cmp	r3, #8
 8009bf2:	d10b      	bne.n	8009c0c <_printf_i+0x14c>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	07de      	lsls	r6, r3, #31
 8009bf8:	d508      	bpl.n	8009c0c <_printf_i+0x14c>
 8009bfa:	6923      	ldr	r3, [r4, #16]
 8009bfc:	6861      	ldr	r1, [r4, #4]
 8009bfe:	4299      	cmp	r1, r3
 8009c00:	bfde      	ittt	le
 8009c02:	2330      	movle	r3, #48	; 0x30
 8009c04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c0c:	1b52      	subs	r2, r2, r5
 8009c0e:	6122      	str	r2, [r4, #16]
 8009c10:	f8cd a000 	str.w	sl, [sp]
 8009c14:	464b      	mov	r3, r9
 8009c16:	aa03      	add	r2, sp, #12
 8009c18:	4621      	mov	r1, r4
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	f7ff fee2 	bl	80099e4 <_printf_common>
 8009c20:	3001      	adds	r0, #1
 8009c22:	d14c      	bne.n	8009cbe <_printf_i+0x1fe>
 8009c24:	f04f 30ff 	mov.w	r0, #4294967295
 8009c28:	b004      	add	sp, #16
 8009c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c2e:	4835      	ldr	r0, [pc, #212]	; (8009d04 <_printf_i+0x244>)
 8009c30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c34:	6829      	ldr	r1, [r5, #0]
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c3c:	6029      	str	r1, [r5, #0]
 8009c3e:	061d      	lsls	r5, r3, #24
 8009c40:	d514      	bpl.n	8009c6c <_printf_i+0x1ac>
 8009c42:	07df      	lsls	r7, r3, #31
 8009c44:	bf44      	itt	mi
 8009c46:	f043 0320 	orrmi.w	r3, r3, #32
 8009c4a:	6023      	strmi	r3, [r4, #0]
 8009c4c:	b91e      	cbnz	r6, 8009c56 <_printf_i+0x196>
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	f023 0320 	bic.w	r3, r3, #32
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	2310      	movs	r3, #16
 8009c58:	e7b0      	b.n	8009bbc <_printf_i+0xfc>
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	f043 0320 	orr.w	r3, r3, #32
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	2378      	movs	r3, #120	; 0x78
 8009c64:	4828      	ldr	r0, [pc, #160]	; (8009d08 <_printf_i+0x248>)
 8009c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c6a:	e7e3      	b.n	8009c34 <_printf_i+0x174>
 8009c6c:	0659      	lsls	r1, r3, #25
 8009c6e:	bf48      	it	mi
 8009c70:	b2b6      	uxthmi	r6, r6
 8009c72:	e7e6      	b.n	8009c42 <_printf_i+0x182>
 8009c74:	4615      	mov	r5, r2
 8009c76:	e7bb      	b.n	8009bf0 <_printf_i+0x130>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	6826      	ldr	r6, [r4, #0]
 8009c7c:	6961      	ldr	r1, [r4, #20]
 8009c7e:	1d18      	adds	r0, r3, #4
 8009c80:	6028      	str	r0, [r5, #0]
 8009c82:	0635      	lsls	r5, r6, #24
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	d501      	bpl.n	8009c8c <_printf_i+0x1cc>
 8009c88:	6019      	str	r1, [r3, #0]
 8009c8a:	e002      	b.n	8009c92 <_printf_i+0x1d2>
 8009c8c:	0670      	lsls	r0, r6, #25
 8009c8e:	d5fb      	bpl.n	8009c88 <_printf_i+0x1c8>
 8009c90:	8019      	strh	r1, [r3, #0]
 8009c92:	2300      	movs	r3, #0
 8009c94:	6123      	str	r3, [r4, #16]
 8009c96:	4615      	mov	r5, r2
 8009c98:	e7ba      	b.n	8009c10 <_printf_i+0x150>
 8009c9a:	682b      	ldr	r3, [r5, #0]
 8009c9c:	1d1a      	adds	r2, r3, #4
 8009c9e:	602a      	str	r2, [r5, #0]
 8009ca0:	681d      	ldr	r5, [r3, #0]
 8009ca2:	6862      	ldr	r2, [r4, #4]
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f7f6 fa9a 	bl	80001e0 <memchr>
 8009cac:	b108      	cbz	r0, 8009cb2 <_printf_i+0x1f2>
 8009cae:	1b40      	subs	r0, r0, r5
 8009cb0:	6060      	str	r0, [r4, #4]
 8009cb2:	6863      	ldr	r3, [r4, #4]
 8009cb4:	6123      	str	r3, [r4, #16]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cbc:	e7a8      	b.n	8009c10 <_printf_i+0x150>
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	4640      	mov	r0, r8
 8009cc6:	47d0      	blx	sl
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d0ab      	beq.n	8009c24 <_printf_i+0x164>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	079b      	lsls	r3, r3, #30
 8009cd0:	d413      	bmi.n	8009cfa <_printf_i+0x23a>
 8009cd2:	68e0      	ldr	r0, [r4, #12]
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	4298      	cmp	r0, r3
 8009cd8:	bfb8      	it	lt
 8009cda:	4618      	movlt	r0, r3
 8009cdc:	e7a4      	b.n	8009c28 <_printf_i+0x168>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	47d0      	blx	sl
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d09b      	beq.n	8009c24 <_printf_i+0x164>
 8009cec:	3501      	adds	r5, #1
 8009cee:	68e3      	ldr	r3, [r4, #12]
 8009cf0:	9903      	ldr	r1, [sp, #12]
 8009cf2:	1a5b      	subs	r3, r3, r1
 8009cf4:	42ab      	cmp	r3, r5
 8009cf6:	dcf2      	bgt.n	8009cde <_printf_i+0x21e>
 8009cf8:	e7eb      	b.n	8009cd2 <_printf_i+0x212>
 8009cfa:	2500      	movs	r5, #0
 8009cfc:	f104 0619 	add.w	r6, r4, #25
 8009d00:	e7f5      	b.n	8009cee <_printf_i+0x22e>
 8009d02:	bf00      	nop
 8009d04:	0800c0f9 	.word	0x0800c0f9
 8009d08:	0800c10a 	.word	0x0800c10a

08009d0c <memmove>:
 8009d0c:	4288      	cmp	r0, r1
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	eb01 0402 	add.w	r4, r1, r2
 8009d14:	d902      	bls.n	8009d1c <memmove+0x10>
 8009d16:	4284      	cmp	r4, r0
 8009d18:	4623      	mov	r3, r4
 8009d1a:	d807      	bhi.n	8009d2c <memmove+0x20>
 8009d1c:	1e43      	subs	r3, r0, #1
 8009d1e:	42a1      	cmp	r1, r4
 8009d20:	d008      	beq.n	8009d34 <memmove+0x28>
 8009d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d2a:	e7f8      	b.n	8009d1e <memmove+0x12>
 8009d2c:	4402      	add	r2, r0
 8009d2e:	4601      	mov	r1, r0
 8009d30:	428a      	cmp	r2, r1
 8009d32:	d100      	bne.n	8009d36 <memmove+0x2a>
 8009d34:	bd10      	pop	{r4, pc}
 8009d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d3e:	e7f7      	b.n	8009d30 <memmove+0x24>

08009d40 <_free_r>:
 8009d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d42:	2900      	cmp	r1, #0
 8009d44:	d044      	beq.n	8009dd0 <_free_r+0x90>
 8009d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d4a:	9001      	str	r0, [sp, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8009d52:	bfb8      	it	lt
 8009d54:	18e4      	addlt	r4, r4, r3
 8009d56:	f000 f913 	bl	8009f80 <__malloc_lock>
 8009d5a:	4a1e      	ldr	r2, [pc, #120]	; (8009dd4 <_free_r+0x94>)
 8009d5c:	9801      	ldr	r0, [sp, #4]
 8009d5e:	6813      	ldr	r3, [r2, #0]
 8009d60:	b933      	cbnz	r3, 8009d70 <_free_r+0x30>
 8009d62:	6063      	str	r3, [r4, #4]
 8009d64:	6014      	str	r4, [r2, #0]
 8009d66:	b003      	add	sp, #12
 8009d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d6c:	f000 b90e 	b.w	8009f8c <__malloc_unlock>
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	d908      	bls.n	8009d86 <_free_r+0x46>
 8009d74:	6825      	ldr	r5, [r4, #0]
 8009d76:	1961      	adds	r1, r4, r5
 8009d78:	428b      	cmp	r3, r1
 8009d7a:	bf01      	itttt	eq
 8009d7c:	6819      	ldreq	r1, [r3, #0]
 8009d7e:	685b      	ldreq	r3, [r3, #4]
 8009d80:	1949      	addeq	r1, r1, r5
 8009d82:	6021      	streq	r1, [r4, #0]
 8009d84:	e7ed      	b.n	8009d62 <_free_r+0x22>
 8009d86:	461a      	mov	r2, r3
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	b10b      	cbz	r3, 8009d90 <_free_r+0x50>
 8009d8c:	42a3      	cmp	r3, r4
 8009d8e:	d9fa      	bls.n	8009d86 <_free_r+0x46>
 8009d90:	6811      	ldr	r1, [r2, #0]
 8009d92:	1855      	adds	r5, r2, r1
 8009d94:	42a5      	cmp	r5, r4
 8009d96:	d10b      	bne.n	8009db0 <_free_r+0x70>
 8009d98:	6824      	ldr	r4, [r4, #0]
 8009d9a:	4421      	add	r1, r4
 8009d9c:	1854      	adds	r4, r2, r1
 8009d9e:	42a3      	cmp	r3, r4
 8009da0:	6011      	str	r1, [r2, #0]
 8009da2:	d1e0      	bne.n	8009d66 <_free_r+0x26>
 8009da4:	681c      	ldr	r4, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	6053      	str	r3, [r2, #4]
 8009daa:	4421      	add	r1, r4
 8009dac:	6011      	str	r1, [r2, #0]
 8009dae:	e7da      	b.n	8009d66 <_free_r+0x26>
 8009db0:	d902      	bls.n	8009db8 <_free_r+0x78>
 8009db2:	230c      	movs	r3, #12
 8009db4:	6003      	str	r3, [r0, #0]
 8009db6:	e7d6      	b.n	8009d66 <_free_r+0x26>
 8009db8:	6825      	ldr	r5, [r4, #0]
 8009dba:	1961      	adds	r1, r4, r5
 8009dbc:	428b      	cmp	r3, r1
 8009dbe:	bf04      	itt	eq
 8009dc0:	6819      	ldreq	r1, [r3, #0]
 8009dc2:	685b      	ldreq	r3, [r3, #4]
 8009dc4:	6063      	str	r3, [r4, #4]
 8009dc6:	bf04      	itt	eq
 8009dc8:	1949      	addeq	r1, r1, r5
 8009dca:	6021      	streq	r1, [r4, #0]
 8009dcc:	6054      	str	r4, [r2, #4]
 8009dce:	e7ca      	b.n	8009d66 <_free_r+0x26>
 8009dd0:	b003      	add	sp, #12
 8009dd2:	bd30      	pop	{r4, r5, pc}
 8009dd4:	200005dc 	.word	0x200005dc

08009dd8 <sbrk_aligned>:
 8009dd8:	b570      	push	{r4, r5, r6, lr}
 8009dda:	4e0e      	ldr	r6, [pc, #56]	; (8009e14 <sbrk_aligned+0x3c>)
 8009ddc:	460c      	mov	r4, r1
 8009dde:	6831      	ldr	r1, [r6, #0]
 8009de0:	4605      	mov	r5, r0
 8009de2:	b911      	cbnz	r1, 8009dea <sbrk_aligned+0x12>
 8009de4:	f000 f8bc 	bl	8009f60 <_sbrk_r>
 8009de8:	6030      	str	r0, [r6, #0]
 8009dea:	4621      	mov	r1, r4
 8009dec:	4628      	mov	r0, r5
 8009dee:	f000 f8b7 	bl	8009f60 <_sbrk_r>
 8009df2:	1c43      	adds	r3, r0, #1
 8009df4:	d00a      	beq.n	8009e0c <sbrk_aligned+0x34>
 8009df6:	1cc4      	adds	r4, r0, #3
 8009df8:	f024 0403 	bic.w	r4, r4, #3
 8009dfc:	42a0      	cmp	r0, r4
 8009dfe:	d007      	beq.n	8009e10 <sbrk_aligned+0x38>
 8009e00:	1a21      	subs	r1, r4, r0
 8009e02:	4628      	mov	r0, r5
 8009e04:	f000 f8ac 	bl	8009f60 <_sbrk_r>
 8009e08:	3001      	adds	r0, #1
 8009e0a:	d101      	bne.n	8009e10 <sbrk_aligned+0x38>
 8009e0c:	f04f 34ff 	mov.w	r4, #4294967295
 8009e10:	4620      	mov	r0, r4
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	200005e0 	.word	0x200005e0

08009e18 <_malloc_r>:
 8009e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1c:	1ccd      	adds	r5, r1, #3
 8009e1e:	f025 0503 	bic.w	r5, r5, #3
 8009e22:	3508      	adds	r5, #8
 8009e24:	2d0c      	cmp	r5, #12
 8009e26:	bf38      	it	cc
 8009e28:	250c      	movcc	r5, #12
 8009e2a:	2d00      	cmp	r5, #0
 8009e2c:	4607      	mov	r7, r0
 8009e2e:	db01      	blt.n	8009e34 <_malloc_r+0x1c>
 8009e30:	42a9      	cmp	r1, r5
 8009e32:	d905      	bls.n	8009e40 <_malloc_r+0x28>
 8009e34:	230c      	movs	r3, #12
 8009e36:	603b      	str	r3, [r7, #0]
 8009e38:	2600      	movs	r6, #0
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e40:	4e2e      	ldr	r6, [pc, #184]	; (8009efc <_malloc_r+0xe4>)
 8009e42:	f000 f89d 	bl	8009f80 <__malloc_lock>
 8009e46:	6833      	ldr	r3, [r6, #0]
 8009e48:	461c      	mov	r4, r3
 8009e4a:	bb34      	cbnz	r4, 8009e9a <_malloc_r+0x82>
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	4638      	mov	r0, r7
 8009e50:	f7ff ffc2 	bl	8009dd8 <sbrk_aligned>
 8009e54:	1c43      	adds	r3, r0, #1
 8009e56:	4604      	mov	r4, r0
 8009e58:	d14d      	bne.n	8009ef6 <_malloc_r+0xde>
 8009e5a:	6834      	ldr	r4, [r6, #0]
 8009e5c:	4626      	mov	r6, r4
 8009e5e:	2e00      	cmp	r6, #0
 8009e60:	d140      	bne.n	8009ee4 <_malloc_r+0xcc>
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	4631      	mov	r1, r6
 8009e66:	4638      	mov	r0, r7
 8009e68:	eb04 0803 	add.w	r8, r4, r3
 8009e6c:	f000 f878 	bl	8009f60 <_sbrk_r>
 8009e70:	4580      	cmp	r8, r0
 8009e72:	d13a      	bne.n	8009eea <_malloc_r+0xd2>
 8009e74:	6821      	ldr	r1, [r4, #0]
 8009e76:	3503      	adds	r5, #3
 8009e78:	1a6d      	subs	r5, r5, r1
 8009e7a:	f025 0503 	bic.w	r5, r5, #3
 8009e7e:	3508      	adds	r5, #8
 8009e80:	2d0c      	cmp	r5, #12
 8009e82:	bf38      	it	cc
 8009e84:	250c      	movcc	r5, #12
 8009e86:	4629      	mov	r1, r5
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f7ff ffa5 	bl	8009dd8 <sbrk_aligned>
 8009e8e:	3001      	adds	r0, #1
 8009e90:	d02b      	beq.n	8009eea <_malloc_r+0xd2>
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	442b      	add	r3, r5
 8009e96:	6023      	str	r3, [r4, #0]
 8009e98:	e00e      	b.n	8009eb8 <_malloc_r+0xa0>
 8009e9a:	6822      	ldr	r2, [r4, #0]
 8009e9c:	1b52      	subs	r2, r2, r5
 8009e9e:	d41e      	bmi.n	8009ede <_malloc_r+0xc6>
 8009ea0:	2a0b      	cmp	r2, #11
 8009ea2:	d916      	bls.n	8009ed2 <_malloc_r+0xba>
 8009ea4:	1961      	adds	r1, r4, r5
 8009ea6:	42a3      	cmp	r3, r4
 8009ea8:	6025      	str	r5, [r4, #0]
 8009eaa:	bf18      	it	ne
 8009eac:	6059      	strne	r1, [r3, #4]
 8009eae:	6863      	ldr	r3, [r4, #4]
 8009eb0:	bf08      	it	eq
 8009eb2:	6031      	streq	r1, [r6, #0]
 8009eb4:	5162      	str	r2, [r4, r5]
 8009eb6:	604b      	str	r3, [r1, #4]
 8009eb8:	4638      	mov	r0, r7
 8009eba:	f104 060b 	add.w	r6, r4, #11
 8009ebe:	f000 f865 	bl	8009f8c <__malloc_unlock>
 8009ec2:	f026 0607 	bic.w	r6, r6, #7
 8009ec6:	1d23      	adds	r3, r4, #4
 8009ec8:	1af2      	subs	r2, r6, r3
 8009eca:	d0b6      	beq.n	8009e3a <_malloc_r+0x22>
 8009ecc:	1b9b      	subs	r3, r3, r6
 8009ece:	50a3      	str	r3, [r4, r2]
 8009ed0:	e7b3      	b.n	8009e3a <_malloc_r+0x22>
 8009ed2:	6862      	ldr	r2, [r4, #4]
 8009ed4:	42a3      	cmp	r3, r4
 8009ed6:	bf0c      	ite	eq
 8009ed8:	6032      	streq	r2, [r6, #0]
 8009eda:	605a      	strne	r2, [r3, #4]
 8009edc:	e7ec      	b.n	8009eb8 <_malloc_r+0xa0>
 8009ede:	4623      	mov	r3, r4
 8009ee0:	6864      	ldr	r4, [r4, #4]
 8009ee2:	e7b2      	b.n	8009e4a <_malloc_r+0x32>
 8009ee4:	4634      	mov	r4, r6
 8009ee6:	6876      	ldr	r6, [r6, #4]
 8009ee8:	e7b9      	b.n	8009e5e <_malloc_r+0x46>
 8009eea:	230c      	movs	r3, #12
 8009eec:	603b      	str	r3, [r7, #0]
 8009eee:	4638      	mov	r0, r7
 8009ef0:	f000 f84c 	bl	8009f8c <__malloc_unlock>
 8009ef4:	e7a1      	b.n	8009e3a <_malloc_r+0x22>
 8009ef6:	6025      	str	r5, [r4, #0]
 8009ef8:	e7de      	b.n	8009eb8 <_malloc_r+0xa0>
 8009efa:	bf00      	nop
 8009efc:	200005dc 	.word	0x200005dc

08009f00 <_realloc_r>:
 8009f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f04:	4680      	mov	r8, r0
 8009f06:	4614      	mov	r4, r2
 8009f08:	460e      	mov	r6, r1
 8009f0a:	b921      	cbnz	r1, 8009f16 <_realloc_r+0x16>
 8009f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f10:	4611      	mov	r1, r2
 8009f12:	f7ff bf81 	b.w	8009e18 <_malloc_r>
 8009f16:	b92a      	cbnz	r2, 8009f24 <_realloc_r+0x24>
 8009f18:	f7ff ff12 	bl	8009d40 <_free_r>
 8009f1c:	4625      	mov	r5, r4
 8009f1e:	4628      	mov	r0, r5
 8009f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f24:	f000 f838 	bl	8009f98 <_malloc_usable_size_r>
 8009f28:	4284      	cmp	r4, r0
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	d802      	bhi.n	8009f34 <_realloc_r+0x34>
 8009f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f32:	d812      	bhi.n	8009f5a <_realloc_r+0x5a>
 8009f34:	4621      	mov	r1, r4
 8009f36:	4640      	mov	r0, r8
 8009f38:	f7ff ff6e 	bl	8009e18 <_malloc_r>
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d0ed      	beq.n	8009f1e <_realloc_r+0x1e>
 8009f42:	42bc      	cmp	r4, r7
 8009f44:	4622      	mov	r2, r4
 8009f46:	4631      	mov	r1, r6
 8009f48:	bf28      	it	cs
 8009f4a:	463a      	movcs	r2, r7
 8009f4c:	f7ff fbb8 	bl	80096c0 <memcpy>
 8009f50:	4631      	mov	r1, r6
 8009f52:	4640      	mov	r0, r8
 8009f54:	f7ff fef4 	bl	8009d40 <_free_r>
 8009f58:	e7e1      	b.n	8009f1e <_realloc_r+0x1e>
 8009f5a:	4635      	mov	r5, r6
 8009f5c:	e7df      	b.n	8009f1e <_realloc_r+0x1e>
	...

08009f60 <_sbrk_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d06      	ldr	r5, [pc, #24]	; (8009f7c <_sbrk_r+0x1c>)
 8009f64:	2300      	movs	r3, #0
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	f7f7 ff4c 	bl	8001e08 <_sbrk>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_sbrk_r+0x1a>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_sbrk_r+0x1a>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	200005e4 	.word	0x200005e4

08009f80 <__malloc_lock>:
 8009f80:	4801      	ldr	r0, [pc, #4]	; (8009f88 <__malloc_lock+0x8>)
 8009f82:	f000 b811 	b.w	8009fa8 <__retarget_lock_acquire_recursive>
 8009f86:	bf00      	nop
 8009f88:	200005e8 	.word	0x200005e8

08009f8c <__malloc_unlock>:
 8009f8c:	4801      	ldr	r0, [pc, #4]	; (8009f94 <__malloc_unlock+0x8>)
 8009f8e:	f000 b80c 	b.w	8009faa <__retarget_lock_release_recursive>
 8009f92:	bf00      	nop
 8009f94:	200005e8 	.word	0x200005e8

08009f98 <_malloc_usable_size_r>:
 8009f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f9c:	1f18      	subs	r0, r3, #4
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	bfbc      	itt	lt
 8009fa2:	580b      	ldrlt	r3, [r1, r0]
 8009fa4:	18c0      	addlt	r0, r0, r3
 8009fa6:	4770      	bx	lr

08009fa8 <__retarget_lock_acquire_recursive>:
 8009fa8:	4770      	bx	lr

08009faa <__retarget_lock_release_recursive>:
 8009faa:	4770      	bx	lr

08009fac <asin>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	ed2d 8b02 	vpush	{d8}
 8009fb2:	ec55 4b10 	vmov	r4, r5, d0
 8009fb6:	f000 f913 	bl	800a1e0 <__ieee754_asin>
 8009fba:	4622      	mov	r2, r4
 8009fbc:	462b      	mov	r3, r5
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	eeb0 8a40 	vmov.f32	s16, s0
 8009fc6:	eef0 8a60 	vmov.f32	s17, s1
 8009fca:	f7f6 fdaf 	bl	8000b2c <__aeabi_dcmpun>
 8009fce:	b9a8      	cbnz	r0, 8009ffc <asin+0x50>
 8009fd0:	ec45 4b10 	vmov	d0, r4, r5
 8009fd4:	f001 fd18 	bl	800ba08 <fabs>
 8009fd8:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <asin+0x60>)
 8009fda:	ec51 0b10 	vmov	r0, r1, d0
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f7f6 fd9a 	bl	8000b18 <__aeabi_dcmpgt>
 8009fe4:	b150      	cbz	r0, 8009ffc <asin+0x50>
 8009fe6:	f7ff fb41 	bl	800966c <__errno>
 8009fea:	ecbd 8b02 	vpop	{d8}
 8009fee:	2321      	movs	r3, #33	; 0x21
 8009ff0:	6003      	str	r3, [r0, #0]
 8009ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ff6:	4806      	ldr	r0, [pc, #24]	; (800a010 <asin+0x64>)
 8009ff8:	f001 bd1a 	b.w	800ba30 <nan>
 8009ffc:	eeb0 0a48 	vmov.f32	s0, s16
 800a000:	eef0 0a68 	vmov.f32	s1, s17
 800a004:	ecbd 8b02 	vpop	{d8}
 800a008:	bd38      	pop	{r3, r4, r5, pc}
 800a00a:	bf00      	nop
 800a00c:	3ff00000 	.word	0x3ff00000
 800a010:	0800c0ed 	.word	0x0800c0ed

0800a014 <atan2>:
 800a014:	f000 baf8 	b.w	800a608 <__ieee754_atan2>

0800a018 <exp>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	ed2d 8b02 	vpush	{d8}
 800a01e:	ec55 4b10 	vmov	r4, r5, d0
 800a022:	f000 fbbd 	bl	800a7a0 <__ieee754_exp>
 800a026:	eeb0 8a40 	vmov.f32	s16, s0
 800a02a:	eef0 8a60 	vmov.f32	s17, s1
 800a02e:	ec45 4b10 	vmov	d0, r4, r5
 800a032:	f001 fcf2 	bl	800ba1a <finite>
 800a036:	b168      	cbz	r0, 800a054 <exp+0x3c>
 800a038:	a317      	add	r3, pc, #92	; (adr r3, 800a098 <exp+0x80>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	4620      	mov	r0, r4
 800a040:	4629      	mov	r1, r5
 800a042:	f7f6 fd69 	bl	8000b18 <__aeabi_dcmpgt>
 800a046:	b160      	cbz	r0, 800a062 <exp+0x4a>
 800a048:	f7ff fb10 	bl	800966c <__errno>
 800a04c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800a088 <exp+0x70>
 800a050:	2322      	movs	r3, #34	; 0x22
 800a052:	6003      	str	r3, [r0, #0]
 800a054:	eeb0 0a48 	vmov.f32	s0, s16
 800a058:	eef0 0a68 	vmov.f32	s1, s17
 800a05c:	ecbd 8b02 	vpop	{d8}
 800a060:	bd38      	pop	{r3, r4, r5, pc}
 800a062:	a30f      	add	r3, pc, #60	; (adr r3, 800a0a0 <exp+0x88>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	4620      	mov	r0, r4
 800a06a:	4629      	mov	r1, r5
 800a06c:	f7f6 fd36 	bl	8000adc <__aeabi_dcmplt>
 800a070:	2800      	cmp	r0, #0
 800a072:	d0ef      	beq.n	800a054 <exp+0x3c>
 800a074:	f7ff fafa 	bl	800966c <__errno>
 800a078:	2322      	movs	r3, #34	; 0x22
 800a07a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800a090 <exp+0x78>
 800a07e:	6003      	str	r3, [r0, #0]
 800a080:	e7e8      	b.n	800a054 <exp+0x3c>
 800a082:	bf00      	nop
 800a084:	f3af 8000 	nop.w
 800a088:	00000000 	.word	0x00000000
 800a08c:	7ff00000 	.word	0x7ff00000
	...
 800a098:	fefa39ef 	.word	0xfefa39ef
 800a09c:	40862e42 	.word	0x40862e42
 800a0a0:	d52d3051 	.word	0xd52d3051
 800a0a4:	c0874910 	.word	0xc0874910

0800a0a8 <pow>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	ed2d 8b02 	vpush	{d8}
 800a0ae:	eeb0 8a40 	vmov.f32	s16, s0
 800a0b2:	eef0 8a60 	vmov.f32	s17, s1
 800a0b6:	ec55 4b11 	vmov	r4, r5, d1
 800a0ba:	f000 fcf5 	bl	800aaa8 <__ieee754_pow>
 800a0be:	4622      	mov	r2, r4
 800a0c0:	462b      	mov	r3, r5
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	ec57 6b10 	vmov	r6, r7, d0
 800a0ca:	f7f6 fd2f 	bl	8000b2c <__aeabi_dcmpun>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d13b      	bne.n	800a14a <pow+0xa2>
 800a0d2:	ec51 0b18 	vmov	r0, r1, d8
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f7f6 fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0de:	b1b8      	cbz	r0, 800a110 <pow+0x68>
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	f7f6 fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d146      	bne.n	800a17e <pow+0xd6>
 800a0f0:	ec45 4b10 	vmov	d0, r4, r5
 800a0f4:	f001 fc91 	bl	800ba1a <finite>
 800a0f8:	b338      	cbz	r0, 800a14a <pow+0xa2>
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4620      	mov	r0, r4
 800a100:	4629      	mov	r1, r5
 800a102:	f7f6 fceb 	bl	8000adc <__aeabi_dcmplt>
 800a106:	b300      	cbz	r0, 800a14a <pow+0xa2>
 800a108:	f7ff fab0 	bl	800966c <__errno>
 800a10c:	2322      	movs	r3, #34	; 0x22
 800a10e:	e01b      	b.n	800a148 <pow+0xa0>
 800a110:	ec47 6b10 	vmov	d0, r6, r7
 800a114:	f001 fc81 	bl	800ba1a <finite>
 800a118:	b9e0      	cbnz	r0, 800a154 <pow+0xac>
 800a11a:	eeb0 0a48 	vmov.f32	s0, s16
 800a11e:	eef0 0a68 	vmov.f32	s1, s17
 800a122:	f001 fc7a 	bl	800ba1a <finite>
 800a126:	b1a8      	cbz	r0, 800a154 <pow+0xac>
 800a128:	ec45 4b10 	vmov	d0, r4, r5
 800a12c:	f001 fc75 	bl	800ba1a <finite>
 800a130:	b180      	cbz	r0, 800a154 <pow+0xac>
 800a132:	4632      	mov	r2, r6
 800a134:	463b      	mov	r3, r7
 800a136:	4630      	mov	r0, r6
 800a138:	4639      	mov	r1, r7
 800a13a:	f7f6 fcf7 	bl	8000b2c <__aeabi_dcmpun>
 800a13e:	2800      	cmp	r0, #0
 800a140:	d0e2      	beq.n	800a108 <pow+0x60>
 800a142:	f7ff fa93 	bl	800966c <__errno>
 800a146:	2321      	movs	r3, #33	; 0x21
 800a148:	6003      	str	r3, [r0, #0]
 800a14a:	ecbd 8b02 	vpop	{d8}
 800a14e:	ec47 6b10 	vmov	d0, r6, r7
 800a152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a154:	2200      	movs	r2, #0
 800a156:	2300      	movs	r3, #0
 800a158:	4630      	mov	r0, r6
 800a15a:	4639      	mov	r1, r7
 800a15c:	f7f6 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a160:	2800      	cmp	r0, #0
 800a162:	d0f2      	beq.n	800a14a <pow+0xa2>
 800a164:	eeb0 0a48 	vmov.f32	s0, s16
 800a168:	eef0 0a68 	vmov.f32	s1, s17
 800a16c:	f001 fc55 	bl	800ba1a <finite>
 800a170:	2800      	cmp	r0, #0
 800a172:	d0ea      	beq.n	800a14a <pow+0xa2>
 800a174:	ec45 4b10 	vmov	d0, r4, r5
 800a178:	f001 fc4f 	bl	800ba1a <finite>
 800a17c:	e7c3      	b.n	800a106 <pow+0x5e>
 800a17e:	4f01      	ldr	r7, [pc, #4]	; (800a184 <pow+0xdc>)
 800a180:	2600      	movs	r6, #0
 800a182:	e7e2      	b.n	800a14a <pow+0xa2>
 800a184:	3ff00000 	.word	0x3ff00000

0800a188 <sqrt>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	ed2d 8b02 	vpush	{d8}
 800a18e:	ec55 4b10 	vmov	r4, r5, d0
 800a192:	f001 f9b7 	bl	800b504 <__ieee754_sqrt>
 800a196:	4622      	mov	r2, r4
 800a198:	462b      	mov	r3, r5
 800a19a:	4620      	mov	r0, r4
 800a19c:	4629      	mov	r1, r5
 800a19e:	eeb0 8a40 	vmov.f32	s16, s0
 800a1a2:	eef0 8a60 	vmov.f32	s17, s1
 800a1a6:	f7f6 fcc1 	bl	8000b2c <__aeabi_dcmpun>
 800a1aa:	b990      	cbnz	r0, 800a1d2 <sqrt+0x4a>
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	f7f6 fc92 	bl	8000adc <__aeabi_dcmplt>
 800a1b8:	b158      	cbz	r0, 800a1d2 <sqrt+0x4a>
 800a1ba:	f7ff fa57 	bl	800966c <__errno>
 800a1be:	2321      	movs	r3, #33	; 0x21
 800a1c0:	6003      	str	r3, [r0, #0]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	f7f6 fb3f 	bl	800084c <__aeabi_ddiv>
 800a1ce:	ec41 0b18 	vmov	d8, r0, r1
 800a1d2:	eeb0 0a48 	vmov.f32	s0, s16
 800a1d6:	eef0 0a68 	vmov.f32	s1, s17
 800a1da:	ecbd 8b02 	vpop	{d8}
 800a1de:	bd38      	pop	{r3, r4, r5, pc}

0800a1e0 <__ieee754_asin>:
 800a1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e4:	ed2d 8b04 	vpush	{d8-d9}
 800a1e8:	ec55 4b10 	vmov	r4, r5, d0
 800a1ec:	4bcc      	ldr	r3, [pc, #816]	; (800a520 <__ieee754_asin+0x340>)
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a1f4:	4598      	cmp	r8, r3
 800a1f6:	9501      	str	r5, [sp, #4]
 800a1f8:	dd35      	ble.n	800a266 <__ieee754_asin+0x86>
 800a1fa:	ee10 3a10 	vmov	r3, s0
 800a1fe:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800a202:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800a206:	ea58 0303 	orrs.w	r3, r8, r3
 800a20a:	d117      	bne.n	800a23c <__ieee754_asin+0x5c>
 800a20c:	a3aa      	add	r3, pc, #680	; (adr r3, 800a4b8 <__ieee754_asin+0x2d8>)
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	ee10 0a10 	vmov	r0, s0
 800a216:	4629      	mov	r1, r5
 800a218:	f7f6 f9ee 	bl	80005f8 <__aeabi_dmul>
 800a21c:	a3a8      	add	r3, pc, #672	; (adr r3, 800a4c0 <__ieee754_asin+0x2e0>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	4606      	mov	r6, r0
 800a224:	460f      	mov	r7, r1
 800a226:	4620      	mov	r0, r4
 800a228:	4629      	mov	r1, r5
 800a22a:	f7f6 f9e5 	bl	80005f8 <__aeabi_dmul>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	4630      	mov	r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	f7f6 f829 	bl	800028c <__adddf3>
 800a23a:	e00b      	b.n	800a254 <__ieee754_asin+0x74>
 800a23c:	ee10 2a10 	vmov	r2, s0
 800a240:	462b      	mov	r3, r5
 800a242:	ee10 0a10 	vmov	r0, s0
 800a246:	4629      	mov	r1, r5
 800a248:	f7f6 f81e 	bl	8000288 <__aeabi_dsub>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	f7f6 fafc 	bl	800084c <__aeabi_ddiv>
 800a254:	4604      	mov	r4, r0
 800a256:	460d      	mov	r5, r1
 800a258:	ec45 4b10 	vmov	d0, r4, r5
 800a25c:	b003      	add	sp, #12
 800a25e:	ecbd 8b04 	vpop	{d8-d9}
 800a262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a266:	4baf      	ldr	r3, [pc, #700]	; (800a524 <__ieee754_asin+0x344>)
 800a268:	4598      	cmp	r8, r3
 800a26a:	dc11      	bgt.n	800a290 <__ieee754_asin+0xb0>
 800a26c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a270:	f280 80ae 	bge.w	800a3d0 <__ieee754_asin+0x1f0>
 800a274:	a394      	add	r3, pc, #592	; (adr r3, 800a4c8 <__ieee754_asin+0x2e8>)
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	ee10 0a10 	vmov	r0, s0
 800a27e:	4629      	mov	r1, r5
 800a280:	f7f6 f804 	bl	800028c <__adddf3>
 800a284:	4ba8      	ldr	r3, [pc, #672]	; (800a528 <__ieee754_asin+0x348>)
 800a286:	2200      	movs	r2, #0
 800a288:	f7f6 fc46 	bl	8000b18 <__aeabi_dcmpgt>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d1e3      	bne.n	800a258 <__ieee754_asin+0x78>
 800a290:	ec45 4b10 	vmov	d0, r4, r5
 800a294:	f001 fbb8 	bl	800ba08 <fabs>
 800a298:	49a3      	ldr	r1, [pc, #652]	; (800a528 <__ieee754_asin+0x348>)
 800a29a:	ec53 2b10 	vmov	r2, r3, d0
 800a29e:	2000      	movs	r0, #0
 800a2a0:	f7f5 fff2 	bl	8000288 <__aeabi_dsub>
 800a2a4:	4ba1      	ldr	r3, [pc, #644]	; (800a52c <__ieee754_asin+0x34c>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f7f6 f9a6 	bl	80005f8 <__aeabi_dmul>
 800a2ac:	a388      	add	r3, pc, #544	; (adr r3, 800a4d0 <__ieee754_asin+0x2f0>)
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	460d      	mov	r5, r1
 800a2b6:	f7f6 f99f 	bl	80005f8 <__aeabi_dmul>
 800a2ba:	a387      	add	r3, pc, #540	; (adr r3, 800a4d8 <__ieee754_asin+0x2f8>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f7f5 ffe4 	bl	800028c <__adddf3>
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	462b      	mov	r3, r5
 800a2c8:	f7f6 f996 	bl	80005f8 <__aeabi_dmul>
 800a2cc:	a384      	add	r3, pc, #528	; (adr r3, 800a4e0 <__ieee754_asin+0x300>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	f7f5 ffd9 	bl	8000288 <__aeabi_dsub>
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	462b      	mov	r3, r5
 800a2da:	f7f6 f98d 	bl	80005f8 <__aeabi_dmul>
 800a2de:	a382      	add	r3, pc, #520	; (adr r3, 800a4e8 <__ieee754_asin+0x308>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	f7f5 ffd2 	bl	800028c <__adddf3>
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	f7f6 f984 	bl	80005f8 <__aeabi_dmul>
 800a2f0:	a37f      	add	r3, pc, #508	; (adr r3, 800a4f0 <__ieee754_asin+0x310>)
 800a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f6:	f7f5 ffc7 	bl	8000288 <__aeabi_dsub>
 800a2fa:	4622      	mov	r2, r4
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	f7f6 f97b 	bl	80005f8 <__aeabi_dmul>
 800a302:	a37d      	add	r3, pc, #500	; (adr r3, 800a4f8 <__ieee754_asin+0x318>)
 800a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a308:	f7f5 ffc0 	bl	800028c <__adddf3>
 800a30c:	4622      	mov	r2, r4
 800a30e:	462b      	mov	r3, r5
 800a310:	f7f6 f972 	bl	80005f8 <__aeabi_dmul>
 800a314:	a37a      	add	r3, pc, #488	; (adr r3, 800a500 <__ieee754_asin+0x320>)
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	ec41 0b18 	vmov	d8, r0, r1
 800a31e:	4620      	mov	r0, r4
 800a320:	4629      	mov	r1, r5
 800a322:	f7f6 f969 	bl	80005f8 <__aeabi_dmul>
 800a326:	a378      	add	r3, pc, #480	; (adr r3, 800a508 <__ieee754_asin+0x328>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	f7f5 ffac 	bl	8000288 <__aeabi_dsub>
 800a330:	4622      	mov	r2, r4
 800a332:	462b      	mov	r3, r5
 800a334:	f7f6 f960 	bl	80005f8 <__aeabi_dmul>
 800a338:	a375      	add	r3, pc, #468	; (adr r3, 800a510 <__ieee754_asin+0x330>)
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	f7f5 ffa5 	bl	800028c <__adddf3>
 800a342:	4622      	mov	r2, r4
 800a344:	462b      	mov	r3, r5
 800a346:	f7f6 f957 	bl	80005f8 <__aeabi_dmul>
 800a34a:	a373      	add	r3, pc, #460	; (adr r3, 800a518 <__ieee754_asin+0x338>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ff9a 	bl	8000288 <__aeabi_dsub>
 800a354:	4622      	mov	r2, r4
 800a356:	462b      	mov	r3, r5
 800a358:	f7f6 f94e 	bl	80005f8 <__aeabi_dmul>
 800a35c:	4b72      	ldr	r3, [pc, #456]	; (800a528 <__ieee754_asin+0x348>)
 800a35e:	2200      	movs	r2, #0
 800a360:	f7f5 ff94 	bl	800028c <__adddf3>
 800a364:	ec45 4b10 	vmov	d0, r4, r5
 800a368:	4606      	mov	r6, r0
 800a36a:	460f      	mov	r7, r1
 800a36c:	f001 f8ca 	bl	800b504 <__ieee754_sqrt>
 800a370:	4b6f      	ldr	r3, [pc, #444]	; (800a530 <__ieee754_asin+0x350>)
 800a372:	4598      	cmp	r8, r3
 800a374:	ec5b ab10 	vmov	sl, fp, d0
 800a378:	f340 80dc 	ble.w	800a534 <__ieee754_asin+0x354>
 800a37c:	4632      	mov	r2, r6
 800a37e:	463b      	mov	r3, r7
 800a380:	ec51 0b18 	vmov	r0, r1, d8
 800a384:	f7f6 fa62 	bl	800084c <__aeabi_ddiv>
 800a388:	4652      	mov	r2, sl
 800a38a:	465b      	mov	r3, fp
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	4652      	mov	r2, sl
 800a392:	465b      	mov	r3, fp
 800a394:	f7f5 ff7a 	bl	800028c <__adddf3>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	f7f5 ff76 	bl	800028c <__adddf3>
 800a3a0:	a347      	add	r3, pc, #284	; (adr r3, 800a4c0 <__ieee754_asin+0x2e0>)
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	f7f5 ff6f 	bl	8000288 <__aeabi_dsub>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	a142      	add	r1, pc, #264	; (adr r1, 800a4b8 <__ieee754_asin+0x2d8>)
 800a3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3b4:	f7f5 ff68 	bl	8000288 <__aeabi_dsub>
 800a3b8:	9b01      	ldr	r3, [sp, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	bfdc      	itt	le
 800a3be:	4602      	movle	r2, r0
 800a3c0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	bfdc      	itt	le
 800a3ca:	4614      	movle	r4, r2
 800a3cc:	461d      	movle	r5, r3
 800a3ce:	e743      	b.n	800a258 <__ieee754_asin+0x78>
 800a3d0:	ee10 2a10 	vmov	r2, s0
 800a3d4:	ee10 0a10 	vmov	r0, s0
 800a3d8:	462b      	mov	r3, r5
 800a3da:	4629      	mov	r1, r5
 800a3dc:	f7f6 f90c 	bl	80005f8 <__aeabi_dmul>
 800a3e0:	a33b      	add	r3, pc, #236	; (adr r3, 800a4d0 <__ieee754_asin+0x2f0>)
 800a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	460f      	mov	r7, r1
 800a3ea:	f7f6 f905 	bl	80005f8 <__aeabi_dmul>
 800a3ee:	a33a      	add	r3, pc, #232	; (adr r3, 800a4d8 <__ieee754_asin+0x2f8>)
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	f7f5 ff4a 	bl	800028c <__adddf3>
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	463b      	mov	r3, r7
 800a3fc:	f7f6 f8fc 	bl	80005f8 <__aeabi_dmul>
 800a400:	a337      	add	r3, pc, #220	; (adr r3, 800a4e0 <__ieee754_asin+0x300>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	f7f5 ff3f 	bl	8000288 <__aeabi_dsub>
 800a40a:	4632      	mov	r2, r6
 800a40c:	463b      	mov	r3, r7
 800a40e:	f7f6 f8f3 	bl	80005f8 <__aeabi_dmul>
 800a412:	a335      	add	r3, pc, #212	; (adr r3, 800a4e8 <__ieee754_asin+0x308>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f7f5 ff38 	bl	800028c <__adddf3>
 800a41c:	4632      	mov	r2, r6
 800a41e:	463b      	mov	r3, r7
 800a420:	f7f6 f8ea 	bl	80005f8 <__aeabi_dmul>
 800a424:	a332      	add	r3, pc, #200	; (adr r3, 800a4f0 <__ieee754_asin+0x310>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	f7f5 ff2d 	bl	8000288 <__aeabi_dsub>
 800a42e:	4632      	mov	r2, r6
 800a430:	463b      	mov	r3, r7
 800a432:	f7f6 f8e1 	bl	80005f8 <__aeabi_dmul>
 800a436:	a330      	add	r3, pc, #192	; (adr r3, 800a4f8 <__ieee754_asin+0x318>)
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	f7f5 ff26 	bl	800028c <__adddf3>
 800a440:	4632      	mov	r2, r6
 800a442:	463b      	mov	r3, r7
 800a444:	f7f6 f8d8 	bl	80005f8 <__aeabi_dmul>
 800a448:	a32d      	add	r3, pc, #180	; (adr r3, 800a500 <__ieee754_asin+0x320>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	4680      	mov	r8, r0
 800a450:	4689      	mov	r9, r1
 800a452:	4630      	mov	r0, r6
 800a454:	4639      	mov	r1, r7
 800a456:	f7f6 f8cf 	bl	80005f8 <__aeabi_dmul>
 800a45a:	a32b      	add	r3, pc, #172	; (adr r3, 800a508 <__ieee754_asin+0x328>)
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	f7f5 ff12 	bl	8000288 <__aeabi_dsub>
 800a464:	4632      	mov	r2, r6
 800a466:	463b      	mov	r3, r7
 800a468:	f7f6 f8c6 	bl	80005f8 <__aeabi_dmul>
 800a46c:	a328      	add	r3, pc, #160	; (adr r3, 800a510 <__ieee754_asin+0x330>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	f7f5 ff0b 	bl	800028c <__adddf3>
 800a476:	4632      	mov	r2, r6
 800a478:	463b      	mov	r3, r7
 800a47a:	f7f6 f8bd 	bl	80005f8 <__aeabi_dmul>
 800a47e:	a326      	add	r3, pc, #152	; (adr r3, 800a518 <__ieee754_asin+0x338>)
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f7f5 ff00 	bl	8000288 <__aeabi_dsub>
 800a488:	4632      	mov	r2, r6
 800a48a:	463b      	mov	r3, r7
 800a48c:	f7f6 f8b4 	bl	80005f8 <__aeabi_dmul>
 800a490:	4b25      	ldr	r3, [pc, #148]	; (800a528 <__ieee754_asin+0x348>)
 800a492:	2200      	movs	r2, #0
 800a494:	f7f5 fefa 	bl	800028c <__adddf3>
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	4640      	mov	r0, r8
 800a49e:	4649      	mov	r1, r9
 800a4a0:	f7f6 f9d4 	bl	800084c <__aeabi_ddiv>
 800a4a4:	4622      	mov	r2, r4
 800a4a6:	462b      	mov	r3, r5
 800a4a8:	f7f6 f8a6 	bl	80005f8 <__aeabi_dmul>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	e6bf      	b.n	800a236 <__ieee754_asin+0x56>
 800a4b6:	bf00      	nop
 800a4b8:	54442d18 	.word	0x54442d18
 800a4bc:	3ff921fb 	.word	0x3ff921fb
 800a4c0:	33145c07 	.word	0x33145c07
 800a4c4:	3c91a626 	.word	0x3c91a626
 800a4c8:	8800759c 	.word	0x8800759c
 800a4cc:	7e37e43c 	.word	0x7e37e43c
 800a4d0:	0dfdf709 	.word	0x0dfdf709
 800a4d4:	3f023de1 	.word	0x3f023de1
 800a4d8:	7501b288 	.word	0x7501b288
 800a4dc:	3f49efe0 	.word	0x3f49efe0
 800a4e0:	b5688f3b 	.word	0xb5688f3b
 800a4e4:	3fa48228 	.word	0x3fa48228
 800a4e8:	0e884455 	.word	0x0e884455
 800a4ec:	3fc9c155 	.word	0x3fc9c155
 800a4f0:	03eb6f7d 	.word	0x03eb6f7d
 800a4f4:	3fd4d612 	.word	0x3fd4d612
 800a4f8:	55555555 	.word	0x55555555
 800a4fc:	3fc55555 	.word	0x3fc55555
 800a500:	b12e9282 	.word	0xb12e9282
 800a504:	3fb3b8c5 	.word	0x3fb3b8c5
 800a508:	1b8d0159 	.word	0x1b8d0159
 800a50c:	3fe6066c 	.word	0x3fe6066c
 800a510:	9c598ac8 	.word	0x9c598ac8
 800a514:	40002ae5 	.word	0x40002ae5
 800a518:	1c8a2d4b 	.word	0x1c8a2d4b
 800a51c:	40033a27 	.word	0x40033a27
 800a520:	3fefffff 	.word	0x3fefffff
 800a524:	3fdfffff 	.word	0x3fdfffff
 800a528:	3ff00000 	.word	0x3ff00000
 800a52c:	3fe00000 	.word	0x3fe00000
 800a530:	3fef3332 	.word	0x3fef3332
 800a534:	ee10 2a10 	vmov	r2, s0
 800a538:	ee10 0a10 	vmov	r0, s0
 800a53c:	465b      	mov	r3, fp
 800a53e:	4659      	mov	r1, fp
 800a540:	f7f5 fea4 	bl	800028c <__adddf3>
 800a544:	4632      	mov	r2, r6
 800a546:	463b      	mov	r3, r7
 800a548:	ec41 0b19 	vmov	d9, r0, r1
 800a54c:	ec51 0b18 	vmov	r0, r1, d8
 800a550:	f7f6 f97c 	bl	800084c <__aeabi_ddiv>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	ec51 0b19 	vmov	r0, r1, d9
 800a55c:	f7f6 f84c 	bl	80005f8 <__aeabi_dmul>
 800a560:	f04f 0800 	mov.w	r8, #0
 800a564:	4606      	mov	r6, r0
 800a566:	460f      	mov	r7, r1
 800a568:	4642      	mov	r2, r8
 800a56a:	465b      	mov	r3, fp
 800a56c:	4640      	mov	r0, r8
 800a56e:	4659      	mov	r1, fp
 800a570:	f7f6 f842 	bl	80005f8 <__aeabi_dmul>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	4620      	mov	r0, r4
 800a57a:	4629      	mov	r1, r5
 800a57c:	f7f5 fe84 	bl	8000288 <__aeabi_dsub>
 800a580:	4642      	mov	r2, r8
 800a582:	4604      	mov	r4, r0
 800a584:	460d      	mov	r5, r1
 800a586:	465b      	mov	r3, fp
 800a588:	4650      	mov	r0, sl
 800a58a:	4659      	mov	r1, fp
 800a58c:	f7f5 fe7e 	bl	800028c <__adddf3>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4620      	mov	r0, r4
 800a596:	4629      	mov	r1, r5
 800a598:	f7f6 f958 	bl	800084c <__aeabi_ddiv>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	f7f5 fe74 	bl	800028c <__adddf3>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	a113      	add	r1, pc, #76	; (adr r1, 800a5f8 <__ieee754_asin+0x418>)
 800a5aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ae:	f7f5 fe6b 	bl	8000288 <__aeabi_dsub>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	f7f5 fe65 	bl	8000288 <__aeabi_dsub>
 800a5be:	4642      	mov	r2, r8
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	460d      	mov	r5, r1
 800a5c4:	465b      	mov	r3, fp
 800a5c6:	4640      	mov	r0, r8
 800a5c8:	4659      	mov	r1, fp
 800a5ca:	f7f5 fe5f 	bl	800028c <__adddf3>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	a10b      	add	r1, pc, #44	; (adr r1, 800a600 <__ieee754_asin+0x420>)
 800a5d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5d8:	f7f5 fe56 	bl	8000288 <__aeabi_dsub>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	f7f5 fe50 	bl	8000288 <__aeabi_dsub>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	a104      	add	r1, pc, #16	; (adr r1, 800a600 <__ieee754_asin+0x420>)
 800a5ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5f2:	e6df      	b.n	800a3b4 <__ieee754_asin+0x1d4>
 800a5f4:	f3af 8000 	nop.w
 800a5f8:	33145c07 	.word	0x33145c07
 800a5fc:	3c91a626 	.word	0x3c91a626
 800a600:	54442d18 	.word	0x54442d18
 800a604:	3fe921fb 	.word	0x3fe921fb

0800a608 <__ieee754_atan2>:
 800a608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a60c:	ec57 6b11 	vmov	r6, r7, d1
 800a610:	4273      	negs	r3, r6
 800a612:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a798 <__ieee754_atan2+0x190>
 800a616:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a61a:	4333      	orrs	r3, r6
 800a61c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a620:	4573      	cmp	r3, lr
 800a622:	ec51 0b10 	vmov	r0, r1, d0
 800a626:	ee11 8a10 	vmov	r8, s2
 800a62a:	d80a      	bhi.n	800a642 <__ieee754_atan2+0x3a>
 800a62c:	4244      	negs	r4, r0
 800a62e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a632:	4304      	orrs	r4, r0
 800a634:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a638:	4574      	cmp	r4, lr
 800a63a:	ee10 9a10 	vmov	r9, s0
 800a63e:	468c      	mov	ip, r1
 800a640:	d907      	bls.n	800a652 <__ieee754_atan2+0x4a>
 800a642:	4632      	mov	r2, r6
 800a644:	463b      	mov	r3, r7
 800a646:	f7f5 fe21 	bl	800028c <__adddf3>
 800a64a:	ec41 0b10 	vmov	d0, r0, r1
 800a64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a652:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a656:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a65a:	4334      	orrs	r4, r6
 800a65c:	d103      	bne.n	800a666 <__ieee754_atan2+0x5e>
 800a65e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a662:	f001 b831 	b.w	800b6c8 <atan>
 800a666:	17bc      	asrs	r4, r7, #30
 800a668:	f004 0402 	and.w	r4, r4, #2
 800a66c:	ea53 0909 	orrs.w	r9, r3, r9
 800a670:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a674:	d107      	bne.n	800a686 <__ieee754_atan2+0x7e>
 800a676:	2c02      	cmp	r4, #2
 800a678:	d060      	beq.n	800a73c <__ieee754_atan2+0x134>
 800a67a:	2c03      	cmp	r4, #3
 800a67c:	d1e5      	bne.n	800a64a <__ieee754_atan2+0x42>
 800a67e:	a142      	add	r1, pc, #264	; (adr r1, 800a788 <__ieee754_atan2+0x180>)
 800a680:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a684:	e7e1      	b.n	800a64a <__ieee754_atan2+0x42>
 800a686:	ea52 0808 	orrs.w	r8, r2, r8
 800a68a:	d106      	bne.n	800a69a <__ieee754_atan2+0x92>
 800a68c:	f1bc 0f00 	cmp.w	ip, #0
 800a690:	da5f      	bge.n	800a752 <__ieee754_atan2+0x14a>
 800a692:	a13f      	add	r1, pc, #252	; (adr r1, 800a790 <__ieee754_atan2+0x188>)
 800a694:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a698:	e7d7      	b.n	800a64a <__ieee754_atan2+0x42>
 800a69a:	4572      	cmp	r2, lr
 800a69c:	d10f      	bne.n	800a6be <__ieee754_atan2+0xb6>
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	f104 34ff 	add.w	r4, r4, #4294967295
 800a6a4:	d107      	bne.n	800a6b6 <__ieee754_atan2+0xae>
 800a6a6:	2c02      	cmp	r4, #2
 800a6a8:	d84c      	bhi.n	800a744 <__ieee754_atan2+0x13c>
 800a6aa:	4b35      	ldr	r3, [pc, #212]	; (800a780 <__ieee754_atan2+0x178>)
 800a6ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a6b0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a6b4:	e7c9      	b.n	800a64a <__ieee754_atan2+0x42>
 800a6b6:	2c02      	cmp	r4, #2
 800a6b8:	d848      	bhi.n	800a74c <__ieee754_atan2+0x144>
 800a6ba:	4b32      	ldr	r3, [pc, #200]	; (800a784 <__ieee754_atan2+0x17c>)
 800a6bc:	e7f6      	b.n	800a6ac <__ieee754_atan2+0xa4>
 800a6be:	4573      	cmp	r3, lr
 800a6c0:	d0e4      	beq.n	800a68c <__ieee754_atan2+0x84>
 800a6c2:	1a9b      	subs	r3, r3, r2
 800a6c4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a6c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6cc:	da1e      	bge.n	800a70c <__ieee754_atan2+0x104>
 800a6ce:	2f00      	cmp	r7, #0
 800a6d0:	da01      	bge.n	800a6d6 <__ieee754_atan2+0xce>
 800a6d2:	323c      	adds	r2, #60	; 0x3c
 800a6d4:	db1e      	blt.n	800a714 <__ieee754_atan2+0x10c>
 800a6d6:	4632      	mov	r2, r6
 800a6d8:	463b      	mov	r3, r7
 800a6da:	f7f6 f8b7 	bl	800084c <__aeabi_ddiv>
 800a6de:	ec41 0b10 	vmov	d0, r0, r1
 800a6e2:	f001 f991 	bl	800ba08 <fabs>
 800a6e6:	f000 ffef 	bl	800b6c8 <atan>
 800a6ea:	ec51 0b10 	vmov	r0, r1, d0
 800a6ee:	2c01      	cmp	r4, #1
 800a6f0:	d013      	beq.n	800a71a <__ieee754_atan2+0x112>
 800a6f2:	2c02      	cmp	r4, #2
 800a6f4:	d015      	beq.n	800a722 <__ieee754_atan2+0x11a>
 800a6f6:	2c00      	cmp	r4, #0
 800a6f8:	d0a7      	beq.n	800a64a <__ieee754_atan2+0x42>
 800a6fa:	a319      	add	r3, pc, #100	; (adr r3, 800a760 <__ieee754_atan2+0x158>)
 800a6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a700:	f7f5 fdc2 	bl	8000288 <__aeabi_dsub>
 800a704:	a318      	add	r3, pc, #96	; (adr r3, 800a768 <__ieee754_atan2+0x160>)
 800a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70a:	e014      	b.n	800a736 <__ieee754_atan2+0x12e>
 800a70c:	a118      	add	r1, pc, #96	; (adr r1, 800a770 <__ieee754_atan2+0x168>)
 800a70e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a712:	e7ec      	b.n	800a6ee <__ieee754_atan2+0xe6>
 800a714:	2000      	movs	r0, #0
 800a716:	2100      	movs	r1, #0
 800a718:	e7e9      	b.n	800a6ee <__ieee754_atan2+0xe6>
 800a71a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a71e:	4619      	mov	r1, r3
 800a720:	e793      	b.n	800a64a <__ieee754_atan2+0x42>
 800a722:	a30f      	add	r3, pc, #60	; (adr r3, 800a760 <__ieee754_atan2+0x158>)
 800a724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a728:	f7f5 fdae 	bl	8000288 <__aeabi_dsub>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	a10d      	add	r1, pc, #52	; (adr r1, 800a768 <__ieee754_atan2+0x160>)
 800a732:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a736:	f7f5 fda7 	bl	8000288 <__aeabi_dsub>
 800a73a:	e786      	b.n	800a64a <__ieee754_atan2+0x42>
 800a73c:	a10a      	add	r1, pc, #40	; (adr r1, 800a768 <__ieee754_atan2+0x160>)
 800a73e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a742:	e782      	b.n	800a64a <__ieee754_atan2+0x42>
 800a744:	a10c      	add	r1, pc, #48	; (adr r1, 800a778 <__ieee754_atan2+0x170>)
 800a746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a74a:	e77e      	b.n	800a64a <__ieee754_atan2+0x42>
 800a74c:	2000      	movs	r0, #0
 800a74e:	2100      	movs	r1, #0
 800a750:	e77b      	b.n	800a64a <__ieee754_atan2+0x42>
 800a752:	a107      	add	r1, pc, #28	; (adr r1, 800a770 <__ieee754_atan2+0x168>)
 800a754:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a758:	e777      	b.n	800a64a <__ieee754_atan2+0x42>
 800a75a:	bf00      	nop
 800a75c:	f3af 8000 	nop.w
 800a760:	33145c07 	.word	0x33145c07
 800a764:	3ca1a626 	.word	0x3ca1a626
 800a768:	54442d18 	.word	0x54442d18
 800a76c:	400921fb 	.word	0x400921fb
 800a770:	54442d18 	.word	0x54442d18
 800a774:	3ff921fb 	.word	0x3ff921fb
 800a778:	54442d18 	.word	0x54442d18
 800a77c:	3fe921fb 	.word	0x3fe921fb
 800a780:	0800c120 	.word	0x0800c120
 800a784:	0800c138 	.word	0x0800c138
 800a788:	54442d18 	.word	0x54442d18
 800a78c:	c00921fb 	.word	0xc00921fb
 800a790:	54442d18 	.word	0x54442d18
 800a794:	bff921fb 	.word	0xbff921fb
 800a798:	7ff00000 	.word	0x7ff00000
 800a79c:	00000000 	.word	0x00000000

0800a7a0 <__ieee754_exp>:
 800a7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a4:	ec55 4b10 	vmov	r4, r5, d0
 800a7a8:	49b5      	ldr	r1, [pc, #724]	; (800aa80 <__ieee754_exp+0x2e0>)
 800a7aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a7ae:	428b      	cmp	r3, r1
 800a7b0:	ed2d 8b04 	vpush	{d8-d9}
 800a7b4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800a7b8:	d93d      	bls.n	800a836 <__ieee754_exp+0x96>
 800a7ba:	49b2      	ldr	r1, [pc, #712]	; (800aa84 <__ieee754_exp+0x2e4>)
 800a7bc:	428b      	cmp	r3, r1
 800a7be:	d918      	bls.n	800a7f2 <__ieee754_exp+0x52>
 800a7c0:	ee10 3a10 	vmov	r3, s0
 800a7c4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	d009      	beq.n	800a7e0 <__ieee754_exp+0x40>
 800a7cc:	ee10 2a10 	vmov	r2, s0
 800a7d0:	462b      	mov	r3, r5
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	f7f5 fd59 	bl	800028c <__adddf3>
 800a7da:	4604      	mov	r4, r0
 800a7dc:	460d      	mov	r5, r1
 800a7de:	e002      	b.n	800a7e6 <__ieee754_exp+0x46>
 800a7e0:	b10e      	cbz	r6, 800a7e6 <__ieee754_exp+0x46>
 800a7e2:	2400      	movs	r4, #0
 800a7e4:	2500      	movs	r5, #0
 800a7e6:	ecbd 8b04 	vpop	{d8-d9}
 800a7ea:	ec45 4b10 	vmov	d0, r4, r5
 800a7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f2:	a38d      	add	r3, pc, #564	; (adr r3, 800aa28 <__ieee754_exp+0x288>)
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	ee10 0a10 	vmov	r0, s0
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	f7f6 f98b 	bl	8000b18 <__aeabi_dcmpgt>
 800a802:	4607      	mov	r7, r0
 800a804:	b130      	cbz	r0, 800a814 <__ieee754_exp+0x74>
 800a806:	ecbd 8b04 	vpop	{d8-d9}
 800a80a:	2000      	movs	r0, #0
 800a80c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a810:	f000 bf51 	b.w	800b6b6 <__math_oflow>
 800a814:	a386      	add	r3, pc, #536	; (adr r3, 800aa30 <__ieee754_exp+0x290>)
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	4620      	mov	r0, r4
 800a81c:	4629      	mov	r1, r5
 800a81e:	f7f6 f95d 	bl	8000adc <__aeabi_dcmplt>
 800a822:	2800      	cmp	r0, #0
 800a824:	f000 808b 	beq.w	800a93e <__ieee754_exp+0x19e>
 800a828:	ecbd 8b04 	vpop	{d8-d9}
 800a82c:	4638      	mov	r0, r7
 800a82e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a832:	f000 bf37 	b.w	800b6a4 <__math_uflow>
 800a836:	4a94      	ldr	r2, [pc, #592]	; (800aa88 <__ieee754_exp+0x2e8>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	f240 80ac 	bls.w	800a996 <__ieee754_exp+0x1f6>
 800a83e:	4a93      	ldr	r2, [pc, #588]	; (800aa8c <__ieee754_exp+0x2ec>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d87c      	bhi.n	800a93e <__ieee754_exp+0x19e>
 800a844:	4b92      	ldr	r3, [pc, #584]	; (800aa90 <__ieee754_exp+0x2f0>)
 800a846:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	ee10 0a10 	vmov	r0, s0
 800a852:	4629      	mov	r1, r5
 800a854:	f7f5 fd18 	bl	8000288 <__aeabi_dsub>
 800a858:	4b8e      	ldr	r3, [pc, #568]	; (800aa94 <__ieee754_exp+0x2f4>)
 800a85a:	00f7      	lsls	r7, r6, #3
 800a85c:	443b      	add	r3, r7
 800a85e:	ed93 7b00 	vldr	d7, [r3]
 800a862:	f1c6 0a01 	rsb	sl, r6, #1
 800a866:	4680      	mov	r8, r0
 800a868:	4689      	mov	r9, r1
 800a86a:	ebaa 0a06 	sub.w	sl, sl, r6
 800a86e:	eeb0 8a47 	vmov.f32	s16, s14
 800a872:	eef0 8a67 	vmov.f32	s17, s15
 800a876:	ec53 2b18 	vmov	r2, r3, d8
 800a87a:	4640      	mov	r0, r8
 800a87c:	4649      	mov	r1, r9
 800a87e:	f7f5 fd03 	bl	8000288 <__aeabi_dsub>
 800a882:	4604      	mov	r4, r0
 800a884:	460d      	mov	r5, r1
 800a886:	4622      	mov	r2, r4
 800a888:	462b      	mov	r3, r5
 800a88a:	4620      	mov	r0, r4
 800a88c:	4629      	mov	r1, r5
 800a88e:	f7f5 feb3 	bl	80005f8 <__aeabi_dmul>
 800a892:	a369      	add	r3, pc, #420	; (adr r3, 800aa38 <__ieee754_exp+0x298>)
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	4606      	mov	r6, r0
 800a89a:	460f      	mov	r7, r1
 800a89c:	f7f5 feac 	bl	80005f8 <__aeabi_dmul>
 800a8a0:	a367      	add	r3, pc, #412	; (adr r3, 800aa40 <__ieee754_exp+0x2a0>)
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	f7f5 fcef 	bl	8000288 <__aeabi_dsub>
 800a8aa:	4632      	mov	r2, r6
 800a8ac:	463b      	mov	r3, r7
 800a8ae:	f7f5 fea3 	bl	80005f8 <__aeabi_dmul>
 800a8b2:	a365      	add	r3, pc, #404	; (adr r3, 800aa48 <__ieee754_exp+0x2a8>)
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f7f5 fce8 	bl	800028c <__adddf3>
 800a8bc:	4632      	mov	r2, r6
 800a8be:	463b      	mov	r3, r7
 800a8c0:	f7f5 fe9a 	bl	80005f8 <__aeabi_dmul>
 800a8c4:	a362      	add	r3, pc, #392	; (adr r3, 800aa50 <__ieee754_exp+0x2b0>)
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	f7f5 fcdd 	bl	8000288 <__aeabi_dsub>
 800a8ce:	4632      	mov	r2, r6
 800a8d0:	463b      	mov	r3, r7
 800a8d2:	f7f5 fe91 	bl	80005f8 <__aeabi_dmul>
 800a8d6:	a360      	add	r3, pc, #384	; (adr r3, 800aa58 <__ieee754_exp+0x2b8>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	f7f5 fcd6 	bl	800028c <__adddf3>
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	463b      	mov	r3, r7
 800a8e4:	f7f5 fe88 	bl	80005f8 <__aeabi_dmul>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	f7f5 fcca 	bl	8000288 <__aeabi_dsub>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	460f      	mov	r7, r1
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	4629      	mov	r1, r5
 800a900:	f7f5 fe7a 	bl	80005f8 <__aeabi_dmul>
 800a904:	ec41 0b19 	vmov	d9, r0, r1
 800a908:	f1ba 0f00 	cmp.w	sl, #0
 800a90c:	d15d      	bne.n	800a9ca <__ieee754_exp+0x22a>
 800a90e:	2200      	movs	r2, #0
 800a910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a914:	4630      	mov	r0, r6
 800a916:	4639      	mov	r1, r7
 800a918:	f7f5 fcb6 	bl	8000288 <__aeabi_dsub>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	ec51 0b19 	vmov	r0, r1, d9
 800a924:	f7f5 ff92 	bl	800084c <__aeabi_ddiv>
 800a928:	4622      	mov	r2, r4
 800a92a:	462b      	mov	r3, r5
 800a92c:	f7f5 fcac 	bl	8000288 <__aeabi_dsub>
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	2000      	movs	r0, #0
 800a936:	4958      	ldr	r1, [pc, #352]	; (800aa98 <__ieee754_exp+0x2f8>)
 800a938:	f7f5 fca6 	bl	8000288 <__aeabi_dsub>
 800a93c:	e74d      	b.n	800a7da <__ieee754_exp+0x3a>
 800a93e:	4857      	ldr	r0, [pc, #348]	; (800aa9c <__ieee754_exp+0x2fc>)
 800a940:	a347      	add	r3, pc, #284	; (adr r3, 800aa60 <__ieee754_exp+0x2c0>)
 800a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a946:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800a94a:	4629      	mov	r1, r5
 800a94c:	4620      	mov	r0, r4
 800a94e:	f7f5 fe53 	bl	80005f8 <__aeabi_dmul>
 800a952:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a956:	f7f5 fc99 	bl	800028c <__adddf3>
 800a95a:	f7f6 f8fd 	bl	8000b58 <__aeabi_d2iz>
 800a95e:	4682      	mov	sl, r0
 800a960:	f7f5 fde0 	bl	8000524 <__aeabi_i2d>
 800a964:	a340      	add	r3, pc, #256	; (adr r3, 800aa68 <__ieee754_exp+0x2c8>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	4606      	mov	r6, r0
 800a96c:	460f      	mov	r7, r1
 800a96e:	f7f5 fe43 	bl	80005f8 <__aeabi_dmul>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4620      	mov	r0, r4
 800a978:	4629      	mov	r1, r5
 800a97a:	f7f5 fc85 	bl	8000288 <__aeabi_dsub>
 800a97e:	a33c      	add	r3, pc, #240	; (adr r3, 800aa70 <__ieee754_exp+0x2d0>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	4680      	mov	r8, r0
 800a986:	4689      	mov	r9, r1
 800a988:	4630      	mov	r0, r6
 800a98a:	4639      	mov	r1, r7
 800a98c:	f7f5 fe34 	bl	80005f8 <__aeabi_dmul>
 800a990:	ec41 0b18 	vmov	d8, r0, r1
 800a994:	e76f      	b.n	800a876 <__ieee754_exp+0xd6>
 800a996:	4a42      	ldr	r2, [pc, #264]	; (800aaa0 <__ieee754_exp+0x300>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d811      	bhi.n	800a9c0 <__ieee754_exp+0x220>
 800a99c:	a336      	add	r3, pc, #216	; (adr r3, 800aa78 <__ieee754_exp+0x2d8>)
 800a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a2:	ee10 0a10 	vmov	r0, s0
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	f7f5 fc70 	bl	800028c <__adddf3>
 800a9ac:	4b3a      	ldr	r3, [pc, #232]	; (800aa98 <__ieee754_exp+0x2f8>)
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f7f6 f8b2 	bl	8000b18 <__aeabi_dcmpgt>
 800a9b4:	b138      	cbz	r0, 800a9c6 <__ieee754_exp+0x226>
 800a9b6:	4b38      	ldr	r3, [pc, #224]	; (800aa98 <__ieee754_exp+0x2f8>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	4629      	mov	r1, r5
 800a9be:	e70a      	b.n	800a7d6 <__ieee754_exp+0x36>
 800a9c0:	f04f 0a00 	mov.w	sl, #0
 800a9c4:	e75f      	b.n	800a886 <__ieee754_exp+0xe6>
 800a9c6:	4682      	mov	sl, r0
 800a9c8:	e75d      	b.n	800a886 <__ieee754_exp+0xe6>
 800a9ca:	4632      	mov	r2, r6
 800a9cc:	463b      	mov	r3, r7
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a9d4:	f7f5 fc58 	bl	8000288 <__aeabi_dsub>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	ec51 0b19 	vmov	r0, r1, d9
 800a9e0:	f7f5 ff34 	bl	800084c <__aeabi_ddiv>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	ec51 0b18 	vmov	r0, r1, d8
 800a9ec:	f7f5 fc4c 	bl	8000288 <__aeabi_dsub>
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	464b      	mov	r3, r9
 800a9f4:	f7f5 fc48 	bl	8000288 <__aeabi_dsub>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	2000      	movs	r0, #0
 800a9fe:	4926      	ldr	r1, [pc, #152]	; (800aa98 <__ieee754_exp+0x2f8>)
 800aa00:	f7f5 fc42 	bl	8000288 <__aeabi_dsub>
 800aa04:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800aa08:	4592      	cmp	sl, r2
 800aa0a:	db02      	blt.n	800aa12 <__ieee754_exp+0x272>
 800aa0c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800aa10:	e6e3      	b.n	800a7da <__ieee754_exp+0x3a>
 800aa12:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800aa16:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800aa20:	f7f5 fdea 	bl	80005f8 <__aeabi_dmul>
 800aa24:	e6d9      	b.n	800a7da <__ieee754_exp+0x3a>
 800aa26:	bf00      	nop
 800aa28:	fefa39ef 	.word	0xfefa39ef
 800aa2c:	40862e42 	.word	0x40862e42
 800aa30:	d52d3051 	.word	0xd52d3051
 800aa34:	c0874910 	.word	0xc0874910
 800aa38:	72bea4d0 	.word	0x72bea4d0
 800aa3c:	3e663769 	.word	0x3e663769
 800aa40:	c5d26bf1 	.word	0xc5d26bf1
 800aa44:	3ebbbd41 	.word	0x3ebbbd41
 800aa48:	af25de2c 	.word	0xaf25de2c
 800aa4c:	3f11566a 	.word	0x3f11566a
 800aa50:	16bebd93 	.word	0x16bebd93
 800aa54:	3f66c16c 	.word	0x3f66c16c
 800aa58:	5555553e 	.word	0x5555553e
 800aa5c:	3fc55555 	.word	0x3fc55555
 800aa60:	652b82fe 	.word	0x652b82fe
 800aa64:	3ff71547 	.word	0x3ff71547
 800aa68:	fee00000 	.word	0xfee00000
 800aa6c:	3fe62e42 	.word	0x3fe62e42
 800aa70:	35793c76 	.word	0x35793c76
 800aa74:	3dea39ef 	.word	0x3dea39ef
 800aa78:	8800759c 	.word	0x8800759c
 800aa7c:	7e37e43c 	.word	0x7e37e43c
 800aa80:	40862e41 	.word	0x40862e41
 800aa84:	7fefffff 	.word	0x7fefffff
 800aa88:	3fd62e42 	.word	0x3fd62e42
 800aa8c:	3ff0a2b1 	.word	0x3ff0a2b1
 800aa90:	0800c160 	.word	0x0800c160
 800aa94:	0800c170 	.word	0x0800c170
 800aa98:	3ff00000 	.word	0x3ff00000
 800aa9c:	0800c150 	.word	0x0800c150
 800aaa0:	3defffff 	.word	0x3defffff
 800aaa4:	00000000 	.word	0x00000000

0800aaa8 <__ieee754_pow>:
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	ed2d 8b06 	vpush	{d8-d10}
 800aab0:	b089      	sub	sp, #36	; 0x24
 800aab2:	ed8d 1b00 	vstr	d1, [sp]
 800aab6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800aaba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800aabe:	ea58 0102 	orrs.w	r1, r8, r2
 800aac2:	ec57 6b10 	vmov	r6, r7, d0
 800aac6:	d115      	bne.n	800aaf4 <__ieee754_pow+0x4c>
 800aac8:	19b3      	adds	r3, r6, r6
 800aaca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800aace:	4152      	adcs	r2, r2
 800aad0:	4299      	cmp	r1, r3
 800aad2:	4b89      	ldr	r3, [pc, #548]	; (800acf8 <__ieee754_pow+0x250>)
 800aad4:	4193      	sbcs	r3, r2
 800aad6:	f080 84d2 	bcs.w	800b47e <__ieee754_pow+0x9d6>
 800aada:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aade:	4630      	mov	r0, r6
 800aae0:	4639      	mov	r1, r7
 800aae2:	f7f5 fbd3 	bl	800028c <__adddf3>
 800aae6:	ec41 0b10 	vmov	d0, r0, r1
 800aaea:	b009      	add	sp, #36	; 0x24
 800aaec:	ecbd 8b06 	vpop	{d8-d10}
 800aaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf4:	4b81      	ldr	r3, [pc, #516]	; (800acfc <__ieee754_pow+0x254>)
 800aaf6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800aafa:	429c      	cmp	r4, r3
 800aafc:	ee10 aa10 	vmov	sl, s0
 800ab00:	463d      	mov	r5, r7
 800ab02:	dc06      	bgt.n	800ab12 <__ieee754_pow+0x6a>
 800ab04:	d101      	bne.n	800ab0a <__ieee754_pow+0x62>
 800ab06:	2e00      	cmp	r6, #0
 800ab08:	d1e7      	bne.n	800aada <__ieee754_pow+0x32>
 800ab0a:	4598      	cmp	r8, r3
 800ab0c:	dc01      	bgt.n	800ab12 <__ieee754_pow+0x6a>
 800ab0e:	d10f      	bne.n	800ab30 <__ieee754_pow+0x88>
 800ab10:	b172      	cbz	r2, 800ab30 <__ieee754_pow+0x88>
 800ab12:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ab16:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ab1a:	ea55 050a 	orrs.w	r5, r5, sl
 800ab1e:	d1dc      	bne.n	800aada <__ieee754_pow+0x32>
 800ab20:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab24:	18db      	adds	r3, r3, r3
 800ab26:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ab2a:	4152      	adcs	r2, r2
 800ab2c:	429d      	cmp	r5, r3
 800ab2e:	e7d0      	b.n	800aad2 <__ieee754_pow+0x2a>
 800ab30:	2d00      	cmp	r5, #0
 800ab32:	da3b      	bge.n	800abac <__ieee754_pow+0x104>
 800ab34:	4b72      	ldr	r3, [pc, #456]	; (800ad00 <__ieee754_pow+0x258>)
 800ab36:	4598      	cmp	r8, r3
 800ab38:	dc51      	bgt.n	800abde <__ieee754_pow+0x136>
 800ab3a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ab3e:	4598      	cmp	r8, r3
 800ab40:	f340 84ac 	ble.w	800b49c <__ieee754_pow+0x9f4>
 800ab44:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ab48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ab4c:	2b14      	cmp	r3, #20
 800ab4e:	dd0f      	ble.n	800ab70 <__ieee754_pow+0xc8>
 800ab50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ab54:	fa22 f103 	lsr.w	r1, r2, r3
 800ab58:	fa01 f303 	lsl.w	r3, r1, r3
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	f040 849d 	bne.w	800b49c <__ieee754_pow+0x9f4>
 800ab62:	f001 0101 	and.w	r1, r1, #1
 800ab66:	f1c1 0302 	rsb	r3, r1, #2
 800ab6a:	9304      	str	r3, [sp, #16]
 800ab6c:	b182      	cbz	r2, 800ab90 <__ieee754_pow+0xe8>
 800ab6e:	e05f      	b.n	800ac30 <__ieee754_pow+0x188>
 800ab70:	2a00      	cmp	r2, #0
 800ab72:	d15b      	bne.n	800ac2c <__ieee754_pow+0x184>
 800ab74:	f1c3 0314 	rsb	r3, r3, #20
 800ab78:	fa48 f103 	asr.w	r1, r8, r3
 800ab7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab80:	4543      	cmp	r3, r8
 800ab82:	f040 8488 	bne.w	800b496 <__ieee754_pow+0x9ee>
 800ab86:	f001 0101 	and.w	r1, r1, #1
 800ab8a:	f1c1 0302 	rsb	r3, r1, #2
 800ab8e:	9304      	str	r3, [sp, #16]
 800ab90:	4b5c      	ldr	r3, [pc, #368]	; (800ad04 <__ieee754_pow+0x25c>)
 800ab92:	4598      	cmp	r8, r3
 800ab94:	d132      	bne.n	800abfc <__ieee754_pow+0x154>
 800ab96:	f1b9 0f00 	cmp.w	r9, #0
 800ab9a:	f280 8478 	bge.w	800b48e <__ieee754_pow+0x9e6>
 800ab9e:	4959      	ldr	r1, [pc, #356]	; (800ad04 <__ieee754_pow+0x25c>)
 800aba0:	4632      	mov	r2, r6
 800aba2:	463b      	mov	r3, r7
 800aba4:	2000      	movs	r0, #0
 800aba6:	f7f5 fe51 	bl	800084c <__aeabi_ddiv>
 800abaa:	e79c      	b.n	800aae6 <__ieee754_pow+0x3e>
 800abac:	2300      	movs	r3, #0
 800abae:	9304      	str	r3, [sp, #16]
 800abb0:	2a00      	cmp	r2, #0
 800abb2:	d13d      	bne.n	800ac30 <__ieee754_pow+0x188>
 800abb4:	4b51      	ldr	r3, [pc, #324]	; (800acfc <__ieee754_pow+0x254>)
 800abb6:	4598      	cmp	r8, r3
 800abb8:	d1ea      	bne.n	800ab90 <__ieee754_pow+0xe8>
 800abba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800abbe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800abc2:	ea53 030a 	orrs.w	r3, r3, sl
 800abc6:	f000 845a 	beq.w	800b47e <__ieee754_pow+0x9d6>
 800abca:	4b4f      	ldr	r3, [pc, #316]	; (800ad08 <__ieee754_pow+0x260>)
 800abcc:	429c      	cmp	r4, r3
 800abce:	dd08      	ble.n	800abe2 <__ieee754_pow+0x13a>
 800abd0:	f1b9 0f00 	cmp.w	r9, #0
 800abd4:	f2c0 8457 	blt.w	800b486 <__ieee754_pow+0x9de>
 800abd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abdc:	e783      	b.n	800aae6 <__ieee754_pow+0x3e>
 800abde:	2302      	movs	r3, #2
 800abe0:	e7e5      	b.n	800abae <__ieee754_pow+0x106>
 800abe2:	f1b9 0f00 	cmp.w	r9, #0
 800abe6:	f04f 0000 	mov.w	r0, #0
 800abea:	f04f 0100 	mov.w	r1, #0
 800abee:	f6bf af7a 	bge.w	800aae6 <__ieee754_pow+0x3e>
 800abf2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800abf6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800abfa:	e774      	b.n	800aae6 <__ieee754_pow+0x3e>
 800abfc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ac00:	d106      	bne.n	800ac10 <__ieee754_pow+0x168>
 800ac02:	4632      	mov	r2, r6
 800ac04:	463b      	mov	r3, r7
 800ac06:	4630      	mov	r0, r6
 800ac08:	4639      	mov	r1, r7
 800ac0a:	f7f5 fcf5 	bl	80005f8 <__aeabi_dmul>
 800ac0e:	e76a      	b.n	800aae6 <__ieee754_pow+0x3e>
 800ac10:	4b3e      	ldr	r3, [pc, #248]	; (800ad0c <__ieee754_pow+0x264>)
 800ac12:	4599      	cmp	r9, r3
 800ac14:	d10c      	bne.n	800ac30 <__ieee754_pow+0x188>
 800ac16:	2d00      	cmp	r5, #0
 800ac18:	db0a      	blt.n	800ac30 <__ieee754_pow+0x188>
 800ac1a:	ec47 6b10 	vmov	d0, r6, r7
 800ac1e:	b009      	add	sp, #36	; 0x24
 800ac20:	ecbd 8b06 	vpop	{d8-d10}
 800ac24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac28:	f000 bc6c 	b.w	800b504 <__ieee754_sqrt>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	9304      	str	r3, [sp, #16]
 800ac30:	ec47 6b10 	vmov	d0, r6, r7
 800ac34:	f000 fee8 	bl	800ba08 <fabs>
 800ac38:	ec51 0b10 	vmov	r0, r1, d0
 800ac3c:	f1ba 0f00 	cmp.w	sl, #0
 800ac40:	d129      	bne.n	800ac96 <__ieee754_pow+0x1ee>
 800ac42:	b124      	cbz	r4, 800ac4e <__ieee754_pow+0x1a6>
 800ac44:	4b2f      	ldr	r3, [pc, #188]	; (800ad04 <__ieee754_pow+0x25c>)
 800ac46:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d123      	bne.n	800ac96 <__ieee754_pow+0x1ee>
 800ac4e:	f1b9 0f00 	cmp.w	r9, #0
 800ac52:	da05      	bge.n	800ac60 <__ieee754_pow+0x1b8>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	2000      	movs	r0, #0
 800ac5a:	492a      	ldr	r1, [pc, #168]	; (800ad04 <__ieee754_pow+0x25c>)
 800ac5c:	f7f5 fdf6 	bl	800084c <__aeabi_ddiv>
 800ac60:	2d00      	cmp	r5, #0
 800ac62:	f6bf af40 	bge.w	800aae6 <__ieee754_pow+0x3e>
 800ac66:	9b04      	ldr	r3, [sp, #16]
 800ac68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ac6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ac70:	4323      	orrs	r3, r4
 800ac72:	d108      	bne.n	800ac86 <__ieee754_pow+0x1de>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4610      	mov	r0, r2
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	f7f5 fb04 	bl	8000288 <__aeabi_dsub>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	e78f      	b.n	800aba6 <__ieee754_pow+0xfe>
 800ac86:	9b04      	ldr	r3, [sp, #16]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	f47f af2c 	bne.w	800aae6 <__ieee754_pow+0x3e>
 800ac8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac92:	4619      	mov	r1, r3
 800ac94:	e727      	b.n	800aae6 <__ieee754_pow+0x3e>
 800ac96:	0feb      	lsrs	r3, r5, #31
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	9306      	str	r3, [sp, #24]
 800ac9c:	9a06      	ldr	r2, [sp, #24]
 800ac9e:	9b04      	ldr	r3, [sp, #16]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	d102      	bne.n	800acaa <__ieee754_pow+0x202>
 800aca4:	4632      	mov	r2, r6
 800aca6:	463b      	mov	r3, r7
 800aca8:	e7e6      	b.n	800ac78 <__ieee754_pow+0x1d0>
 800acaa:	4b19      	ldr	r3, [pc, #100]	; (800ad10 <__ieee754_pow+0x268>)
 800acac:	4598      	cmp	r8, r3
 800acae:	f340 80fb 	ble.w	800aea8 <__ieee754_pow+0x400>
 800acb2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800acb6:	4598      	cmp	r8, r3
 800acb8:	4b13      	ldr	r3, [pc, #76]	; (800ad08 <__ieee754_pow+0x260>)
 800acba:	dd0c      	ble.n	800acd6 <__ieee754_pow+0x22e>
 800acbc:	429c      	cmp	r4, r3
 800acbe:	dc0f      	bgt.n	800ace0 <__ieee754_pow+0x238>
 800acc0:	f1b9 0f00 	cmp.w	r9, #0
 800acc4:	da0f      	bge.n	800ace6 <__ieee754_pow+0x23e>
 800acc6:	2000      	movs	r0, #0
 800acc8:	b009      	add	sp, #36	; 0x24
 800acca:	ecbd 8b06 	vpop	{d8-d10}
 800acce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd2:	f000 bcf0 	b.w	800b6b6 <__math_oflow>
 800acd6:	429c      	cmp	r4, r3
 800acd8:	dbf2      	blt.n	800acc0 <__ieee754_pow+0x218>
 800acda:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <__ieee754_pow+0x25c>)
 800acdc:	429c      	cmp	r4, r3
 800acde:	dd19      	ble.n	800ad14 <__ieee754_pow+0x26c>
 800ace0:	f1b9 0f00 	cmp.w	r9, #0
 800ace4:	dcef      	bgt.n	800acc6 <__ieee754_pow+0x21e>
 800ace6:	2000      	movs	r0, #0
 800ace8:	b009      	add	sp, #36	; 0x24
 800acea:	ecbd 8b06 	vpop	{d8-d10}
 800acee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf2:	f000 bcd7 	b.w	800b6a4 <__math_uflow>
 800acf6:	bf00      	nop
 800acf8:	fff00000 	.word	0xfff00000
 800acfc:	7ff00000 	.word	0x7ff00000
 800ad00:	433fffff 	.word	0x433fffff
 800ad04:	3ff00000 	.word	0x3ff00000
 800ad08:	3fefffff 	.word	0x3fefffff
 800ad0c:	3fe00000 	.word	0x3fe00000
 800ad10:	41e00000 	.word	0x41e00000
 800ad14:	4b60      	ldr	r3, [pc, #384]	; (800ae98 <__ieee754_pow+0x3f0>)
 800ad16:	2200      	movs	r2, #0
 800ad18:	f7f5 fab6 	bl	8000288 <__aeabi_dsub>
 800ad1c:	a354      	add	r3, pc, #336	; (adr r3, 800ae70 <__ieee754_pow+0x3c8>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	4604      	mov	r4, r0
 800ad24:	460d      	mov	r5, r1
 800ad26:	f7f5 fc67 	bl	80005f8 <__aeabi_dmul>
 800ad2a:	a353      	add	r3, pc, #332	; (adr r3, 800ae78 <__ieee754_pow+0x3d0>)
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	4606      	mov	r6, r0
 800ad32:	460f      	mov	r7, r1
 800ad34:	4620      	mov	r0, r4
 800ad36:	4629      	mov	r1, r5
 800ad38:	f7f5 fc5e 	bl	80005f8 <__aeabi_dmul>
 800ad3c:	4b57      	ldr	r3, [pc, #348]	; (800ae9c <__ieee754_pow+0x3f4>)
 800ad3e:	4682      	mov	sl, r0
 800ad40:	468b      	mov	fp, r1
 800ad42:	2200      	movs	r2, #0
 800ad44:	4620      	mov	r0, r4
 800ad46:	4629      	mov	r1, r5
 800ad48:	f7f5 fc56 	bl	80005f8 <__aeabi_dmul>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	a14b      	add	r1, pc, #300	; (adr r1, 800ae80 <__ieee754_pow+0x3d8>)
 800ad52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad56:	f7f5 fa97 	bl	8000288 <__aeabi_dsub>
 800ad5a:	4622      	mov	r2, r4
 800ad5c:	462b      	mov	r3, r5
 800ad5e:	f7f5 fc4b 	bl	80005f8 <__aeabi_dmul>
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	2000      	movs	r0, #0
 800ad68:	494d      	ldr	r1, [pc, #308]	; (800aea0 <__ieee754_pow+0x3f8>)
 800ad6a:	f7f5 fa8d 	bl	8000288 <__aeabi_dsub>
 800ad6e:	4622      	mov	r2, r4
 800ad70:	4680      	mov	r8, r0
 800ad72:	4689      	mov	r9, r1
 800ad74:	462b      	mov	r3, r5
 800ad76:	4620      	mov	r0, r4
 800ad78:	4629      	mov	r1, r5
 800ad7a:	f7f5 fc3d 	bl	80005f8 <__aeabi_dmul>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	4640      	mov	r0, r8
 800ad84:	4649      	mov	r1, r9
 800ad86:	f7f5 fc37 	bl	80005f8 <__aeabi_dmul>
 800ad8a:	a33f      	add	r3, pc, #252	; (adr r3, 800ae88 <__ieee754_pow+0x3e0>)
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	f7f5 fc32 	bl	80005f8 <__aeabi_dmul>
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	4650      	mov	r0, sl
 800ad9a:	4659      	mov	r1, fp
 800ad9c:	f7f5 fa74 	bl	8000288 <__aeabi_dsub>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4680      	mov	r8, r0
 800ada6:	4689      	mov	r9, r1
 800ada8:	4630      	mov	r0, r6
 800adaa:	4639      	mov	r1, r7
 800adac:	f7f5 fa6e 	bl	800028c <__adddf3>
 800adb0:	2000      	movs	r0, #0
 800adb2:	4632      	mov	r2, r6
 800adb4:	463b      	mov	r3, r7
 800adb6:	4604      	mov	r4, r0
 800adb8:	460d      	mov	r5, r1
 800adba:	f7f5 fa65 	bl	8000288 <__aeabi_dsub>
 800adbe:	4602      	mov	r2, r0
 800adc0:	460b      	mov	r3, r1
 800adc2:	4640      	mov	r0, r8
 800adc4:	4649      	mov	r1, r9
 800adc6:	f7f5 fa5f 	bl	8000288 <__aeabi_dsub>
 800adca:	9b04      	ldr	r3, [sp, #16]
 800adcc:	9a06      	ldr	r2, [sp, #24]
 800adce:	3b01      	subs	r3, #1
 800add0:	4313      	orrs	r3, r2
 800add2:	4682      	mov	sl, r0
 800add4:	468b      	mov	fp, r1
 800add6:	f040 81e7 	bne.w	800b1a8 <__ieee754_pow+0x700>
 800adda:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ae90 <__ieee754_pow+0x3e8>
 800adde:	eeb0 8a47 	vmov.f32	s16, s14
 800ade2:	eef0 8a67 	vmov.f32	s17, s15
 800ade6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800adea:	2600      	movs	r6, #0
 800adec:	4632      	mov	r2, r6
 800adee:	463b      	mov	r3, r7
 800adf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adf4:	f7f5 fa48 	bl	8000288 <__aeabi_dsub>
 800adf8:	4622      	mov	r2, r4
 800adfa:	462b      	mov	r3, r5
 800adfc:	f7f5 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ae00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae04:	4680      	mov	r8, r0
 800ae06:	4689      	mov	r9, r1
 800ae08:	4650      	mov	r0, sl
 800ae0a:	4659      	mov	r1, fp
 800ae0c:	f7f5 fbf4 	bl	80005f8 <__aeabi_dmul>
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	4640      	mov	r0, r8
 800ae16:	4649      	mov	r1, r9
 800ae18:	f7f5 fa38 	bl	800028c <__adddf3>
 800ae1c:	4632      	mov	r2, r6
 800ae1e:	463b      	mov	r3, r7
 800ae20:	4680      	mov	r8, r0
 800ae22:	4689      	mov	r9, r1
 800ae24:	4620      	mov	r0, r4
 800ae26:	4629      	mov	r1, r5
 800ae28:	f7f5 fbe6 	bl	80005f8 <__aeabi_dmul>
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	4604      	mov	r4, r0
 800ae30:	460d      	mov	r5, r1
 800ae32:	4602      	mov	r2, r0
 800ae34:	4649      	mov	r1, r9
 800ae36:	4640      	mov	r0, r8
 800ae38:	f7f5 fa28 	bl	800028c <__adddf3>
 800ae3c:	4b19      	ldr	r3, [pc, #100]	; (800aea4 <__ieee754_pow+0x3fc>)
 800ae3e:	4299      	cmp	r1, r3
 800ae40:	ec45 4b19 	vmov	d9, r4, r5
 800ae44:	4606      	mov	r6, r0
 800ae46:	460f      	mov	r7, r1
 800ae48:	468b      	mov	fp, r1
 800ae4a:	f340 82f1 	ble.w	800b430 <__ieee754_pow+0x988>
 800ae4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ae52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ae56:	4303      	orrs	r3, r0
 800ae58:	f000 81e4 	beq.w	800b224 <__ieee754_pow+0x77c>
 800ae5c:	ec51 0b18 	vmov	r0, r1, d8
 800ae60:	2200      	movs	r2, #0
 800ae62:	2300      	movs	r3, #0
 800ae64:	f7f5 fe3a 	bl	8000adc <__aeabi_dcmplt>
 800ae68:	3800      	subs	r0, #0
 800ae6a:	bf18      	it	ne
 800ae6c:	2001      	movne	r0, #1
 800ae6e:	e72b      	b.n	800acc8 <__ieee754_pow+0x220>
 800ae70:	60000000 	.word	0x60000000
 800ae74:	3ff71547 	.word	0x3ff71547
 800ae78:	f85ddf44 	.word	0xf85ddf44
 800ae7c:	3e54ae0b 	.word	0x3e54ae0b
 800ae80:	55555555 	.word	0x55555555
 800ae84:	3fd55555 	.word	0x3fd55555
 800ae88:	652b82fe 	.word	0x652b82fe
 800ae8c:	3ff71547 	.word	0x3ff71547
 800ae90:	00000000 	.word	0x00000000
 800ae94:	bff00000 	.word	0xbff00000
 800ae98:	3ff00000 	.word	0x3ff00000
 800ae9c:	3fd00000 	.word	0x3fd00000
 800aea0:	3fe00000 	.word	0x3fe00000
 800aea4:	408fffff 	.word	0x408fffff
 800aea8:	4bd5      	ldr	r3, [pc, #852]	; (800b200 <__ieee754_pow+0x758>)
 800aeaa:	402b      	ands	r3, r5
 800aeac:	2200      	movs	r2, #0
 800aeae:	b92b      	cbnz	r3, 800aebc <__ieee754_pow+0x414>
 800aeb0:	4bd4      	ldr	r3, [pc, #848]	; (800b204 <__ieee754_pow+0x75c>)
 800aeb2:	f7f5 fba1 	bl	80005f8 <__aeabi_dmul>
 800aeb6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aeba:	460c      	mov	r4, r1
 800aebc:	1523      	asrs	r3, r4, #20
 800aebe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aec2:	4413      	add	r3, r2
 800aec4:	9305      	str	r3, [sp, #20]
 800aec6:	4bd0      	ldr	r3, [pc, #832]	; (800b208 <__ieee754_pow+0x760>)
 800aec8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aecc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aed0:	429c      	cmp	r4, r3
 800aed2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aed6:	dd08      	ble.n	800aeea <__ieee754_pow+0x442>
 800aed8:	4bcc      	ldr	r3, [pc, #816]	; (800b20c <__ieee754_pow+0x764>)
 800aeda:	429c      	cmp	r4, r3
 800aedc:	f340 8162 	ble.w	800b1a4 <__ieee754_pow+0x6fc>
 800aee0:	9b05      	ldr	r3, [sp, #20]
 800aee2:	3301      	adds	r3, #1
 800aee4:	9305      	str	r3, [sp, #20]
 800aee6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aeea:	2400      	movs	r4, #0
 800aeec:	00e3      	lsls	r3, r4, #3
 800aeee:	9307      	str	r3, [sp, #28]
 800aef0:	4bc7      	ldr	r3, [pc, #796]	; (800b210 <__ieee754_pow+0x768>)
 800aef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aef6:	ed93 7b00 	vldr	d7, [r3]
 800aefa:	4629      	mov	r1, r5
 800aefc:	ec53 2b17 	vmov	r2, r3, d7
 800af00:	eeb0 9a47 	vmov.f32	s18, s14
 800af04:	eef0 9a67 	vmov.f32	s19, s15
 800af08:	4682      	mov	sl, r0
 800af0a:	f7f5 f9bd 	bl	8000288 <__aeabi_dsub>
 800af0e:	4652      	mov	r2, sl
 800af10:	4606      	mov	r6, r0
 800af12:	460f      	mov	r7, r1
 800af14:	462b      	mov	r3, r5
 800af16:	ec51 0b19 	vmov	r0, r1, d9
 800af1a:	f7f5 f9b7 	bl	800028c <__adddf3>
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	2000      	movs	r0, #0
 800af24:	49bb      	ldr	r1, [pc, #748]	; (800b214 <__ieee754_pow+0x76c>)
 800af26:	f7f5 fc91 	bl	800084c <__aeabi_ddiv>
 800af2a:	ec41 0b1a 	vmov	d10, r0, r1
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
 800af32:	4630      	mov	r0, r6
 800af34:	4639      	mov	r1, r7
 800af36:	f7f5 fb5f 	bl	80005f8 <__aeabi_dmul>
 800af3a:	2300      	movs	r3, #0
 800af3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af40:	9302      	str	r3, [sp, #8]
 800af42:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800af46:	46ab      	mov	fp, r5
 800af48:	106d      	asrs	r5, r5, #1
 800af4a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800af4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800af52:	ec41 0b18 	vmov	d8, r0, r1
 800af56:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800af5a:	2200      	movs	r2, #0
 800af5c:	4640      	mov	r0, r8
 800af5e:	4649      	mov	r1, r9
 800af60:	4614      	mov	r4, r2
 800af62:	461d      	mov	r5, r3
 800af64:	f7f5 fb48 	bl	80005f8 <__aeabi_dmul>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4630      	mov	r0, r6
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 f98a 	bl	8000288 <__aeabi_dsub>
 800af74:	ec53 2b19 	vmov	r2, r3, d9
 800af78:	4606      	mov	r6, r0
 800af7a:	460f      	mov	r7, r1
 800af7c:	4620      	mov	r0, r4
 800af7e:	4629      	mov	r1, r5
 800af80:	f7f5 f982 	bl	8000288 <__aeabi_dsub>
 800af84:	4602      	mov	r2, r0
 800af86:	460b      	mov	r3, r1
 800af88:	4650      	mov	r0, sl
 800af8a:	4659      	mov	r1, fp
 800af8c:	f7f5 f97c 	bl	8000288 <__aeabi_dsub>
 800af90:	4642      	mov	r2, r8
 800af92:	464b      	mov	r3, r9
 800af94:	f7f5 fb30 	bl	80005f8 <__aeabi_dmul>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	4630      	mov	r0, r6
 800af9e:	4639      	mov	r1, r7
 800afa0:	f7f5 f972 	bl	8000288 <__aeabi_dsub>
 800afa4:	ec53 2b1a 	vmov	r2, r3, d10
 800afa8:	f7f5 fb26 	bl	80005f8 <__aeabi_dmul>
 800afac:	ec53 2b18 	vmov	r2, r3, d8
 800afb0:	ec41 0b19 	vmov	d9, r0, r1
 800afb4:	ec51 0b18 	vmov	r0, r1, d8
 800afb8:	f7f5 fb1e 	bl	80005f8 <__aeabi_dmul>
 800afbc:	a37c      	add	r3, pc, #496	; (adr r3, 800b1b0 <__ieee754_pow+0x708>)
 800afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc2:	4604      	mov	r4, r0
 800afc4:	460d      	mov	r5, r1
 800afc6:	f7f5 fb17 	bl	80005f8 <__aeabi_dmul>
 800afca:	a37b      	add	r3, pc, #492	; (adr r3, 800b1b8 <__ieee754_pow+0x710>)
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	f7f5 f95c 	bl	800028c <__adddf3>
 800afd4:	4622      	mov	r2, r4
 800afd6:	462b      	mov	r3, r5
 800afd8:	f7f5 fb0e 	bl	80005f8 <__aeabi_dmul>
 800afdc:	a378      	add	r3, pc, #480	; (adr r3, 800b1c0 <__ieee754_pow+0x718>)
 800afde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe2:	f7f5 f953 	bl	800028c <__adddf3>
 800afe6:	4622      	mov	r2, r4
 800afe8:	462b      	mov	r3, r5
 800afea:	f7f5 fb05 	bl	80005f8 <__aeabi_dmul>
 800afee:	a376      	add	r3, pc, #472	; (adr r3, 800b1c8 <__ieee754_pow+0x720>)
 800aff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff4:	f7f5 f94a 	bl	800028c <__adddf3>
 800aff8:	4622      	mov	r2, r4
 800affa:	462b      	mov	r3, r5
 800affc:	f7f5 fafc 	bl	80005f8 <__aeabi_dmul>
 800b000:	a373      	add	r3, pc, #460	; (adr r3, 800b1d0 <__ieee754_pow+0x728>)
 800b002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b006:	f7f5 f941 	bl	800028c <__adddf3>
 800b00a:	4622      	mov	r2, r4
 800b00c:	462b      	mov	r3, r5
 800b00e:	f7f5 faf3 	bl	80005f8 <__aeabi_dmul>
 800b012:	a371      	add	r3, pc, #452	; (adr r3, 800b1d8 <__ieee754_pow+0x730>)
 800b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b018:	f7f5 f938 	bl	800028c <__adddf3>
 800b01c:	4622      	mov	r2, r4
 800b01e:	4606      	mov	r6, r0
 800b020:	460f      	mov	r7, r1
 800b022:	462b      	mov	r3, r5
 800b024:	4620      	mov	r0, r4
 800b026:	4629      	mov	r1, r5
 800b028:	f7f5 fae6 	bl	80005f8 <__aeabi_dmul>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4630      	mov	r0, r6
 800b032:	4639      	mov	r1, r7
 800b034:	f7f5 fae0 	bl	80005f8 <__aeabi_dmul>
 800b038:	4642      	mov	r2, r8
 800b03a:	4604      	mov	r4, r0
 800b03c:	460d      	mov	r5, r1
 800b03e:	464b      	mov	r3, r9
 800b040:	ec51 0b18 	vmov	r0, r1, d8
 800b044:	f7f5 f922 	bl	800028c <__adddf3>
 800b048:	ec53 2b19 	vmov	r2, r3, d9
 800b04c:	f7f5 fad4 	bl	80005f8 <__aeabi_dmul>
 800b050:	4622      	mov	r2, r4
 800b052:	462b      	mov	r3, r5
 800b054:	f7f5 f91a 	bl	800028c <__adddf3>
 800b058:	4642      	mov	r2, r8
 800b05a:	4682      	mov	sl, r0
 800b05c:	468b      	mov	fp, r1
 800b05e:	464b      	mov	r3, r9
 800b060:	4640      	mov	r0, r8
 800b062:	4649      	mov	r1, r9
 800b064:	f7f5 fac8 	bl	80005f8 <__aeabi_dmul>
 800b068:	4b6b      	ldr	r3, [pc, #428]	; (800b218 <__ieee754_pow+0x770>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	4606      	mov	r6, r0
 800b06e:	460f      	mov	r7, r1
 800b070:	f7f5 f90c 	bl	800028c <__adddf3>
 800b074:	4652      	mov	r2, sl
 800b076:	465b      	mov	r3, fp
 800b078:	f7f5 f908 	bl	800028c <__adddf3>
 800b07c:	2000      	movs	r0, #0
 800b07e:	4604      	mov	r4, r0
 800b080:	460d      	mov	r5, r1
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	4640      	mov	r0, r8
 800b088:	4649      	mov	r1, r9
 800b08a:	f7f5 fab5 	bl	80005f8 <__aeabi_dmul>
 800b08e:	4b62      	ldr	r3, [pc, #392]	; (800b218 <__ieee754_pow+0x770>)
 800b090:	4680      	mov	r8, r0
 800b092:	4689      	mov	r9, r1
 800b094:	2200      	movs	r2, #0
 800b096:	4620      	mov	r0, r4
 800b098:	4629      	mov	r1, r5
 800b09a:	f7f5 f8f5 	bl	8000288 <__aeabi_dsub>
 800b09e:	4632      	mov	r2, r6
 800b0a0:	463b      	mov	r3, r7
 800b0a2:	f7f5 f8f1 	bl	8000288 <__aeabi_dsub>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	4650      	mov	r0, sl
 800b0ac:	4659      	mov	r1, fp
 800b0ae:	f7f5 f8eb 	bl	8000288 <__aeabi_dsub>
 800b0b2:	ec53 2b18 	vmov	r2, r3, d8
 800b0b6:	f7f5 fa9f 	bl	80005f8 <__aeabi_dmul>
 800b0ba:	4622      	mov	r2, r4
 800b0bc:	4606      	mov	r6, r0
 800b0be:	460f      	mov	r7, r1
 800b0c0:	462b      	mov	r3, r5
 800b0c2:	ec51 0b19 	vmov	r0, r1, d9
 800b0c6:	f7f5 fa97 	bl	80005f8 <__aeabi_dmul>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	4639      	mov	r1, r7
 800b0d2:	f7f5 f8db 	bl	800028c <__adddf3>
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	460f      	mov	r7, r1
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	4640      	mov	r0, r8
 800b0e0:	4649      	mov	r1, r9
 800b0e2:	f7f5 f8d3 	bl	800028c <__adddf3>
 800b0e6:	a33e      	add	r3, pc, #248	; (adr r3, 800b1e0 <__ieee754_pow+0x738>)
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	460d      	mov	r5, r1
 800b0f2:	f7f5 fa81 	bl	80005f8 <__aeabi_dmul>
 800b0f6:	4642      	mov	r2, r8
 800b0f8:	ec41 0b18 	vmov	d8, r0, r1
 800b0fc:	464b      	mov	r3, r9
 800b0fe:	4620      	mov	r0, r4
 800b100:	4629      	mov	r1, r5
 800b102:	f7f5 f8c1 	bl	8000288 <__aeabi_dsub>
 800b106:	4602      	mov	r2, r0
 800b108:	460b      	mov	r3, r1
 800b10a:	4630      	mov	r0, r6
 800b10c:	4639      	mov	r1, r7
 800b10e:	f7f5 f8bb 	bl	8000288 <__aeabi_dsub>
 800b112:	a335      	add	r3, pc, #212	; (adr r3, 800b1e8 <__ieee754_pow+0x740>)
 800b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b118:	f7f5 fa6e 	bl	80005f8 <__aeabi_dmul>
 800b11c:	a334      	add	r3, pc, #208	; (adr r3, 800b1f0 <__ieee754_pow+0x748>)
 800b11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b122:	4606      	mov	r6, r0
 800b124:	460f      	mov	r7, r1
 800b126:	4620      	mov	r0, r4
 800b128:	4629      	mov	r1, r5
 800b12a:	f7f5 fa65 	bl	80005f8 <__aeabi_dmul>
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	4630      	mov	r0, r6
 800b134:	4639      	mov	r1, r7
 800b136:	f7f5 f8a9 	bl	800028c <__adddf3>
 800b13a:	9a07      	ldr	r2, [sp, #28]
 800b13c:	4b37      	ldr	r3, [pc, #220]	; (800b21c <__ieee754_pow+0x774>)
 800b13e:	4413      	add	r3, r2
 800b140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b144:	f7f5 f8a2 	bl	800028c <__adddf3>
 800b148:	4682      	mov	sl, r0
 800b14a:	9805      	ldr	r0, [sp, #20]
 800b14c:	468b      	mov	fp, r1
 800b14e:	f7f5 f9e9 	bl	8000524 <__aeabi_i2d>
 800b152:	9a07      	ldr	r2, [sp, #28]
 800b154:	4b32      	ldr	r3, [pc, #200]	; (800b220 <__ieee754_pow+0x778>)
 800b156:	4413      	add	r3, r2
 800b158:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b15c:	4606      	mov	r6, r0
 800b15e:	460f      	mov	r7, r1
 800b160:	4652      	mov	r2, sl
 800b162:	465b      	mov	r3, fp
 800b164:	ec51 0b18 	vmov	r0, r1, d8
 800b168:	f7f5 f890 	bl	800028c <__adddf3>
 800b16c:	4642      	mov	r2, r8
 800b16e:	464b      	mov	r3, r9
 800b170:	f7f5 f88c 	bl	800028c <__adddf3>
 800b174:	4632      	mov	r2, r6
 800b176:	463b      	mov	r3, r7
 800b178:	f7f5 f888 	bl	800028c <__adddf3>
 800b17c:	2000      	movs	r0, #0
 800b17e:	4632      	mov	r2, r6
 800b180:	463b      	mov	r3, r7
 800b182:	4604      	mov	r4, r0
 800b184:	460d      	mov	r5, r1
 800b186:	f7f5 f87f 	bl	8000288 <__aeabi_dsub>
 800b18a:	4642      	mov	r2, r8
 800b18c:	464b      	mov	r3, r9
 800b18e:	f7f5 f87b 	bl	8000288 <__aeabi_dsub>
 800b192:	ec53 2b18 	vmov	r2, r3, d8
 800b196:	f7f5 f877 	bl	8000288 <__aeabi_dsub>
 800b19a:	4602      	mov	r2, r0
 800b19c:	460b      	mov	r3, r1
 800b19e:	4650      	mov	r0, sl
 800b1a0:	4659      	mov	r1, fp
 800b1a2:	e610      	b.n	800adc6 <__ieee754_pow+0x31e>
 800b1a4:	2401      	movs	r4, #1
 800b1a6:	e6a1      	b.n	800aeec <__ieee754_pow+0x444>
 800b1a8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b1f8 <__ieee754_pow+0x750>
 800b1ac:	e617      	b.n	800adde <__ieee754_pow+0x336>
 800b1ae:	bf00      	nop
 800b1b0:	4a454eef 	.word	0x4a454eef
 800b1b4:	3fca7e28 	.word	0x3fca7e28
 800b1b8:	93c9db65 	.word	0x93c9db65
 800b1bc:	3fcd864a 	.word	0x3fcd864a
 800b1c0:	a91d4101 	.word	0xa91d4101
 800b1c4:	3fd17460 	.word	0x3fd17460
 800b1c8:	518f264d 	.word	0x518f264d
 800b1cc:	3fd55555 	.word	0x3fd55555
 800b1d0:	db6fabff 	.word	0xdb6fabff
 800b1d4:	3fdb6db6 	.word	0x3fdb6db6
 800b1d8:	33333303 	.word	0x33333303
 800b1dc:	3fe33333 	.word	0x3fe33333
 800b1e0:	e0000000 	.word	0xe0000000
 800b1e4:	3feec709 	.word	0x3feec709
 800b1e8:	dc3a03fd 	.word	0xdc3a03fd
 800b1ec:	3feec709 	.word	0x3feec709
 800b1f0:	145b01f5 	.word	0x145b01f5
 800b1f4:	be3e2fe0 	.word	0xbe3e2fe0
 800b1f8:	00000000 	.word	0x00000000
 800b1fc:	3ff00000 	.word	0x3ff00000
 800b200:	7ff00000 	.word	0x7ff00000
 800b204:	43400000 	.word	0x43400000
 800b208:	0003988e 	.word	0x0003988e
 800b20c:	000bb679 	.word	0x000bb679
 800b210:	0800c180 	.word	0x0800c180
 800b214:	3ff00000 	.word	0x3ff00000
 800b218:	40080000 	.word	0x40080000
 800b21c:	0800c1a0 	.word	0x0800c1a0
 800b220:	0800c190 	.word	0x0800c190
 800b224:	a3b5      	add	r3, pc, #724	; (adr r3, 800b4fc <__ieee754_pow+0xa54>)
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	4640      	mov	r0, r8
 800b22c:	4649      	mov	r1, r9
 800b22e:	f7f5 f82d 	bl	800028c <__adddf3>
 800b232:	4622      	mov	r2, r4
 800b234:	ec41 0b1a 	vmov	d10, r0, r1
 800b238:	462b      	mov	r3, r5
 800b23a:	4630      	mov	r0, r6
 800b23c:	4639      	mov	r1, r7
 800b23e:	f7f5 f823 	bl	8000288 <__aeabi_dsub>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	ec51 0b1a 	vmov	r0, r1, d10
 800b24a:	f7f5 fc65 	bl	8000b18 <__aeabi_dcmpgt>
 800b24e:	2800      	cmp	r0, #0
 800b250:	f47f ae04 	bne.w	800ae5c <__ieee754_pow+0x3b4>
 800b254:	4aa4      	ldr	r2, [pc, #656]	; (800b4e8 <__ieee754_pow+0xa40>)
 800b256:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b25a:	4293      	cmp	r3, r2
 800b25c:	f340 8108 	ble.w	800b470 <__ieee754_pow+0x9c8>
 800b260:	151b      	asrs	r3, r3, #20
 800b262:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b266:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b26a:	fa4a f303 	asr.w	r3, sl, r3
 800b26e:	445b      	add	r3, fp
 800b270:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b274:	4e9d      	ldr	r6, [pc, #628]	; (800b4ec <__ieee754_pow+0xa44>)
 800b276:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b27a:	4116      	asrs	r6, r2
 800b27c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b280:	2000      	movs	r0, #0
 800b282:	ea23 0106 	bic.w	r1, r3, r6
 800b286:	f1c2 0214 	rsb	r2, r2, #20
 800b28a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b28e:	fa4a fa02 	asr.w	sl, sl, r2
 800b292:	f1bb 0f00 	cmp.w	fp, #0
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	4620      	mov	r0, r4
 800b29c:	4629      	mov	r1, r5
 800b29e:	bfb8      	it	lt
 800b2a0:	f1ca 0a00 	rsblt	sl, sl, #0
 800b2a4:	f7f4 fff0 	bl	8000288 <__aeabi_dsub>
 800b2a8:	ec41 0b19 	vmov	d9, r0, r1
 800b2ac:	4642      	mov	r2, r8
 800b2ae:	464b      	mov	r3, r9
 800b2b0:	ec51 0b19 	vmov	r0, r1, d9
 800b2b4:	f7f4 ffea 	bl	800028c <__adddf3>
 800b2b8:	a37b      	add	r3, pc, #492	; (adr r3, 800b4a8 <__ieee754_pow+0xa00>)
 800b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2be:	2000      	movs	r0, #0
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	460d      	mov	r5, r1
 800b2c4:	f7f5 f998 	bl	80005f8 <__aeabi_dmul>
 800b2c8:	ec53 2b19 	vmov	r2, r3, d9
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	460f      	mov	r7, r1
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	f7f4 ffd8 	bl	8000288 <__aeabi_dsub>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4640      	mov	r0, r8
 800b2de:	4649      	mov	r1, r9
 800b2e0:	f7f4 ffd2 	bl	8000288 <__aeabi_dsub>
 800b2e4:	a372      	add	r3, pc, #456	; (adr r3, 800b4b0 <__ieee754_pow+0xa08>)
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	f7f5 f985 	bl	80005f8 <__aeabi_dmul>
 800b2ee:	a372      	add	r3, pc, #456	; (adr r3, 800b4b8 <__ieee754_pow+0xa10>)
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	4680      	mov	r8, r0
 800b2f6:	4689      	mov	r9, r1
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	f7f5 f97c 	bl	80005f8 <__aeabi_dmul>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4640      	mov	r0, r8
 800b306:	4649      	mov	r1, r9
 800b308:	f7f4 ffc0 	bl	800028c <__adddf3>
 800b30c:	4604      	mov	r4, r0
 800b30e:	460d      	mov	r5, r1
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	4630      	mov	r0, r6
 800b316:	4639      	mov	r1, r7
 800b318:	f7f4 ffb8 	bl	800028c <__adddf3>
 800b31c:	4632      	mov	r2, r6
 800b31e:	463b      	mov	r3, r7
 800b320:	4680      	mov	r8, r0
 800b322:	4689      	mov	r9, r1
 800b324:	f7f4 ffb0 	bl	8000288 <__aeabi_dsub>
 800b328:	4602      	mov	r2, r0
 800b32a:	460b      	mov	r3, r1
 800b32c:	4620      	mov	r0, r4
 800b32e:	4629      	mov	r1, r5
 800b330:	f7f4 ffaa 	bl	8000288 <__aeabi_dsub>
 800b334:	4642      	mov	r2, r8
 800b336:	4606      	mov	r6, r0
 800b338:	460f      	mov	r7, r1
 800b33a:	464b      	mov	r3, r9
 800b33c:	4640      	mov	r0, r8
 800b33e:	4649      	mov	r1, r9
 800b340:	f7f5 f95a 	bl	80005f8 <__aeabi_dmul>
 800b344:	a35e      	add	r3, pc, #376	; (adr r3, 800b4c0 <__ieee754_pow+0xa18>)
 800b346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34a:	4604      	mov	r4, r0
 800b34c:	460d      	mov	r5, r1
 800b34e:	f7f5 f953 	bl	80005f8 <__aeabi_dmul>
 800b352:	a35d      	add	r3, pc, #372	; (adr r3, 800b4c8 <__ieee754_pow+0xa20>)
 800b354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b358:	f7f4 ff96 	bl	8000288 <__aeabi_dsub>
 800b35c:	4622      	mov	r2, r4
 800b35e:	462b      	mov	r3, r5
 800b360:	f7f5 f94a 	bl	80005f8 <__aeabi_dmul>
 800b364:	a35a      	add	r3, pc, #360	; (adr r3, 800b4d0 <__ieee754_pow+0xa28>)
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	f7f4 ff8f 	bl	800028c <__adddf3>
 800b36e:	4622      	mov	r2, r4
 800b370:	462b      	mov	r3, r5
 800b372:	f7f5 f941 	bl	80005f8 <__aeabi_dmul>
 800b376:	a358      	add	r3, pc, #352	; (adr r3, 800b4d8 <__ieee754_pow+0xa30>)
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	f7f4 ff84 	bl	8000288 <__aeabi_dsub>
 800b380:	4622      	mov	r2, r4
 800b382:	462b      	mov	r3, r5
 800b384:	f7f5 f938 	bl	80005f8 <__aeabi_dmul>
 800b388:	a355      	add	r3, pc, #340	; (adr r3, 800b4e0 <__ieee754_pow+0xa38>)
 800b38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38e:	f7f4 ff7d 	bl	800028c <__adddf3>
 800b392:	4622      	mov	r2, r4
 800b394:	462b      	mov	r3, r5
 800b396:	f7f5 f92f 	bl	80005f8 <__aeabi_dmul>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	4640      	mov	r0, r8
 800b3a0:	4649      	mov	r1, r9
 800b3a2:	f7f4 ff71 	bl	8000288 <__aeabi_dsub>
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	460d      	mov	r5, r1
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4640      	mov	r0, r8
 800b3b0:	4649      	mov	r1, r9
 800b3b2:	f7f5 f921 	bl	80005f8 <__aeabi_dmul>
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	ec41 0b19 	vmov	d9, r0, r1
 800b3bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	f7f4 ff60 	bl	8000288 <__aeabi_dsub>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	ec51 0b19 	vmov	r0, r1, d9
 800b3d0:	f7f5 fa3c 	bl	800084c <__aeabi_ddiv>
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	460d      	mov	r5, r1
 800b3da:	463b      	mov	r3, r7
 800b3dc:	4640      	mov	r0, r8
 800b3de:	4649      	mov	r1, r9
 800b3e0:	f7f5 f90a 	bl	80005f8 <__aeabi_dmul>
 800b3e4:	4632      	mov	r2, r6
 800b3e6:	463b      	mov	r3, r7
 800b3e8:	f7f4 ff50 	bl	800028c <__adddf3>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	f7f4 ff48 	bl	8000288 <__aeabi_dsub>
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	f7f4 ff44 	bl	8000288 <__aeabi_dsub>
 800b400:	460b      	mov	r3, r1
 800b402:	4602      	mov	r2, r0
 800b404:	493a      	ldr	r1, [pc, #232]	; (800b4f0 <__ieee754_pow+0xa48>)
 800b406:	2000      	movs	r0, #0
 800b408:	f7f4 ff3e 	bl	8000288 <__aeabi_dsub>
 800b40c:	ec41 0b10 	vmov	d0, r0, r1
 800b410:	ee10 3a90 	vmov	r3, s1
 800b414:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b41c:	da2b      	bge.n	800b476 <__ieee754_pow+0x9ce>
 800b41e:	4650      	mov	r0, sl
 800b420:	f000 fb0e 	bl	800ba40 <scalbn>
 800b424:	ec51 0b10 	vmov	r0, r1, d0
 800b428:	ec53 2b18 	vmov	r2, r3, d8
 800b42c:	f7ff bbed 	b.w	800ac0a <__ieee754_pow+0x162>
 800b430:	4b30      	ldr	r3, [pc, #192]	; (800b4f4 <__ieee754_pow+0xa4c>)
 800b432:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b436:	429e      	cmp	r6, r3
 800b438:	f77f af0c 	ble.w	800b254 <__ieee754_pow+0x7ac>
 800b43c:	4b2e      	ldr	r3, [pc, #184]	; (800b4f8 <__ieee754_pow+0xa50>)
 800b43e:	440b      	add	r3, r1
 800b440:	4303      	orrs	r3, r0
 800b442:	d009      	beq.n	800b458 <__ieee754_pow+0x9b0>
 800b444:	ec51 0b18 	vmov	r0, r1, d8
 800b448:	2200      	movs	r2, #0
 800b44a:	2300      	movs	r3, #0
 800b44c:	f7f5 fb46 	bl	8000adc <__aeabi_dcmplt>
 800b450:	3800      	subs	r0, #0
 800b452:	bf18      	it	ne
 800b454:	2001      	movne	r0, #1
 800b456:	e447      	b.n	800ace8 <__ieee754_pow+0x240>
 800b458:	4622      	mov	r2, r4
 800b45a:	462b      	mov	r3, r5
 800b45c:	f7f4 ff14 	bl	8000288 <__aeabi_dsub>
 800b460:	4642      	mov	r2, r8
 800b462:	464b      	mov	r3, r9
 800b464:	f7f5 fb4e 	bl	8000b04 <__aeabi_dcmpge>
 800b468:	2800      	cmp	r0, #0
 800b46a:	f43f aef3 	beq.w	800b254 <__ieee754_pow+0x7ac>
 800b46e:	e7e9      	b.n	800b444 <__ieee754_pow+0x99c>
 800b470:	f04f 0a00 	mov.w	sl, #0
 800b474:	e71a      	b.n	800b2ac <__ieee754_pow+0x804>
 800b476:	ec51 0b10 	vmov	r0, r1, d0
 800b47a:	4619      	mov	r1, r3
 800b47c:	e7d4      	b.n	800b428 <__ieee754_pow+0x980>
 800b47e:	491c      	ldr	r1, [pc, #112]	; (800b4f0 <__ieee754_pow+0xa48>)
 800b480:	2000      	movs	r0, #0
 800b482:	f7ff bb30 	b.w	800aae6 <__ieee754_pow+0x3e>
 800b486:	2000      	movs	r0, #0
 800b488:	2100      	movs	r1, #0
 800b48a:	f7ff bb2c 	b.w	800aae6 <__ieee754_pow+0x3e>
 800b48e:	4630      	mov	r0, r6
 800b490:	4639      	mov	r1, r7
 800b492:	f7ff bb28 	b.w	800aae6 <__ieee754_pow+0x3e>
 800b496:	9204      	str	r2, [sp, #16]
 800b498:	f7ff bb7a 	b.w	800ab90 <__ieee754_pow+0xe8>
 800b49c:	2300      	movs	r3, #0
 800b49e:	f7ff bb64 	b.w	800ab6a <__ieee754_pow+0xc2>
 800b4a2:	bf00      	nop
 800b4a4:	f3af 8000 	nop.w
 800b4a8:	00000000 	.word	0x00000000
 800b4ac:	3fe62e43 	.word	0x3fe62e43
 800b4b0:	fefa39ef 	.word	0xfefa39ef
 800b4b4:	3fe62e42 	.word	0x3fe62e42
 800b4b8:	0ca86c39 	.word	0x0ca86c39
 800b4bc:	be205c61 	.word	0xbe205c61
 800b4c0:	72bea4d0 	.word	0x72bea4d0
 800b4c4:	3e663769 	.word	0x3e663769
 800b4c8:	c5d26bf1 	.word	0xc5d26bf1
 800b4cc:	3ebbbd41 	.word	0x3ebbbd41
 800b4d0:	af25de2c 	.word	0xaf25de2c
 800b4d4:	3f11566a 	.word	0x3f11566a
 800b4d8:	16bebd93 	.word	0x16bebd93
 800b4dc:	3f66c16c 	.word	0x3f66c16c
 800b4e0:	5555553e 	.word	0x5555553e
 800b4e4:	3fc55555 	.word	0x3fc55555
 800b4e8:	3fe00000 	.word	0x3fe00000
 800b4ec:	000fffff 	.word	0x000fffff
 800b4f0:	3ff00000 	.word	0x3ff00000
 800b4f4:	4090cbff 	.word	0x4090cbff
 800b4f8:	3f6f3400 	.word	0x3f6f3400
 800b4fc:	652b82fe 	.word	0x652b82fe
 800b500:	3c971547 	.word	0x3c971547

0800b504 <__ieee754_sqrt>:
 800b504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b508:	ec55 4b10 	vmov	r4, r5, d0
 800b50c:	4e55      	ldr	r6, [pc, #340]	; (800b664 <__ieee754_sqrt+0x160>)
 800b50e:	43ae      	bics	r6, r5
 800b510:	ee10 0a10 	vmov	r0, s0
 800b514:	ee10 3a10 	vmov	r3, s0
 800b518:	462a      	mov	r2, r5
 800b51a:	4629      	mov	r1, r5
 800b51c:	d110      	bne.n	800b540 <__ieee754_sqrt+0x3c>
 800b51e:	ee10 2a10 	vmov	r2, s0
 800b522:	462b      	mov	r3, r5
 800b524:	f7f5 f868 	bl	80005f8 <__aeabi_dmul>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	4620      	mov	r0, r4
 800b52e:	4629      	mov	r1, r5
 800b530:	f7f4 feac 	bl	800028c <__adddf3>
 800b534:	4604      	mov	r4, r0
 800b536:	460d      	mov	r5, r1
 800b538:	ec45 4b10 	vmov	d0, r4, r5
 800b53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b540:	2d00      	cmp	r5, #0
 800b542:	dc10      	bgt.n	800b566 <__ieee754_sqrt+0x62>
 800b544:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b548:	4330      	orrs	r0, r6
 800b54a:	d0f5      	beq.n	800b538 <__ieee754_sqrt+0x34>
 800b54c:	b15d      	cbz	r5, 800b566 <__ieee754_sqrt+0x62>
 800b54e:	ee10 2a10 	vmov	r2, s0
 800b552:	462b      	mov	r3, r5
 800b554:	ee10 0a10 	vmov	r0, s0
 800b558:	f7f4 fe96 	bl	8000288 <__aeabi_dsub>
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	f7f5 f974 	bl	800084c <__aeabi_ddiv>
 800b564:	e7e6      	b.n	800b534 <__ieee754_sqrt+0x30>
 800b566:	1512      	asrs	r2, r2, #20
 800b568:	d074      	beq.n	800b654 <__ieee754_sqrt+0x150>
 800b56a:	07d4      	lsls	r4, r2, #31
 800b56c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b570:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b574:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b578:	bf5e      	ittt	pl
 800b57a:	0fda      	lsrpl	r2, r3, #31
 800b57c:	005b      	lslpl	r3, r3, #1
 800b57e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b582:	2400      	movs	r4, #0
 800b584:	0fda      	lsrs	r2, r3, #31
 800b586:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b58a:	107f      	asrs	r7, r7, #1
 800b58c:	005b      	lsls	r3, r3, #1
 800b58e:	2516      	movs	r5, #22
 800b590:	4620      	mov	r0, r4
 800b592:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b596:	1886      	adds	r6, r0, r2
 800b598:	428e      	cmp	r6, r1
 800b59a:	bfde      	ittt	le
 800b59c:	1b89      	suble	r1, r1, r6
 800b59e:	18b0      	addle	r0, r6, r2
 800b5a0:	18a4      	addle	r4, r4, r2
 800b5a2:	0049      	lsls	r1, r1, #1
 800b5a4:	3d01      	subs	r5, #1
 800b5a6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b5aa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b5ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b5b2:	d1f0      	bne.n	800b596 <__ieee754_sqrt+0x92>
 800b5b4:	462a      	mov	r2, r5
 800b5b6:	f04f 0e20 	mov.w	lr, #32
 800b5ba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b5be:	4281      	cmp	r1, r0
 800b5c0:	eb06 0c05 	add.w	ip, r6, r5
 800b5c4:	dc02      	bgt.n	800b5cc <__ieee754_sqrt+0xc8>
 800b5c6:	d113      	bne.n	800b5f0 <__ieee754_sqrt+0xec>
 800b5c8:	459c      	cmp	ip, r3
 800b5ca:	d811      	bhi.n	800b5f0 <__ieee754_sqrt+0xec>
 800b5cc:	f1bc 0f00 	cmp.w	ip, #0
 800b5d0:	eb0c 0506 	add.w	r5, ip, r6
 800b5d4:	da43      	bge.n	800b65e <__ieee754_sqrt+0x15a>
 800b5d6:	2d00      	cmp	r5, #0
 800b5d8:	db41      	blt.n	800b65e <__ieee754_sqrt+0x15a>
 800b5da:	f100 0801 	add.w	r8, r0, #1
 800b5de:	1a09      	subs	r1, r1, r0
 800b5e0:	459c      	cmp	ip, r3
 800b5e2:	bf88      	it	hi
 800b5e4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b5e8:	eba3 030c 	sub.w	r3, r3, ip
 800b5ec:	4432      	add	r2, r6
 800b5ee:	4640      	mov	r0, r8
 800b5f0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b5f4:	f1be 0e01 	subs.w	lr, lr, #1
 800b5f8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b5fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b600:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b604:	d1db      	bne.n	800b5be <__ieee754_sqrt+0xba>
 800b606:	430b      	orrs	r3, r1
 800b608:	d006      	beq.n	800b618 <__ieee754_sqrt+0x114>
 800b60a:	1c50      	adds	r0, r2, #1
 800b60c:	bf13      	iteet	ne
 800b60e:	3201      	addne	r2, #1
 800b610:	3401      	addeq	r4, #1
 800b612:	4672      	moveq	r2, lr
 800b614:	f022 0201 	bicne.w	r2, r2, #1
 800b618:	1063      	asrs	r3, r4, #1
 800b61a:	0852      	lsrs	r2, r2, #1
 800b61c:	07e1      	lsls	r1, r4, #31
 800b61e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b622:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b626:	bf48      	it	mi
 800b628:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b62c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b630:	4614      	mov	r4, r2
 800b632:	e781      	b.n	800b538 <__ieee754_sqrt+0x34>
 800b634:	0ad9      	lsrs	r1, r3, #11
 800b636:	3815      	subs	r0, #21
 800b638:	055b      	lsls	r3, r3, #21
 800b63a:	2900      	cmp	r1, #0
 800b63c:	d0fa      	beq.n	800b634 <__ieee754_sqrt+0x130>
 800b63e:	02cd      	lsls	r5, r1, #11
 800b640:	d50a      	bpl.n	800b658 <__ieee754_sqrt+0x154>
 800b642:	f1c2 0420 	rsb	r4, r2, #32
 800b646:	fa23 f404 	lsr.w	r4, r3, r4
 800b64a:	1e55      	subs	r5, r2, #1
 800b64c:	4093      	lsls	r3, r2
 800b64e:	4321      	orrs	r1, r4
 800b650:	1b42      	subs	r2, r0, r5
 800b652:	e78a      	b.n	800b56a <__ieee754_sqrt+0x66>
 800b654:	4610      	mov	r0, r2
 800b656:	e7f0      	b.n	800b63a <__ieee754_sqrt+0x136>
 800b658:	0049      	lsls	r1, r1, #1
 800b65a:	3201      	adds	r2, #1
 800b65c:	e7ef      	b.n	800b63e <__ieee754_sqrt+0x13a>
 800b65e:	4680      	mov	r8, r0
 800b660:	e7bd      	b.n	800b5de <__ieee754_sqrt+0xda>
 800b662:	bf00      	nop
 800b664:	7ff00000 	.word	0x7ff00000

0800b668 <with_errno>:
 800b668:	b570      	push	{r4, r5, r6, lr}
 800b66a:	4604      	mov	r4, r0
 800b66c:	460d      	mov	r5, r1
 800b66e:	4616      	mov	r6, r2
 800b670:	f7fd fffc 	bl	800966c <__errno>
 800b674:	4629      	mov	r1, r5
 800b676:	6006      	str	r6, [r0, #0]
 800b678:	4620      	mov	r0, r4
 800b67a:	bd70      	pop	{r4, r5, r6, pc}

0800b67c <xflow>:
 800b67c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b67e:	4614      	mov	r4, r2
 800b680:	461d      	mov	r5, r3
 800b682:	b108      	cbz	r0, 800b688 <xflow+0xc>
 800b684:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b688:	e9cd 2300 	strd	r2, r3, [sp]
 800b68c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b690:	4620      	mov	r0, r4
 800b692:	4629      	mov	r1, r5
 800b694:	f7f4 ffb0 	bl	80005f8 <__aeabi_dmul>
 800b698:	2222      	movs	r2, #34	; 0x22
 800b69a:	b003      	add	sp, #12
 800b69c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6a0:	f7ff bfe2 	b.w	800b668 <with_errno>

0800b6a4 <__math_uflow>:
 800b6a4:	b508      	push	{r3, lr}
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b6ac:	f7ff ffe6 	bl	800b67c <xflow>
 800b6b0:	ec41 0b10 	vmov	d0, r0, r1
 800b6b4:	bd08      	pop	{r3, pc}

0800b6b6 <__math_oflow>:
 800b6b6:	b508      	push	{r3, lr}
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b6be:	f7ff ffdd 	bl	800b67c <xflow>
 800b6c2:	ec41 0b10 	vmov	d0, r0, r1
 800b6c6:	bd08      	pop	{r3, pc}

0800b6c8 <atan>:
 800b6c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	ec55 4b10 	vmov	r4, r5, d0
 800b6d0:	4bc3      	ldr	r3, [pc, #780]	; (800b9e0 <atan+0x318>)
 800b6d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b6d6:	429e      	cmp	r6, r3
 800b6d8:	46ab      	mov	fp, r5
 800b6da:	dd18      	ble.n	800b70e <atan+0x46>
 800b6dc:	4bc1      	ldr	r3, [pc, #772]	; (800b9e4 <atan+0x31c>)
 800b6de:	429e      	cmp	r6, r3
 800b6e0:	dc01      	bgt.n	800b6e6 <atan+0x1e>
 800b6e2:	d109      	bne.n	800b6f8 <atan+0x30>
 800b6e4:	b144      	cbz	r4, 800b6f8 <atan+0x30>
 800b6e6:	4622      	mov	r2, r4
 800b6e8:	462b      	mov	r3, r5
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	f7f4 fdcd 	bl	800028c <__adddf3>
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	460d      	mov	r5, r1
 800b6f6:	e006      	b.n	800b706 <atan+0x3e>
 800b6f8:	f1bb 0f00 	cmp.w	fp, #0
 800b6fc:	f300 8131 	bgt.w	800b962 <atan+0x29a>
 800b700:	a59b      	add	r5, pc, #620	; (adr r5, 800b970 <atan+0x2a8>)
 800b702:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b706:	ec45 4b10 	vmov	d0, r4, r5
 800b70a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70e:	4bb6      	ldr	r3, [pc, #728]	; (800b9e8 <atan+0x320>)
 800b710:	429e      	cmp	r6, r3
 800b712:	dc14      	bgt.n	800b73e <atan+0x76>
 800b714:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b718:	429e      	cmp	r6, r3
 800b71a:	dc0d      	bgt.n	800b738 <atan+0x70>
 800b71c:	a396      	add	r3, pc, #600	; (adr r3, 800b978 <atan+0x2b0>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	ee10 0a10 	vmov	r0, s0
 800b726:	4629      	mov	r1, r5
 800b728:	f7f4 fdb0 	bl	800028c <__adddf3>
 800b72c:	4baf      	ldr	r3, [pc, #700]	; (800b9ec <atan+0x324>)
 800b72e:	2200      	movs	r2, #0
 800b730:	f7f5 f9f2 	bl	8000b18 <__aeabi_dcmpgt>
 800b734:	2800      	cmp	r0, #0
 800b736:	d1e6      	bne.n	800b706 <atan+0x3e>
 800b738:	f04f 3aff 	mov.w	sl, #4294967295
 800b73c:	e02b      	b.n	800b796 <atan+0xce>
 800b73e:	f000 f963 	bl	800ba08 <fabs>
 800b742:	4bab      	ldr	r3, [pc, #684]	; (800b9f0 <atan+0x328>)
 800b744:	429e      	cmp	r6, r3
 800b746:	ec55 4b10 	vmov	r4, r5, d0
 800b74a:	f300 80bf 	bgt.w	800b8cc <atan+0x204>
 800b74e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b752:	429e      	cmp	r6, r3
 800b754:	f300 80a0 	bgt.w	800b898 <atan+0x1d0>
 800b758:	ee10 2a10 	vmov	r2, s0
 800b75c:	ee10 0a10 	vmov	r0, s0
 800b760:	462b      	mov	r3, r5
 800b762:	4629      	mov	r1, r5
 800b764:	f7f4 fd92 	bl	800028c <__adddf3>
 800b768:	4ba0      	ldr	r3, [pc, #640]	; (800b9ec <atan+0x324>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	f7f4 fd8c 	bl	8000288 <__aeabi_dsub>
 800b770:	2200      	movs	r2, #0
 800b772:	4606      	mov	r6, r0
 800b774:	460f      	mov	r7, r1
 800b776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b77a:	4620      	mov	r0, r4
 800b77c:	4629      	mov	r1, r5
 800b77e:	f7f4 fd85 	bl	800028c <__adddf3>
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	4630      	mov	r0, r6
 800b788:	4639      	mov	r1, r7
 800b78a:	f7f5 f85f 	bl	800084c <__aeabi_ddiv>
 800b78e:	f04f 0a00 	mov.w	sl, #0
 800b792:	4604      	mov	r4, r0
 800b794:	460d      	mov	r5, r1
 800b796:	4622      	mov	r2, r4
 800b798:	462b      	mov	r3, r5
 800b79a:	4620      	mov	r0, r4
 800b79c:	4629      	mov	r1, r5
 800b79e:	f7f4 ff2b 	bl	80005f8 <__aeabi_dmul>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4680      	mov	r8, r0
 800b7a8:	4689      	mov	r9, r1
 800b7aa:	f7f4 ff25 	bl	80005f8 <__aeabi_dmul>
 800b7ae:	a374      	add	r3, pc, #464	; (adr r3, 800b980 <atan+0x2b8>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	460f      	mov	r7, r1
 800b7b8:	f7f4 ff1e 	bl	80005f8 <__aeabi_dmul>
 800b7bc:	a372      	add	r3, pc, #456	; (adr r3, 800b988 <atan+0x2c0>)
 800b7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c2:	f7f4 fd63 	bl	800028c <__adddf3>
 800b7c6:	4632      	mov	r2, r6
 800b7c8:	463b      	mov	r3, r7
 800b7ca:	f7f4 ff15 	bl	80005f8 <__aeabi_dmul>
 800b7ce:	a370      	add	r3, pc, #448	; (adr r3, 800b990 <atan+0x2c8>)
 800b7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d4:	f7f4 fd5a 	bl	800028c <__adddf3>
 800b7d8:	4632      	mov	r2, r6
 800b7da:	463b      	mov	r3, r7
 800b7dc:	f7f4 ff0c 	bl	80005f8 <__aeabi_dmul>
 800b7e0:	a36d      	add	r3, pc, #436	; (adr r3, 800b998 <atan+0x2d0>)
 800b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e6:	f7f4 fd51 	bl	800028c <__adddf3>
 800b7ea:	4632      	mov	r2, r6
 800b7ec:	463b      	mov	r3, r7
 800b7ee:	f7f4 ff03 	bl	80005f8 <__aeabi_dmul>
 800b7f2:	a36b      	add	r3, pc, #428	; (adr r3, 800b9a0 <atan+0x2d8>)
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f7f4 fd48 	bl	800028c <__adddf3>
 800b7fc:	4632      	mov	r2, r6
 800b7fe:	463b      	mov	r3, r7
 800b800:	f7f4 fefa 	bl	80005f8 <__aeabi_dmul>
 800b804:	a368      	add	r3, pc, #416	; (adr r3, 800b9a8 <atan+0x2e0>)
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	f7f4 fd3f 	bl	800028c <__adddf3>
 800b80e:	4642      	mov	r2, r8
 800b810:	464b      	mov	r3, r9
 800b812:	f7f4 fef1 	bl	80005f8 <__aeabi_dmul>
 800b816:	a366      	add	r3, pc, #408	; (adr r3, 800b9b0 <atan+0x2e8>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	4680      	mov	r8, r0
 800b81e:	4689      	mov	r9, r1
 800b820:	4630      	mov	r0, r6
 800b822:	4639      	mov	r1, r7
 800b824:	f7f4 fee8 	bl	80005f8 <__aeabi_dmul>
 800b828:	a363      	add	r3, pc, #396	; (adr r3, 800b9b8 <atan+0x2f0>)
 800b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82e:	f7f4 fd2b 	bl	8000288 <__aeabi_dsub>
 800b832:	4632      	mov	r2, r6
 800b834:	463b      	mov	r3, r7
 800b836:	f7f4 fedf 	bl	80005f8 <__aeabi_dmul>
 800b83a:	a361      	add	r3, pc, #388	; (adr r3, 800b9c0 <atan+0x2f8>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f4 fd22 	bl	8000288 <__aeabi_dsub>
 800b844:	4632      	mov	r2, r6
 800b846:	463b      	mov	r3, r7
 800b848:	f7f4 fed6 	bl	80005f8 <__aeabi_dmul>
 800b84c:	a35e      	add	r3, pc, #376	; (adr r3, 800b9c8 <atan+0x300>)
 800b84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b852:	f7f4 fd19 	bl	8000288 <__aeabi_dsub>
 800b856:	4632      	mov	r2, r6
 800b858:	463b      	mov	r3, r7
 800b85a:	f7f4 fecd 	bl	80005f8 <__aeabi_dmul>
 800b85e:	a35c      	add	r3, pc, #368	; (adr r3, 800b9d0 <atan+0x308>)
 800b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b864:	f7f4 fd10 	bl	8000288 <__aeabi_dsub>
 800b868:	4632      	mov	r2, r6
 800b86a:	463b      	mov	r3, r7
 800b86c:	f7f4 fec4 	bl	80005f8 <__aeabi_dmul>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4640      	mov	r0, r8
 800b876:	4649      	mov	r1, r9
 800b878:	f7f4 fd08 	bl	800028c <__adddf3>
 800b87c:	4622      	mov	r2, r4
 800b87e:	462b      	mov	r3, r5
 800b880:	f7f4 feba 	bl	80005f8 <__aeabi_dmul>
 800b884:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	d14b      	bne.n	800b926 <atan+0x25e>
 800b88e:	4620      	mov	r0, r4
 800b890:	4629      	mov	r1, r5
 800b892:	f7f4 fcf9 	bl	8000288 <__aeabi_dsub>
 800b896:	e72c      	b.n	800b6f2 <atan+0x2a>
 800b898:	ee10 0a10 	vmov	r0, s0
 800b89c:	4b53      	ldr	r3, [pc, #332]	; (800b9ec <atan+0x324>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	f7f4 fcf1 	bl	8000288 <__aeabi_dsub>
 800b8a6:	4b51      	ldr	r3, [pc, #324]	; (800b9ec <atan+0x324>)
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	460f      	mov	r7, r1
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7f4 fceb 	bl	800028c <__adddf3>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	4639      	mov	r1, r7
 800b8be:	f7f4 ffc5 	bl	800084c <__aeabi_ddiv>
 800b8c2:	f04f 0a01 	mov.w	sl, #1
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	460d      	mov	r5, r1
 800b8ca:	e764      	b.n	800b796 <atan+0xce>
 800b8cc:	4b49      	ldr	r3, [pc, #292]	; (800b9f4 <atan+0x32c>)
 800b8ce:	429e      	cmp	r6, r3
 800b8d0:	da1d      	bge.n	800b90e <atan+0x246>
 800b8d2:	ee10 0a10 	vmov	r0, s0
 800b8d6:	4b48      	ldr	r3, [pc, #288]	; (800b9f8 <atan+0x330>)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	4629      	mov	r1, r5
 800b8dc:	f7f4 fcd4 	bl	8000288 <__aeabi_dsub>
 800b8e0:	4b45      	ldr	r3, [pc, #276]	; (800b9f8 <atan+0x330>)
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	460f      	mov	r7, r1
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	f7f4 fe84 	bl	80005f8 <__aeabi_dmul>
 800b8f0:	4b3e      	ldr	r3, [pc, #248]	; (800b9ec <atan+0x324>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f7f4 fcca 	bl	800028c <__adddf3>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	4639      	mov	r1, r7
 800b900:	f7f4 ffa4 	bl	800084c <__aeabi_ddiv>
 800b904:	f04f 0a02 	mov.w	sl, #2
 800b908:	4604      	mov	r4, r0
 800b90a:	460d      	mov	r5, r1
 800b90c:	e743      	b.n	800b796 <atan+0xce>
 800b90e:	462b      	mov	r3, r5
 800b910:	ee10 2a10 	vmov	r2, s0
 800b914:	4939      	ldr	r1, [pc, #228]	; (800b9fc <atan+0x334>)
 800b916:	2000      	movs	r0, #0
 800b918:	f7f4 ff98 	bl	800084c <__aeabi_ddiv>
 800b91c:	f04f 0a03 	mov.w	sl, #3
 800b920:	4604      	mov	r4, r0
 800b922:	460d      	mov	r5, r1
 800b924:	e737      	b.n	800b796 <atan+0xce>
 800b926:	4b36      	ldr	r3, [pc, #216]	; (800ba00 <atan+0x338>)
 800b928:	4e36      	ldr	r6, [pc, #216]	; (800ba04 <atan+0x33c>)
 800b92a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b92e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b932:	e9da 2300 	ldrd	r2, r3, [sl]
 800b936:	f7f4 fca7 	bl	8000288 <__aeabi_dsub>
 800b93a:	4622      	mov	r2, r4
 800b93c:	462b      	mov	r3, r5
 800b93e:	f7f4 fca3 	bl	8000288 <__aeabi_dsub>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b94a:	f7f4 fc9d 	bl	8000288 <__aeabi_dsub>
 800b94e:	f1bb 0f00 	cmp.w	fp, #0
 800b952:	4604      	mov	r4, r0
 800b954:	460d      	mov	r5, r1
 800b956:	f6bf aed6 	bge.w	800b706 <atan+0x3e>
 800b95a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b95e:	461d      	mov	r5, r3
 800b960:	e6d1      	b.n	800b706 <atan+0x3e>
 800b962:	a51d      	add	r5, pc, #116	; (adr r5, 800b9d8 <atan+0x310>)
 800b964:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b968:	e6cd      	b.n	800b706 <atan+0x3e>
 800b96a:	bf00      	nop
 800b96c:	f3af 8000 	nop.w
 800b970:	54442d18 	.word	0x54442d18
 800b974:	bff921fb 	.word	0xbff921fb
 800b978:	8800759c 	.word	0x8800759c
 800b97c:	7e37e43c 	.word	0x7e37e43c
 800b980:	e322da11 	.word	0xe322da11
 800b984:	3f90ad3a 	.word	0x3f90ad3a
 800b988:	24760deb 	.word	0x24760deb
 800b98c:	3fa97b4b 	.word	0x3fa97b4b
 800b990:	a0d03d51 	.word	0xa0d03d51
 800b994:	3fb10d66 	.word	0x3fb10d66
 800b998:	c54c206e 	.word	0xc54c206e
 800b99c:	3fb745cd 	.word	0x3fb745cd
 800b9a0:	920083ff 	.word	0x920083ff
 800b9a4:	3fc24924 	.word	0x3fc24924
 800b9a8:	5555550d 	.word	0x5555550d
 800b9ac:	3fd55555 	.word	0x3fd55555
 800b9b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b9b4:	bfa2b444 	.word	0xbfa2b444
 800b9b8:	52defd9a 	.word	0x52defd9a
 800b9bc:	3fadde2d 	.word	0x3fadde2d
 800b9c0:	af749a6d 	.word	0xaf749a6d
 800b9c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b9c8:	fe231671 	.word	0xfe231671
 800b9cc:	3fbc71c6 	.word	0x3fbc71c6
 800b9d0:	9998ebc4 	.word	0x9998ebc4
 800b9d4:	3fc99999 	.word	0x3fc99999
 800b9d8:	54442d18 	.word	0x54442d18
 800b9dc:	3ff921fb 	.word	0x3ff921fb
 800b9e0:	440fffff 	.word	0x440fffff
 800b9e4:	7ff00000 	.word	0x7ff00000
 800b9e8:	3fdbffff 	.word	0x3fdbffff
 800b9ec:	3ff00000 	.word	0x3ff00000
 800b9f0:	3ff2ffff 	.word	0x3ff2ffff
 800b9f4:	40038000 	.word	0x40038000
 800b9f8:	3ff80000 	.word	0x3ff80000
 800b9fc:	bff00000 	.word	0xbff00000
 800ba00:	0800c1d0 	.word	0x0800c1d0
 800ba04:	0800c1b0 	.word	0x0800c1b0

0800ba08 <fabs>:
 800ba08:	ec51 0b10 	vmov	r0, r1, d0
 800ba0c:	ee10 2a10 	vmov	r2, s0
 800ba10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba14:	ec43 2b10 	vmov	d0, r2, r3
 800ba18:	4770      	bx	lr

0800ba1a <finite>:
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	ed8d 0b00 	vstr	d0, [sp]
 800ba20:	9801      	ldr	r0, [sp, #4]
 800ba22:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ba26:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ba2a:	0fc0      	lsrs	r0, r0, #31
 800ba2c:	b002      	add	sp, #8
 800ba2e:	4770      	bx	lr

0800ba30 <nan>:
 800ba30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba38 <nan+0x8>
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	00000000 	.word	0x00000000
 800ba3c:	7ff80000 	.word	0x7ff80000

0800ba40 <scalbn>:
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	ec55 4b10 	vmov	r4, r5, d0
 800ba46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	462b      	mov	r3, r5
 800ba4e:	b99a      	cbnz	r2, 800ba78 <scalbn+0x38>
 800ba50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba54:	4323      	orrs	r3, r4
 800ba56:	d036      	beq.n	800bac6 <scalbn+0x86>
 800ba58:	4b39      	ldr	r3, [pc, #228]	; (800bb40 <scalbn+0x100>)
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	ee10 0a10 	vmov	r0, s0
 800ba60:	2200      	movs	r2, #0
 800ba62:	f7f4 fdc9 	bl	80005f8 <__aeabi_dmul>
 800ba66:	4b37      	ldr	r3, [pc, #220]	; (800bb44 <scalbn+0x104>)
 800ba68:	429e      	cmp	r6, r3
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	460d      	mov	r5, r1
 800ba6e:	da10      	bge.n	800ba92 <scalbn+0x52>
 800ba70:	a32b      	add	r3, pc, #172	; (adr r3, 800bb20 <scalbn+0xe0>)
 800ba72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba76:	e03a      	b.n	800baee <scalbn+0xae>
 800ba78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ba7c:	428a      	cmp	r2, r1
 800ba7e:	d10c      	bne.n	800ba9a <scalbn+0x5a>
 800ba80:	ee10 2a10 	vmov	r2, s0
 800ba84:	4620      	mov	r0, r4
 800ba86:	4629      	mov	r1, r5
 800ba88:	f7f4 fc00 	bl	800028c <__adddf3>
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	460d      	mov	r5, r1
 800ba90:	e019      	b.n	800bac6 <scalbn+0x86>
 800ba92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba96:	460b      	mov	r3, r1
 800ba98:	3a36      	subs	r2, #54	; 0x36
 800ba9a:	4432      	add	r2, r6
 800ba9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800baa0:	428a      	cmp	r2, r1
 800baa2:	dd08      	ble.n	800bab6 <scalbn+0x76>
 800baa4:	2d00      	cmp	r5, #0
 800baa6:	a120      	add	r1, pc, #128	; (adr r1, 800bb28 <scalbn+0xe8>)
 800baa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baac:	da1c      	bge.n	800bae8 <scalbn+0xa8>
 800baae:	a120      	add	r1, pc, #128	; (adr r1, 800bb30 <scalbn+0xf0>)
 800bab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bab4:	e018      	b.n	800bae8 <scalbn+0xa8>
 800bab6:	2a00      	cmp	r2, #0
 800bab8:	dd08      	ble.n	800bacc <scalbn+0x8c>
 800baba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800babe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bac2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bac6:	ec45 4b10 	vmov	d0, r4, r5
 800baca:	bd70      	pop	{r4, r5, r6, pc}
 800bacc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bad0:	da19      	bge.n	800bb06 <scalbn+0xc6>
 800bad2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bad6:	429e      	cmp	r6, r3
 800bad8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800badc:	dd0a      	ble.n	800baf4 <scalbn+0xb4>
 800bade:	a112      	add	r1, pc, #72	; (adr r1, 800bb28 <scalbn+0xe8>)
 800bae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d1e2      	bne.n	800baae <scalbn+0x6e>
 800bae8:	a30f      	add	r3, pc, #60	; (adr r3, 800bb28 <scalbn+0xe8>)
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	f7f4 fd83 	bl	80005f8 <__aeabi_dmul>
 800baf2:	e7cb      	b.n	800ba8c <scalbn+0x4c>
 800baf4:	a10a      	add	r1, pc, #40	; (adr r1, 800bb20 <scalbn+0xe0>)
 800baf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d0b8      	beq.n	800ba70 <scalbn+0x30>
 800bafe:	a10e      	add	r1, pc, #56	; (adr r1, 800bb38 <scalbn+0xf8>)
 800bb00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb04:	e7b4      	b.n	800ba70 <scalbn+0x30>
 800bb06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb0a:	3236      	adds	r2, #54	; 0x36
 800bb0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bb14:	4620      	mov	r0, r4
 800bb16:	4b0c      	ldr	r3, [pc, #48]	; (800bb48 <scalbn+0x108>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	e7e8      	b.n	800baee <scalbn+0xae>
 800bb1c:	f3af 8000 	nop.w
 800bb20:	c2f8f359 	.word	0xc2f8f359
 800bb24:	01a56e1f 	.word	0x01a56e1f
 800bb28:	8800759c 	.word	0x8800759c
 800bb2c:	7e37e43c 	.word	0x7e37e43c
 800bb30:	8800759c 	.word	0x8800759c
 800bb34:	fe37e43c 	.word	0xfe37e43c
 800bb38:	c2f8f359 	.word	0xc2f8f359
 800bb3c:	81a56e1f 	.word	0x81a56e1f
 800bb40:	43500000 	.word	0x43500000
 800bb44:	ffff3cb0 	.word	0xffff3cb0
 800bb48:	3c900000 	.word	0x3c900000

0800bb4c <_init>:
 800bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4e:	bf00      	nop
 800bb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb52:	bc08      	pop	{r3}
 800bb54:	469e      	mov	lr, r3
 800bb56:	4770      	bx	lr

0800bb58 <_fini>:
 800bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5a:	bf00      	nop
 800bb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb5e:	bc08      	pop	{r3}
 800bb60:	469e      	mov	lr, r3
 800bb62:	4770      	bx	lr
